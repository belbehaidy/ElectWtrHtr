
Electric_Water_Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  00006a32  00006ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000086  008001d2  008001d2  00006c38  2**0
                  ALLOC
  3 .stab         00007488  00000000  00000000  00006c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a1f  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000220  00000000  00000000  00010adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000026e  00000000  00000000  00010cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002d8f  00000000  00000000  00010f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018dc  00000000  00000000  00013cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001584  00000000  00000000  000155d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00016b5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000031f  00000000  00000000  00016d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ace  00000000  00000000  000170bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017b89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 07 23 	jmp	0x460e	; 0x460e <__vector_1>
       8:	0c 94 3a 23 	jmp	0x4674	; 0x4674 <__vector_2>
       c:	0c 94 6d 23 	jmp	0x46da	; 0x46da <__vector_3>
      10:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_4>
      14:	0c 94 be 10 	jmp	0x217c	; 0x217c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__vector_7>
      20:	0c 94 b0 1f 	jmp	0x3f60	; 0x3f60 <__vector_8>
      24:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <__vector_9>
      28:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__vector_10>
      2c:	0c 94 24 11 	jmp	0x2248	; 0x2248 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5f 29 	jmp	0x52be	; 0x52be <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	fa e6       	ldi	r31, 0x6A	; 106
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 30 	call	0x607e	; 0x607e <main>
      8a:	0c 94 17 35 	jmp	0x6a2e	; 0x6a2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 43 05 	call	0xa86	; 0xa86 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 34 	jmp	0x69c0	; 0x69c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 34 	jmp	0x69f8	; 0x69f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 34 	jmp	0x69c0	; 0x69c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 34 	jmp	0x69f8	; 0x69f8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e8 34 	jmp	0x69d0	; 0x69d0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 04 35 	jmp	0x6a08	; 0x6a08 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x18>

000007ea <__nesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__nesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__nesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__nesf2+0x58>
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x18>

0000084a <__gtsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x18>

000008aa <__gesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__gesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__gesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__gesf2+0x58>
     900:	8f ef       	ldi	r24, 0xFF	; 255
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x18>

0000090a <__ltsf2>:
     90a:	a8 e1       	ldi	r26, 0x18	; 24
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x18>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	2d 83       	std	Y+5, r18	; 0x05
     920:	3e 83       	std	Y+6, r19	; 0x06
     922:	4f 83       	std	Y+7, r20	; 0x07
     924:	58 87       	std	Y+8, r21	; 0x08
     926:	89 e0       	ldi	r24, 0x09	; 9
     928:	e8 2e       	mov	r14, r24
     92a:	f1 2c       	mov	r15, r1
     92c:	ec 0e       	add	r14, r28
     92e:	fd 1e       	adc	r15, r29
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	b7 01       	movw	r22, r14
     936:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     93a:	8e 01       	movw	r16, r28
     93c:	0f 5e       	subi	r16, 0xEF	; 239
     93e:	1f 4f       	sbci	r17, 0xFF	; 255
     940:	ce 01       	movw	r24, r28
     942:	05 96       	adiw	r24, 0x05	; 5
     944:	b8 01       	movw	r22, r16
     946:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     94a:	89 85       	ldd	r24, Y+9	; 0x09
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	40 f0       	brcs	.+16     	; 0x960 <__ltsf2+0x56>
     950:	89 89       	ldd	r24, Y+17	; 0x11
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	28 f0       	brcs	.+10     	; 0x960 <__ltsf2+0x56>
     956:	c7 01       	movw	r24, r14
     958:	b8 01       	movw	r22, r16
     95a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     95e:	01 c0       	rjmp	.+2      	; 0x962 <__ltsf2+0x58>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	68 96       	adiw	r28, 0x18	; 24
     964:	e6 e0       	ldi	r30, 0x06	; 6
     966:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x18>

0000096a <__lesf2>:
     96a:	a8 e1       	ldi	r26, 0x18	; 24
     96c:	b0 e0       	ldi	r27, 0x00	; 0
     96e:	eb eb       	ldi	r30, 0xBB	; 187
     970:	f4 e0       	ldi	r31, 0x04	; 4
     972:	0c 94 ec 34 	jmp	0x69d8	; 0x69d8 <__prologue_saves__+0x18>
     976:	69 83       	std	Y+1, r22	; 0x01
     978:	7a 83       	std	Y+2, r23	; 0x02
     97a:	8b 83       	std	Y+3, r24	; 0x03
     97c:	9c 83       	std	Y+4, r25	; 0x04
     97e:	2d 83       	std	Y+5, r18	; 0x05
     980:	3e 83       	std	Y+6, r19	; 0x06
     982:	4f 83       	std	Y+7, r20	; 0x07
     984:	58 87       	std	Y+8, r21	; 0x08
     986:	89 e0       	ldi	r24, 0x09	; 9
     988:	e8 2e       	mov	r14, r24
     98a:	f1 2c       	mov	r15, r1
     98c:	ec 0e       	add	r14, r28
     98e:	fd 1e       	adc	r15, r29
     990:	ce 01       	movw	r24, r28
     992:	01 96       	adiw	r24, 0x01	; 1
     994:	b7 01       	movw	r22, r14
     996:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     99a:	8e 01       	movw	r16, r28
     99c:	0f 5e       	subi	r16, 0xEF	; 239
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	ce 01       	movw	r24, r28
     9a2:	05 96       	adiw	r24, 0x05	; 5
     9a4:	b8 01       	movw	r22, r16
     9a6:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     9aa:	89 85       	ldd	r24, Y+9	; 0x09
     9ac:	82 30       	cpi	r24, 0x02	; 2
     9ae:	40 f0       	brcs	.+16     	; 0x9c0 <__lesf2+0x56>
     9b0:	89 89       	ldd	r24, Y+17	; 0x11
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	28 f0       	brcs	.+10     	; 0x9c0 <__lesf2+0x56>
     9b6:	c7 01       	movw	r24, r14
     9b8:	b8 01       	movw	r22, r16
     9ba:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fpcmp_parts_f>
     9be:	01 c0       	rjmp	.+2      	; 0x9c2 <__lesf2+0x58>
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	68 96       	adiw	r28, 0x18	; 24
     9c4:	e6 e0       	ldi	r30, 0x06	; 6
     9c6:	0c 94 08 35 	jmp	0x6a10	; 0x6a10 <__epilogue_restores__+0x18>

000009ca <__floatsisf>:
     9ca:	a8 e0       	ldi	r26, 0x08	; 8
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	eb ee       	ldi	r30, 0xEB	; 235
     9d0:	f4 e0       	ldi	r31, 0x04	; 4
     9d2:	0c 94 e9 34 	jmp	0x69d2	; 0x69d2 <__prologue_saves__+0x12>
     9d6:	9b 01       	movw	r18, r22
     9d8:	ac 01       	movw	r20, r24
     9da:	83 e0       	ldi	r24, 0x03	; 3
     9dc:	89 83       	std	Y+1, r24	; 0x01
     9de:	da 01       	movw	r26, r20
     9e0:	c9 01       	movw	r24, r18
     9e2:	88 27       	eor	r24, r24
     9e4:	b7 fd       	sbrc	r27, 7
     9e6:	83 95       	inc	r24
     9e8:	99 27       	eor	r25, r25
     9ea:	aa 27       	eor	r26, r26
     9ec:	bb 27       	eor	r27, r27
     9ee:	b8 2e       	mov	r11, r24
     9f0:	21 15       	cp	r18, r1
     9f2:	31 05       	cpc	r19, r1
     9f4:	41 05       	cpc	r20, r1
     9f6:	51 05       	cpc	r21, r1
     9f8:	19 f4       	brne	.+6      	; 0xa00 <__floatsisf+0x36>
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	89 83       	std	Y+1, r24	; 0x01
     9fe:	3a c0       	rjmp	.+116    	; 0xa74 <__floatsisf+0xaa>
     a00:	88 23       	and	r24, r24
     a02:	a9 f0       	breq	.+42     	; 0xa2e <__floatsisf+0x64>
     a04:	20 30       	cpi	r18, 0x00	; 0
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	38 07       	cpc	r19, r24
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	48 07       	cpc	r20, r24
     a0e:	80 e8       	ldi	r24, 0x80	; 128
     a10:	58 07       	cpc	r21, r24
     a12:	29 f4       	brne	.+10     	; 0xa1e <__floatsisf+0x54>
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	9f ec       	ldi	r25, 0xCF	; 207
     a1c:	30 c0       	rjmp	.+96     	; 0xa7e <__floatsisf+0xb4>
     a1e:	ee 24       	eor	r14, r14
     a20:	ff 24       	eor	r15, r15
     a22:	87 01       	movw	r16, r14
     a24:	e2 1a       	sub	r14, r18
     a26:	f3 0a       	sbc	r15, r19
     a28:	04 0b       	sbc	r16, r20
     a2a:	15 0b       	sbc	r17, r21
     a2c:	02 c0       	rjmp	.+4      	; 0xa32 <__floatsisf+0x68>
     a2e:	79 01       	movw	r14, r18
     a30:	8a 01       	movw	r16, r20
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 10 06 	call	0xc20	; 0xc20 <__clzsi2>
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	18 16       	cp	r1, r24
     a50:	19 06       	cpc	r1, r25
     a52:	84 f4       	brge	.+32     	; 0xa74 <__floatsisf+0xaa>
     a54:	08 2e       	mov	r0, r24
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <__floatsisf+0x96>
     a58:	ee 0c       	add	r14, r14
     a5a:	ff 1c       	adc	r15, r15
     a5c:	00 1f       	adc	r16, r16
     a5e:	11 1f       	adc	r17, r17
     a60:	0a 94       	dec	r0
     a62:	d2 f7       	brpl	.-12     	; 0xa58 <__floatsisf+0x8e>
     a64:	ed 82       	std	Y+5, r14	; 0x05
     a66:	fe 82       	std	Y+6, r15	; 0x06
     a68:	0f 83       	std	Y+7, r16	; 0x07
     a6a:	18 87       	std	Y+8, r17	; 0x08
     a6c:	c8 1a       	sub	r12, r24
     a6e:	d9 0a       	sbc	r13, r25
     a70:	dc 82       	std	Y+4, r13	; 0x04
     a72:	cb 82       	std	Y+3, r12	; 0x03
     a74:	ba 82       	std	Y+2, r11	; 0x02
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     a7e:	28 96       	adiw	r28, 0x08	; 8
     a80:	e9 e0       	ldi	r30, 0x09	; 9
     a82:	0c 94 05 35 	jmp	0x6a0a	; 0x6a0a <__epilogue_restores__+0x12>

00000a86 <__fixsfsi>:
     a86:	ac e0       	ldi	r26, 0x0C	; 12
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	e9 e4       	ldi	r30, 0x49	; 73
     a8c:	f5 e0       	ldi	r31, 0x05	; 5
     a8e:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__prologue_saves__+0x20>
     a92:	69 83       	std	Y+1, r22	; 0x01
     a94:	7a 83       	std	Y+2, r23	; 0x02
     a96:	8b 83       	std	Y+3, r24	; 0x03
     a98:	9c 83       	std	Y+4, r25	; 0x04
     a9a:	ce 01       	movw	r24, r28
     a9c:	01 96       	adiw	r24, 0x01	; 1
     a9e:	be 01       	movw	r22, r28
     aa0:	6b 5f       	subi	r22, 0xFB	; 251
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255
     aa4:	0e 94 34 07 	call	0xe68	; 0xe68 <__unpack_f>
     aa8:	8d 81       	ldd	r24, Y+5	; 0x05
     aaa:	82 30       	cpi	r24, 0x02	; 2
     aac:	61 f1       	breq	.+88     	; 0xb06 <__fixsfsi+0x80>
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	50 f1       	brcs	.+84     	; 0xb06 <__fixsfsi+0x80>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f4       	brne	.+8      	; 0xabe <__fixsfsi+0x38>
     ab6:	8e 81       	ldd	r24, Y+6	; 0x06
     ab8:	88 23       	and	r24, r24
     aba:	51 f1       	breq	.+84     	; 0xb10 <__fixsfsi+0x8a>
     abc:	2e c0       	rjmp	.+92     	; 0xb1a <__fixsfsi+0x94>
     abe:	2f 81       	ldd	r18, Y+7	; 0x07
     ac0:	38 85       	ldd	r19, Y+8	; 0x08
     ac2:	37 fd       	sbrc	r19, 7
     ac4:	20 c0       	rjmp	.+64     	; 0xb06 <__fixsfsi+0x80>
     ac6:	6e 81       	ldd	r22, Y+6	; 0x06
     ac8:	2f 31       	cpi	r18, 0x1F	; 31
     aca:	31 05       	cpc	r19, r1
     acc:	1c f0       	brlt	.+6      	; 0xad4 <__fixsfsi+0x4e>
     ace:	66 23       	and	r22, r22
     ad0:	f9 f0       	breq	.+62     	; 0xb10 <__fixsfsi+0x8a>
     ad2:	23 c0       	rjmp	.+70     	; 0xb1a <__fixsfsi+0x94>
     ad4:	8e e1       	ldi	r24, 0x1E	; 30
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	82 1b       	sub	r24, r18
     ada:	93 0b       	sbc	r25, r19
     adc:	29 85       	ldd	r18, Y+9	; 0x09
     ade:	3a 85       	ldd	r19, Y+10	; 0x0a
     ae0:	4b 85       	ldd	r20, Y+11	; 0x0b
     ae2:	5c 85       	ldd	r21, Y+12	; 0x0c
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <__fixsfsi+0x68>
     ae6:	56 95       	lsr	r21
     ae8:	47 95       	ror	r20
     aea:	37 95       	ror	r19
     aec:	27 95       	ror	r18
     aee:	8a 95       	dec	r24
     af0:	d2 f7       	brpl	.-12     	; 0xae6 <__fixsfsi+0x60>
     af2:	66 23       	and	r22, r22
     af4:	b1 f0       	breq	.+44     	; 0xb22 <__fixsfsi+0x9c>
     af6:	50 95       	com	r21
     af8:	40 95       	com	r20
     afa:	30 95       	com	r19
     afc:	21 95       	neg	r18
     afe:	3f 4f       	sbci	r19, 0xFF	; 255
     b00:	4f 4f       	sbci	r20, 0xFF	; 255
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	0e c0       	rjmp	.+28     	; 0xb22 <__fixsfsi+0x9c>
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	09 c0       	rjmp	.+18     	; 0xb22 <__fixsfsi+0x9c>
     b10:	2f ef       	ldi	r18, 0xFF	; 255
     b12:	3f ef       	ldi	r19, 0xFF	; 255
     b14:	4f ef       	ldi	r20, 0xFF	; 255
     b16:	5f e7       	ldi	r21, 0x7F	; 127
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__fixsfsi+0x9c>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e8       	ldi	r21, 0x80	; 128
     b22:	b9 01       	movw	r22, r18
     b24:	ca 01       	movw	r24, r20
     b26:	2c 96       	adiw	r28, 0x0c	; 12
     b28:	e2 e0       	ldi	r30, 0x02	; 2
     b2a:	0c 94 0c 35 	jmp	0x6a18	; 0x6a18 <__epilogue_restores__+0x20>

00000b2e <__floatunsisf>:
     b2e:	a8 e0       	ldi	r26, 0x08	; 8
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	ed e9       	ldi	r30, 0x9D	; 157
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	0c 94 e8 34 	jmp	0x69d0	; 0x69d0 <__prologue_saves__+0x10>
     b3a:	7b 01       	movw	r14, r22
     b3c:	8c 01       	movw	r16, r24
     b3e:	61 15       	cp	r22, r1
     b40:	71 05       	cpc	r23, r1
     b42:	81 05       	cpc	r24, r1
     b44:	91 05       	cpc	r25, r1
     b46:	19 f4       	brne	.+6      	; 0xb4e <__floatunsisf+0x20>
     b48:	82 e0       	ldi	r24, 0x02	; 2
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	60 c0       	rjmp	.+192    	; 0xc0e <__floatunsisf+0xe0>
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	89 83       	std	Y+1, r24	; 0x01
     b52:	8e e1       	ldi	r24, 0x1E	; 30
     b54:	c8 2e       	mov	r12, r24
     b56:	d1 2c       	mov	r13, r1
     b58:	dc 82       	std	Y+4, r13	; 0x04
     b5a:	cb 82       	std	Y+3, r12	; 0x03
     b5c:	ed 82       	std	Y+5, r14	; 0x05
     b5e:	fe 82       	std	Y+6, r15	; 0x06
     b60:	0f 83       	std	Y+7, r16	; 0x07
     b62:	18 87       	std	Y+8, r17	; 0x08
     b64:	c8 01       	movw	r24, r16
     b66:	b7 01       	movw	r22, r14
     b68:	0e 94 10 06 	call	0xc20	; 0xc20 <__clzsi2>
     b6c:	fc 01       	movw	r30, r24
     b6e:	31 97       	sbiw	r30, 0x01	; 1
     b70:	f7 ff       	sbrs	r31, 7
     b72:	3b c0       	rjmp	.+118    	; 0xbea <__floatunsisf+0xbc>
     b74:	22 27       	eor	r18, r18
     b76:	33 27       	eor	r19, r19
     b78:	2e 1b       	sub	r18, r30
     b7a:	3f 0b       	sbc	r19, r31
     b7c:	57 01       	movw	r10, r14
     b7e:	68 01       	movw	r12, r16
     b80:	02 2e       	mov	r0, r18
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <__floatunsisf+0x5e>
     b84:	d6 94       	lsr	r13
     b86:	c7 94       	ror	r12
     b88:	b7 94       	ror	r11
     b8a:	a7 94       	ror	r10
     b8c:	0a 94       	dec	r0
     b8e:	d2 f7       	brpl	.-12     	; 0xb84 <__floatunsisf+0x56>
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__floatunsisf+0x7c>
     ba2:	88 0f       	add	r24, r24
     ba4:	99 1f       	adc	r25, r25
     ba6:	aa 1f       	adc	r26, r26
     ba8:	bb 1f       	adc	r27, r27
     baa:	2a 95       	dec	r18
     bac:	d2 f7       	brpl	.-12     	; 0xba2 <__floatunsisf+0x74>
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	a1 09       	sbc	r26, r1
     bb2:	b1 09       	sbc	r27, r1
     bb4:	8e 21       	and	r24, r14
     bb6:	9f 21       	and	r25, r15
     bb8:	a0 23       	and	r26, r16
     bba:	b1 23       	and	r27, r17
     bbc:	00 97       	sbiw	r24, 0x00	; 0
     bbe:	a1 05       	cpc	r26, r1
     bc0:	b1 05       	cpc	r27, r1
     bc2:	21 f0       	breq	.+8      	; 0xbcc <__floatunsisf+0x9e>
     bc4:	41 e0       	ldi	r20, 0x01	; 1
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	4a 29       	or	r20, r10
     bce:	5b 29       	or	r21, r11
     bd0:	6c 29       	or	r22, r12
     bd2:	7d 29       	or	r23, r13
     bd4:	4d 83       	std	Y+5, r20	; 0x05
     bd6:	5e 83       	std	Y+6, r21	; 0x06
     bd8:	6f 83       	std	Y+7, r22	; 0x07
     bda:	78 87       	std	Y+8, r23	; 0x08
     bdc:	8e e1       	ldi	r24, 0x1E	; 30
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	8e 1b       	sub	r24, r30
     be2:	9f 0b       	sbc	r25, r31
     be4:	9c 83       	std	Y+4, r25	; 0x04
     be6:	8b 83       	std	Y+3, r24	; 0x03
     be8:	12 c0       	rjmp	.+36     	; 0xc0e <__floatunsisf+0xe0>
     bea:	30 97       	sbiw	r30, 0x00	; 0
     bec:	81 f0       	breq	.+32     	; 0xc0e <__floatunsisf+0xe0>
     bee:	0e 2e       	mov	r0, r30
     bf0:	04 c0       	rjmp	.+8      	; 0xbfa <__floatunsisf+0xcc>
     bf2:	ee 0c       	add	r14, r14
     bf4:	ff 1c       	adc	r15, r15
     bf6:	00 1f       	adc	r16, r16
     bf8:	11 1f       	adc	r17, r17
     bfa:	0a 94       	dec	r0
     bfc:	d2 f7       	brpl	.-12     	; 0xbf2 <__floatunsisf+0xc4>
     bfe:	ed 82       	std	Y+5, r14	; 0x05
     c00:	fe 82       	std	Y+6, r15	; 0x06
     c02:	0f 83       	std	Y+7, r16	; 0x07
     c04:	18 87       	std	Y+8, r17	; 0x08
     c06:	ce 1a       	sub	r12, r30
     c08:	df 0a       	sbc	r13, r31
     c0a:	dc 82       	std	Y+4, r13	; 0x04
     c0c:	cb 82       	std	Y+3, r12	; 0x03
     c0e:	1a 82       	std	Y+2, r1	; 0x02
     c10:	ce 01       	movw	r24, r28
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__pack_f>
     c18:	28 96       	adiw	r28, 0x08	; 8
     c1a:	ea e0       	ldi	r30, 0x0A	; 10
     c1c:	0c 94 04 35 	jmp	0x6a08	; 0x6a08 <__epilogue_restores__+0x10>

00000c20 <__clzsi2>:
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	7b 01       	movw	r14, r22
     c2a:	8c 01       	movw	r16, r24
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	e8 16       	cp	r14, r24
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	f8 06       	cpc	r15, r24
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	08 07       	cpc	r16, r24
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	18 07       	cpc	r17, r24
     c3c:	88 f4       	brcc	.+34     	; 0xc60 <__clzsi2+0x40>
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	e8 16       	cp	r14, r24
     c42:	f1 04       	cpc	r15, r1
     c44:	01 05       	cpc	r16, r1
     c46:	11 05       	cpc	r17, r1
     c48:	31 f0       	breq	.+12     	; 0xc56 <__clzsi2+0x36>
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__clzsi2+0x36>
     c4c:	88 e0       	ldi	r24, 0x08	; 8
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	17 c0       	rjmp	.+46     	; 0xc84 <__clzsi2+0x64>
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	12 c0       	rjmp	.+36     	; 0xc84 <__clzsi2+0x64>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	e8 16       	cp	r14, r24
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	f8 06       	cpc	r15, r24
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	08 07       	cpc	r16, r24
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	18 07       	cpc	r17, r24
     c70:	28 f0       	brcs	.+10     	; 0xc7c <__clzsi2+0x5c>
     c72:	88 e1       	ldi	r24, 0x18	; 24
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	a0 e0       	ldi	r26, 0x00	; 0
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__clzsi2+0x64>
     c7c:	80 e1       	ldi	r24, 0x10	; 16
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	20 e2       	ldi	r18, 0x20	; 32
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	28 1b       	sub	r18, r24
     c8e:	39 0b       	sbc	r19, r25
     c90:	4a 0b       	sbc	r20, r26
     c92:	5b 0b       	sbc	r21, r27
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__clzsi2+0x7e>
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	8a 95       	dec	r24
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__clzsi2+0x76>
     ca2:	f7 01       	movw	r30, r14
     ca4:	e8 59       	subi	r30, 0x98	; 152
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	80 81       	ld	r24, Z
     caa:	28 1b       	sub	r18, r24
     cac:	31 09       	sbc	r19, r1
     cae:	41 09       	sbc	r20, r1
     cb0:	51 09       	sbc	r21, r1
     cb2:	c9 01       	movw	r24, r18
     cb4:	1f 91       	pop	r17
     cb6:	0f 91       	pop	r16
     cb8:	ff 90       	pop	r15
     cba:	ef 90       	pop	r14
     cbc:	08 95       	ret

00000cbe <__pack_f>:
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	fc 01       	movw	r30, r24
     cca:	e4 80       	ldd	r14, Z+4	; 0x04
     ccc:	f5 80       	ldd	r15, Z+5	; 0x05
     cce:	06 81       	ldd	r16, Z+6	; 0x06
     cd0:	17 81       	ldd	r17, Z+7	; 0x07
     cd2:	d1 80       	ldd	r13, Z+1	; 0x01
     cd4:	80 81       	ld	r24, Z
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	48 f4       	brcc	.+18     	; 0xcec <__pack_f+0x2e>
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e1       	ldi	r26, 0x10	; 16
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e8 2a       	or	r14, r24
     ce4:	f9 2a       	or	r15, r25
     ce6:	0a 2b       	or	r16, r26
     ce8:	1b 2b       	or	r17, r27
     cea:	a5 c0       	rjmp	.+330    	; 0xe36 <__pack_f+0x178>
     cec:	84 30       	cpi	r24, 0x04	; 4
     cee:	09 f4       	brne	.+2      	; 0xcf2 <__pack_f+0x34>
     cf0:	9f c0       	rjmp	.+318    	; 0xe30 <__pack_f+0x172>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	21 f4       	brne	.+8      	; 0xcfe <__pack_f+0x40>
     cf6:	ee 24       	eor	r14, r14
     cf8:	ff 24       	eor	r15, r15
     cfa:	87 01       	movw	r16, r14
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <__pack_f+0x4a>
     cfe:	e1 14       	cp	r14, r1
     d00:	f1 04       	cpc	r15, r1
     d02:	01 05       	cpc	r16, r1
     d04:	11 05       	cpc	r17, r1
     d06:	19 f4       	brne	.+6      	; 0xd0e <__pack_f+0x50>
     d08:	e0 e0       	ldi	r30, 0x00	; 0
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	96 c0       	rjmp	.+300    	; 0xe3a <__pack_f+0x17c>
     d0e:	62 81       	ldd	r22, Z+2	; 0x02
     d10:	73 81       	ldd	r23, Z+3	; 0x03
     d12:	9f ef       	ldi	r25, 0xFF	; 255
     d14:	62 38       	cpi	r22, 0x82	; 130
     d16:	79 07       	cpc	r23, r25
     d18:	0c f0       	brlt	.+2      	; 0xd1c <__pack_f+0x5e>
     d1a:	5b c0       	rjmp	.+182    	; 0xdd2 <__pack_f+0x114>
     d1c:	22 e8       	ldi	r18, 0x82	; 130
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	26 1b       	sub	r18, r22
     d22:	37 0b       	sbc	r19, r23
     d24:	2a 31       	cpi	r18, 0x1A	; 26
     d26:	31 05       	cpc	r19, r1
     d28:	2c f0       	brlt	.+10     	; 0xd34 <__pack_f+0x76>
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	2a c0       	rjmp	.+84     	; 0xd88 <__pack_f+0xca>
     d34:	b8 01       	movw	r22, r16
     d36:	a7 01       	movw	r20, r14
     d38:	02 2e       	mov	r0, r18
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__pack_f+0x86>
     d3c:	76 95       	lsr	r23
     d3e:	67 95       	ror	r22
     d40:	57 95       	ror	r21
     d42:	47 95       	ror	r20
     d44:	0a 94       	dec	r0
     d46:	d2 f7       	brpl	.-12     	; 0xd3c <__pack_f+0x7e>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	04 c0       	rjmp	.+8      	; 0xd5a <__pack_f+0x9c>
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	aa 1f       	adc	r26, r26
     d58:	bb 1f       	adc	r27, r27
     d5a:	2a 95       	dec	r18
     d5c:	d2 f7       	brpl	.-12     	; 0xd52 <__pack_f+0x94>
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	a1 09       	sbc	r26, r1
     d62:	b1 09       	sbc	r27, r1
     d64:	8e 21       	and	r24, r14
     d66:	9f 21       	and	r25, r15
     d68:	a0 23       	and	r26, r16
     d6a:	b1 23       	and	r27, r17
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	a1 05       	cpc	r26, r1
     d70:	b1 05       	cpc	r27, r1
     d72:	21 f0       	breq	.+8      	; 0xd7c <__pack_f+0xbe>
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	9a 01       	movw	r18, r20
     d7e:	ab 01       	movw	r20, r22
     d80:	28 2b       	or	r18, r24
     d82:	39 2b       	or	r19, r25
     d84:	4a 2b       	or	r20, r26
     d86:	5b 2b       	or	r21, r27
     d88:	da 01       	movw	r26, r20
     d8a:	c9 01       	movw	r24, r18
     d8c:	8f 77       	andi	r24, 0x7F	; 127
     d8e:	90 70       	andi	r25, 0x00	; 0
     d90:	a0 70       	andi	r26, 0x00	; 0
     d92:	b0 70       	andi	r27, 0x00	; 0
     d94:	80 34       	cpi	r24, 0x40	; 64
     d96:	91 05       	cpc	r25, r1
     d98:	a1 05       	cpc	r26, r1
     d9a:	b1 05       	cpc	r27, r1
     d9c:	39 f4       	brne	.+14     	; 0xdac <__pack_f+0xee>
     d9e:	27 ff       	sbrs	r18, 7
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <__pack_f+0xf6>
     da2:	20 5c       	subi	r18, 0xC0	; 192
     da4:	3f 4f       	sbci	r19, 0xFF	; 255
     da6:	4f 4f       	sbci	r20, 0xFF	; 255
     da8:	5f 4f       	sbci	r21, 0xFF	; 255
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <__pack_f+0xf6>
     dac:	21 5c       	subi	r18, 0xC1	; 193
     dae:	3f 4f       	sbci	r19, 0xFF	; 255
     db0:	4f 4f       	sbci	r20, 0xFF	; 255
     db2:	5f 4f       	sbci	r21, 0xFF	; 255
     db4:	e0 e0       	ldi	r30, 0x00	; 0
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	20 30       	cpi	r18, 0x00	; 0
     dba:	a0 e0       	ldi	r26, 0x00	; 0
     dbc:	3a 07       	cpc	r19, r26
     dbe:	a0 e0       	ldi	r26, 0x00	; 0
     dc0:	4a 07       	cpc	r20, r26
     dc2:	a0 e4       	ldi	r26, 0x40	; 64
     dc4:	5a 07       	cpc	r21, r26
     dc6:	10 f0       	brcs	.+4      	; 0xdcc <__pack_f+0x10e>
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	79 01       	movw	r14, r18
     dce:	8a 01       	movw	r16, r20
     dd0:	27 c0       	rjmp	.+78     	; 0xe20 <__pack_f+0x162>
     dd2:	60 38       	cpi	r22, 0x80	; 128
     dd4:	71 05       	cpc	r23, r1
     dd6:	64 f5       	brge	.+88     	; 0xe30 <__pack_f+0x172>
     dd8:	fb 01       	movw	r30, r22
     dda:	e1 58       	subi	r30, 0x81	; 129
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	d8 01       	movw	r26, r16
     de0:	c7 01       	movw	r24, r14
     de2:	8f 77       	andi	r24, 0x7F	; 127
     de4:	90 70       	andi	r25, 0x00	; 0
     de6:	a0 70       	andi	r26, 0x00	; 0
     de8:	b0 70       	andi	r27, 0x00	; 0
     dea:	80 34       	cpi	r24, 0x40	; 64
     dec:	91 05       	cpc	r25, r1
     dee:	a1 05       	cpc	r26, r1
     df0:	b1 05       	cpc	r27, r1
     df2:	39 f4       	brne	.+14     	; 0xe02 <__pack_f+0x144>
     df4:	e7 fe       	sbrs	r14, 7
     df6:	0d c0       	rjmp	.+26     	; 0xe12 <__pack_f+0x154>
     df8:	80 e4       	ldi	r24, 0x40	; 64
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	a0 e0       	ldi	r26, 0x00	; 0
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <__pack_f+0x14c>
     e02:	8f e3       	ldi	r24, 0x3F	; 63
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	a0 e0       	ldi	r26, 0x00	; 0
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e8 0e       	add	r14, r24
     e0c:	f9 1e       	adc	r15, r25
     e0e:	0a 1f       	adc	r16, r26
     e10:	1b 1f       	adc	r17, r27
     e12:	17 ff       	sbrs	r17, 7
     e14:	05 c0       	rjmp	.+10     	; 0xe20 <__pack_f+0x162>
     e16:	16 95       	lsr	r17
     e18:	07 95       	ror	r16
     e1a:	f7 94       	ror	r15
     e1c:	e7 94       	ror	r14
     e1e:	31 96       	adiw	r30, 0x01	; 1
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	16 95       	lsr	r17
     e24:	07 95       	ror	r16
     e26:	f7 94       	ror	r15
     e28:	e7 94       	ror	r14
     e2a:	8a 95       	dec	r24
     e2c:	d1 f7       	brne	.-12     	; 0xe22 <__pack_f+0x164>
     e2e:	05 c0       	rjmp	.+10     	; 0xe3a <__pack_f+0x17c>
     e30:	ee 24       	eor	r14, r14
     e32:	ff 24       	eor	r15, r15
     e34:	87 01       	movw	r16, r14
     e36:	ef ef       	ldi	r30, 0xFF	; 255
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	6e 2f       	mov	r22, r30
     e3c:	67 95       	ror	r22
     e3e:	66 27       	eor	r22, r22
     e40:	67 95       	ror	r22
     e42:	90 2f       	mov	r25, r16
     e44:	9f 77       	andi	r25, 0x7F	; 127
     e46:	d7 94       	ror	r13
     e48:	dd 24       	eor	r13, r13
     e4a:	d7 94       	ror	r13
     e4c:	8e 2f       	mov	r24, r30
     e4e:	86 95       	lsr	r24
     e50:	49 2f       	mov	r20, r25
     e52:	46 2b       	or	r20, r22
     e54:	58 2f       	mov	r21, r24
     e56:	5d 29       	or	r21, r13
     e58:	b7 01       	movw	r22, r14
     e5a:	ca 01       	movw	r24, r20
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	08 95       	ret

00000e68 <__unpack_f>:
     e68:	fc 01       	movw	r30, r24
     e6a:	db 01       	movw	r26, r22
     e6c:	40 81       	ld	r20, Z
     e6e:	51 81       	ldd	r21, Z+1	; 0x01
     e70:	22 81       	ldd	r18, Z+2	; 0x02
     e72:	62 2f       	mov	r22, r18
     e74:	6f 77       	andi	r22, 0x7F	; 127
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	22 1f       	adc	r18, r18
     e7a:	22 27       	eor	r18, r18
     e7c:	22 1f       	adc	r18, r18
     e7e:	93 81       	ldd	r25, Z+3	; 0x03
     e80:	89 2f       	mov	r24, r25
     e82:	88 0f       	add	r24, r24
     e84:	82 2b       	or	r24, r18
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	99 1f       	adc	r25, r25
     e8c:	99 27       	eor	r25, r25
     e8e:	99 1f       	adc	r25, r25
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	9c 93       	st	X, r25
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	21 15       	cp	r18, r1
     e98:	31 05       	cpc	r19, r1
     e9a:	a9 f5       	brne	.+106    	; 0xf06 <__unpack_f+0x9e>
     e9c:	41 15       	cp	r20, r1
     e9e:	51 05       	cpc	r21, r1
     ea0:	61 05       	cpc	r22, r1
     ea2:	71 05       	cpc	r23, r1
     ea4:	11 f4       	brne	.+4      	; 0xeaa <__unpack_f+0x42>
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	37 c0       	rjmp	.+110    	; 0xf18 <__unpack_f+0xb0>
     eaa:	82 e8       	ldi	r24, 0x82	; 130
     eac:	9f ef       	ldi	r25, 0xFF	; 255
     eae:	13 96       	adiw	r26, 0x03	; 3
     eb0:	9c 93       	st	X, r25
     eb2:	8e 93       	st	-X, r24
     eb4:	12 97       	sbiw	r26, 0x02	; 2
     eb6:	9a 01       	movw	r18, r20
     eb8:	ab 01       	movw	r20, r22
     eba:	67 e0       	ldi	r22, 0x07	; 7
     ebc:	22 0f       	add	r18, r18
     ebe:	33 1f       	adc	r19, r19
     ec0:	44 1f       	adc	r20, r20
     ec2:	55 1f       	adc	r21, r21
     ec4:	6a 95       	dec	r22
     ec6:	d1 f7       	brne	.-12     	; 0xebc <__unpack_f+0x54>
     ec8:	83 e0       	ldi	r24, 0x03	; 3
     eca:	8c 93       	st	X, r24
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <__unpack_f+0x80>
     ece:	22 0f       	add	r18, r18
     ed0:	33 1f       	adc	r19, r19
     ed2:	44 1f       	adc	r20, r20
     ed4:	55 1f       	adc	r21, r21
     ed6:	12 96       	adiw	r26, 0x02	; 2
     ed8:	8d 91       	ld	r24, X+
     eda:	9c 91       	ld	r25, X
     edc:	13 97       	sbiw	r26, 0x03	; 3
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	13 96       	adiw	r26, 0x03	; 3
     ee2:	9c 93       	st	X, r25
     ee4:	8e 93       	st	-X, r24
     ee6:	12 97       	sbiw	r26, 0x02	; 2
     ee8:	20 30       	cpi	r18, 0x00	; 0
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	38 07       	cpc	r19, r24
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	48 07       	cpc	r20, r24
     ef2:	80 e4       	ldi	r24, 0x40	; 64
     ef4:	58 07       	cpc	r21, r24
     ef6:	58 f3       	brcs	.-42     	; 0xece <__unpack_f+0x66>
     ef8:	14 96       	adiw	r26, 0x04	; 4
     efa:	2d 93       	st	X+, r18
     efc:	3d 93       	st	X+, r19
     efe:	4d 93       	st	X+, r20
     f00:	5c 93       	st	X, r21
     f02:	17 97       	sbiw	r26, 0x07	; 7
     f04:	08 95       	ret
     f06:	2f 3f       	cpi	r18, 0xFF	; 255
     f08:	31 05       	cpc	r19, r1
     f0a:	79 f4       	brne	.+30     	; 0xf2a <__unpack_f+0xc2>
     f0c:	41 15       	cp	r20, r1
     f0e:	51 05       	cpc	r21, r1
     f10:	61 05       	cpc	r22, r1
     f12:	71 05       	cpc	r23, r1
     f14:	19 f4       	brne	.+6      	; 0xf1c <__unpack_f+0xb4>
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	8c 93       	st	X, r24
     f1a:	08 95       	ret
     f1c:	64 ff       	sbrs	r22, 4
     f1e:	03 c0       	rjmp	.+6      	; 0xf26 <__unpack_f+0xbe>
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	8c 93       	st	X, r24
     f24:	12 c0       	rjmp	.+36     	; 0xf4a <__unpack_f+0xe2>
     f26:	1c 92       	st	X, r1
     f28:	10 c0       	rjmp	.+32     	; 0xf4a <__unpack_f+0xe2>
     f2a:	2f 57       	subi	r18, 0x7F	; 127
     f2c:	30 40       	sbci	r19, 0x00	; 0
     f2e:	13 96       	adiw	r26, 0x03	; 3
     f30:	3c 93       	st	X, r19
     f32:	2e 93       	st	-X, r18
     f34:	12 97       	sbiw	r26, 0x02	; 2
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	8c 93       	st	X, r24
     f3a:	87 e0       	ldi	r24, 0x07	; 7
     f3c:	44 0f       	add	r20, r20
     f3e:	55 1f       	adc	r21, r21
     f40:	66 1f       	adc	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	8a 95       	dec	r24
     f46:	d1 f7       	brne	.-12     	; 0xf3c <__unpack_f+0xd4>
     f48:	70 64       	ori	r23, 0x40	; 64
     f4a:	14 96       	adiw	r26, 0x04	; 4
     f4c:	4d 93       	st	X+, r20
     f4e:	5d 93       	st	X+, r21
     f50:	6d 93       	st	X+, r22
     f52:	7c 93       	st	X, r23
     f54:	17 97       	sbiw	r26, 0x07	; 7
     f56:	08 95       	ret

00000f58 <__fpcmp_parts_f>:
     f58:	1f 93       	push	r17
     f5a:	dc 01       	movw	r26, r24
     f5c:	fb 01       	movw	r30, r22
     f5e:	9c 91       	ld	r25, X
     f60:	92 30       	cpi	r25, 0x02	; 2
     f62:	08 f4       	brcc	.+2      	; 0xf66 <__fpcmp_parts_f+0xe>
     f64:	47 c0       	rjmp	.+142    	; 0xff4 <__fpcmp_parts_f+0x9c>
     f66:	80 81       	ld	r24, Z
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	08 f4       	brcc	.+2      	; 0xf6e <__fpcmp_parts_f+0x16>
     f6c:	43 c0       	rjmp	.+134    	; 0xff4 <__fpcmp_parts_f+0x9c>
     f6e:	94 30       	cpi	r25, 0x04	; 4
     f70:	51 f4       	brne	.+20     	; 0xf86 <__fpcmp_parts_f+0x2e>
     f72:	11 96       	adiw	r26, 0x01	; 1
     f74:	1c 91       	ld	r17, X
     f76:	84 30       	cpi	r24, 0x04	; 4
     f78:	99 f5       	brne	.+102    	; 0xfe0 <__fpcmp_parts_f+0x88>
     f7a:	81 81       	ldd	r24, Z+1	; 0x01
     f7c:	68 2f       	mov	r22, r24
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	61 1b       	sub	r22, r17
     f82:	71 09       	sbc	r23, r1
     f84:	3f c0       	rjmp	.+126    	; 0x1004 <__fpcmp_parts_f+0xac>
     f86:	84 30       	cpi	r24, 0x04	; 4
     f88:	21 f0       	breq	.+8      	; 0xf92 <__fpcmp_parts_f+0x3a>
     f8a:	92 30       	cpi	r25, 0x02	; 2
     f8c:	31 f4       	brne	.+12     	; 0xf9a <__fpcmp_parts_f+0x42>
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	b9 f1       	breq	.+110    	; 0x1000 <__fpcmp_parts_f+0xa8>
     f92:	81 81       	ldd	r24, Z+1	; 0x01
     f94:	88 23       	and	r24, r24
     f96:	89 f1       	breq	.+98     	; 0xffa <__fpcmp_parts_f+0xa2>
     f98:	2d c0       	rjmp	.+90     	; 0xff4 <__fpcmp_parts_f+0x9c>
     f9a:	11 96       	adiw	r26, 0x01	; 1
     f9c:	1c 91       	ld	r17, X
     f9e:	11 97       	sbiw	r26, 0x01	; 1
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	f1 f0       	breq	.+60     	; 0xfe0 <__fpcmp_parts_f+0x88>
     fa4:	81 81       	ldd	r24, Z+1	; 0x01
     fa6:	18 17       	cp	r17, r24
     fa8:	d9 f4       	brne	.+54     	; 0xfe0 <__fpcmp_parts_f+0x88>
     faa:	12 96       	adiw	r26, 0x02	; 2
     fac:	2d 91       	ld	r18, X+
     fae:	3c 91       	ld	r19, X
     fb0:	13 97       	sbiw	r26, 0x03	; 3
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	82 17       	cp	r24, r18
     fb8:	93 07       	cpc	r25, r19
     fba:	94 f0       	brlt	.+36     	; 0xfe0 <__fpcmp_parts_f+0x88>
     fbc:	28 17       	cp	r18, r24
     fbe:	39 07       	cpc	r19, r25
     fc0:	bc f0       	brlt	.+46     	; 0xff0 <__fpcmp_parts_f+0x98>
     fc2:	14 96       	adiw	r26, 0x04	; 4
     fc4:	8d 91       	ld	r24, X+
     fc6:	9d 91       	ld	r25, X+
     fc8:	0d 90       	ld	r0, X+
     fca:	bc 91       	ld	r27, X
     fcc:	a0 2d       	mov	r26, r0
     fce:	24 81       	ldd	r18, Z+4	; 0x04
     fd0:	35 81       	ldd	r19, Z+5	; 0x05
     fd2:	46 81       	ldd	r20, Z+6	; 0x06
     fd4:	57 81       	ldd	r21, Z+7	; 0x07
     fd6:	28 17       	cp	r18, r24
     fd8:	39 07       	cpc	r19, r25
     fda:	4a 07       	cpc	r20, r26
     fdc:	5b 07       	cpc	r21, r27
     fde:	18 f4       	brcc	.+6      	; 0xfe6 <__fpcmp_parts_f+0x8e>
     fe0:	11 23       	and	r17, r17
     fe2:	41 f0       	breq	.+16     	; 0xff4 <__fpcmp_parts_f+0x9c>
     fe4:	0a c0       	rjmp	.+20     	; 0xffa <__fpcmp_parts_f+0xa2>
     fe6:	82 17       	cp	r24, r18
     fe8:	93 07       	cpc	r25, r19
     fea:	a4 07       	cpc	r26, r20
     fec:	b5 07       	cpc	r27, r21
     fee:	40 f4       	brcc	.+16     	; 0x1000 <__fpcmp_parts_f+0xa8>
     ff0:	11 23       	and	r17, r17
     ff2:	19 f0       	breq	.+6      	; 0xffa <__fpcmp_parts_f+0xa2>
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	05 c0       	rjmp	.+10     	; 0x1004 <__fpcmp_parts_f+0xac>
     ffa:	6f ef       	ldi	r22, 0xFF	; 255
     ffc:	7f ef       	ldi	r23, 0xFF	; 255
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <__fpcmp_parts_f+0xac>
    1000:	60 e0       	ldi	r22, 0x00	; 0
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	cb 01       	movw	r24, r22
    1006:	1f 91       	pop	r17
    1008:	08 95       	ret

0000100a <TMU_vidInit>:
static u8 TMU_u8Preload;

static u32 TMU_u32OsTicks;

void TMU_vidInit(void)
{
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
	Timer_enuInit();
    1012:	0e 94 10 0a 	call	0x1420	; 0x1420 <Timer_enuInit>

#if TIMER_CHANNEL == TIMER0
	Timer_enuSetClkPrescaler( TIMER0 , PRES_1024 );
    1016:	88 ec       	ldi	r24, 0xC8	; 200
    1018:	61 e1       	ldi	r22, 0x11	; 17
    101a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <Timer_enuSetClkPrescaler>
	Timer_enuSetOCn_Mode( TIMER0 , COMP_NORMAL );
    101e:	88 ec       	ldi	r24, 0xC8	; 200
    1020:	64 e1       	ldi	r22, 0x14	; 20
    1022:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <Timer_enuSetOCn_Mode>
	#if (OS_TICK > 0 ) && ( OS_TICK <= 16 )
		if( ES_OK == Timer_enuSetOCRnValue( TIMER0 , (u8)((OS_TICK * CPU_FREQ_KHZ)/1024ul)) )
    1026:	88 ec       	ldi	r24, 0xC8	; 200
    1028:	6c e9       	ldi	r22, 0x9C	; 156
    102a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <Timer_enuSetOCRnValue>
    102e:	88 23       	and	r24, r24
    1030:	99 f4       	brne	.+38     	; 0x1058 <TMU_vidInit+0x4e>
		{
			Timer_enuSetTimer_Mode( TIMER0 , WGM_CTC_MODE );
    1032:	88 ec       	ldi	r24, 0xC8	; 200
    1034:	60 e2       	ldi	r22, 0x20	; 32
    1036:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <Timer_enuSetTimer_Mode>
			TMU_u8ISRNum = 1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	80 93 1a 02 	sts	0x021A, r24
			TMU_u8ISRCount = 1;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	80 93 1b 02 	sts	0x021B, r24
			Timer_enuCallBack( OCIE0 , TMU_vid_OCIE0_ISR );
    1046:	2d eb       	ldi	r18, 0xBD	; 189
    1048:	39 e0       	ldi	r19, 0x09	; 9
    104a:	8d e3       	ldi	r24, 0x3D	; 61
    104c:	b9 01       	movw	r22, r18
    104e:	0e 94 48 10 	call	0x2090	; 0x2090 <Timer_enuCallBack>
			Timer_enuInterruptEnable( OCIE0 );
    1052:	8d e3       	ldi	r24, 0x3D	; 61
    1054:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <Timer_enuInterruptEnable>
	#error os tick value is invalid
	#endif
#else
#error Timer channel configuration is invalid
#endif
}
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <TMU_vidCreateTask>:

void TMU_vidCreateTask( void( *Copy_pFunAppFun )( void* ) , void *Copy_pvidParameter, u8 Copy_u8Priority, u8 Copy_u8State ,u16 Copy_u16Periodicity  , u8 Copy_u8Offset)
{
    105e:	ef 92       	push	r14
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	29 97       	sbiw	r28, 0x09	; 9
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	7c 83       	std	Y+4, r23	; 0x04
    107e:	6b 83       	std	Y+3, r22	; 0x03
    1080:	4d 83       	std	Y+5, r20	; 0x05
    1082:	2e 83       	std	Y+6, r18	; 0x06
    1084:	18 87       	std	Y+8, r17	; 0x08
    1086:	0f 83       	std	Y+7, r16	; 0x07
    1088:	e9 86       	std	Y+9, r14	; 0x09
	if (Copy_pFunAppFun != NULL && Copy_u8Priority < MAX_TASKS)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	09 f4       	brne	.+2      	; 0x1094 <TMU_vidCreateTask+0x36>
    1092:	52 c0       	rjmp	.+164    	; 0x1138 <TMU_vidCreateTask+0xda>
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	89 30       	cpi	r24, 0x09	; 9
    1098:	08 f0       	brcs	.+2      	; 0x109c <TMU_vidCreateTask+0x3e>
    109a:	4e c0       	rjmp	.+156    	; 0x1138 <TMU_vidCreateTask+0xda>
	{
		All_Tasks[ Copy_u8Priority ].pFun = Copy_pFunAppFun;
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	fc 01       	movw	r30, r24
    10b0:	ee 52       	subi	r30, 0x2E	; 46
    10b2:	fe 4f       	sbci	r31, 0xFE	; 254
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].parameter = Copy_pvidParameter;
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	01 96       	adiw	r24, 0x01	; 1
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	fc 01       	movw	r30, r24
    10d2:	ee 52       	subi	r30, 0x2E	; 46
    10d4:	fe 4f       	sbci	r31, 0xFE	; 254
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].Periodicity = Copy_u16Periodicity;
    10de:	8d 81       	ldd	r24, Y+5	; 0x05
    10e0:	88 2f       	mov	r24, r24
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	01 96       	adiw	r24, 0x01	; 1
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	fc 01       	movw	r30, r24
    10f4:	ee 52       	subi	r30, 0x2E	; 46
    10f6:	fe 4f       	sbci	r31, 0xFE	; 254
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	98 85       	ldd	r25, Y+8	; 0x08
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].state = Copy_u8State;
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	fc 01       	movw	r30, r24
    1114:	e8 52       	subi	r30, 0x28	; 40
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	8e 81       	ldd	r24, Y+6	; 0x06
    111a:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].offset = Copy_u8Offset;
    111c:	8d 81       	ldd	r24, Y+5	; 0x05
    111e:	88 2f       	mov	r24, r24
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	fc 01       	movw	r30, r24
    1130:	e7 52       	subi	r30, 0x27	; 39
    1132:	fe 4f       	sbci	r31, 0xFE	; 254
    1134:	89 85       	ldd	r24, Y+9	; 0x09
    1136:	80 83       	st	Z, r24
	}
}
    1138:	29 96       	adiw	r28, 0x09	; 9
    113a:	0f b6       	in	r0, 0x3f	; 63
    113c:	f8 94       	cli
    113e:	de bf       	out	0x3e, r29	; 62
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	cd bf       	out	0x3d, r28	; 61
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ef 90       	pop	r14
    114e:	08 95       	ret

00001150 <TMU_vidStartScheduler>:

void TMU_vidStartScheduler(void)
{
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <TMU_vidStartScheduler+0xe>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <TMU_vidStartScheduler+0x10>
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32PrevTick = 0;
    1166:	1a 82       	std	Y+2, r1	; 0x02
    1168:	1b 82       	std	Y+3, r1	; 0x03
    116a:	1c 82       	std	Y+4, r1	; 0x04
    116c:	1d 82       	std	Y+5, r1	; 0x05
	_SEI_;
    116e:	78 94       	sei
	while(1)
	{
		if (TMU_u32OsTicks > Local_u32PrevTick )
    1170:	20 91 1d 02 	lds	r18, 0x021D
    1174:	30 91 1e 02 	lds	r19, 0x021E
    1178:	40 91 1f 02 	lds	r20, 0x021F
    117c:	50 91 20 02 	lds	r21, 0x0220
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	9b 81       	ldd	r25, Y+3	; 0x03
    1184:	ac 81       	ldd	r26, Y+4	; 0x04
    1186:	bd 81       	ldd	r27, Y+5	; 0x05
    1188:	82 17       	cp	r24, r18
    118a:	93 07       	cpc	r25, r19
    118c:	a4 07       	cpc	r26, r20
    118e:	b5 07       	cpc	r27, r21
    1190:	78 f7       	brcc	.-34     	; 0x1170 <TMU_vidStartScheduler+0x20>
		{
			Local_u32PrevTick = TMU_u32OsTicks;
    1192:	80 91 1d 02 	lds	r24, 0x021D
    1196:	90 91 1e 02 	lds	r25, 0x021E
    119a:	a0 91 1f 02 	lds	r26, 0x021F
    119e:	b0 91 20 02 	lds	r27, 0x0220
    11a2:	8a 83       	std	Y+2, r24	; 0x02
    11a4:	9b 83       	std	Y+3, r25	; 0x03
    11a6:	ac 83       	std	Y+4, r26	; 0x04
    11a8:	bd 83       	std	Y+5, r27	; 0x05
			for(s8 i = MAX_TASKS-1 ; i>=0 ; i--)
    11aa:	88 e0       	ldi	r24, 0x08	; 8
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	81 c0       	rjmp	.+258    	; 0x12b2 <TMU_vidStartScheduler+0x162>
			{
				if (All_Tasks[i].pFun  != NULL	&&
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	99 27       	eor	r25, r25
    11b4:	87 fd       	sbrc	r24, 7
    11b6:	90 95       	com	r25
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	fc 01       	movw	r30, r24
    11c6:	ee 52       	subi	r30, 0x2E	; 46
    11c8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <TMU_vidStartScheduler+0x84>
    11d2:	6c c0       	rjmp	.+216    	; 0x12ac <TMU_vidStartScheduler+0x15c>
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	99 27       	eor	r25, r25
    11d8:	87 fd       	sbrc	r24, 7
    11da:	90 95       	com	r25
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	fc 01       	movw	r30, r24
    11ea:	e8 52       	subi	r30, 0x28	; 40
    11ec:	fe 4f       	sbci	r31, 0xFE	; 254
    11ee:	80 81       	ld	r24, Z
    11f0:	87 31       	cpi	r24, 0x17	; 23
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <TMU_vidStartScheduler+0xa6>
    11f4:	5b c0       	rjmp	.+182    	; 0x12ac <TMU_vidStartScheduler+0x15c>
    11f6:	e0 90 1d 02 	lds	r14, 0x021D
    11fa:	f0 90 1e 02 	lds	r15, 0x021E
    11fe:	00 91 1f 02 	lds	r16, 0x021F
    1202:	10 91 20 02 	lds	r17, 0x0220
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	99 27       	eor	r25, r25
    120a:	87 fd       	sbrc	r24, 7
    120c:	90 95       	com	r25
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	01 96       	adiw	r24, 0x01	; 1
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	fc 01       	movw	r30, r24
    121e:	ee 52       	subi	r30, 0x2E	; 46
    1220:	fe 4f       	sbci	r31, 0xFE	; 254
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	9c 01       	movw	r18, r24
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	50 e0       	ldi	r21, 0x00	; 0
    122c:	c8 01       	movw	r24, r16
    122e:	b7 01       	movw	r22, r14
    1230:	0e 94 be 34 	call	0x697c	; 0x697c <__udivmodsi4>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9c 01       	movw	r18, r24
    123a:	ad 01       	movw	r20, r26
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	99 27       	eor	r25, r25
    1240:	87 fd       	sbrc	r24, 7
    1242:	90 95       	com	r25
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	fc 01       	movw	r30, r24
    1252:	e7 52       	subi	r30, 0x27	; 39
    1254:	fe 4f       	sbci	r31, 0xFE	; 254
    1256:	80 81       	ld	r24, Z
    1258:	88 2f       	mov	r24, r24
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a0 e0       	ldi	r26, 0x00	; 0
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	28 17       	cp	r18, r24
    1262:	39 07       	cpc	r19, r25
    1264:	4a 07       	cpc	r20, r26
    1266:	5b 07       	cpc	r21, r27
    1268:	09 f5       	brne	.+66     	; 0x12ac <TMU_vidStartScheduler+0x15c>
					All_Tasks[i].state == READY &&
					TMU_u32OsTicks % All_Tasks[i].Periodicity == All_Tasks[i].offset )
				{
					All_Tasks[i].pFun (All_Tasks[i].parameter);
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	99 27       	eor	r25, r25
    126e:	87 fd       	sbrc	r24, 7
    1270:	90 95       	com	r25
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	fc 01       	movw	r30, r24
    1280:	ee 52       	subi	r30, 0x2E	; 46
    1282:	fe 4f       	sbci	r31, 0xFE	; 254
    1284:	20 81       	ld	r18, Z
    1286:	31 81       	ldd	r19, Z+1	; 0x01
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	99 27       	eor	r25, r25
    128c:	87 fd       	sbrc	r24, 7
    128e:	90 95       	com	r25
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	fc 01       	movw	r30, r24
    12a0:	ee 52       	subi	r30, 0x2E	; 46
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	f9 01       	movw	r30, r18
    12aa:	09 95       	icall
	while(1)
	{
		if (TMU_u32OsTicks > Local_u32PrevTick )
		{
			Local_u32PrevTick = TMU_u32OsTicks;
			for(s8 i = MAX_TASKS-1 ; i>=0 ; i--)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	81 50       	subi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	88 23       	and	r24, r24
    12b6:	0c f0       	brlt	.+2      	; 0x12ba <TMU_vidStartScheduler+0x16a>
    12b8:	7b cf       	rjmp	.-266    	; 0x11b0 <TMU_vidStartScheduler+0x60>
    12ba:	5a cf       	rjmp	.-332    	; 0x1170 <TMU_vidStartScheduler+0x20>

000012bc <TMU_vidDeleteTask>:
	}
}


void TMU_vidDeleteTask(u8 Copy_u8Priority)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	0f 92       	push	r0
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	89 30       	cpi	r24, 0x09	; 9
    12cc:	e0 f4       	brcc	.+56     	; 0x1306 <TMU_vidDeleteTask+0x4a>
	{
		All_Tasks[Copy_u8Priority].pFun = NULL;
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	fc 01       	movw	r30, r24
    12e2:	ee 52       	subi	r30, 0x2E	; 46
    12e4:	fe 4f       	sbci	r31, 0xFE	; 254
    12e6:	11 82       	std	Z+1, r1	; 0x01
    12e8:	10 82       	st	Z, r1
		All_Tasks[ Copy_u8Priority].state = KILLED;
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	88 2f       	mov	r24, r24
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	fc 01       	movw	r30, r24
    12fe:	e8 52       	subi	r30, 0x28	; 40
    1300:	fe 4f       	sbci	r31, 0xFE	; 254
    1302:	81 e1       	ldi	r24, 0x11	; 17
    1304:	80 83       	st	Z, r24
	}
}
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <TMU_vidPauseTask>:

void TMU_vidPauseTask(u8 Copy_u8Priority)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	0f 92       	push	r0
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	89 30       	cpi	r24, 0x09	; 9
    131e:	70 f4       	brcc	.+28     	; 0x133c <TMU_vidPauseTask+0x2e>
	{
		All_Tasks[Copy_u8Priority].state = PAUSED;
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	fc 01       	movw	r30, r24
    1334:	e8 52       	subi	r30, 0x28	; 40
    1336:	fe 4f       	sbci	r31, 0xFE	; 254
    1338:	88 e3       	ldi	r24, 0x38	; 56
    133a:	80 83       	st	Z, r24
	}
}
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <TMU_vidResumeTask>:

void TMU_vidResumeTask(u8 Copy_u8Priority)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	0f 92       	push	r0
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	89 30       	cpi	r24, 0x09	; 9
    1354:	70 f4       	brcc	.+28     	; 0x1372 <TMU_vidResumeTask+0x2e>
	{
		All_Tasks[Copy_u8Priority].state = READY;
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	fc 01       	movw	r30, r24
    136a:	e8 52       	subi	r30, 0x28	; 40
    136c:	fe 4f       	sbci	r31, 0xFE	; 254
    136e:	87 e1       	ldi	r24, 0x17	; 23
    1370:	80 83       	st	Z, r24
	}
}
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <TMU_vid_OCIE0_ISR>:

#if TIMER_CHANNEL == TIMER0

void TMU_vid_OCIE0_ISR (void)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
    1382:	80 91 1b 02 	lds	r24, 0x021B
    1386:	81 50       	subi	r24, 0x01	; 1
    1388:	80 93 1b 02 	sts	0x021B, r24
	if ( ! TMU_u8ISRCount)
    138c:	80 91 1b 02 	lds	r24, 0x021B
    1390:	88 23       	and	r24, r24
    1392:	b9 f4       	brne	.+46     	; 0x13c2 <TMU_vid_OCIE0_ISR+0x48>
	{
		TMU_u32OsTicks++;
    1394:	80 91 1d 02 	lds	r24, 0x021D
    1398:	90 91 1e 02 	lds	r25, 0x021E
    139c:	a0 91 1f 02 	lds	r26, 0x021F
    13a0:	b0 91 20 02 	lds	r27, 0x0220
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	a1 1d       	adc	r26, r1
    13a8:	b1 1d       	adc	r27, r1
    13aa:	80 93 1d 02 	sts	0x021D, r24
    13ae:	90 93 1e 02 	sts	0x021E, r25
    13b2:	a0 93 1f 02 	sts	0x021F, r26
    13b6:	b0 93 20 02 	sts	0x0220, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
    13ba:	80 91 1a 02 	lds	r24, 0x021A
    13be:	80 93 1b 02 	sts	0x021B, r24
	}
}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <TMU_vid_TOIE0_ISR>:

void TMU_vid_TOIE0_ISR(void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
    13d0:	80 91 1b 02 	lds	r24, 0x021B
    13d4:	81 50       	subi	r24, 0x01	; 1
    13d6:	80 93 1b 02 	sts	0x021B, r24
	if ( ! TMU_u8ISRCount)
    13da:	80 91 1b 02 	lds	r24, 0x021B
    13de:	88 23       	and	r24, r24
    13e0:	e1 f4       	brne	.+56     	; 0x141a <TMU_vid_TOIE0_ISR+0x52>
	{
		TCNT0 = TMU_u8Preload;
    13e2:	e2 e5       	ldi	r30, 0x52	; 82
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 91 1c 02 	lds	r24, 0x021C
    13ea:	80 83       	st	Z, r24

		TMU_u32OsTicks++;
    13ec:	80 91 1d 02 	lds	r24, 0x021D
    13f0:	90 91 1e 02 	lds	r25, 0x021E
    13f4:	a0 91 1f 02 	lds	r26, 0x021F
    13f8:	b0 91 20 02 	lds	r27, 0x0220
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	a1 1d       	adc	r26, r1
    1400:	b1 1d       	adc	r27, r1
    1402:	80 93 1d 02 	sts	0x021D, r24
    1406:	90 93 1e 02 	sts	0x021E, r25
    140a:	a0 93 1f 02 	sts	0x021F, r26
    140e:	b0 93 20 02 	sts	0x0220, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
    1412:	80 91 1a 02 	lds	r24, 0x021A
    1416:	80 93 1b 02 	sts	0x021B, r24
	}
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <Timer_enuInit>:
																		{ OCIE2 ,	NULL},
																	};


ES_t Timer_enuInit( void )
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	28 97       	sbiw	r28, 0x08	; 8
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ClkSelect ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    1438:	19 82       	std	Y+1, r1	; 0x01
    143a:	72 c1       	rjmp	.+740    	; 0x1720 <Timer_enuInit+0x300>
	{
		Global_u32Timer0_Clk = Timer_u32TimerClock( Timers[Local_u8Iter].TimerNum , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	c9 01       	movw	r24, r18
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19
    1450:	fc 01       	movw	r30, r24
    1452:	e5 59       	subi	r30, 0x95	; 149
    1454:	fe 4f       	sbci	r31, 0xFE	; 254
    1456:	40 81       	ld	r20, Z
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	c9 01       	movw	r24, r18
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	fc 01       	movw	r30, r24
    146e:	e4 59       	subi	r30, 0x94	; 148
    1470:	fe 4f       	sbci	r31, 0xFE	; 254
    1472:	90 81       	ld	r25, Z
    1474:	9e 01       	movw	r18, r28
    1476:	2d 5f       	subi	r18, 0xFD	; 253
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	84 2f       	mov	r24, r20
    147c:	69 2f       	mov	r22, r25
    147e:	a9 01       	movw	r20, r18
    1480:	0e 94 a7 0b 	call	0x174e	; 0x174e <Timer_u32TimerClock>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	80 93 23 02 	sts	0x0223, r24
    148c:	90 93 24 02 	sts	0x0224, r25
    1490:	a0 93 25 02 	sts	0x0225, r26
    1494:	b0 93 26 02 	sts	0x0226, r27
		if( Timers[Local_u8Iter].TimerNum == TIMER0)
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	c9 01       	movw	r24, r18
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	88 0f       	add	r24, r24
    14a6:	99 1f       	adc	r25, r25
    14a8:	82 0f       	add	r24, r18
    14aa:	93 1f       	adc	r25, r19
    14ac:	fc 01       	movw	r30, r24
    14ae:	e5 59       	subi	r30, 0x95	; 149
    14b0:	fe 4f       	sbci	r31, 0xFE	; 254
    14b2:	80 81       	ld	r24, Z
    14b4:	88 3c       	cpi	r24, 0xC8	; 200
    14b6:	09 f0       	breq	.+2      	; 0x14ba <Timer_enuInit+0x9a>
    14b8:	8e c0       	rjmp	.+284    	; 0x15d6 <Timer_enuInit+0x1b6>
		{
			TIMSK &= ~( TC0_INT_EN_MASK ) ;			// Disable All Interrupts before setting all conditions
    14ba:	a9 e5       	ldi	r26, 0x59	; 89
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e9 e5       	ldi	r30, 0x59	; 89
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	8c 7f       	andi	r24, 0xFC	; 252
    14c6:	8c 93       	st	X, r24
			TCCR0 = 0x00 ;							// Masks all bits in TCCR0
    14c8:	e3 e5       	ldi	r30, 0x53	; 83
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	10 82       	st	Z, r1
			OCR0  = 0x00 ;							// Clears Output Compare Register
    14ce:	ec e5       	ldi	r30, 0x5C	; 92
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	10 82       	st	Z, r1
			/*	Set Clock Selection	*/
//			Global_u32Timer0_Clk = Timer_u32TimerClock( TIMER0 , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
			TCCR0 |= ( Local_u8ClkSelect  << CLK0_SEL_BITS );
    14d4:	a3 e5       	ldi	r26, 0x53	; 83
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e3 e5       	ldi	r30, 0x53	; 83
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	90 81       	ld	r25, Z
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	89 2b       	or	r24, r25
    14e2:	8c 93       	st	X, r24
			/*	Set Compare Output Mode	*/
			TCCR0 |= ( ( Timers[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COMP0_MAT_OUT_MODE_BITS );
    14e4:	a3 e5       	ldi	r26, 0x53	; 83
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e3 e5       	ldi	r30, 0x53	; 83
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	c9 01       	movw	r24, r18
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	fc 01       	movw	r30, r24
    1506:	e3 59       	subi	r30, 0x93	; 147
    1508:	fe 4f       	sbci	r31, 0xFE	; 254
    150a:	80 81       	ld	r24, Z
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	44 97       	sbiw	r24, 0x14	; 20
    1512:	82 95       	swap	r24
    1514:	92 95       	swap	r25
    1516:	90 7f       	andi	r25, 0xF0	; 240
    1518:	98 27       	eor	r25, r24
    151a:	80 7f       	andi	r24, 0xF0	; 240
    151c:	98 27       	eor	r25, r24
    151e:	84 2b       	or	r24, r20
    1520:	8c 93       	st	X, r24
			/*	Set Waveform Generation Mode	*/
			if( Timers[Local_u8Iter].WaveGenMode == WGM_NORMAL_MODE	)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	c9 01       	movw	r24, r18
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	fc 01       	movw	r30, r24
    1538:	e2 59       	subi	r30, 0x92	; 146
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	80 81       	ld	r24, Z
    153e:	8e 31       	cpi	r24, 0x1E	; 30
    1540:	d1 f0       	breq	.+52     	; 0x1576 <Timer_enuInit+0x156>
			{
				//NO ACTION NEEDED
			}
			else if( Timers[Local_u8Iter].WaveGenMode == WGM_CTC_MODE )
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	c9 01       	movw	r24, r18
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	82 0f       	add	r24, r18
    1554:	93 1f       	adc	r25, r19
    1556:	fc 01       	movw	r30, r24
    1558:	e2 59       	subi	r30, 0x92	; 146
    155a:	fe 4f       	sbci	r31, 0xFE	; 254
    155c:	80 81       	ld	r24, Z
    155e:	80 32       	cpi	r24, 0x20	; 32
    1560:	41 f4       	brne	.+16     	; 0x1572 <Timer_enuInit+0x152>
			{
				SET_BIT( TCCR0 , WGM01_BIT ) ;
    1562:	a3 e5       	ldi	r26, 0x53	; 83
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e3 e5       	ldi	r30, 0x53	; 83
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	88 60       	ori	r24, 0x08	; 8
    156e:	8c 93       	st	X, r24
    1570:	02 c0       	rjmp	.+4      	; 0x1576 <Timer_enuInit+0x156>
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	8a 83       	std	Y+2, r24	; 0x02
				#warning "Timer_Init(): Non Supported Waveform Gen mode for Timer0. Timer0 WGM is set to WGM_NORMAL_MODE"
			}
			/*	Set Interrupt Mode	*/
			switch( Timers[Local_u8Iter].InterruptMode )
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	c9 01       	movw	r24, r18
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	82 0f       	add	r24, r18
    1588:	93 1f       	adc	r25, r19
    158a:	fc 01       	movw	r30, r24
    158c:	e1 59       	subi	r30, 0x91	; 145
    158e:	fe 4f       	sbci	r31, 0xFE	; 254
    1590:	80 81       	ld	r24, Z
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	38 87       	std	Y+8, r19	; 0x08
    1598:	2f 83       	std	Y+7, r18	; 0x07
    159a:	8f 81       	ldd	r24, Y+7	; 0x07
    159c:	98 85       	ldd	r25, Y+8	; 0x08
    159e:	89 32       	cpi	r24, 0x29	; 41
    15a0:	91 05       	cpc	r25, r1
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <Timer_enuInit+0x190>
    15a4:	2f 81       	ldd	r18, Y+7	; 0x07
    15a6:	38 85       	ldd	r19, Y+8	; 0x08
    15a8:	2a 32       	cpi	r18, 0x2A	; 42
    15aa:	31 05       	cpc	r19, r1
    15ac:	49 f0       	breq	.+18     	; 0x15c0 <Timer_enuInit+0x1a0>
    15ae:	10 c0       	rjmp	.+32     	; 0x15d0 <Timer_enuInit+0x1b0>
			{
				case TC_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE0_BIT );	/*	Enable TOIE0 Interrupt */
    15b0:	a9 e5       	ldi	r26, 0x59	; 89
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e9 e5       	ldi	r30, 0x59	; 89
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	8c 93       	st	X, r24
    15be:	ad c0       	rjmp	.+346    	; 0x171a <Timer_enuInit+0x2fa>
											break;
				case TC_OUT_COMP_INT	:	SET_BIT( TIMSK , OCIE0_BIT );	/*	Enable OCIE0 Interrupt */
    15c0:	a9 e5       	ldi	r26, 0x59	; 89
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e9 e5       	ldi	r30, 0x59	; 89
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	82 60       	ori	r24, 0x02	; 2
    15cc:	8c 93       	st	X, r24
    15ce:	a5 c0       	rjmp	.+330    	; 0x171a <Timer_enuInit+0x2fa>
											break;

				default :	Local_enuErrorState = ES_OUT_RANGE ;
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	8a 83       	std	Y+2, r24	; 0x02
    15d4:	a2 c0       	rjmp	.+324    	; 0x171a <Timer_enuInit+0x2fa>
							#warning " Timer_Init(): Non Supported Interrupt mode for Timer0. Timer0 Interrupts are Disabled"
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else if( Timers[Local_u8Iter].TimerNum == TIMER2)
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	c9 01       	movw	r24, r18
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	82 0f       	add	r24, r18
    15e8:	93 1f       	adc	r25, r19
    15ea:	fc 01       	movw	r30, r24
    15ec:	e5 59       	subi	r30, 0x95	; 149
    15ee:	fe 4f       	sbci	r31, 0xFE	; 254
    15f0:	80 81       	ld	r24, Z
    15f2:	8b 3c       	cpi	r24, 0xCB	; 203
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <Timer_enuInit+0x1d8>
    15f6:	8e c0       	rjmp	.+284    	; 0x1714 <Timer_enuInit+0x2f4>
		{
			TIMSK &= ~( TC2_INT_EN_MASK ) ;			// Disable All Interrupts before setting all conditions
    15f8:	a9 e5       	ldi	r26, 0x59	; 89
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e9 e5       	ldi	r30, 0x59	; 89
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	8f 73       	andi	r24, 0x3F	; 63
    1604:	8c 93       	st	X, r24
			TCCR2 = 0x00 ;							// Masks all bits in TCCR2
    1606:	e5 e4       	ldi	r30, 0x45	; 69
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	10 82       	st	Z, r1
			OCR2  = 0x00 ;							// Clears Output Compare Register
    160c:	e3 e4       	ldi	r30, 0x43	; 67
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	10 82       	st	Z, r1

			/*	Set Clock Selection	*/
//			Global_u32Timer2_Clk = Timer_u32TimerClock( TIMER2 , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
			TCCR2 |= ( Local_u8ClkSelect << CLK2_SEL_BITS );
    1612:	a5 e4       	ldi	r26, 0x45	; 69
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	e5 e4       	ldi	r30, 0x45	; 69
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	90 81       	ld	r25, Z
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	89 2b       	or	r24, r25
    1620:	8c 93       	st	X, r24
			/*	Set Compare Output Mode	*/
			TCCR2 |= ( ( Timers[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COMP2_MAT_OUT_MODE_BITS );
    1622:	a5 e4       	ldi	r26, 0x45	; 69
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e4       	ldi	r30, 0x45	; 69
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	c9 01       	movw	r24, r18
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	82 0f       	add	r24, r18
    1640:	93 1f       	adc	r25, r19
    1642:	fc 01       	movw	r30, r24
    1644:	e3 59       	subi	r30, 0x93	; 147
    1646:	fe 4f       	sbci	r31, 0xFE	; 254
    1648:	80 81       	ld	r24, Z
    164a:	88 2f       	mov	r24, r24
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	44 97       	sbiw	r24, 0x14	; 20
    1650:	82 95       	swap	r24
    1652:	92 95       	swap	r25
    1654:	90 7f       	andi	r25, 0xF0	; 240
    1656:	98 27       	eor	r25, r24
    1658:	80 7f       	andi	r24, 0xF0	; 240
    165a:	98 27       	eor	r25, r24
    165c:	84 2b       	or	r24, r20
    165e:	8c 93       	st	X, r24
			/*	Set Waveform Generation Mode	*/
			if( Timers[Local_u8Iter].WaveGenMode == WGM_NORMAL_MODE )
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	c9 01       	movw	r24, r18
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	82 0f       	add	r24, r18
    1672:	93 1f       	adc	r25, r19
    1674:	fc 01       	movw	r30, r24
    1676:	e2 59       	subi	r30, 0x92	; 146
    1678:	fe 4f       	sbci	r31, 0xFE	; 254
    167a:	80 81       	ld	r24, Z
    167c:	8e 31       	cpi	r24, 0x1E	; 30
    167e:	d1 f0       	breq	.+52     	; 0x16b4 <Timer_enuInit+0x294>
			{
				// NO ACTION NEEDED
			}
			else if(Timers[Local_u8Iter].WaveGenMode == WGM_CTC_MODE )
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	c9 01       	movw	r24, r18
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	82 0f       	add	r24, r18
    1692:	93 1f       	adc	r25, r19
    1694:	fc 01       	movw	r30, r24
    1696:	e2 59       	subi	r30, 0x92	; 146
    1698:	fe 4f       	sbci	r31, 0xFE	; 254
    169a:	80 81       	ld	r24, Z
    169c:	80 32       	cpi	r24, 0x20	; 32
    169e:	41 f4       	brne	.+16     	; 0x16b0 <Timer_enuInit+0x290>
			{
				SET_BIT( TCCR2 , WGM21_BIT ) ;
    16a0:	a5 e4       	ldi	r26, 0x45	; 69
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e5 e4       	ldi	r30, 0x45	; 69
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	88 60       	ori	r24, 0x08	; 8
    16ac:	8c 93       	st	X, r24
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <Timer_enuInit+0x294>
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    16b0:	82 e0       	ldi	r24, 0x02	; 2
    16b2:	8a 83       	std	Y+2, r24	; 0x02
				#warning "Timer_Init(): Non Supported Waveform Gen mode for Timer2. Timer2 WGM is set to WGM_NORMAL_MODE"
			}
			/*	Set Interrupt Mode	*/
			switch( Timers[Local_u8Iter].InterruptMode )
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	c9 01       	movw	r24, r18
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	fc 01       	movw	r30, r24
    16ca:	e1 59       	subi	r30, 0x91	; 145
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	3e 83       	std	Y+6, r19	; 0x06
    16d6:	2d 83       	std	Y+5, r18	; 0x05
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	9e 81       	ldd	r25, Y+6	; 0x06
    16dc:	89 32       	cpi	r24, 0x29	; 41
    16de:	91 05       	cpc	r25, r1
    16e0:	31 f0       	breq	.+12     	; 0x16ee <Timer_enuInit+0x2ce>
    16e2:	2d 81       	ldd	r18, Y+5	; 0x05
    16e4:	3e 81       	ldd	r19, Y+6	; 0x06
    16e6:	2a 32       	cpi	r18, 0x2A	; 42
    16e8:	31 05       	cpc	r19, r1
    16ea:	49 f0       	breq	.+18     	; 0x16fe <Timer_enuInit+0x2de>
    16ec:	10 c0       	rjmp	.+32     	; 0x170e <Timer_enuInit+0x2ee>
			{
				case TC_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE2_BIT );	/*	Enable TOIE2 Interrupt */
    16ee:	a9 e5       	ldi	r26, 0x59	; 89
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e9 e5       	ldi	r30, 0x59	; 89
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	80 64       	ori	r24, 0x40	; 64
    16fa:	8c 93       	st	X, r24
    16fc:	0e c0       	rjmp	.+28     	; 0x171a <Timer_enuInit+0x2fa>
											break;
				case TC_OUT_COMP_INT	:	SET_BIT( TIMSK , OCIE2_BIT );	/*	Enable OCIE2 Interrupt */
    16fe:	a9 e5       	ldi	r26, 0x59	; 89
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e9 e5       	ldi	r30, 0x59	; 89
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 68       	ori	r24, 0x80	; 128
    170a:	8c 93       	st	X, r24
    170c:	06 c0       	rjmp	.+12     	; 0x171a <Timer_enuInit+0x2fa>
											break;

				default :	Local_enuErrorState = ES_OUT_RANGE ;
    170e:	82 e0       	ldi	r24, 0x02	; 2
    1710:	8a 83       	std	Y+2, r24	; 0x02
    1712:	03 c0       	rjmp	.+6      	; 0x171a <Timer_enuInit+0x2fa>
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE ;
    1714:	82 e0       	ldi	r24, 0x02	; 2
    1716:	8a 83       	std	Y+2, r24	; 0x02
    1718:	09 c0       	rjmp	.+18     	; 0x172c <Timer_enuInit+0x30c>
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	90 91 68 01 	lds	r25, 0x0168
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	89 17       	cp	r24, r25
    1728:	08 f4       	brcc	.+2      	; 0x172c <Timer_enuInit+0x30c>
    172a:	88 ce       	rjmp	.-752    	; 0x143c <Timer_enuInit+0x1c>
			#warning " Timer_Init(): Non Supported Timer Number , Initialization is terminated."
			break;
		}
	}

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	19 f0       	breq	.+6      	; 0x1738 <Timer_enuInit+0x318>
    1732:	3a 81       	ldd	r19, Y+2	; 0x02
    1734:	3c 83       	std	Y+4, r19	; 0x04
    1736:	01 c0       	rjmp	.+2      	; 0x173a <Timer_enuInit+0x31a>
    1738:	1c 82       	std	Y+4, r1	; 0x04
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    173c:	28 96       	adiw	r28, 0x08	; 8
    173e:	0f b6       	in	r0, 0x3f	; 63
    1740:	f8 94       	cli
    1742:	de bf       	out	0x3e, r29	; 62
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	cd bf       	out	0x3d, r28	; 61
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <Timer_u32TimerClock>:

static u32 Timer_u32TimerClock( u8 Copy_u8TimerNum ,u8 Copy_u8ClkSelectNum ,u8 *Copy_pu8ClkSelectPrescalar )
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	2a 97       	sbiw	r28, 0x0a	; 10
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	6e 83       	std	Y+6, r22	; 0x06
    1766:	58 87       	std	Y+8, r21	; 0x08
    1768:	4f 83       	std	Y+7, r20	; 0x07
	u32 Copy_u32TimerClk = CPU_CLOCK;
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	94 e2       	ldi	r25, 0x24	; 36
    176e:	a4 ef       	ldi	r26, 0xF4	; 244
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	ab 83       	std	Y+3, r26	; 0x03
    1778:	bc 83       	std	Y+4, r27	; 0x04


	switch( Copy_u8ClkSelectNum )
    177a:	8e 81       	ldd	r24, Y+6	; 0x06
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3a 87       	std	Y+10, r19	; 0x0a
    1782:	29 87       	std	Y+9, r18	; 0x09
    1784:	89 85       	ldd	r24, Y+9	; 0x09
    1786:	9a 85       	ldd	r25, Y+10	; 0x0a
    1788:	8e 30       	cpi	r24, 0x0E	; 14
    178a:	91 05       	cpc	r25, r1
    178c:	09 f4       	brne	.+2      	; 0x1790 <Timer_u32TimerClock+0x42>
    178e:	81 c0       	rjmp	.+258    	; 0x1892 <Timer_u32TimerClock+0x144>
    1790:	29 85       	ldd	r18, Y+9	; 0x09
    1792:	3a 85       	ldd	r19, Y+10	; 0x0a
    1794:	2f 30       	cpi	r18, 0x0F	; 15
    1796:	31 05       	cpc	r19, r1
    1798:	ec f4       	brge	.+58     	; 0x17d4 <Timer_u32TimerClock+0x86>
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	8b 30       	cpi	r24, 0x0B	; 11
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <Timer_u32TimerClock+0x58>
    17a4:	44 c0       	rjmp	.+136    	; 0x182e <Timer_u32TimerClock+0xe0>
    17a6:	29 85       	ldd	r18, Y+9	; 0x09
    17a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    17aa:	2c 30       	cpi	r18, 0x0C	; 12
    17ac:	31 05       	cpc	r19, r1
    17ae:	34 f4       	brge	.+12     	; 0x17bc <Timer_u32TimerClock+0x6e>
    17b0:	89 85       	ldd	r24, Y+9	; 0x09
    17b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b4:	8a 30       	cpi	r24, 0x0A	; 10
    17b6:	91 05       	cpc	r25, r1
    17b8:	91 f1       	breq	.+100    	; 0x181e <Timer_u32TimerClock+0xd0>
    17ba:	f7 c0       	rjmp	.+494    	; 0x19aa <Timer_u32TimerClock+0x25c>
    17bc:	29 85       	ldd	r18, Y+9	; 0x09
    17be:	3a 85       	ldd	r19, Y+10	; 0x0a
    17c0:	2c 30       	cpi	r18, 0x0C	; 12
    17c2:	31 05       	cpc	r19, r1
    17c4:	c9 f1       	breq	.+114    	; 0x1838 <Timer_u32TimerClock+0xea>
    17c6:	89 85       	ldd	r24, Y+9	; 0x09
    17c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ca:	8d 30       	cpi	r24, 0x0D	; 13
    17cc:	91 05       	cpc	r25, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <Timer_u32TimerClock+0x84>
    17d0:	48 c0       	rjmp	.+144    	; 0x1862 <Timer_u32TimerClock+0x114>
    17d2:	eb c0       	rjmp	.+470    	; 0x19aa <Timer_u32TimerClock+0x25c>
    17d4:	29 85       	ldd	r18, Y+9	; 0x09
    17d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    17d8:	21 31       	cpi	r18, 0x11	; 17
    17da:	31 05       	cpc	r19, r1
    17dc:	09 f4       	brne	.+2      	; 0x17e0 <Timer_u32TimerClock+0x92>
    17de:	a7 c0       	rjmp	.+334    	; 0x192e <Timer_u32TimerClock+0x1e0>
    17e0:	89 85       	ldd	r24, Y+9	; 0x09
    17e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e4:	82 31       	cpi	r24, 0x12	; 18
    17e6:	91 05       	cpc	r25, r1
    17e8:	6c f4       	brge	.+26     	; 0x1804 <Timer_u32TimerClock+0xb6>
    17ea:	29 85       	ldd	r18, Y+9	; 0x09
    17ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ee:	2f 30       	cpi	r18, 0x0F	; 15
    17f0:	31 05       	cpc	r19, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <Timer_u32TimerClock+0xa8>
    17f4:	6b c0       	rjmp	.+214    	; 0x18cc <Timer_u32TimerClock+0x17e>
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	80 31       	cpi	r24, 0x10	; 16
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <Timer_u32TimerClock+0xb4>
    1800:	7d c0       	rjmp	.+250    	; 0x18fc <Timer_u32TimerClock+0x1ae>
    1802:	d3 c0       	rjmp	.+422    	; 0x19aa <Timer_u32TimerClock+0x25c>
    1804:	29 85       	ldd	r18, Y+9	; 0x09
    1806:	3a 85       	ldd	r19, Y+10	; 0x0a
    1808:	22 31       	cpi	r18, 0x12	; 18
    180a:	31 05       	cpc	r19, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <Timer_u32TimerClock+0xc2>
    180e:	ad c0       	rjmp	.+346    	; 0x196a <Timer_u32TimerClock+0x21c>
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	83 31       	cpi	r24, 0x13	; 19
    1816:	91 05       	cpc	r25, r1
    1818:	09 f4       	brne	.+2      	; 0x181c <Timer_u32TimerClock+0xce>
    181a:	b7 c0       	rjmp	.+366    	; 0x198a <Timer_u32TimerClock+0x23c>
    181c:	c6 c0       	rjmp	.+396    	; 0x19aa <Timer_u32TimerClock+0x25c>
	{
		case NO_CLK		:	*Copy_pu8ClkSelectPrescalar = 0;
    181e:	ef 81       	ldd	r30, Y+7	; 0x07
    1820:	f8 85       	ldd	r31, Y+8	; 0x08
    1822:	10 82       	st	Z, r1
							Copy_u32TimerClk = 0 ;
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	1a 82       	std	Y+2, r1	; 0x02
    1828:	1b 82       	std	Y+3, r1	; 0x03
    182a:	1c 82       	std	Y+4, r1	; 0x04
    182c:	c2 c0       	rjmp	.+388    	; 0x19b2 <Timer_u32TimerClock+0x264>
							break;
		case PRES_1		:	*Copy_pu8ClkSelectPrescalar = 1;
    182e:	ef 81       	ldd	r30, Y+7	; 0x07
    1830:	f8 85       	ldd	r31, Y+8	; 0x08
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 83       	st	Z, r24
    1836:	bd c0       	rjmp	.+378    	; 0x19b2 <Timer_u32TimerClock+0x264>
						break;
		case PRES_8 	:	*Copy_pu8ClkSelectPrescalar = 2;
    1838:	ef 81       	ldd	r30, Y+7	; 0x07
    183a:	f8 85       	ldd	r31, Y+8	; 0x08
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	80 83       	st	Z, r24
							Copy_u32TimerClk >>= 3 ;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	ab 81       	ldd	r26, Y+3	; 0x03
    1846:	bc 81       	ldd	r27, Y+4	; 0x04
    1848:	68 94       	set
    184a:	12 f8       	bld	r1, 2
    184c:	b6 95       	lsr	r27
    184e:	a7 95       	ror	r26
    1850:	97 95       	ror	r25
    1852:	87 95       	ror	r24
    1854:	16 94       	lsr	r1
    1856:	d1 f7       	brne	.-12     	; 0x184c <Timer_u32TimerClock+0xfe>
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	9a 83       	std	Y+2, r25	; 0x02
    185c:	ab 83       	std	Y+3, r26	; 0x03
    185e:	bc 83       	std	Y+4, r27	; 0x04
    1860:	a8 c0       	rjmp	.+336    	; 0x19b2 <Timer_u32TimerClock+0x264>
						break;
		case PRES_32 	:	if( Copy_u8TimerNum == TIMER2 )
    1862:	8d 81       	ldd	r24, Y+5	; 0x05
    1864:	8b 3c       	cpi	r24, 0xCB	; 203
    1866:	a9 f4       	brne	.+42     	; 0x1892 <Timer_u32TimerClock+0x144>
							{
								*Copy_pu8ClkSelectPrescalar = 3;
    1868:	ef 81       	ldd	r30, Y+7	; 0x07
    186a:	f8 85       	ldd	r31, Y+8	; 0x08
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	80 83       	st	Z, r24
								Copy_u32TimerClk >>= 5 ;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	9a 81       	ldd	r25, Y+2	; 0x02
    1874:	ab 81       	ldd	r26, Y+3	; 0x03
    1876:	bc 81       	ldd	r27, Y+4	; 0x04
    1878:	68 94       	set
    187a:	14 f8       	bld	r1, 4
    187c:	b6 95       	lsr	r27
    187e:	a7 95       	ror	r26
    1880:	97 95       	ror	r25
    1882:	87 95       	ror	r24
    1884:	16 94       	lsr	r1
    1886:	d1 f7       	brne	.-12     	; 0x187c <Timer_u32TimerClock+0x12e>
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	ab 83       	std	Y+3, r26	; 0x03
    188e:	bc 83       	std	Y+4, r27	; 0x04
    1890:	90 c0       	rjmp	.+288    	; 0x19b2 <Timer_u32TimerClock+0x264>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_64"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
		case PRES_64 	:	Copy_u32TimerClk >>= 6 ;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	9a 81       	ldd	r25, Y+2	; 0x02
    1896:	ab 81       	ldd	r26, Y+3	; 0x03
    1898:	bc 81       	ldd	r27, Y+4	; 0x04
    189a:	68 94       	set
    189c:	15 f8       	bld	r1, 5
    189e:	b6 95       	lsr	r27
    18a0:	a7 95       	ror	r26
    18a2:	97 95       	ror	r25
    18a4:	87 95       	ror	r24
    18a6:	16 94       	lsr	r1
    18a8:	d1 f7       	brne	.-12     	; 0x189e <Timer_u32TimerClock+0x150>
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	ab 83       	std	Y+3, r26	; 0x03
    18b0:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 4;
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	8b 3c       	cpi	r24, 0xCB	; 203
    18b6:	29 f4       	brne	.+10     	; 0x18c2 <Timer_u32TimerClock+0x174>
    18b8:	ef 81       	ldd	r30, Y+7	; 0x07
    18ba:	f8 85       	ldd	r31, Y+8	; 0x08
    18bc:	84 e0       	ldi	r24, 0x04	; 4
    18be:	80 83       	st	Z, r24
    18c0:	78 c0       	rjmp	.+240    	; 0x19b2 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 3;
    18c2:	ef 81       	ldd	r30, Y+7	; 0x07
    18c4:	f8 85       	ldd	r31, Y+8	; 0x08
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	80 83       	st	Z, r24
    18ca:	73 c0       	rjmp	.+230    	; 0x19b2 <Timer_u32TimerClock+0x264>
						break;
		case PRES_128 	:	if( Copy_u8TimerNum == TIMER2 )
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	8b 3c       	cpi	r24, 0xCB	; 203
    18d0:	a9 f4       	brne	.+42     	; 0x18fc <Timer_u32TimerClock+0x1ae>
							{
								*Copy_pu8ClkSelectPrescalar = 5;
    18d2:	ef 81       	ldd	r30, Y+7	; 0x07
    18d4:	f8 85       	ldd	r31, Y+8	; 0x08
    18d6:	85 e0       	ldi	r24, 0x05	; 5
    18d8:	80 83       	st	Z, r24
								Copy_u32TimerClk >>= 7 ;
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	9a 81       	ldd	r25, Y+2	; 0x02
    18de:	ab 81       	ldd	r26, Y+3	; 0x03
    18e0:	bc 81       	ldd	r27, Y+4	; 0x04
    18e2:	68 94       	set
    18e4:	16 f8       	bld	r1, 6
    18e6:	b6 95       	lsr	r27
    18e8:	a7 95       	ror	r26
    18ea:	97 95       	ror	r25
    18ec:	87 95       	ror	r24
    18ee:	16 94       	lsr	r1
    18f0:	d1 f7       	brne	.-12     	; 0x18e6 <Timer_u32TimerClock+0x198>
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	9a 83       	std	Y+2, r25	; 0x02
    18f6:	ab 83       	std	Y+3, r26	; 0x03
    18f8:	bc 83       	std	Y+4, r27	; 0x04
    18fa:	5b c0       	rjmp	.+182    	; 0x19b2 <Timer_u32TimerClock+0x264>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_256"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
		case PRES_256	 :	Copy_u32TimerClk >>= 8 ;
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	ab 81       	ldd	r26, Y+3	; 0x03
    1902:	bc 81       	ldd	r27, Y+4	; 0x04
    1904:	89 2f       	mov	r24, r25
    1906:	9a 2f       	mov	r25, r26
    1908:	ab 2f       	mov	r26, r27
    190a:	bb 27       	eor	r27, r27
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	9a 83       	std	Y+2, r25	; 0x02
    1910:	ab 83       	std	Y+3, r26	; 0x03
    1912:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 6;
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	8b 3c       	cpi	r24, 0xCB	; 203
    1918:	29 f4       	brne	.+10     	; 0x1924 <Timer_u32TimerClock+0x1d6>
    191a:	ef 81       	ldd	r30, Y+7	; 0x07
    191c:	f8 85       	ldd	r31, Y+8	; 0x08
    191e:	86 e0       	ldi	r24, 0x06	; 6
    1920:	80 83       	st	Z, r24
    1922:	47 c0       	rjmp	.+142    	; 0x19b2 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 4;
    1924:	ef 81       	ldd	r30, Y+7	; 0x07
    1926:	f8 85       	ldd	r31, Y+8	; 0x08
    1928:	84 e0       	ldi	r24, 0x04	; 4
    192a:	80 83       	st	Z, r24
    192c:	42 c0       	rjmp	.+132    	; 0x19b2 <Timer_u32TimerClock+0x264>
						break;
		case PRES_1024 :	Copy_u32TimerClk >>= 10 ;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	ab 81       	ldd	r26, Y+3	; 0x03
    1934:	bc 81       	ldd	r27, Y+4	; 0x04
    1936:	07 2e       	mov	r0, r23
    1938:	7a e0       	ldi	r23, 0x0A	; 10
    193a:	b6 95       	lsr	r27
    193c:	a7 95       	ror	r26
    193e:	97 95       	ror	r25
    1940:	87 95       	ror	r24
    1942:	7a 95       	dec	r23
    1944:	d1 f7       	brne	.-12     	; 0x193a <Timer_u32TimerClock+0x1ec>
    1946:	70 2d       	mov	r23, r0
    1948:	89 83       	std	Y+1, r24	; 0x01
    194a:	9a 83       	std	Y+2, r25	; 0x02
    194c:	ab 83       	std	Y+3, r26	; 0x03
    194e:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 7;
    1950:	8d 81       	ldd	r24, Y+5	; 0x05
    1952:	8b 3c       	cpi	r24, 0xCB	; 203
    1954:	29 f4       	brne	.+10     	; 0x1960 <Timer_u32TimerClock+0x212>
    1956:	ef 81       	ldd	r30, Y+7	; 0x07
    1958:	f8 85       	ldd	r31, Y+8	; 0x08
    195a:	87 e0       	ldi	r24, 0x07	; 7
    195c:	80 83       	st	Z, r24
    195e:	29 c0       	rjmp	.+82     	; 0x19b2 <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 5;
    1960:	ef 81       	ldd	r30, Y+7	; 0x07
    1962:	f8 85       	ldd	r31, Y+8	; 0x08
    1964:	85 e0       	ldi	r24, 0x05	; 5
    1966:	80 83       	st	Z, r24
    1968:	24 c0       	rjmp	.+72     	; 0x19b2 <Timer_u32TimerClock+0x264>
						break;
		case EXT_CLK_FALL	 :		Copy_u32TimerClk = EXT_CLOCK ;
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	9f ef       	ldi	r25, 0xFF	; 255
    196e:	af ef       	ldi	r26, 0xFF	; 255
    1970:	bf ef       	ldi	r27, 0xFF	; 255
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	ab 83       	std	Y+3, r26	; 0x03
    1978:	bc 83       	std	Y+4, r27	; 0x04
									if( Copy_u8TimerNum == TIMER0 )
    197a:	8d 81       	ldd	r24, Y+5	; 0x05
    197c:	88 3c       	cpi	r24, 0xC8	; 200
    197e:	c9 f4       	brne	.+50     	; 0x19b2 <Timer_u32TimerClock+0x264>
									{
										*Copy_pu8ClkSelectPrescalar = 6;
    1980:	ef 81       	ldd	r30, Y+7	; 0x07
    1982:	f8 85       	ldd	r31, Y+8	; 0x08
    1984:	86 e0       	ldi	r24, 0x06	; 6
    1986:	80 83       	st	Z, r24
    1988:	14 c0       	rjmp	.+40     	; 0x19b2 <Timer_u32TimerClock+0x264>
										break;
									}
									#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		case EXT_CLK_RISE	 :		Copy_u32TimerClk = EXT_CLOCK ;
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	9f ef       	ldi	r25, 0xFF	; 255
    198e:	af ef       	ldi	r26, 0xFF	; 255
    1990:	bf ef       	ldi	r27, 0xFF	; 255
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	ab 83       	std	Y+3, r26	; 0x03
    1998:	bc 83       	std	Y+4, r27	; 0x04
									if( Copy_u8TimerNum == TIMER0 )
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	88 3c       	cpi	r24, 0xC8	; 200
    199e:	49 f4       	brne	.+18     	; 0x19b2 <Timer_u32TimerClock+0x264>
									{
										*Copy_pu8ClkSelectPrescalar = 7;
    19a0:	ef 81       	ldd	r30, Y+7	; 0x07
    19a2:	f8 85       	ldd	r31, Y+8	; 0x08
    19a4:	87 e0       	ldi	r24, 0x07	; 7
    19a6:	80 83       	st	Z, r24
    19a8:	04 c0       	rjmp	.+8      	; 0x19b2 <Timer_u32TimerClock+0x264>
										break;
									}
									#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		default:	Copy_u32TimerClk = 0;
    19aa:	19 82       	std	Y+1, r1	; 0x01
    19ac:	1a 82       	std	Y+2, r1	; 0x02
    19ae:	1b 82       	std	Y+3, r1	; 0x03
    19b0:	1c 82       	std	Y+4, r1	; 0x04
					#warning "Unsupported Clock mode is selected , Timer is disabled"
	}

	return Copy_u32TimerClk ;
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	ab 81       	ldd	r26, Y+3	; 0x03
    19b8:	bc 81       	ldd	r27, Y+4	; 0x04

}
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	2a 96       	adiw	r28, 0x0a	; 10
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <Timer_enuSetClkPrescaler>:
	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif

ES_t Timer_enuSetClkPrescaler( u8 Copy_u8TimerNum , u8 Copy_u8PrescalerValue )
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	2a 97       	sbiw	r28, 0x0a	; 10
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	88 87       	std	Y+8, r24	; 0x08
    19e6:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8ClkSelectPrescaler = NO_CLK ;
    19ec:	8a e0       	ldi	r24, 0x0A	; 10
    19ee:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    19f0:	e9 e5       	ldi	r30, 0x59	; 89
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32TimerClk = Timer_u32TimerClock( Copy_u8TimerNum , Copy_u8PrescalerValue , &Local_u8ClkSelectPrescaler ) ;
    19f8:	9e 01       	movw	r18, r28
    19fa:	29 5f       	subi	r18, 0xF9	; 249
    19fc:	3f 4f       	sbci	r19, 0xFF	; 255
    19fe:	88 85       	ldd	r24, Y+8	; 0x08
    1a00:	69 85       	ldd	r22, Y+9	; 0x09
    1a02:	a9 01       	movw	r20, r18
    1a04:	0e 94 a7 0b 	call	0x174e	; 0x174e <Timer_u32TimerClock>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	9a 83       	std	Y+2, r25	; 0x02
    1a10:	ab 83       	std	Y+3, r26	; 0x03
    1a12:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u8TimerNum == TIMER0 )
    1a14:	88 85       	ldd	r24, Y+8	; 0x08
    1a16:	88 3c       	cpi	r24, 0xC8	; 200
    1a18:	19 f5       	brne	.+70     	; 0x1a60 <Timer_enuSetClkPrescaler+0x90>
	{
		TIMSK &= ~( TC0_INT_EN_MASK ) ;								// Disable Timer0 Interrupts
    1a1a:	a9 e5       	ldi	r26, 0x59	; 89
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e9 e5       	ldi	r30, 0x59	; 89
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8c 7f       	andi	r24, 0xFC	; 252
    1a26:	8c 93       	st	X, r24
		TCCR0 &= ~( CLK0_SEL_BITS_MASK ) ;							// Masking Clock Select bits
    1a28:	a3 e5       	ldi	r26, 0x53	; 83
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	e3 e5       	ldi	r30, 0x53	; 83
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	88 7f       	andi	r24, 0xF8	; 248
    1a34:	8c 93       	st	X, r24
		TCCR0 |= ( Local_u8ClkSelectPrescaler  << CLK0_SEL_BITS ) ;	// Setting New Prescaler
    1a36:	a3 e5       	ldi	r26, 0x53	; 83
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e3 e5       	ldi	r30, 0x53	; 83
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	90 81       	ld	r25, Z
    1a40:	8f 81       	ldd	r24, Y+7	; 0x07
    1a42:	89 2b       	or	r24, r25
    1a44:	8c 93       	st	X, r24
		Global_u32Timer0_Clk = Local_u32TimerClk ;					// Saving New Actual Timer0 Clock
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a4c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a4e:	80 93 23 02 	sts	0x0223, r24
    1a52:	90 93 24 02 	sts	0x0224, r25
    1a56:	a0 93 25 02 	sts	0x0225, r26
    1a5a:	b0 93 26 02 	sts	0x0226, r27
    1a5e:	28 c0       	rjmp	.+80     	; 0x1ab0 <Timer_enuSetClkPrescaler+0xe0>
#if Mask
		Timers[ TIMER0 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1a60:	88 85       	ldd	r24, Y+8	; 0x08
    1a62:	8b 3c       	cpi	r24, 0xCB	; 203
    1a64:	19 f5       	brne	.+70     	; 0x1aac <Timer_enuSetClkPrescaler+0xdc>
	{
		TIMSK &= ~( TC2_INT_EN_MASK ) ;								// Disable Timer2 Interrupts
    1a66:	a9 e5       	ldi	r26, 0x59	; 89
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e9 e5       	ldi	r30, 0x59	; 89
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	8f 73       	andi	r24, 0x3F	; 63
    1a72:	8c 93       	st	X, r24
		TCCR2 &= ~( CLK2_SEL_BITS_MASK );							// Masking Clock Select bits
    1a74:	a5 e4       	ldi	r26, 0x45	; 69
    1a76:	b0 e0       	ldi	r27, 0x00	; 0
    1a78:	e5 e4       	ldi	r30, 0x45	; 69
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	88 7f       	andi	r24, 0xF8	; 248
    1a80:	8c 93       	st	X, r24
		TCCR2 |= ( Local_u8ClkSelectPrescaler  << CLK2_SEL_BITS );	// Setting New Prescaler
    1a82:	a5 e4       	ldi	r26, 0x45	; 69
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e5 e4       	ldi	r30, 0x45	; 69
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	90 81       	ld	r25, Z
    1a8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8e:	89 2b       	or	r24, r25
    1a90:	8c 93       	st	X, r24
		Global_u32Timer2_Clk = Local_u32TimerClk ;					// Saving New Actual Timer2 Clock
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	ab 81       	ldd	r26, Y+3	; 0x03
    1a98:	bc 81       	ldd	r27, Y+4	; 0x04
    1a9a:	80 93 27 02 	sts	0x0227, r24
    1a9e:	90 93 28 02 	sts	0x0228, r25
    1aa2:	a0 93 29 02 	sts	0x0229, r26
    1aa6:	b0 93 2a 02 	sts	0x022A, r27
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <Timer_enuSetClkPrescaler+0xe0>
#if Mask
		Timers[ TIMER2 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1aac:	82 e0       	ldi	r24, 0x02	; 2
    1aae:	8e 83       	std	Y+6, r24	; 0x06

	TIMSK = Local_u8CopyTIMSK ;										// Re-setting Timer Interrupt Mask Register to its Status
    1ab0:	e9 e5       	ldi	r30, 0x59	; 89
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <Timer_enuSetClkPrescaler+0xf4>
    1abe:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac0:	8a 87       	std	Y+10, r24	; 0x0a
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <Timer_enuSetClkPrescaler+0xf6>
    1ac4:	1a 86       	std	Y+10, r1	; 0x0a
    1ac6:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1ac8:	2a 96       	adiw	r28, 0x0a	; 10
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <Timer_enuSetOCn_Mode>:
	}
	return Local_enuErrorState ;
}
#endif
ES_t Timer_enuSetOCn_Mode( u8 Copy_u8TimerNum , u8 Copy_u8COM_Mode )
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <Timer_enuSetOCn_Mode+0x6>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <Timer_enuSetOCn_Mode+0x8>
    1ae2:	0f 92       	push	r0
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    1aea:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    1af0:	e9 e5       	ldi	r30, 0x59	; 89
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 )
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	88 3c       	cpi	r24, 0xC8	; 200
    1afc:	09 f5       	brne	.+66     	; 0x1b40 <Timer_enuSetOCn_Mode+0x66>
	{
		TIMSK &= ~( TC0_INT_EN_MASK ) ;													// Disable Timer0 Interrupts
    1afe:	a9 e5       	ldi	r26, 0x59	; 89
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e9 e5       	ldi	r30, 0x59	; 89
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8c 7f       	andi	r24, 0xFC	; 252
    1b0a:	8c 93       	st	X, r24
		TCCR0 &= ~( COMP0_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
    1b0c:	a3 e5       	ldi	r26, 0x53	; 83
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e3 e5       	ldi	r30, 0x53	; 83
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	8f 7c       	andi	r24, 0xCF	; 207
    1b18:	8c 93       	st	X, r24
		TCCR0 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP0_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
    1b1a:	a3 e5       	ldi	r26, 0x53	; 83
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e3 e5       	ldi	r30, 0x53	; 83
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	28 2f       	mov	r18, r24
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	88 2f       	mov	r24, r24
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	44 97       	sbiw	r24, 0x14	; 20
    1b2e:	82 95       	swap	r24
    1b30:	92 95       	swap	r25
    1b32:	90 7f       	andi	r25, 0xF0	; 240
    1b34:	98 27       	eor	r25, r24
    1b36:	80 7f       	andi	r24, 0xF0	; 240
    1b38:	98 27       	eor	r25, r24
    1b3a:	82 2b       	or	r24, r18
    1b3c:	8c 93       	st	X, r24
    1b3e:	26 c0       	rjmp	.+76     	; 0x1b8c <Timer_enuSetOCn_Mode+0xb2>
#if Mask
		Timers[ TIMER0 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
#endif
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	8b 3c       	cpi	r24, 0xCB	; 203
    1b44:	09 f5       	brne	.+66     	; 0x1b88 <Timer_enuSetOCn_Mode+0xae>
	{
		TIMSK &= ~( TC2_INT_EN_MASK ) ;													// Disable Timer2 Interrupts
    1b46:	a9 e5       	ldi	r26, 0x59	; 89
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e9 e5       	ldi	r30, 0x59	; 89
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8f 73       	andi	r24, 0x3F	; 63
    1b52:	8c 93       	st	X, r24
		TCCR2 &= ~( COMP2_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
    1b54:	a5 e4       	ldi	r26, 0x45	; 69
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e5 e4       	ldi	r30, 0x45	; 69
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8f 7c       	andi	r24, 0xCF	; 207
    1b60:	8c 93       	st	X, r24
		TCCR2 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP2_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
    1b62:	a5 e4       	ldi	r26, 0x45	; 69
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e5 e4       	ldi	r30, 0x45	; 69
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	44 97       	sbiw	r24, 0x14	; 20
    1b76:	82 95       	swap	r24
    1b78:	92 95       	swap	r25
    1b7a:	90 7f       	andi	r25, 0xF0	; 240
    1b7c:	98 27       	eor	r25, r24
    1b7e:	80 7f       	andi	r24, 0xF0	; 240
    1b80:	98 27       	eor	r25, r24
    1b82:	82 2b       	or	r24, r18
    1b84:	8c 93       	st	X, r24
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <Timer_enuSetOCn_Mode+0xb2>
#if Mask
		Timers[ TIMER2 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	8a 83       	std	Y+2, r24	; 0x02

	TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    1b8c:	e9 e5       	ldi	r30, 0x59	; 89
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
    1b92:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	81 30       	cpi	r24, 0x01	; 1
    1b98:	19 f0       	breq	.+6      	; 0x1ba0 <Timer_enuSetOCn_Mode+0xc6>
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <Timer_enuSetOCn_Mode+0xc8>
    1ba0:	1d 82       	std	Y+5, r1	; 0x05
    1ba2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <Timer_enuSetTimer_Mode>:
	return Local_enuErrorState ;
}
#endif

ES_t Timer_enuSetTimer_Mode( u8 Copy_u8TimerNum , u8 Copy_u8WGM_Mode )
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	2d 97       	sbiw	r28, 0x0d	; 13
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	8f 83       	std	Y+7, r24	; 0x07
    1bca:	68 87       	std	Y+8, r22	; 0x08
	ES_t Local_enuErrorState = ES_NOK;
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8IntMask , Local_u8TCCR , Local_u8WGM_CTC_Bit ;
	bool ErrorFlag = FALSE ;
    1bd0:	1a 82       	std	Y+2, r1	; 0x02


	if( Copy_u8WGM_Mode == WGM_NORMAL_MODE || Copy_u8WGM_Mode == WGM_CTC_MODE )
    1bd2:	88 85       	ldd	r24, Y+8	; 0x08
    1bd4:	8e 31       	cpi	r24, 0x1E	; 30
    1bd6:	21 f0       	breq	.+8      	; 0x1be0 <Timer_enuSetTimer_Mode+0x2c>
    1bd8:	88 85       	ldd	r24, Y+8	; 0x08
    1bda:	80 32       	cpi	r24, 0x20	; 32
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <Timer_enuSetTimer_Mode+0x2c>
    1bde:	7d c0       	rjmp	.+250    	; 0x1cda <Timer_enuSetTimer_Mode+0x126>
	{
		u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    1be0:	e9 e5       	ldi	r30, 0x59	; 89
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	89 83       	std	Y+1, r24	; 0x01

		switch( Copy_u8TimerNum )
    1be8:	8f 81       	ldd	r24, Y+7	; 0x07
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	3d 87       	std	Y+13, r19	; 0x0d
    1bf0:	2c 87       	std	Y+12, r18	; 0x0c
    1bf2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bf4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bf6:	88 3c       	cpi	r24, 0xC8	; 200
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	31 f0       	breq	.+12     	; 0x1c08 <Timer_enuSetTimer_Mode+0x54>
    1bfc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bfe:	3d 85       	ldd	r19, Y+13	; 0x0d
    1c00:	2b 3c       	cpi	r18, 0xCB	; 203
    1c02:	31 05       	cpc	r19, r1
    1c04:	51 f0       	breq	.+20     	; 0x1c1a <Timer_enuSetTimer_Mode+0x66>
    1c06:	12 c0       	rjmp	.+36     	; 0x1c2c <Timer_enuSetTimer_Mode+0x78>
		{
			case TIMER0 : 	Local_u8IntMask = TC0_INT_EN_MASK ;
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
							Local_u8TCCR = TCCR0 ;
    1c0c:	e3 e5       	ldi	r30, 0x53	; 83
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8c 83       	std	Y+4, r24	; 0x04
							Local_u8WGM_CTC_Bit = WGM01_BIT;
    1c14:	83 e0       	ldi	r24, 0x03	; 3
    1c16:	8b 83       	std	Y+3, r24	; 0x03
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <Timer_enuSetTimer_Mode+0x80>
							break;
			case TIMER2 : 	Local_u8IntMask = TC2_INT_EN_MASK ;
    1c1a:	80 ec       	ldi	r24, 0xC0	; 192
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
							Local_u8TCCR = TCCR2 ;
    1c1e:	e5 e4       	ldi	r30, 0x45	; 69
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8c 83       	std	Y+4, r24	; 0x04
							Local_u8WGM_CTC_Bit = WGM21_BIT ;
    1c26:	83 e0       	ldi	r24, 0x03	; 3
    1c28:	8b 83       	std	Y+3, r24	; 0x03
    1c2a:	04 c0       	rjmp	.+8      	; 0x1c34 <Timer_enuSetTimer_Mode+0x80>
							break;
			default 	: 	Local_enuErrorState = ES_OUT_RANGE ;
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	8e 83       	std	Y+6, r24	; 0x06
							ErrorFlag = TRUE;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	8a 83       	std	Y+2, r24	; 0x02
		}
		if( ErrorFlag == FALSE )
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	88 23       	and	r24, r24
    1c38:	c9 f5       	brne	.+114    	; 0x1cac <Timer_enuSetTimer_Mode+0xf8>
		{
			TIMSK &= ~( Local_u8IntMask );													// Clearing Timer Interrupts while changing Timer mode
    1c3a:	a9 e5       	ldi	r26, 0x59	; 89
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e9 e5       	ldi	r30, 0x59	; 89
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	98 2f       	mov	r25, r24
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	80 95       	com	r24
    1c4a:	89 23       	and	r24, r25
    1c4c:	8c 93       	st	X, r24
			switch ( Copy_u8WGM_Mode )
    1c4e:	88 85       	ldd	r24, Y+8	; 0x08
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	3b 87       	std	Y+11, r19	; 0x0b
    1c56:	2a 87       	std	Y+10, r18	; 0x0a
    1c58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c5c:	8e 31       	cpi	r24, 0x1E	; 30
    1c5e:	91 05       	cpc	r25, r1
    1c60:	31 f0       	breq	.+12     	; 0x1c6e <Timer_enuSetTimer_Mode+0xba>
    1c62:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c64:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c66:	20 32       	cpi	r18, 0x20	; 32
    1c68:	31 05       	cpc	r19, r1
    1c6a:	91 f0       	breq	.+36     	; 0x1c90 <Timer_enuSetTimer_Mode+0xdc>
    1c6c:	1f c0       	rjmp	.+62     	; 0x1cac <Timer_enuSetTimer_Mode+0xf8>
			{
				case WGM_NORMAL_MODE 	: 	CLR_BIT( Local_u8TCCR , Local_u8WGM_CTC_Bit ) ;
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <Timer_enuSetTimer_Mode+0xcc>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <Timer_enuSetTimer_Mode+0xc8>
    1c84:	98 2f       	mov	r25, r24
    1c86:	90 95       	com	r25
    1c88:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8a:	89 23       	and	r24, r25
    1c8c:	8c 83       	std	Y+4, r24	; 0x04
    1c8e:	0e c0       	rjmp	.+28     	; 0x1cac <Timer_enuSetTimer_Mode+0xf8>
											break;
				case WGM_CTC_MODE 		: 	SET_BIT( Local_u8TCCR , Local_u8WGM_CTC_Bit ) ;
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <Timer_enuSetTimer_Mode+0xec>
    1c9c:	88 0f       	add	r24, r24
    1c9e:	99 1f       	adc	r25, r25
    1ca0:	2a 95       	dec	r18
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <Timer_enuSetTimer_Mode+0xe8>
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	89 2b       	or	r24, r25
    1caa:	8c 83       	std	Y+4, r24	; 0x04
											break;
			}
		}
		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Original Status
    1cac:	e9 e5       	ldi	r30, 0x59	; 89
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	80 83       	st	Z, r24
		Timers[ Copy_u8TimerNum - TIMER0 ].WaveGenMode = Copy_u8WGM_Mode ;
    1cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb6:	88 2f       	mov	r24, r24
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9c 01       	movw	r18, r24
    1cbc:	28 5c       	subi	r18, 0xC8	; 200
    1cbe:	30 40       	sbci	r19, 0x00	; 0
    1cc0:	c9 01       	movw	r24, r18
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	82 0f       	add	r24, r18
    1ccc:	93 1f       	adc	r25, r19
    1cce:	fc 01       	movw	r30, r24
    1cd0:	e2 59       	subi	r30, 0x92	; 146
    1cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd4:	88 85       	ldd	r24, Y+8	; 0x08
    1cd6:	80 83       	st	Z, r24
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <Timer_enuSetTimer_Mode+0x12a>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	8e 83       	std	Y+6, r24	; 0x06

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1cde:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	19 f0       	breq	.+6      	; 0x1cea <Timer_enuSetTimer_Mode+0x136>
    1ce4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce6:	39 87       	std	Y+9, r19	; 0x09
    1ce8:	01 c0       	rjmp	.+2      	; 0x1cec <Timer_enuSetTimer_Mode+0x138>
    1cea:	19 86       	std	Y+9, r1	; 0x09
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
}
    1cee:	2d 96       	adiw	r28, 0x0d	; 13
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <Timer_enuReset>:
	}
	return Local_enuErrorState ;
}
#endif
ES_t Timer_enuReset( u8 Copy_u8TimerNum )
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <Timer_enuReset+0x6>
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <Timer_enuReset+0x8>
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Temp = SREG ;									// Saving a Copy of AVR Status Register
    1d12:	ef e5       	ldi	r30, 0x5F	; 95
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;														// Disable All Interrupts while writing to Counter Register
    1d1a:	f8 94       	cli

	if( Copy_u8TimerNum == TIMER0 )
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	88 3c       	cpi	r24, 0xC8	; 200
    1d20:	21 f4       	brne	.+8      	; 0x1d2a <Timer_enuReset+0x2a>
	{
		TCNT0 = 0x00 ;
    1d22:	e2 e5       	ldi	r30, 0x52	; 82
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	10 82       	st	Z, r1
    1d28:	09 c0       	rjmp	.+18     	; 0x1d3c <Timer_enuReset+0x3c>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	8b 3c       	cpi	r24, 0xCB	; 203
    1d2e:	21 f4       	brne	.+8      	; 0x1d38 <Timer_enuReset+0x38>
	{
		TCNT2 = 0x00 ;
    1d30:	e4 e4       	ldi	r30, 0x44	; 68
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	10 82       	st	Z, r1
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <Timer_enuReset+0x3c>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	8a 83       	std	Y+2, r24	; 0x02

	SREG = Local_u8Temp;										// Re-setting AVR Status Register to its Status
    1d3c:	ef e5       	ldi	r30, 0x5F	; 95
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	19 f0       	breq	.+6      	; 0x1d50 <Timer_enuReset+0x50>
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	8c 83       	std	Y+4, r24	; 0x04
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <Timer_enuReset+0x52>
    1d50:	1c 82       	std	Y+4, r1	; 0x04
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <Timer_enuPreLoad>:

ES_t Timer_enuPreLoad( u8 Copy_u8TimerNum , u8 Copy_u8PreLoad)
{
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <Timer_enuPreLoad+0x6>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <Timer_enuPreLoad+0x8>
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	8a 83       	std	Y+2, r24	; 0x02
    1d70:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 )
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	88 3c       	cpi	r24, 0xC8	; 200
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <Timer_enuPreLoad+0x24>
	{
		TCNT0 = (u8)Copy_u8PreLoad ;
    1d7c:	e2 e5       	ldi	r30, 0x52	; 82
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	80 83       	st	Z, r24
    1d84:	0a c0       	rjmp	.+20     	; 0x1d9a <Timer_enuPreLoad+0x38>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	8b 3c       	cpi	r24, 0xCB	; 203
    1d8a:	29 f4       	brne	.+10     	; 0x1d96 <Timer_enuPreLoad+0x34>
	{
		TCNT2 = (u8)Copy_u8PreLoad ;
    1d8c:	e4 e4       	ldi	r30, 0x44	; 68
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	80 83       	st	Z, r24
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <Timer_enuPreLoad+0x38>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	19 f0       	breq	.+6      	; 0x1da6 <Timer_enuPreLoad+0x44>
    1da0:	89 81       	ldd	r24, Y+1	; 0x01
    1da2:	8c 83       	std	Y+4, r24	; 0x04
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <Timer_enuPreLoad+0x46>
    1da6:	1c 82       	std	Y+4, r1	; 0x04
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <Timer_enuReadCounterValue>:

ES_t Timer_enuReadCounterValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <Timer_enuReadCounterValue+0x6>
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <Timer_enuReadCounterValue+0x8>
    1dc0:	0f 92       	push	r0
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	8a 83       	std	Y+2, r24	; 0x02
    1dc8:	7c 83       	std	Y+4, r23	; 0x04
    1dca:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pCounterValue != NULL )
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	b9 f0       	breq	.+46     	; 0x1e06 <Timer_enuReadCounterValue+0x4e>
	{
		if( Copy_u8TimerNum == TIMER0 )
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	88 3c       	cpi	r24, 0xC8	; 200
    1ddc:	39 f4       	brne	.+14     	; 0x1dec <Timer_enuReadCounterValue+0x34>
		{
			*( (u8 *)Copy_pCounterValue ) = TCNT0 ;
    1dde:	eb 81       	ldd	r30, Y+3	; 0x03
    1de0:	fc 81       	ldd	r31, Y+4	; 0x04
    1de2:	a2 e5       	ldi	r26, 0x52	; 82
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	8c 91       	ld	r24, X
    1de8:	80 83       	st	Z, r24
    1dea:	0f c0       	rjmp	.+30     	; 0x1e0a <Timer_enuReadCounterValue+0x52>
		}
		else if( Copy_u8TimerNum == TIMER2 )
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	8b 3c       	cpi	r24, 0xCB	; 203
    1df0:	39 f4       	brne	.+14     	; 0x1e00 <Timer_enuReadCounterValue+0x48>
		{
			*( (u8 *)Copy_pCounterValue ) = TCNT2 ;
    1df2:	eb 81       	ldd	r30, Y+3	; 0x03
    1df4:	fc 81       	ldd	r31, Y+4	; 0x04
    1df6:	a4 e4       	ldi	r26, 0x44	; 68
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	8c 91       	ld	r24, X
    1dfc:	80 83       	st	Z, r24
    1dfe:	05 c0       	rjmp	.+10     	; 0x1e0a <Timer_enuReadCounterValue+0x52>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <Timer_enuReadCounterValue+0x52>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	19 f0       	breq	.+6      	; 0x1e16 <Timer_enuReadCounterValue+0x5e>
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	8d 83       	std	Y+5, r24	; 0x05
    1e14:	01 c0       	rjmp	.+2      	; 0x1e18 <Timer_enuReadCounterValue+0x60>
    1e16:	1d 82       	std	Y+5, r1	; 0x05
    1e18:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <Timer_enuSetOCRnValue>:

ES_t Timer_enuSetOCRnValue( u8 Copy_u8TimerNum , u8 Copy_u8OCRnValue )
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <Timer_enuSetOCRnValue+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <Timer_enuSetOCRnValue+0x8>
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	8a 83       	std	Y+2, r24	; 0x02
    1e38:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 && Copy_u8OCRnValue <= Timer0Max )
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	88 3c       	cpi	r24, 0xC8	; 200
    1e42:	79 f4       	brne	.+30     	; 0x1e62 <Timer_enuSetOCRnValue+0x38>
    1e44:	90 91 69 01 	lds	r25, 0x0169
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	98 17       	cp	r25, r24
    1e4c:	50 f0       	brcs	.+20     	; 0x1e62 <Timer_enuSetOCRnValue+0x38>
	{
		OCR0 = Copy_u8OCRnValue ;
    1e4e:	ec e5       	ldi	r30, 0x5C	; 92
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	80 83       	st	Z, r24
		Global_u8OCR0_Value = OCR0 ;
    1e56:	ec e5       	ldi	r30, 0x5C	; 92
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	80 93 21 02 	sts	0x0221, r24
    1e60:	14 c0       	rjmp	.+40     	; 0x1e8a <Timer_enuSetOCRnValue+0x60>
	}
	else if( Copy_u8TimerNum == TIMER2 && Copy_u8OCRnValue <= Timer2Max )
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	8b 3c       	cpi	r24, 0xCB	; 203
    1e66:	79 f4       	brne	.+30     	; 0x1e86 <Timer_enuSetOCRnValue+0x5c>
    1e68:	90 91 6a 01 	lds	r25, 0x016A
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	98 17       	cp	r25, r24
    1e70:	50 f0       	brcs	.+20     	; 0x1e86 <Timer_enuSetOCRnValue+0x5c>
	{
		OCR2 = Copy_u8OCRnValue ;
    1e72:	e3 e4       	ldi	r30, 0x43	; 67
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	80 83       	st	Z, r24
		Global_u8OCR2_Value = OCR2 ;
    1e7a:	e3 e4       	ldi	r30, 0x43	; 67
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	80 93 22 02 	sts	0x0222, r24
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <Timer_enuSetOCRnValue+0x60>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	19 f0       	breq	.+6      	; 0x1e96 <Timer_enuSetOCRnValue+0x6c>
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	8c 83       	std	Y+4, r24	; 0x04
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <Timer_enuSetOCRnValue+0x6e>
    1e96:	1c 82       	std	Y+4, r1	; 0x04
    1e98:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1e9a:	0f 90       	pop	r0
    1e9c:	0f 90       	pop	r0
    1e9e:	0f 90       	pop	r0
    1ea0:	0f 90       	pop	r0
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <Timer_enuReadOCRnValue>:

ES_t Timer_enuReadOCRnValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <Timer_enuReadOCRnValue+0x6>
    1eae:	00 d0       	rcall	.+0      	; 0x1eb0 <Timer_enuReadOCRnValue+0x8>
    1eb0:	0f 92       	push	r0
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
    1eb6:	8a 83       	std	Y+2, r24	; 0x02
    1eb8:	7c 83       	std	Y+4, r23	; 0x04
    1eba:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	89 83       	std	Y+1, r24	; 0x01

		if( Copy_u8TimerNum == TIMER0 )
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	88 3c       	cpi	r24, 0xC8	; 200
    1ec4:	31 f4       	brne	.+12     	; 0x1ed2 <Timer_enuReadOCRnValue+0x2a>
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR0_Value ;
    1ec6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ec8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eca:	80 91 21 02 	lds	r24, 0x0221
    1ece:	80 83       	st	Z, r24
    1ed0:	0b c0       	rjmp	.+22     	; 0x1ee8 <Timer_enuReadOCRnValue+0x40>
		}
		else if( Copy_u8TimerNum == TIMER2 )
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	8b 3c       	cpi	r24, 0xCB	; 203
    1ed6:	31 f4       	brne	.+12     	; 0x1ee4 <Timer_enuReadOCRnValue+0x3c>
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR2_Value ;
    1ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    1eda:	fc 81       	ldd	r31, Y+4	; 0x04
    1edc:	80 91 22 02 	lds	r24, 0x0222
    1ee0:	80 83       	st	Z, r24
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <Timer_enuReadOCRnValue+0x40>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    1ee4:	82 e0       	ldi	r24, 0x02	; 2
    1ee6:	89 83       	std	Y+1, r24	; 0x01

		return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	81 30       	cpi	r24, 0x01	; 1
    1eec:	19 f0       	breq	.+6      	; 0x1ef4 <Timer_enuReadOCRnValue+0x4c>
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	8d 83       	std	Y+5, r24	; 0x05
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <Timer_enuReadOCRnValue+0x4e>
    1ef4:	1d 82       	std	Y+5, r1	; 0x05
    1ef6:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <Timer_enuInterruptEnable>:

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif
ES_t Timer_enuInterruptEnable( u8 Copy_u8TimerIntName)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	00 d0       	rcall	.+0      	; 0x1f0e <Timer_enuInterruptEnable+0x6>
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <Timer_enuInterruptEnable+0x8>
    1f10:	0f 92       	push	r0
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	89 83       	std	Y+1, r24	; 0x01

	_CLI_ ;																// Disable ALL Interrupts
    1f1c:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3d 83       	std	Y+5, r19	; 0x05
    1f26:	2c 83       	std	Y+4, r18	; 0x04
    1f28:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2c:	82 34       	cpi	r24, 0x42	; 66
    1f2e:	91 05       	cpc	r25, r1
    1f30:	31 f1       	breq	.+76     	; 0x1f7e <Timer_enuInterruptEnable+0x76>
    1f32:	2c 81       	ldd	r18, Y+4	; 0x04
    1f34:	3d 81       	ldd	r19, Y+5	; 0x05
    1f36:	23 34       	cpi	r18, 0x43	; 67
    1f38:	31 05       	cpc	r19, r1
    1f3a:	5c f4       	brge	.+22     	; 0x1f52 <Timer_enuInterruptEnable+0x4a>
    1f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f40:	8c 33       	cpi	r24, 0x3C	; 60
    1f42:	91 05       	cpc	r25, r1
    1f44:	61 f0       	breq	.+24     	; 0x1f5e <Timer_enuInterruptEnable+0x56>
    1f46:	2c 81       	ldd	r18, Y+4	; 0x04
    1f48:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4a:	2d 33       	cpi	r18, 0x3D	; 61
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	79 f0       	breq	.+30     	; 0x1f6e <Timer_enuInterruptEnable+0x66>
    1f50:	26 c0       	rjmp	.+76     	; 0x1f9e <Timer_enuInterruptEnable+0x96>
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	83 34       	cpi	r24, 0x43	; 67
    1f58:	91 05       	cpc	r25, r1
    1f5a:	c9 f0       	breq	.+50     	; 0x1f8e <Timer_enuInterruptEnable+0x86>
    1f5c:	20 c0       	rjmp	.+64     	; 0x1f9e <Timer_enuInterruptEnable+0x96>
	{
		case TOIE0	:	SET_BIT( TIMSK , TOIE0_BIT);
    1f5e:	a9 e5       	ldi	r26, 0x59	; 89
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e9 e5       	ldi	r30, 0x59	; 89
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	81 60       	ori	r24, 0x01	; 1
    1f6a:	8c 93       	st	X, r24
    1f6c:	1a c0       	rjmp	.+52     	; 0x1fa2 <Timer_enuInterruptEnable+0x9a>
						break;
		case OCIE0	:	SET_BIT( TIMSK , OCIE0_BIT);
    1f6e:	a9 e5       	ldi	r26, 0x59	; 89
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e9 e5       	ldi	r30, 0x59	; 89
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 81       	ld	r24, Z
    1f78:	82 60       	ori	r24, 0x02	; 2
    1f7a:	8c 93       	st	X, r24
    1f7c:	12 c0       	rjmp	.+36     	; 0x1fa2 <Timer_enuInterruptEnable+0x9a>
						break;
		case TOIE2	:	SET_BIT( TIMSK , TOIE2_BIT);
    1f7e:	a9 e5       	ldi	r26, 0x59	; 89
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e9 e5       	ldi	r30, 0x59	; 89
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	80 64       	ori	r24, 0x40	; 64
    1f8a:	8c 93       	st	X, r24
    1f8c:	0a c0       	rjmp	.+20     	; 0x1fa2 <Timer_enuInterruptEnable+0x9a>
						break;
		case OCIE2	:	SET_BIT( TIMSK , OCIE2_BIT);
    1f8e:	a9 e5       	ldi	r26, 0x59	; 89
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e9 e5       	ldi	r30, 0x59	; 89
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	80 68       	ori	r24, 0x80	; 128
    1f9a:	8c 93       	st	X, r24
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <Timer_enuInterruptEnable+0x9a>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}
	_SEI_ ;																// Enable Global Interrupts
    1fa2:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	19 f0       	breq	.+6      	; 0x1fb0 <Timer_enuInterruptEnable+0xa8>
    1faa:	99 81       	ldd	r25, Y+1	; 0x01
    1fac:	9b 83       	std	Y+3, r25	; 0x03
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <Timer_enuInterruptEnable+0xaa>
    1fb0:	1b 82       	std	Y+3, r1	; 0x03
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	0f 90       	pop	r0
    1fbc:	0f 90       	pop	r0
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <Timer_enuInterruptDisable>:

ES_t Timer_enuInterruptDisable( u8 Copy_u8TimerIntName)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <Timer_enuInterruptDisable+0x6>
    1fca:	00 d0       	rcall	.+0      	; 0x1fcc <Timer_enuInterruptDisable+0x8>
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <Timer_enuInterruptDisable+0xa>
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8SREG = SREG ;
    1fd8:	ef e5       	ldi	r30, 0x5F	; 95
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	89 83       	std	Y+1, r24	; 0x01
	_CLI_ ;																// Disable ALL Interrupts
    1fe0:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	3e 83       	std	Y+6, r19	; 0x06
    1fea:	2d 83       	std	Y+5, r18	; 0x05
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	82 34       	cpi	r24, 0x42	; 66
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	31 f1       	breq	.+76     	; 0x2042 <Timer_enuInterruptDisable+0x7e>
    1ff6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ff8:	3e 81       	ldd	r19, Y+6	; 0x06
    1ffa:	23 34       	cpi	r18, 0x43	; 67
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	5c f4       	brge	.+22     	; 0x2016 <Timer_enuInterruptDisable+0x52>
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	8c 33       	cpi	r24, 0x3C	; 60
    2006:	91 05       	cpc	r25, r1
    2008:	61 f0       	breq	.+24     	; 0x2022 <Timer_enuInterruptDisable+0x5e>
    200a:	2d 81       	ldd	r18, Y+5	; 0x05
    200c:	3e 81       	ldd	r19, Y+6	; 0x06
    200e:	2d 33       	cpi	r18, 0x3D	; 61
    2010:	31 05       	cpc	r19, r1
    2012:	79 f0       	breq	.+30     	; 0x2032 <Timer_enuInterruptDisable+0x6e>
    2014:	26 c0       	rjmp	.+76     	; 0x2062 <Timer_enuInterruptDisable+0x9e>
    2016:	8d 81       	ldd	r24, Y+5	; 0x05
    2018:	9e 81       	ldd	r25, Y+6	; 0x06
    201a:	83 34       	cpi	r24, 0x43	; 67
    201c:	91 05       	cpc	r25, r1
    201e:	c9 f0       	breq	.+50     	; 0x2052 <Timer_enuInterruptDisable+0x8e>
    2020:	20 c0       	rjmp	.+64     	; 0x2062 <Timer_enuInterruptDisable+0x9e>
	{
		case TOIE0	:	CLR_BIT( TIMSK , TOIE0_BIT);
    2022:	a9 e5       	ldi	r26, 0x59	; 89
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	e9 e5       	ldi	r30, 0x59	; 89
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	80 81       	ld	r24, Z
    202c:	8e 7f       	andi	r24, 0xFE	; 254
    202e:	8c 93       	st	X, r24
    2030:	1a c0       	rjmp	.+52     	; 0x2066 <Timer_enuInterruptDisable+0xa2>
						break;
		case OCIE0	:	CLR_BIT( TIMSK , OCIE0_BIT);
    2032:	a9 e5       	ldi	r26, 0x59	; 89
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e9 e5       	ldi	r30, 0x59	; 89
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	8d 7f       	andi	r24, 0xFD	; 253
    203e:	8c 93       	st	X, r24
    2040:	12 c0       	rjmp	.+36     	; 0x2066 <Timer_enuInterruptDisable+0xa2>
						break;
		case TOIE2	:	CLR_BIT( TIMSK , TOIE2_BIT);
    2042:	a9 e5       	ldi	r26, 0x59	; 89
    2044:	b0 e0       	ldi	r27, 0x00	; 0
    2046:	e9 e5       	ldi	r30, 0x59	; 89
    2048:	f0 e0       	ldi	r31, 0x00	; 0
    204a:	80 81       	ld	r24, Z
    204c:	8f 7b       	andi	r24, 0xBF	; 191
    204e:	8c 93       	st	X, r24
    2050:	0a c0       	rjmp	.+20     	; 0x2066 <Timer_enuInterruptDisable+0xa2>
						break;
		case OCIE2	:	CLR_BIT( TIMSK , OCIE2_BIT);
    2052:	a9 e5       	ldi	r26, 0x59	; 89
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e9 e5       	ldi	r30, 0x59	; 89
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	8f 77       	andi	r24, 0x7F	; 127
    205e:	8c 93       	st	X, r24
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <Timer_enuInterruptDisable+0xa2>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	8a 83       	std	Y+2, r24	; 0x02
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}

	SREG = Local_u8SREG ;												// Re-Setting Global Interrupts
    2066:	ef e5       	ldi	r30, 0x5F	; 95
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	81 30       	cpi	r24, 0x01	; 1
    2072:	19 f0       	breq	.+6      	; 0x207a <Timer_enuInterruptDisable+0xb6>
    2074:	9a 81       	ldd	r25, Y+2	; 0x02
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	01 c0       	rjmp	.+2      	; 0x207c <Timer_enuInterruptDisable+0xb8>
    207a:	1c 82       	std	Y+4, r1	; 0x04
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    207e:	26 96       	adiw	r28, 0x06	; 6
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <Timer_enuCallBack>:
	return ( ( Local_u8Status)? TRUE : FALSE ) ;
}
#endif

ES_t Timer_enuCallBack( u8 Copy_u8TimerIntName , void (*Copy_pAppFun)(void) )
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	00 d0       	rcall	.+0      	; 0x2096 <Timer_enuCallBack+0x6>
    2096:	00 d0       	rcall	.+0      	; 0x2098 <Timer_enuCallBack+0x8>
    2098:	0f 92       	push	r0
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	8b 83       	std	Y+3, r24	; 0x03
    20a0:	7d 83       	std	Y+5, r23	; 0x05
    20a2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_OUT_RANGE;
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pAppFun != NULL )
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	41 f1       	breq	.+80     	; 0x2100 <Timer_enuCallBack+0x70>
    20b0:	23 c0       	rjmp	.+70     	; 0x20f8 <Timer_enuCallBack+0x68>
	{
		for( u8 Local_u8Iter; Local_u8Iter < TIMERS_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrTimerPointers[Local_u8Iter].InterruptName == Copy_u8TimerIntName )
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	c9 01       	movw	r24, r18
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	82 0f       	add	r24, r18
    20c0:	93 1f       	adc	r25, r19
    20c2:	fc 01       	movw	r30, r24
    20c4:	eb 58       	subi	r30, 0x8B	; 139
    20c6:	fe 4f       	sbci	r31, 0xFE	; 254
    20c8:	90 81       	ld	r25, Z
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	98 17       	cp	r25, r24
    20ce:	89 f4       	brne	.+34     	; 0x20f2 <Timer_enuCallBack+0x62>
			{
				Global_AstrTimerPointers[Local_u8Iter].ptrFun = Copy_pAppFun;
    20d0:	89 81       	ldd	r24, Y+1	; 0x01
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	c9 01       	movw	r24, r18
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	82 0f       	add	r24, r18
    20de:	93 1f       	adc	r25, r19
    20e0:	fc 01       	movw	r30, r24
    20e2:	ea 58       	subi	r30, 0x8A	; 138
    20e4:	fe 4f       	sbci	r31, 0xFE	; 254
    20e6:	8c 81       	ldd	r24, Y+4	; 0x04
    20e8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK ;
    20ee:	1a 82       	std	Y+2, r1	; 0x02
    20f0:	09 c0       	rjmp	.+18     	; 0x2104 <Timer_enuCallBack+0x74>
{
	ES_t Local_enuErrorState = ES_OUT_RANGE;

	if( Copy_pAppFun != NULL )
	{
		for( u8 Local_u8Iter; Local_u8Iter < TIMERS_INTERRUPTS ; Local_u8Iter++ )
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	84 30       	cpi	r24, 0x04	; 4
    20fc:	d0 f2       	brcs	.-76     	; 0x20b2 <Timer_enuCallBack+0x22>
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <Timer_enuCallBack+0x74>
				Local_enuErrorState = ES_OK ;
				break;
			}
		}
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    2100:	83 e0       	ldi	r24, 0x03	; 3
    2102:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState ;
    2104:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	0f 90       	pop	r0
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <__vector_4>:
void __vector_5( void )__attribute__((signal));		/*	Timer2	Overflow Interrupt	ISR			*/
void __vector_10( void )__attribute__((signal));	/*	Timer0	Compare Match Interrupt	ISR		*/
void __vector_11( void )__attribute__((signal));	/*	Timer0	Overflow Interrupt	ISR			*/

void __vector_4( void )/*	OCIE2	*/
{
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	2f 93       	push	r18
    2122:	3f 93       	push	r19
    2124:	4f 93       	push	r20
    2126:	5f 93       	push	r21
    2128:	6f 93       	push	r22
    212a:	7f 93       	push	r23
    212c:	8f 93       	push	r24
    212e:	9f 93       	push	r25
    2130:	af 93       	push	r26
    2132:	bf 93       	push	r27
    2134:	ef 93       	push	r30
    2136:	ff 93       	push	r31
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[3].ptrFun != NULL )
    2140:	80 91 7f 01 	lds	r24, 0x017F
    2144:	90 91 80 01 	lds	r25, 0x0180
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	29 f0       	breq	.+10     	; 0x2156 <__vector_4+0x40>
	{
		(*Global_AstrTimerPointers[3].ptrFun)( );
    214c:	e0 91 7f 01 	lds	r30, 0x017F
    2150:	f0 91 80 01 	lds	r31, 0x0180
    2154:	09 95       	icall
	}
}
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	ff 91       	pop	r31
    215c:	ef 91       	pop	r30
    215e:	bf 91       	pop	r27
    2160:	af 91       	pop	r26
    2162:	9f 91       	pop	r25
    2164:	8f 91       	pop	r24
    2166:	7f 91       	pop	r23
    2168:	6f 91       	pop	r22
    216a:	5f 91       	pop	r21
    216c:	4f 91       	pop	r20
    216e:	3f 91       	pop	r19
    2170:	2f 91       	pop	r18
    2172:	0f 90       	pop	r0
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	0f 90       	pop	r0
    2178:	1f 90       	pop	r1
    217a:	18 95       	reti

0000217c <__vector_5>:

void __vector_5( void )/*	TOIE2	*/
{
    217c:	1f 92       	push	r1
    217e:	0f 92       	push	r0
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	0f 92       	push	r0
    2184:	11 24       	eor	r1, r1
    2186:	2f 93       	push	r18
    2188:	3f 93       	push	r19
    218a:	4f 93       	push	r20
    218c:	5f 93       	push	r21
    218e:	6f 93       	push	r22
    2190:	7f 93       	push	r23
    2192:	8f 93       	push	r24
    2194:	9f 93       	push	r25
    2196:	af 93       	push	r26
    2198:	bf 93       	push	r27
    219a:	ef 93       	push	r30
    219c:	ff 93       	push	r31
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[2].ptrFun != NULL )
    21a6:	80 91 7c 01 	lds	r24, 0x017C
    21aa:	90 91 7d 01 	lds	r25, 0x017D
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	29 f0       	breq	.+10     	; 0x21bc <__vector_5+0x40>
	{
		(*Global_AstrTimerPointers[2].ptrFun)( );
    21b2:	e0 91 7c 01 	lds	r30, 0x017C
    21b6:	f0 91 7d 01 	lds	r31, 0x017D
    21ba:	09 95       	icall
	}
}
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	ff 91       	pop	r31
    21c2:	ef 91       	pop	r30
    21c4:	bf 91       	pop	r27
    21c6:	af 91       	pop	r26
    21c8:	9f 91       	pop	r25
    21ca:	8f 91       	pop	r24
    21cc:	7f 91       	pop	r23
    21ce:	6f 91       	pop	r22
    21d0:	5f 91       	pop	r21
    21d2:	4f 91       	pop	r20
    21d4:	3f 91       	pop	r19
    21d6:	2f 91       	pop	r18
    21d8:	0f 90       	pop	r0
    21da:	0f be       	out	0x3f, r0	; 63
    21dc:	0f 90       	pop	r0
    21de:	1f 90       	pop	r1
    21e0:	18 95       	reti

000021e2 <__vector_10>:
void __vector_10( void )/*	OCIE0	*/
{
    21e2:	1f 92       	push	r1
    21e4:	0f 92       	push	r0
    21e6:	0f b6       	in	r0, 0x3f	; 63
    21e8:	0f 92       	push	r0
    21ea:	11 24       	eor	r1, r1
    21ec:	2f 93       	push	r18
    21ee:	3f 93       	push	r19
    21f0:	4f 93       	push	r20
    21f2:	5f 93       	push	r21
    21f4:	6f 93       	push	r22
    21f6:	7f 93       	push	r23
    21f8:	8f 93       	push	r24
    21fa:	9f 93       	push	r25
    21fc:	af 93       	push	r26
    21fe:	bf 93       	push	r27
    2200:	ef 93       	push	r30
    2202:	ff 93       	push	r31
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[1].ptrFun != NULL )
    220c:	80 91 79 01 	lds	r24, 0x0179
    2210:	90 91 7a 01 	lds	r25, 0x017A
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	29 f0       	breq	.+10     	; 0x2222 <__vector_10+0x40>
	{
		(*Global_AstrTimerPointers[1].ptrFun)( );
    2218:	e0 91 79 01 	lds	r30, 0x0179
    221c:	f0 91 7a 01 	lds	r31, 0x017A
    2220:	09 95       	icall
	}
}
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	ff 91       	pop	r31
    2228:	ef 91       	pop	r30
    222a:	bf 91       	pop	r27
    222c:	af 91       	pop	r26
    222e:	9f 91       	pop	r25
    2230:	8f 91       	pop	r24
    2232:	7f 91       	pop	r23
    2234:	6f 91       	pop	r22
    2236:	5f 91       	pop	r21
    2238:	4f 91       	pop	r20
    223a:	3f 91       	pop	r19
    223c:	2f 91       	pop	r18
    223e:	0f 90       	pop	r0
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	0f 90       	pop	r0
    2244:	1f 90       	pop	r1
    2246:	18 95       	reti

00002248 <__vector_11>:
void __vector_11( void )/*	TOIE0	*/
{
    2248:	1f 92       	push	r1
    224a:	0f 92       	push	r0
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	0f 92       	push	r0
    2250:	11 24       	eor	r1, r1
    2252:	2f 93       	push	r18
    2254:	3f 93       	push	r19
    2256:	4f 93       	push	r20
    2258:	5f 93       	push	r21
    225a:	6f 93       	push	r22
    225c:	7f 93       	push	r23
    225e:	8f 93       	push	r24
    2260:	9f 93       	push	r25
    2262:	af 93       	push	r26
    2264:	bf 93       	push	r27
    2266:	ef 93       	push	r30
    2268:	ff 93       	push	r31
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	cd b7       	in	r28, 0x3d	; 61
    2270:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[0].ptrFun != NULL )
    2272:	80 91 76 01 	lds	r24, 0x0176
    2276:	90 91 77 01 	lds	r25, 0x0177
    227a:	00 97       	sbiw	r24, 0x00	; 0
    227c:	29 f0       	breq	.+10     	; 0x2288 <__vector_11+0x40>
	{
		(*Global_AstrTimerPointers[0].ptrFun)( );
    227e:	e0 91 76 01 	lds	r30, 0x0176
    2282:	f0 91 77 01 	lds	r31, 0x0177
    2286:	09 95       	icall
	}
}
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	ff 91       	pop	r31
    228e:	ef 91       	pop	r30
    2290:	bf 91       	pop	r27
    2292:	af 91       	pop	r26
    2294:	9f 91       	pop	r25
    2296:	8f 91       	pop	r24
    2298:	7f 91       	pop	r23
    229a:	6f 91       	pop	r22
    229c:	5f 91       	pop	r21
    229e:	4f 91       	pop	r20
    22a0:	3f 91       	pop	r19
    22a2:	2f 91       	pop	r18
    22a4:	0f 90       	pop	r0
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	0f 90       	pop	r0
    22aa:	1f 90       	pop	r1
    22ac:	18 95       	reti

000022ae <PWM_enuInit>:
																	{ OCIE1A ,	NULL},
																};


ES_t PWM_enuInit( void )
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	29 97       	sbiw	r28, 0x09	; 9
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	8d 83       	std	Y+5, r24	; 0x05

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;
    22c6:	1c 82       	std	Y+4, r1	; 0x04

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    22c8:	1b 82       	std	Y+3, r1	; 0x03
    22ca:	bb c1       	rjmp	.+886    	; 0x2642 <PWM_enuInit+0x394>
	{
		if( PWMs[Local_u8Iter].TimerNum == TIMER1A || PWMs[Local_u8Iter].TimerNum == TIMER1B )
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	c9 01       	movw	r24, r18
    22d4:	88 0f       	add	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	88 0f       	add	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	82 0f       	add	r24, r18
    22de:	93 1f       	adc	r25, r19
    22e0:	fc 01       	movw	r30, r24
    22e2:	ec 57       	subi	r30, 0x7C	; 124
    22e4:	fe 4f       	sbci	r31, 0xFE	; 254
    22e6:	80 81       	ld	r24, Z
    22e8:	89 3c       	cpi	r24, 0xC9	; 201
    22ea:	89 f0       	breq	.+34     	; 0x230e <PWM_enuInit+0x60>
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	c9 01       	movw	r24, r18
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	82 0f       	add	r24, r18
    22fe:	93 1f       	adc	r25, r19
    2300:	fc 01       	movw	r30, r24
    2302:	ec 57       	subi	r30, 0x7C	; 124
    2304:	fe 4f       	sbci	r31, 0xFE	; 254
    2306:	80 81       	ld	r24, Z
    2308:	8a 3c       	cpi	r24, 0xCA	; 202
    230a:	09 f0       	breq	.+2      	; 0x230e <PWM_enuInit+0x60>
    230c:	97 c1       	rjmp	.+814    	; 0x263c <PWM_enuInit+0x38e>
		{
			if( ! Local_u8Flag )
    230e:	8c 81       	ldd	r24, Y+4	; 0x04
    2310:	88 23       	and	r24, r24
    2312:	09 f0       	breq	.+2      	; 0x2316 <PWM_enuInit+0x68>
    2314:	d2 c0       	rjmp	.+420    	; 0x24ba <PWM_enuInit+0x20c>
			{
				Local_u8Flag = 1 ;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	8c 83       	std	Y+4, r24	; 0x04
				TIMSK &= ~( TC1_INT_EN_MASK ) ;				// Disable All Interrupts before setting all conditions
    231a:	a9 e5       	ldi	r26, 0x59	; 89
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e9 e5       	ldi	r30, 0x59	; 89
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	83 7c       	andi	r24, 0xC3	; 195
    2326:	8c 93       	st	X, r24
				TCCR1A = 0x00 ;								// Masks all bits in TCCR1A
    2328:	ef e4       	ldi	r30, 0x4F	; 79
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	10 82       	st	Z, r1
				TCCR1B = 0x00 ;								// Masks all bits in TCCR1B
    232e:	ee e4       	ldi	r30, 0x4E	; 78
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	10 82       	st	Z, r1
				u8 Local_u8CopySREG = SREG ;
    2334:	ef e5       	ldi	r30, 0x5F	; 95
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	8a 83       	std	Y+2, r24	; 0x02
				_CLI_;
    233c:	f8 94       	cli
				OCR1AH = 0x00 ;								// Clears 1A HIGH-byte Output Compare Register
    233e:	eb e4       	ldi	r30, 0x4B	; 75
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	10 82       	st	Z, r1
				OCR1AL = 0x00 ;								// Clears 1A LOW-byte Output Compare Register
    2344:	ea e4       	ldi	r30, 0x4A	; 74
    2346:	f0 e0       	ldi	r31, 0x00	; 0
    2348:	10 82       	st	Z, r1
				OCR1BH = 0x00 ;								// Clears 1B HIGH-byte Output Compare Register
    234a:	e9 e4       	ldi	r30, 0x49	; 73
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	10 82       	st	Z, r1
				OCR1BL = 0x00 ;								// Clears 1B LOW-byte Output Compare Register
    2350:	e8 e4       	ldi	r30, 0x48	; 72
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	10 82       	st	Z, r1
				SREG = Local_u8CopySREG ;
    2356:	ef e5       	ldi	r30, 0x5F	; 95
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	80 83       	st	Z, r24

				/****************************************/
				/*			Set Clock Selection			*/
				/****************************************/
				Global_u32Timer1_Clk = PWM_u32TimerClock( TIMER1A , PWMs[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	c9 01       	movw	r24, r18
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	88 0f       	add	r24, r24
    236c:	99 1f       	adc	r25, r25
    236e:	82 0f       	add	r24, r18
    2370:	93 1f       	adc	r25, r19
    2372:	fc 01       	movw	r30, r24
    2374:	eb 57       	subi	r30, 0x7B	; 123
    2376:	fe 4f       	sbci	r31, 0xFE	; 254
    2378:	90 81       	ld	r25, Z
    237a:	9e 01       	movw	r18, r28
    237c:	2a 5f       	subi	r18, 0xFA	; 250
    237e:	3f 4f       	sbci	r19, 0xFF	; 255
    2380:	89 ec       	ldi	r24, 0xC9	; 201
    2382:	69 2f       	mov	r22, r25
    2384:	a9 01       	movw	r20, r18
    2386:	0e 94 38 13 	call	0x2670	; 0x2670 <PWM_u32TimerClock>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	80 93 31 02 	sts	0x0231, r24
    2392:	90 93 32 02 	sts	0x0232, r25
    2396:	a0 93 33 02 	sts	0x0233, r26
    239a:	b0 93 34 02 	sts	0x0234, r27
				TCCR1B |= ( Local_u8ClkSelect << CLK1_SEL_BITS );
    239e:	ae e4       	ldi	r26, 0x4E	; 78
    23a0:	b0 e0       	ldi	r27, 0x00	; 0
    23a2:	ee e4       	ldi	r30, 0x4E	; 78
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	90 81       	ld	r25, Z
    23a8:	8e 81       	ldd	r24, Y+6	; 0x06
    23aa:	89 2b       	or	r24, r25
    23ac:	8c 93       	st	X, r24

				/****************************************/
				/*		Set Waveform Generation Mode	*/
				/****************************************/
				if( PWMs[Local_u8Iter].WaveGenMode > WGM_MODE_00	&& PWMs[Local_u8Iter].WaveGenMode <= WGM_FAST_OCR1A	&&
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	28 2f       	mov	r18, r24
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	c9 01       	movw	r24, r18
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	82 0f       	add	r24, r18
    23c0:	93 1f       	adc	r25, r19
    23c2:	fc 01       	movw	r30, r24
    23c4:	e9 57       	subi	r30, 0x79	; 121
    23c6:	fe 4f       	sbci	r31, 0xFE	; 254
    23c8:	80 81       	ld	r24, Z
    23ca:	85 36       	cpi	r24, 0x65	; 101
    23cc:	08 f4       	brcc	.+2      	; 0x23d0 <PWM_enuInit+0x122>
    23ce:	73 c0       	rjmp	.+230    	; 0x24b6 <PWM_enuInit+0x208>
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	c9 01       	movw	r24, r18
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	88 0f       	add	r24, r24
    23de:	99 1f       	adc	r25, r25
    23e0:	82 0f       	add	r24, r18
    23e2:	93 1f       	adc	r25, r19
    23e4:	fc 01       	movw	r30, r24
    23e6:	e9 57       	subi	r30, 0x79	; 121
    23e8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ea:	80 81       	ld	r24, Z
    23ec:	84 37       	cpi	r24, 0x74	; 116
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <PWM_enuInit+0x144>
    23f0:	62 c0       	rjmp	.+196    	; 0x24b6 <PWM_enuInit+0x208>
    23f2:	8b 81       	ldd	r24, Y+3	; 0x03
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	c9 01       	movw	r24, r18
    23fa:	88 0f       	add	r24, r24
    23fc:	99 1f       	adc	r25, r25
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	82 0f       	add	r24, r18
    2404:	93 1f       	adc	r25, r19
    2406:	fc 01       	movw	r30, r24
    2408:	e9 57       	subi	r30, 0x79	; 121
    240a:	fe 4f       	sbci	r31, 0xFE	; 254
    240c:	80 81       	ld	r24, Z
    240e:	88 36       	cpi	r24, 0x68	; 104
    2410:	09 f4       	brne	.+2      	; 0x2414 <PWM_enuInit+0x166>
    2412:	51 c0       	rjmp	.+162    	; 0x24b6 <PWM_enuInit+0x208>
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	c9 01       	movw	r24, r18
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	82 0f       	add	r24, r18
    2426:	93 1f       	adc	r25, r19
    2428:	fc 01       	movw	r30, r24
    242a:	e9 57       	subi	r30, 0x79	; 121
    242c:	fe 4f       	sbci	r31, 0xFE	; 254
    242e:	80 81       	ld	r24, Z
    2430:	80 37       	cpi	r24, 0x70	; 112
    2432:	09 f4       	brne	.+2      	; 0x2436 <PWM_enuInit+0x188>
    2434:	40 c0       	rjmp	.+128    	; 0x24b6 <PWM_enuInit+0x208>
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	c9 01       	movw	r24, r18
    243e:	88 0f       	add	r24, r24
    2440:	99 1f       	adc	r25, r25
    2442:	88 0f       	add	r24, r24
    2444:	99 1f       	adc	r25, r25
    2446:	82 0f       	add	r24, r18
    2448:	93 1f       	adc	r25, r19
    244a:	fc 01       	movw	r30, r24
    244c:	e9 57       	subi	r30, 0x79	; 121
    244e:	fe 4f       	sbci	r31, 0xFE	; 254
    2450:	80 81       	ld	r24, Z
    2452:	81 37       	cpi	r24, 0x71	; 113
    2454:	81 f1       	breq	.+96     	; 0x24b6 <PWM_enuInit+0x208>
					PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_04	&& PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_12	&&
					PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_13	)
				{
					u8 Local_u8WGM = PWMs[Local_u8Iter].WaveGenMode - WGM_MODE_00 ;
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	28 2f       	mov	r18, r24
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	c9 01       	movw	r24, r18
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	88 0f       	add	r24, r24
    2464:	99 1f       	adc	r25, r25
    2466:	82 0f       	add	r24, r18
    2468:	93 1f       	adc	r25, r19
    246a:	fc 01       	movw	r30, r24
    246c:	e9 57       	subi	r30, 0x79	; 121
    246e:	fe 4f       	sbci	r31, 0xFE	; 254
    2470:	80 81       	ld	r24, Z
    2472:	84 56       	subi	r24, 0x64	; 100
    2474:	89 83       	std	Y+1, r24	; 0x01
					TCCR1A |= ( ( Local_u8WGM & _TWO_BITS_MASK_ ) << WGM1A_SEL_BITS );
    2476:	af e4       	ldi	r26, 0x4F	; 79
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	ef e4       	ldi	r30, 0x4F	; 79
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	98 2f       	mov	r25, r24
    2482:	89 81       	ldd	r24, Y+1	; 0x01
    2484:	83 70       	andi	r24, 0x03	; 3
    2486:	89 2b       	or	r24, r25
    2488:	8c 93       	st	X, r24
					TCCR1B |= ( ( ( Local_u8WGM >> BIT1_MASK) & _TWO_BITS_MASK_ ) << WGM1B_SEL_BITS );
    248a:	ae e4       	ldi	r26, 0x4E	; 78
    248c:	b0 e0       	ldi	r27, 0x00	; 0
    248e:	ee e4       	ldi	r30, 0x4E	; 78
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	28 2f       	mov	r18, r24
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	86 95       	lsr	r24
    249a:	86 95       	lsr	r24
    249c:	88 2f       	mov	r24, r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	83 70       	andi	r24, 0x03	; 3
    24a2:	90 70       	andi	r25, 0x00	; 0
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	82 2b       	or	r24, r18
    24b2:	8c 93       	st	X, r24
    24b4:	02 c0       	rjmp	.+4      	; 0x24ba <PWM_enuInit+0x20c>
				}
				else
				{
					Local_enuErrorState = ES_OUT_RANGE ;
    24b6:	82 e0       	ldi	r24, 0x02	; 2
    24b8:	8d 83       	std	Y+5, r24	; 0x05
				}
			}
			/****************************************/
			/*		Set Compare Output Mode			*/
			/****************************************/
			if( PWMs[Local_u8Iter].CompOutMode == COMP_NON_INVERTED ||
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	28 2f       	mov	r18, r24
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	c9 01       	movw	r24, r18
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	82 0f       	add	r24, r18
    24cc:	93 1f       	adc	r25, r19
    24ce:	fc 01       	movw	r30, r24
    24d0:	ea 57       	subi	r30, 0x7A	; 122
    24d2:	fe 4f       	sbci	r31, 0xFE	; 254
    24d4:	80 81       	ld	r24, Z
    24d6:	86 31       	cpi	r24, 0x16	; 22
    24d8:	89 f0       	breq	.+34     	; 0x24fc <PWM_enuInit+0x24e>
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	c9 01       	movw	r24, r18
    24e2:	88 0f       	add	r24, r24
    24e4:	99 1f       	adc	r25, r25
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	82 0f       	add	r24, r18
    24ec:	93 1f       	adc	r25, r19
    24ee:	fc 01       	movw	r30, r24
    24f0:	ea 57       	subi	r30, 0x7A	; 122
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	80 81       	ld	r24, Z
    24f6:	87 31       	cpi	r24, 0x17	; 23
    24f8:	09 f0       	breq	.+2      	; 0x24fc <PWM_enuInit+0x24e>
    24fa:	53 c0       	rjmp	.+166    	; 0x25a2 <PWM_enuInit+0x2f4>
				PWMs[Local_u8Iter].CompOutMode == COMP_INVERTED		)
			{
				if( PWMs[Local_u8Iter].TimerNum == TIMER1A )
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	c9 01       	movw	r24, r18
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	fc 01       	movw	r30, r24
    2512:	ec 57       	subi	r30, 0x7C	; 124
    2514:	fe 4f       	sbci	r31, 0xFE	; 254
    2516:	80 81       	ld	r24, Z
    2518:	89 3c       	cpi	r24, 0xC9	; 201
    251a:	19 f5       	brne	.+70     	; 0x2562 <PWM_enuInit+0x2b4>
				{
					/****************************************/
					/*		Set 1A Compare Output Mode		*/
					/****************************************/
					TCCR1A |= ( ( PWMs[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COM1A_SEL_BITS );
    251c:	af e4       	ldi	r26, 0x4F	; 79
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	ef e4       	ldi	r30, 0x4F	; 79
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	48 2f       	mov	r20, r24
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	28 2f       	mov	r18, r24
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	c9 01       	movw	r24, r18
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	82 0f       	add	r24, r18
    253a:	93 1f       	adc	r25, r19
    253c:	fc 01       	movw	r30, r24
    253e:	ea 57       	subi	r30, 0x7A	; 122
    2540:	fe 4f       	sbci	r31, 0xFE	; 254
    2542:	80 81       	ld	r24, Z
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	44 97       	sbiw	r24, 0x14	; 20
    254a:	00 24       	eor	r0, r0
    254c:	96 95       	lsr	r25
    254e:	87 95       	ror	r24
    2550:	07 94       	ror	r0
    2552:	96 95       	lsr	r25
    2554:	87 95       	ror	r24
    2556:	07 94       	ror	r0
    2558:	98 2f       	mov	r25, r24
    255a:	80 2d       	mov	r24, r0
    255c:	84 2b       	or	r24, r20
    255e:	8c 93       	st	X, r24
    2560:	22 c0       	rjmp	.+68     	; 0x25a6 <PWM_enuInit+0x2f8>
				else
				{
					/****************************************/
					/*		Set 1B Compare Output Mode		*/
					/****************************************/
					TCCR1A |= ( ( PWMs[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COM1B_SEL_BITS );
    2562:	af e4       	ldi	r26, 0x4F	; 79
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	ef e4       	ldi	r30, 0x4F	; 79
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	c9 01       	movw	r24, r18
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	82 0f       	add	r24, r18
    2580:	93 1f       	adc	r25, r19
    2582:	fc 01       	movw	r30, r24
    2584:	ea 57       	subi	r30, 0x7A	; 122
    2586:	fe 4f       	sbci	r31, 0xFE	; 254
    2588:	80 81       	ld	r24, Z
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	44 97       	sbiw	r24, 0x14	; 20
    2590:	82 95       	swap	r24
    2592:	92 95       	swap	r25
    2594:	90 7f       	andi	r25, 0xF0	; 240
    2596:	98 27       	eor	r25, r24
    2598:	80 7f       	andi	r24, 0xF0	; 240
    259a:	98 27       	eor	r25, r24
    259c:	84 2b       	or	r24, r20
    259e:	8c 93       	st	X, r24
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <PWM_enuInit+0x2f8>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	8d 83       	std	Y+5, r24	; 0x05
			}

			/****************************************/
			/*			Set Interrupt Mode			*/
			/****************************************/
			switch( PWMs[Local_u8Iter].InterruptMode )
    25a6:	8b 81       	ldd	r24, Y+3	; 0x03
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	c9 01       	movw	r24, r18
    25ae:	88 0f       	add	r24, r24
    25b0:	99 1f       	adc	r25, r25
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	82 0f       	add	r24, r18
    25b8:	93 1f       	adc	r25, r19
    25ba:	fc 01       	movw	r30, r24
    25bc:	e8 57       	subi	r30, 0x78	; 120
    25be:	fe 4f       	sbci	r31, 0xFE	; 254
    25c0:	80 81       	ld	r24, Z
    25c2:	28 2f       	mov	r18, r24
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	39 87       	std	Y+9, r19	; 0x09
    25c8:	28 87       	std	Y+8, r18	; 0x08
    25ca:	88 85       	ldd	r24, Y+8	; 0x08
    25cc:	99 85       	ldd	r25, Y+9	; 0x09
    25ce:	83 33       	cpi	r24, 0x33	; 51
    25d0:	91 05       	cpc	r25, r1
    25d2:	31 f0       	breq	.+12     	; 0x25e0 <PWM_enuInit+0x332>
    25d4:	28 85       	ldd	r18, Y+8	; 0x08
    25d6:	39 85       	ldd	r19, Y+9	; 0x09
    25d8:	24 33       	cpi	r18, 0x34	; 52
    25da:	31 05       	cpc	r19, r1
    25dc:	49 f0       	breq	.+18     	; 0x25f0 <PWM_enuInit+0x342>
    25de:	28 c0       	rjmp	.+80     	; 0x2630 <PWM_enuInit+0x382>
			{
				case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1_BIT );				/*	Enable TOIE1 Interrupt */
    25e0:	a9 e5       	ldi	r26, 0x59	; 89
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e9 e5       	ldi	r30, 0x59	; 89
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	84 60       	ori	r24, 0x04	; 4
    25ec:	8c 93       	st	X, r24
    25ee:	22 c0       	rjmp	.+68     	; 0x2634 <PWM_enuInit+0x386>
											break;
				case PWM_OUT_COMP_INT	:	if( PWMs[Local_u8Iter].TimerNum == TIMER1B )
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	28 2f       	mov	r18, r24
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	c9 01       	movw	r24, r18
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	82 0f       	add	r24, r18
    2602:	93 1f       	adc	r25, r19
    2604:	fc 01       	movw	r30, r24
    2606:	ec 57       	subi	r30, 0x7C	; 124
    2608:	fe 4f       	sbci	r31, 0xFE	; 254
    260a:	80 81       	ld	r24, Z
    260c:	8a 3c       	cpi	r24, 0xCA	; 202
    260e:	41 f4       	brne	.+16     	; 0x2620 <PWM_enuInit+0x372>
											{
												SET_BIT( TIMSK , OCIE1B_BIT );			/*	Enable OCIE1B Interrupt */
    2610:	a9 e5       	ldi	r26, 0x59	; 89
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e9 e5       	ldi	r30, 0x59	; 89
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	88 60       	ori	r24, 0x08	; 8
    261c:	8c 93       	st	X, r24
    261e:	0a c0       	rjmp	.+20     	; 0x2634 <PWM_enuInit+0x386>
											}
											else
											{
												SET_BIT( TIMSK , OCIE1A_BIT );			/*	Enable OCIE1A Interrupt */
    2620:	a9 e5       	ldi	r26, 0x59	; 89
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e9 e5       	ldi	r30, 0x59	; 89
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	80 61       	ori	r24, 0x10	; 16
    262c:	8c 93       	st	X, r24
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <PWM_enuInit+0x386>
											}
											break;
				default :	Local_enuErrorState = ES_OUT_RANGE ;
    2630:	82 e0       	ldi	r24, 0x02	; 2
    2632:	8d 83       	std	Y+5, r24	; 0x05
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	8f 5f       	subi	r24, 0xFF	; 255
    2638:	8b 83       	std	Y+3, r24	; 0x03
    263a:	03 c0       	rjmp	.+6      	; 0x2642 <PWM_enuInit+0x394>
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE ;
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	8d 83       	std	Y+5, r24	; 0x05
    2640:	06 c0       	rjmp	.+12     	; 0x264e <PWM_enuInit+0x3a0>
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2642:	90 91 81 01 	lds	r25, 0x0181
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	89 17       	cp	r24, r25
    264a:	08 f4       	brcc	.+2      	; 0x264e <PWM_enuInit+0x3a0>
    264c:	3f ce       	rjmp	.-898    	; 0x22cc <PWM_enuInit+0x1e>
			#warning " PWM_Init(): Non Supported Timer Number , Initialization is terminated."
			break;
		}
	}

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	81 30       	cpi	r24, 0x01	; 1
    2652:	19 f0       	breq	.+6      	; 0x265a <PWM_enuInit+0x3ac>
    2654:	3d 81       	ldd	r19, Y+5	; 0x05
    2656:	3f 83       	std	Y+7, r19	; 0x07
    2658:	01 c0       	rjmp	.+2      	; 0x265c <PWM_enuInit+0x3ae>
    265a:	1f 82       	std	Y+7, r1	; 0x07
    265c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    265e:	29 96       	adiw	r28, 0x09	; 9
    2660:	0f b6       	in	r0, 0x3f	; 63
    2662:	f8 94       	cli
    2664:	de bf       	out	0x3e, r29	; 62
    2666:	0f be       	out	0x3f, r0	; 63
    2668:	cd bf       	out	0x3d, r28	; 61
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <PWM_u32TimerClock>:

static u32 PWM_u32TimerClock( u8 Copy_u8TimerNum ,u8 Copy_u8ClkSelectNum ,u8 *Copy_pu8ClkSelectPrescalar )
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	2a 97       	sbiw	r28, 0x0a	; 10
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	8d 83       	std	Y+5, r24	; 0x05
    2686:	6e 83       	std	Y+6, r22	; 0x06
    2688:	58 87       	std	Y+8, r21	; 0x08
    268a:	4f 83       	std	Y+7, r20	; 0x07
	u32 Copy_u32TimerClk = CPU_CLOCK;
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	94 e2       	ldi	r25, 0x24	; 36
    2690:	a4 ef       	ldi	r26, 0xF4	; 244
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	9a 83       	std	Y+2, r25	; 0x02
    2698:	ab 83       	std	Y+3, r26	; 0x03
    269a:	bc 83       	std	Y+4, r27	; 0x04


	switch( Copy_u8ClkSelectNum )
    269c:	8e 81       	ldd	r24, Y+6	; 0x06
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	3a 87       	std	Y+10, r19	; 0x0a
    26a4:	29 87       	std	Y+9, r18	; 0x09
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26aa:	8e 30       	cpi	r24, 0x0E	; 14
    26ac:	91 05       	cpc	r25, r1
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <PWM_u32TimerClock+0x42>
    26b0:	56 c0       	rjmp	.+172    	; 0x275e <PWM_u32TimerClock+0xee>
    26b2:	29 85       	ldd	r18, Y+9	; 0x09
    26b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    26b6:	2f 30       	cpi	r18, 0x0F	; 15
    26b8:	31 05       	cpc	r19, r1
    26ba:	84 f4       	brge	.+32     	; 0x26dc <PWM_u32TimerClock+0x6c>
    26bc:	89 85       	ldd	r24, Y+9	; 0x09
    26be:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c0:	8b 30       	cpi	r24, 0x0B	; 11
    26c2:	91 05       	cpc	r25, r1
    26c4:	91 f1       	breq	.+100    	; 0x272a <PWM_u32TimerClock+0xba>
    26c6:	29 85       	ldd	r18, Y+9	; 0x09
    26c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    26ca:	2c 30       	cpi	r18, 0x0C	; 12
    26cc:	31 05       	cpc	r19, r1
    26ce:	91 f1       	breq	.+100    	; 0x2734 <PWM_u32TimerClock+0xc4>
    26d0:	89 85       	ldd	r24, Y+9	; 0x09
    26d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d4:	8a 30       	cpi	r24, 0x0A	; 10
    26d6:	91 05       	cpc	r25, r1
    26d8:	01 f1       	breq	.+64     	; 0x271a <PWM_u32TimerClock+0xaa>
    26da:	97 c0       	rjmp	.+302    	; 0x280a <PWM_u32TimerClock+0x19a>
    26dc:	29 85       	ldd	r18, Y+9	; 0x09
    26de:	3a 85       	ldd	r19, Y+10	; 0x0a
    26e0:	21 31       	cpi	r18, 0x11	; 17
    26e2:	31 05       	cpc	r19, r1
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <PWM_u32TimerClock+0x78>
    26e6:	61 c0       	rjmp	.+194    	; 0x27aa <PWM_u32TimerClock+0x13a>
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	82 31       	cpi	r24, 0x12	; 18
    26ee:	91 05       	cpc	r25, r1
    26f0:	3c f4       	brge	.+14     	; 0x2700 <PWM_u32TimerClock+0x90>
    26f2:	29 85       	ldd	r18, Y+9	; 0x09
    26f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    26f6:	20 31       	cpi	r18, 0x10	; 16
    26f8:	31 05       	cpc	r19, r1
    26fa:	09 f4       	brne	.+2      	; 0x26fe <PWM_u32TimerClock+0x8e>
    26fc:	45 c0       	rjmp	.+138    	; 0x2788 <PWM_u32TimerClock+0x118>
    26fe:	85 c0       	rjmp	.+266    	; 0x280a <PWM_u32TimerClock+0x19a>
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	9a 85       	ldd	r25, Y+10	; 0x0a
    2704:	82 31       	cpi	r24, 0x12	; 18
    2706:	91 05       	cpc	r25, r1
    2708:	09 f4       	brne	.+2      	; 0x270c <PWM_u32TimerClock+0x9c>
    270a:	65 c0       	rjmp	.+202    	; 0x27d6 <PWM_u32TimerClock+0x166>
    270c:	29 85       	ldd	r18, Y+9	; 0x09
    270e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2710:	23 31       	cpi	r18, 0x13	; 19
    2712:	31 05       	cpc	r19, r1
    2714:	09 f4       	brne	.+2      	; 0x2718 <PWM_u32TimerClock+0xa8>
    2716:	6c c0       	rjmp	.+216    	; 0x27f0 <PWM_u32TimerClock+0x180>
    2718:	78 c0       	rjmp	.+240    	; 0x280a <PWM_u32TimerClock+0x19a>
	{
		case PWM_NO_CLK		:	*Copy_pu8ClkSelectPrescalar = 0;
    271a:	ef 81       	ldd	r30, Y+7	; 0x07
    271c:	f8 85       	ldd	r31, Y+8	; 0x08
    271e:	10 82       	st	Z, r1
							Copy_u32TimerClk = 0 ;
    2720:	19 82       	std	Y+1, r1	; 0x01
    2722:	1a 82       	std	Y+2, r1	; 0x02
    2724:	1b 82       	std	Y+3, r1	; 0x03
    2726:	1c 82       	std	Y+4, r1	; 0x04
    2728:	74 c0       	rjmp	.+232    	; 0x2812 <PWM_u32TimerClock+0x1a2>
							break;
		case PWM_PRES_1		:	*Copy_pu8ClkSelectPrescalar = 1;
    272a:	ef 81       	ldd	r30, Y+7	; 0x07
    272c:	f8 85       	ldd	r31, Y+8	; 0x08
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	80 83       	st	Z, r24
    2732:	6f c0       	rjmp	.+222    	; 0x2812 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_8 	:	*Copy_pu8ClkSelectPrescalar = 2;
    2734:	ef 81       	ldd	r30, Y+7	; 0x07
    2736:	f8 85       	ldd	r31, Y+8	; 0x08
    2738:	82 e0       	ldi	r24, 0x02	; 2
    273a:	80 83       	st	Z, r24
							Copy_u32TimerClk >>= 3 ;
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	9a 81       	ldd	r25, Y+2	; 0x02
    2740:	ab 81       	ldd	r26, Y+3	; 0x03
    2742:	bc 81       	ldd	r27, Y+4	; 0x04
    2744:	68 94       	set
    2746:	12 f8       	bld	r1, 2
    2748:	b6 95       	lsr	r27
    274a:	a7 95       	ror	r26
    274c:	97 95       	ror	r25
    274e:	87 95       	ror	r24
    2750:	16 94       	lsr	r1
    2752:	d1 f7       	brne	.-12     	; 0x2748 <PWM_u32TimerClock+0xd8>
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	9a 83       	std	Y+2, r25	; 0x02
    2758:	ab 83       	std	Y+3, r26	; 0x03
    275a:	bc 83       	std	Y+4, r27	; 0x04
    275c:	5a c0       	rjmp	.+180    	; 0x2812 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_64 	:	Copy_u32TimerClk >>= 6 ;
    275e:	89 81       	ldd	r24, Y+1	; 0x01
    2760:	9a 81       	ldd	r25, Y+2	; 0x02
    2762:	ab 81       	ldd	r26, Y+3	; 0x03
    2764:	bc 81       	ldd	r27, Y+4	; 0x04
    2766:	68 94       	set
    2768:	15 f8       	bld	r1, 5
    276a:	b6 95       	lsr	r27
    276c:	a7 95       	ror	r26
    276e:	97 95       	ror	r25
    2770:	87 95       	ror	r24
    2772:	16 94       	lsr	r1
    2774:	d1 f7       	brne	.-12     	; 0x276a <PWM_u32TimerClock+0xfa>
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	ab 83       	std	Y+3, r26	; 0x03
    277c:	bc 83       	std	Y+4, r27	; 0x04
							*Copy_pu8ClkSelectPrescalar = 3;
    277e:	ef 81       	ldd	r30, Y+7	; 0x07
    2780:	f8 85       	ldd	r31, Y+8	; 0x08
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	80 83       	st	Z, r24
    2786:	45 c0       	rjmp	.+138    	; 0x2812 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_256	 :	Copy_u32TimerClk >>= 8 ;
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	ab 81       	ldd	r26, Y+3	; 0x03
    278e:	bc 81       	ldd	r27, Y+4	; 0x04
    2790:	89 2f       	mov	r24, r25
    2792:	9a 2f       	mov	r25, r26
    2794:	ab 2f       	mov	r26, r27
    2796:	bb 27       	eor	r27, r27
    2798:	89 83       	std	Y+1, r24	; 0x01
    279a:	9a 83       	std	Y+2, r25	; 0x02
    279c:	ab 83       	std	Y+3, r26	; 0x03
    279e:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 6;
							//else
							*Copy_pu8ClkSelectPrescalar = 4;
    27a0:	ef 81       	ldd	r30, Y+7	; 0x07
    27a2:	f8 85       	ldd	r31, Y+8	; 0x08
    27a4:	84 e0       	ldi	r24, 0x04	; 4
    27a6:	80 83       	st	Z, r24
    27a8:	34 c0       	rjmp	.+104    	; 0x2812 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_1024 :	Copy_u32TimerClk >>= 10 ;
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	9a 81       	ldd	r25, Y+2	; 0x02
    27ae:	ab 81       	ldd	r26, Y+3	; 0x03
    27b0:	bc 81       	ldd	r27, Y+4	; 0x04
    27b2:	07 2e       	mov	r0, r23
    27b4:	7a e0       	ldi	r23, 0x0A	; 10
    27b6:	b6 95       	lsr	r27
    27b8:	a7 95       	ror	r26
    27ba:	97 95       	ror	r25
    27bc:	87 95       	ror	r24
    27be:	7a 95       	dec	r23
    27c0:	d1 f7       	brne	.-12     	; 0x27b6 <PWM_u32TimerClock+0x146>
    27c2:	70 2d       	mov	r23, r0
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	ab 83       	std	Y+3, r26	; 0x03
    27ca:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 7;
							//else
							*Copy_pu8ClkSelectPrescalar = 5;
    27cc:	ef 81       	ldd	r30, Y+7	; 0x07
    27ce:	f8 85       	ldd	r31, Y+8	; 0x08
    27d0:	85 e0       	ldi	r24, 0x05	; 5
    27d2:	80 83       	st	Z, r24
    27d4:	1e c0       	rjmp	.+60     	; 0x2812 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_EXT_CLK_FALL	 :		Copy_u32TimerClk = EXT_CLOCK ;
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	9f ef       	ldi	r25, 0xFF	; 255
    27da:	af ef       	ldi	r26, 0xFF	; 255
    27dc:	bf ef       	ldi	r27, 0xFF	; 255
    27de:	89 83       	std	Y+1, r24	; 0x01
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	ab 83       	std	Y+3, r26	; 0x03
    27e4:	bc 83       	std	Y+4, r27	; 0x04
									//if( Copy_u8TimerNum == TIMER0 || Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B || Copy_u8TimerNum == TIMER1 )
									//{
										*Copy_pu8ClkSelectPrescalar = 6;
    27e6:	ef 81       	ldd	r30, Y+7	; 0x07
    27e8:	f8 85       	ldd	r31, Y+8	; 0x08
    27ea:	86 e0       	ldi	r24, 0x06	; 6
    27ec:	80 83       	st	Z, r24
    27ee:	11 c0       	rjmp	.+34     	; 0x2812 <PWM_u32TimerClock+0x1a2>
										//break;
									//}
									//#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		case PWM_EXT_CLK_RISE	 :		Copy_u32TimerClk = EXT_CLOCK ;
    27f0:	8f ef       	ldi	r24, 0xFF	; 255
    27f2:	9f ef       	ldi	r25, 0xFF	; 255
    27f4:	af ef       	ldi	r26, 0xFF	; 255
    27f6:	bf ef       	ldi	r27, 0xFF	; 255
    27f8:	89 83       	std	Y+1, r24	; 0x01
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	ab 83       	std	Y+3, r26	; 0x03
    27fe:	bc 83       	std	Y+4, r27	; 0x04
									//if( Copy_u8TimerNum == TIMER0 || Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B || Copy_u8TimerNum == TIMER1 )
									//{
										*Copy_pu8ClkSelectPrescalar = 7;
    2800:	ef 81       	ldd	r30, Y+7	; 0x07
    2802:	f8 85       	ldd	r31, Y+8	; 0x08
    2804:	87 e0       	ldi	r24, 0x07	; 7
    2806:	80 83       	st	Z, r24
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <PWM_u32TimerClock+0x1a2>
									//	break;
									//}
									//#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		default:	Copy_u32TimerClk = 0;
    280a:	19 82       	std	Y+1, r1	; 0x01
    280c:	1a 82       	std	Y+2, r1	; 0x02
    280e:	1b 82       	std	Y+3, r1	; 0x03
    2810:	1c 82       	std	Y+4, r1	; 0x04
					#warning "Unsupported Clock mode is selected , Timer is disabled"
	}

	return Copy_u32TimerClk ;
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	ab 81       	ldd	r26, Y+3	; 0x03
    2818:	bc 81       	ldd	r27, Y+4	; 0x04

}
    281a:	bc 01       	movw	r22, r24
    281c:	cd 01       	movw	r24, r26
    281e:	2a 96       	adiw	r28, 0x0a	; 10
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <PWM_enuSetClkPrescaler>:
	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif

ES_t PWM_enuSetClkPrescaler( u8 Copy_u8TimerNum , u8 Copy_u8PrescalerValue )
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	2a 97       	sbiw	r28, 0x0a	; 10
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	88 87       	std	Y+8, r24	; 0x08
    2846:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8ClkSelectPrescaler = PWM_NO_CLK ;
    284c:	8a e0       	ldi	r24, 0x0A	; 10
    284e:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    2850:	e9 e5       	ldi	r30, 0x59	; 89
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32TimerClk = PWM_u32TimerClock( Copy_u8TimerNum , Copy_u8PrescalerValue , &Local_u8ClkSelectPrescaler ) ;
    2858:	9e 01       	movw	r18, r28
    285a:	29 5f       	subi	r18, 0xF9	; 249
    285c:	3f 4f       	sbci	r19, 0xFF	; 255
    285e:	88 85       	ldd	r24, Y+8	; 0x08
    2860:	69 85       	ldd	r22, Y+9	; 0x09
    2862:	a9 01       	movw	r20, r18
    2864:	0e 94 38 13 	call	0x2670	; 0x2670 <PWM_u32TimerClock>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	9a 83       	std	Y+2, r25	; 0x02
    2870:	ab 83       	std	Y+3, r26	; 0x03
    2872:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    2874:	88 85       	ldd	r24, Y+8	; 0x08
    2876:	89 3c       	cpi	r24, 0xC9	; 201
    2878:	19 f0       	breq	.+6      	; 0x2880 <PWM_enuSetClkPrescaler+0x50>
    287a:	88 85       	ldd	r24, Y+8	; 0x08
    287c:	8a 3c       	cpi	r24, 0xCA	; 202
    287e:	19 f5       	brne	.+70     	; 0x28c6 <PWM_enuSetClkPrescaler+0x96>
	{
		TIMSK &= ~( TC1_INT_EN_MASK ) ;								// Disable Timer1 Interrupts
    2880:	a9 e5       	ldi	r26, 0x59	; 89
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	e9 e5       	ldi	r30, 0x59	; 89
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	80 81       	ld	r24, Z
    288a:	83 7c       	andi	r24, 0xC3	; 195
    288c:	8c 93       	st	X, r24
		TCCR1B &= ~( CLK1_SEL_BITS_MASK );							// Masking Clock Select bits
    288e:	ae e4       	ldi	r26, 0x4E	; 78
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	ee e4       	ldi	r30, 0x4E	; 78
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	88 7f       	andi	r24, 0xF8	; 248
    289a:	8c 93       	st	X, r24
		TCCR1B |= ( Local_u8ClkSelectPrescaler  << CLK1_SEL_BITS );	// Setting New Prescaler
    289c:	ae e4       	ldi	r26, 0x4E	; 78
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	ee e4       	ldi	r30, 0x4E	; 78
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	90 81       	ld	r25, Z
    28a6:	8f 81       	ldd	r24, Y+7	; 0x07
    28a8:	89 2b       	or	r24, r25
    28aa:	8c 93       	st	X, r24
		Global_u32Timer1_Clk = Local_u32TimerClk ;					// Saving New Actual Timer1 Clock
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	9a 81       	ldd	r25, Y+2	; 0x02
    28b0:	ab 81       	ldd	r26, Y+3	; 0x03
    28b2:	bc 81       	ldd	r27, Y+4	; 0x04
    28b4:	80 93 31 02 	sts	0x0231, r24
    28b8:	90 93 32 02 	sts	0x0232, r25
    28bc:	a0 93 33 02 	sts	0x0233, r26
    28c0:	b0 93 34 02 	sts	0x0234, r27
    28c4:	02 c0       	rjmp	.+4      	; 0x28ca <PWM_enuSetClkPrescaler+0x9a>
#ifndef PWM
		PWMs[ TIMER1A - TIMER1A ].ClkSelect = Copy_u8PrescalerValue ;
		PWMs[ TIMER1B - TIMER1A ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	8e 83       	std	Y+6, r24	; 0x06

	TIMSK = Local_u8CopyTIMSK ;										// Re-setting Timer Interrupt Mask Register to its initial Status
    28ca:	e9 e5       	ldi	r30, 0x59	; 89
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	8d 81       	ldd	r24, Y+5	; 0x05
    28d0:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    28d2:	8e 81       	ldd	r24, Y+6	; 0x06
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	19 f0       	breq	.+6      	; 0x28de <PWM_enuSetClkPrescaler+0xae>
    28d8:	8e 81       	ldd	r24, Y+6	; 0x06
    28da:	8a 87       	std	Y+10, r24	; 0x0a
    28dc:	01 c0       	rjmp	.+2      	; 0x28e0 <PWM_enuSetClkPrescaler+0xb0>
    28de:	1a 86       	std	Y+10, r1	; 0x0a
    28e0:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    28e2:	2a 96       	adiw	r28, 0x0a	; 10
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	08 95       	ret

000028f4 <PWM_enuSetCOM_Mode>:

	return Local_enuErrorState ;
}
#endif
ES_t PWM_enuSetCOM_Mode( u8 Copy_u8TimerNum , u8 Copy_u8COM_Mode )
{
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <PWM_enuSetCOM_Mode+0x6>
    28fa:	00 d0       	rcall	.+0      	; 0x28fc <PWM_enuSetCOM_Mode+0x8>
    28fc:	0f 92       	push	r0
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	8b 83       	std	Y+3, r24	; 0x03
    2904:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    290a:	e9 e5       	ldi	r30, 0x59	; 89
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8COM_Mode == COMP_NON_INVERTED ||	Copy_u8COM_Mode == COMP_INVERTED )
    2912:	8c 81       	ldd	r24, Y+4	; 0x04
    2914:	86 31       	cpi	r24, 0x16	; 22
    2916:	21 f0       	breq	.+8      	; 0x2920 <PWM_enuSetCOM_Mode+0x2c>
    2918:	8c 81       	ldd	r24, Y+4	; 0x04
    291a:	87 31       	cpi	r24, 0x17	; 23
    291c:	09 f0       	breq	.+2      	; 0x2920 <PWM_enuSetCOM_Mode+0x2c>
    291e:	52 c0       	rjmp	.+164    	; 0x29c4 <PWM_enuSetCOM_Mode+0xd0>
	{
		if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	89 3c       	cpi	r24, 0xC9	; 201
    2924:	21 f0       	breq	.+8      	; 0x292e <PWM_enuSetCOM_Mode+0x3a>
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	8a 3c       	cpi	r24, 0xCA	; 202
    292a:	09 f0       	breq	.+2      	; 0x292e <PWM_enuSetCOM_Mode+0x3a>
    292c:	44 c0       	rjmp	.+136    	; 0x29b6 <PWM_enuSetCOM_Mode+0xc2>
		{
			TIMSK &= ~( TC1_INT_EN_MASK ) ;													// Disable Timer1 Interrupts
    292e:	a9 e5       	ldi	r26, 0x59	; 89
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	e9 e5       	ldi	r30, 0x59	; 89
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	83 7c       	andi	r24, 0xC3	; 195
    293a:	8c 93       	st	X, r24
			if( Copy_u8TimerNum == TIMER1A )
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	89 3c       	cpi	r24, 0xC9	; 201
    2940:	e9 f4       	brne	.+58     	; 0x297c <PWM_enuSetCOM_Mode+0x88>
			{
				TCCR1A &= ~( COM1A_SEL_BITS_MASK ) ;										// Masking COM Select bits
    2942:	af e4       	ldi	r26, 0x4F	; 79
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	ef e4       	ldi	r30, 0x4F	; 79
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	8f 73       	andi	r24, 0x3F	; 63
    294e:	8c 93       	st	X, r24
				TCCR1A |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COM1A_SEL_BITS ) ;			// Setting New Compare Output Mode
    2950:	af e4       	ldi	r26, 0x4F	; 79
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	ef e4       	ldi	r30, 0x4F	; 79
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	28 2f       	mov	r18, r24
    295c:	8c 81       	ldd	r24, Y+4	; 0x04
    295e:	88 2f       	mov	r24, r24
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	44 97       	sbiw	r24, 0x14	; 20
    2964:	00 24       	eor	r0, r0
    2966:	96 95       	lsr	r25
    2968:	87 95       	ror	r24
    296a:	07 94       	ror	r0
    296c:	96 95       	lsr	r25
    296e:	87 95       	ror	r24
    2970:	07 94       	ror	r0
    2972:	98 2f       	mov	r25, r24
    2974:	80 2d       	mov	r24, r0
    2976:	82 2b       	or	r24, r18
    2978:	8c 93       	st	X, r24
    297a:	1f c0       	rjmp	.+62     	; 0x29ba <PWM_enuSetCOM_Mode+0xc6>
#ifndef PWM
				PWMs[ TIMER1A - TIMER1A ].CompOutMode = Copy_u8COM_Mode ;
#endif
			}
			else if( Copy_u8TimerNum == TIMER1B )
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	8a 3c       	cpi	r24, 0xCA	; 202
    2980:	e1 f4       	brne	.+56     	; 0x29ba <PWM_enuSetCOM_Mode+0xc6>
			{
				TCCR1B &= ~( COM1B_SEL_BITS_MASK ) ;										// Masking COM Select bits
    2982:	ae e4       	ldi	r26, 0x4E	; 78
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	ee e4       	ldi	r30, 0x4E	; 78
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	8f 7c       	andi	r24, 0xCF	; 207
    298e:	8c 93       	st	X, r24
				TCCR1B |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COM1B_SEL_BITS ) ;			// Setting New Compare Output Mode
    2990:	ae e4       	ldi	r26, 0x4E	; 78
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	ee e4       	ldi	r30, 0x4E	; 78
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	28 2f       	mov	r18, r24
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	44 97       	sbiw	r24, 0x14	; 20
    29a4:	82 95       	swap	r24
    29a6:	92 95       	swap	r25
    29a8:	90 7f       	andi	r25, 0xF0	; 240
    29aa:	98 27       	eor	r25, r24
    29ac:	80 7f       	andi	r24, 0xF0	; 240
    29ae:	98 27       	eor	r25, r24
    29b0:	82 2b       	or	r24, r18
    29b2:	8c 93       	st	X, r24
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <PWM_enuSetCOM_Mode+0xc6>
			else
			{
				#warning "Timer_enuSetCOM_Mode() : For setting COM mode please Specify TIMER1A / TIMER1B , TIMER1 choice is not allowed. No Action Taken. "
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    29b6:	82 e0       	ldi	r24, 0x02	; 2
    29b8:	8a 83       	std	Y+2, r24	; 0x02

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    29ba:	e9 e5       	ldi	r30, 0x59	; 89
    29bc:	f0 e0       	ldi	r31, 0x00	; 0
    29be:	89 81       	ldd	r24, Y+1	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <PWM_enuSetCOM_Mode+0xd4>

	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE ;
    29c4:	82 e0       	ldi	r24, 0x02	; 2
    29c6:	8a 83       	std	Y+2, r24	; 0x02
		#warning "PWM_enuSetCOM_Mode(): Non Supported Compare Output mode, No Action Taken ."
	}


	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	81 30       	cpi	r24, 0x01	; 1
    29cc:	19 f0       	breq	.+6      	; 0x29d4 <PWM_enuSetCOM_Mode+0xe0>
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	8d 83       	std	Y+5, r24	; 0x05
    29d2:	01 c0       	rjmp	.+2      	; 0x29d6 <PWM_enuSetCOM_Mode+0xe2>
    29d4:	1d 82       	std	Y+5, r1	; 0x05
    29d6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <PWM_enuSetWGM_Mode>:
	return Local_enuErrorState ;
}
#endif

ES_t PWM_enuSetWGM_Mode( u8 Copy_u8TimerNum , u8 Copy_u8WGM_Mode )
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <PWM_enuSetWGM_Mode+0x6>
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <PWM_enuSetWGM_Mode+0x8>
    29f0:	00 d0       	rcall	.+0      	; 0x29f2 <PWM_enuSetWGM_Mode+0xa>
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
    29f6:	8c 83       	std	Y+4, r24	; 0x04
    29f8:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	8b 83       	std	Y+3, r24	; 0x03


	if( Copy_u8WGM_Mode > WGM_MODE_00	&& Copy_u8WGM_Mode <= WGM_FAST_OCR1A &&
    29fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2a00:	85 36       	cpi	r24, 0x65	; 101
    2a02:	08 f4       	brcc	.+2      	; 0x2a06 <PWM_enuSetWGM_Mode+0x1e>
    2a04:	6a c0       	rjmp	.+212    	; 0x2ada <PWM_enuSetWGM_Mode+0xf2>
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	84 37       	cpi	r24, 0x74	; 116
    2a0a:	08 f0       	brcs	.+2      	; 0x2a0e <PWM_enuSetWGM_Mode+0x26>
    2a0c:	66 c0       	rjmp	.+204    	; 0x2ada <PWM_enuSetWGM_Mode+0xf2>
    2a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a10:	88 36       	cpi	r24, 0x68	; 104
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <PWM_enuSetWGM_Mode+0x2e>
    2a14:	62 c0       	rjmp	.+196    	; 0x2ada <PWM_enuSetWGM_Mode+0xf2>
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	80 37       	cpi	r24, 0x70	; 112
    2a1a:	09 f4       	brne	.+2      	; 0x2a1e <PWM_enuSetWGM_Mode+0x36>
    2a1c:	5e c0       	rjmp	.+188    	; 0x2ada <PWM_enuSetWGM_Mode+0xf2>
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	81 37       	cpi	r24, 0x71	; 113
    2a22:	09 f4       	brne	.+2      	; 0x2a26 <PWM_enuSetWGM_Mode+0x3e>
    2a24:	5a c0       	rjmp	.+180    	; 0x2ada <PWM_enuSetWGM_Mode+0xf2>
		Copy_u8WGM_Mode != WGM_MODE_04	&& Copy_u8WGM_Mode != WGM_MODE_12 && Copy_u8WGM_Mode != WGM_MODE_13 )
	{

		u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    2a26:	e9 e5       	ldi	r30, 0x59	; 89
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8a 83       	std	Y+2, r24	; 0x02

		if( ( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B ) &&
    2a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a30:	89 3c       	cpi	r24, 0xC9	; 201
    2a32:	21 f0       	breq	.+8      	; 0x2a3c <PWM_enuSetWGM_Mode+0x54>
    2a34:	8c 81       	ldd	r24, Y+4	; 0x04
    2a36:	8a 3c       	cpi	r24, 0xCA	; 202
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <PWM_enuSetWGM_Mode+0x54>
    2a3a:	48 c0       	rjmp	.+144    	; 0x2acc <PWM_enuSetWGM_Mode+0xe4>
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	85 36       	cpi	r24, 0x65	; 101
    2a40:	08 f4       	brcc	.+2      	; 0x2a44 <PWM_enuSetWGM_Mode+0x5c>
    2a42:	44 c0       	rjmp	.+136    	; 0x2acc <PWM_enuSetWGM_Mode+0xe4>
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	84 37       	cpi	r24, 0x74	; 116
    2a48:	08 f0       	brcs	.+2      	; 0x2a4c <PWM_enuSetWGM_Mode+0x64>
    2a4a:	40 c0       	rjmp	.+128    	; 0x2acc <PWM_enuSetWGM_Mode+0xe4>
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	88 36       	cpi	r24, 0x68	; 104
    2a50:	e9 f1       	breq	.+122    	; 0x2acc <PWM_enuSetWGM_Mode+0xe4>
    2a52:	8d 81       	ldd	r24, Y+5	; 0x05
    2a54:	80 37       	cpi	r24, 0x70	; 112
    2a56:	d1 f1       	breq	.+116    	; 0x2acc <PWM_enuSetWGM_Mode+0xe4>
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	81 37       	cpi	r24, 0x71	; 113
    2a5c:	b9 f1       	breq	.+110    	; 0x2acc <PWM_enuSetWGM_Mode+0xe4>
			Copy_u8WGM_Mode > WGM_MODE_00	&& Copy_u8WGM_Mode <= WGM_FAST_OCR1A &&
			Copy_u8WGM_Mode != WGM_MODE_04	&& Copy_u8WGM_Mode != WGM_MODE_12 && Copy_u8WGM_Mode != WGM_MODE_13 )
		{
			u8 Local_u8WGM = Copy_u8WGM_Mode - WGM_MODE_00 ;
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	84 56       	subi	r24, 0x64	; 100
    2a62:	89 83       	std	Y+1, r24	; 0x01
			TIMSK &= ~( TC1_INT_EN_MASK ) ;													// Disable Timer1 Interrupts
    2a64:	a9 e5       	ldi	r26, 0x59	; 89
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e9 e5       	ldi	r30, 0x59	; 89
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	83 7c       	andi	r24, 0xC3	; 195
    2a70:	8c 93       	st	X, r24
			TCCR1B &= ~( WGM1B_SEL_BITS_MASK );												// Masking WGM1B Select bits
    2a72:	ae e4       	ldi	r26, 0x4E	; 78
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	ee e4       	ldi	r30, 0x4E	; 78
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	87 7e       	andi	r24, 0xE7	; 231
    2a7e:	8c 93       	st	X, r24
			TCCR1A |= ( ( Local_u8WGM & _TWO_BITS_MASK_ ) << WGM1A_SEL_BITS );				// Setting WGM10 & WGM11 Select bits
    2a80:	af e4       	ldi	r26, 0x4F	; 79
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	ef e4       	ldi	r30, 0x4F	; 79
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	80 81       	ld	r24, Z
    2a8a:	98 2f       	mov	r25, r24
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	83 70       	andi	r24, 0x03	; 3
    2a90:	89 2b       	or	r24, r25
    2a92:	8c 93       	st	X, r24
			TCCR1B |= ( ( ( Local_u8WGM >> BIT1_MASK) & _TWO_BITS_MASK_ ) << WGM1B_SEL_BITS );// Setting WGM12 & WGM13 Select bits
    2a94:	ae e4       	ldi	r26, 0x4E	; 78
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	ee e4       	ldi	r30, 0x4E	; 78
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	89 81       	ldd	r24, Y+1	; 0x01
    2aa2:	86 95       	lsr	r24
    2aa4:	86 95       	lsr	r24
    2aa6:	88 2f       	mov	r24, r24
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	83 70       	andi	r24, 0x03	; 3
    2aac:	90 70       	andi	r25, 0x00	; 0
    2aae:	88 0f       	add	r24, r24
    2ab0:	99 1f       	adc	r25, r25
    2ab2:	88 0f       	add	r24, r24
    2ab4:	99 1f       	adc	r25, r25
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	82 2b       	or	r24, r18
    2abc:	8c 93       	st	X, r24
			PWMs[ TIMER1A - TIMER1A ].WaveGenMode = Copy_u8WGM_Mode ;
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	80 93 87 01 	sts	0x0187, r24
			PWMs[ TIMER1B - TIMER1A ].WaveGenMode = Copy_u8WGM_Mode ;
    2ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac6:	80 93 8c 01 	sts	0x018C, r24
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <PWM_enuSetWGM_Mode+0xe8>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    2acc:	82 e0       	ldi	r24, 0x02	; 2
    2ace:	8b 83       	std	Y+3, r24	; 0x03

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    2ad0:	e9 e5       	ldi	r30, 0x59	; 89
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	80 83       	st	Z, r24
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <PWM_enuSetWGM_Mode+0xf6>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2ada:	82 e0       	ldi	r24, 0x02	; 2
    2adc:	8b 83       	std	Y+3, r24	; 0x03

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    2ade:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	19 f0       	breq	.+6      	; 0x2aea <PWM_enuSetWGM_Mode+0x102>
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	8e 83       	std	Y+6, r24	; 0x06
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <PWM_enuSetWGM_Mode+0x104>
    2aea:	1e 82       	std	Y+6, r1	; 0x06
    2aec:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2aee:	26 96       	adiw	r28, 0x06	; 6
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <PWM_enuSetOCRnValue>:
	return Local_enuErrorState ;
}
#endif

ES_t PWM_enuSetOCRnValue( u8 Copy_u8TimerNum , u16 Copy_u16OCRnValue )
{
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	27 97       	sbiw	r28, 0x07	; 7
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	8c 83       	std	Y+4, r24	; 0x04
    2b16:	7e 83       	std	Y+6, r23	; 0x06
    2b18:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	8b 83       	std	Y+3, r24	; 0x03

	if( Copy_u8TimerNum == TIMER1A && Copy_u16OCRnValue <= Timer1Max )
    2b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b20:	89 3c       	cpi	r24, 0xC9	; 201
    2b22:	21 f5       	brne	.+72     	; 0x2b6c <PWM_enuSetOCRnValue+0x6c>
    2b24:	20 91 82 01 	lds	r18, 0x0182
    2b28:	30 91 83 01 	lds	r19, 0x0183
    2b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b30:	28 17       	cp	r18, r24
    2b32:	39 07       	cpc	r19, r25
    2b34:	d8 f0       	brcs	.+54     	; 0x2b6c <PWM_enuSetOCRnValue+0x6c>
	{
		u8 Local_u8Temp = SREG ;
    2b36:	ef e5       	ldi	r30, 0x5F	; 95
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	8a 83       	std	Y+2, r24	; 0x02
		_CLI_;
    2b3e:	f8 94       	cli
		OCR1AH  = Copy_u16OCRnValue >> 8 ;
    2b40:	eb e4       	ldi	r30, 0x4B	; 75
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	9e 81       	ldd	r25, Y+6	; 0x06
    2b48:	89 2f       	mov	r24, r25
    2b4a:	99 27       	eor	r25, r25
    2b4c:	80 83       	st	Z, r24
		OCR1AL 	= Copy_u16OCRnValue ;
    2b4e:	ea e4       	ldi	r30, 0x4A	; 74
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	80 83       	st	Z, r24
		SREG = Local_u8Temp;
    2b56:	ef e5       	ldi	r30, 0x5F	; 95
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5c:	80 83       	st	Z, r24
		Global_u16OCR1A_Value = Copy_u16OCRnValue ;
    2b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b60:	9e 81       	ldd	r25, Y+6	; 0x06
    2b62:	90 93 2c 02 	sts	0x022C, r25
    2b66:	80 93 2b 02 	sts	0x022B, r24
    2b6a:	29 c0       	rjmp	.+82     	; 0x2bbe <PWM_enuSetOCRnValue+0xbe>
	}
	else if( Copy_u8TimerNum == TIMER1B && Copy_u16OCRnValue <= Timer1Max )
    2b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6e:	8a 3c       	cpi	r24, 0xCA	; 202
    2b70:	21 f5       	brne	.+72     	; 0x2bba <PWM_enuSetOCRnValue+0xba>
    2b72:	20 91 82 01 	lds	r18, 0x0182
    2b76:	30 91 83 01 	lds	r19, 0x0183
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	28 17       	cp	r18, r24
    2b80:	39 07       	cpc	r19, r25
    2b82:	d8 f0       	brcs	.+54     	; 0x2bba <PWM_enuSetOCRnValue+0xba>
	{
		u8 Local_u8Temp = SREG ;
    2b84:	ef e5       	ldi	r30, 0x5F	; 95
    2b86:	f0 e0       	ldi	r31, 0x00	; 0
    2b88:	80 81       	ld	r24, Z
    2b8a:	89 83       	std	Y+1, r24	; 0x01
		_CLI_;
    2b8c:	f8 94       	cli
		OCR1BH  = Copy_u16OCRnValue >> 8 ;
    2b8e:	e9 e4       	ldi	r30, 0x49	; 73
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	8d 81       	ldd	r24, Y+5	; 0x05
    2b94:	9e 81       	ldd	r25, Y+6	; 0x06
    2b96:	89 2f       	mov	r24, r25
    2b98:	99 27       	eor	r25, r25
    2b9a:	80 83       	st	Z, r24
		OCR1BL 	= Copy_u16OCRnValue ;
    2b9c:	e8 e4       	ldi	r30, 0x48	; 72
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	80 83       	st	Z, r24
		SREG = Local_u8Temp;
    2ba4:	ef e5       	ldi	r30, 0x5F	; 95
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	80 83       	st	Z, r24
		Global_u16OCR1B_Value = Copy_u16OCRnValue ;
    2bac:	8d 81       	ldd	r24, Y+5	; 0x05
    2bae:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb0:	90 93 2e 02 	sts	0x022E, r25
    2bb4:	80 93 2d 02 	sts	0x022D, r24
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <PWM_enuSetOCRnValue+0xbe>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2bba:	82 e0       	ldi	r24, 0x02	; 2
    2bbc:	8b 83       	std	Y+3, r24	; 0x03

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    2bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc0:	81 30       	cpi	r24, 0x01	; 1
    2bc2:	19 f0       	breq	.+6      	; 0x2bca <PWM_enuSetOCRnValue+0xca>
    2bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc6:	8f 83       	std	Y+7, r24	; 0x07
    2bc8:	01 c0       	rjmp	.+2      	; 0x2bcc <PWM_enuSetOCRnValue+0xcc>
    2bca:	1f 82       	std	Y+7, r1	; 0x07
    2bcc:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2bce:	27 96       	adiw	r28, 0x07	; 7
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <PWM_enuSetICR1Value>:

		return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif
ES_t PWM_enuSetICR1Value( u16 Copy_u16ICR1Value )
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <PWM_enuSetICR1Value+0x6>
    2be6:	0f 92       	push	r0
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	9b 83       	std	Y+3, r25	; 0x03
    2bee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Temp = SREG ;
    2bf0:	ef e5       	ldi	r30, 0x5F	; 95
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;
    2bf8:	f8 94       	cli
	ICR1H = Copy_u16ICR1Value >> 8 ;
    2bfa:	e7 e4       	ldi	r30, 0x47	; 71
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	89 2f       	mov	r24, r25
    2c04:	99 27       	eor	r25, r25
    2c06:	80 83       	st	Z, r24
	ICR1L = Copy_u16ICR1Value ;
    2c08:	e6 e4       	ldi	r30, 0x46	; 70
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0e:	80 83       	st	Z, r24
	SREG = Local_u8Temp;
    2c10:	ef e5       	ldi	r30, 0x5F	; 95
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	80 83       	st	Z, r24
	Global_u16ICR1_Value = Copy_u16ICR1Value ;
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	90 93 30 02 	sts	0x0230, r25
    2c20:	80 93 2f 02 	sts	0x022F, r24
	return ES_OK;
    2c24:	80 e0       	ldi	r24, 0x00	; 0
}
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	cf 91       	pop	r28
    2c2e:	df 91       	pop	r29
    2c30:	08 95       	ret

00002c32 <PWM_enuSetInterruptMode>:

ES_t PWM_enuSetInterruptMode( u8 Copy_u8TimerNum , u8 Copy_u8TimerInterruptMode )
{
    2c32:	df 93       	push	r29
    2c34:	cf 93       	push	r28
    2c36:	cd b7       	in	r28, 0x3d	; 61
    2c38:	de b7       	in	r29, 0x3e	; 62
    2c3a:	27 97       	sbiw	r28, 0x07	; 7
    2c3c:	0f b6       	in	r0, 0x3f	; 63
    2c3e:	f8 94       	cli
    2c40:	de bf       	out	0x3e, r29	; 62
    2c42:	0f be       	out	0x3f, r0	; 63
    2c44:	cd bf       	out	0x3d, r28	; 61
    2c46:	8c 83       	std	Y+4, r24	; 0x04
    2c48:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	8b 83       	std	Y+3, r24	; 0x03

	if( ( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B ) &&
    2c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c50:	89 3c       	cpi	r24, 0xC9	; 201
    2c52:	21 f0       	breq	.+8      	; 0x2c5c <PWM_enuSetInterruptMode+0x2a>
    2c54:	8c 81       	ldd	r24, Y+4	; 0x04
    2c56:	8a 3c       	cpi	r24, 0xCA	; 202
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <PWM_enuSetInterruptMode+0x2a>
    2c5a:	7c c0       	rjmp	.+248    	; 0x2d54 <PWM_enuSetInterruptMode+0x122>
    2c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5e:	83 33       	cpi	r24, 0x33	; 51
    2c60:	21 f0       	breq	.+8      	; 0x2c6a <PWM_enuSetInterruptMode+0x38>
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	84 33       	cpi	r24, 0x34	; 52
    2c66:	09 f0       	breq	.+2      	; 0x2c6a <PWM_enuSetInterruptMode+0x38>
    2c68:	75 c0       	rjmp	.+234    	; 0x2d54 <PWM_enuSetInterruptMode+0x122>
		( Copy_u8TimerInterruptMode == PWM_OVERFLOW_INT || Copy_u8TimerInterruptMode == PWM_OUT_COMP_INT ) )
	{
		u8 Local_u8Iter = 0 , Local_u8Updated = 0 ;
    2c6a:	1a 82       	std	Y+2, r1	; 0x02
    2c6c:	19 82       	std	Y+1, r1	; 0x01

		switch( Copy_u8TimerInterruptMode )
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	3f 83       	std	Y+7, r19	; 0x07
    2c76:	2e 83       	std	Y+6, r18	; 0x06
    2c78:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c7c:	83 33       	cpi	r24, 0x33	; 51
    2c7e:	91 05       	cpc	r25, r1
    2c80:	31 f0       	breq	.+12     	; 0x2c8e <PWM_enuSetInterruptMode+0x5c>
    2c82:	2e 81       	ldd	r18, Y+6	; 0x06
    2c84:	3f 81       	ldd	r19, Y+7	; 0x07
    2c86:	24 33       	cpi	r18, 0x34	; 52
    2c88:	31 05       	cpc	r19, r1
    2c8a:	21 f1       	breq	.+72     	; 0x2cd4 <PWM_enuSetInterruptMode+0xa2>
    2c8c:	35 c0       	rjmp	.+106    	; 0x2cf8 <PWM_enuSetInterruptMode+0xc6>
		{
			case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1_BIT );					/*	Enable TOIE1 Interrupt */
    2c8e:	a9 e5       	ldi	r26, 0x59	; 89
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e9 e5       	ldi	r30, 0x59	; 89
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	84 60       	ori	r24, 0x04	; 4
    2c9a:	8c 93       	st	X, r24
										for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2c9c:	1a 82       	std	Y+2, r1	; 0x02
    2c9e:	12 c0       	rjmp	.+36     	; 0x2cc4 <PWM_enuSetInterruptMode+0x92>
										{
											PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	c9 01       	movw	r24, r18
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	82 0f       	add	r24, r18
    2cb2:	93 1f       	adc	r25, r19
    2cb4:	fc 01       	movw	r30, r24
    2cb6:	e8 57       	subi	r30, 0x78	; 120
    2cb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	80 83       	st	Z, r24
		u8 Local_u8Iter = 0 , Local_u8Updated = 0 ;

		switch( Copy_u8TimerInterruptMode )
		{
			case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1_BIT );					/*	Enable TOIE1 Interrupt */
										for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc0:	8f 5f       	subi	r24, 0xFF	; 255
    2cc2:	8a 83       	std	Y+2, r24	; 0x02
    2cc4:	90 91 81 01 	lds	r25, 0x0181
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	89 17       	cp	r24, r25
    2ccc:	48 f3       	brcs	.-46     	; 0x2ca0 <PWM_enuSetInterruptMode+0x6e>
										{
											PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
										}
										Local_u8Updated = 1;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	89 83       	std	Y+1, r24	; 0x01
    2cd2:	12 c0       	rjmp	.+36     	; 0x2cf8 <PWM_enuSetInterruptMode+0xc6>
										break;
			case PWM_OUT_COMP_INT	:	if( Copy_u8TimerNum == TIMER1B )
    2cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd6:	8a 3c       	cpi	r24, 0xCA	; 202
    2cd8:	41 f4       	brne	.+16     	; 0x2cea <PWM_enuSetInterruptMode+0xb8>
										{
											SET_BIT( TIMSK , OCIE1B_BIT );				/*	Enable OCIE1B Interrupt */
    2cda:	a9 e5       	ldi	r26, 0x59	; 89
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	e9 e5       	ldi	r30, 0x59	; 89
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	88 60       	ori	r24, 0x08	; 8
    2ce6:	8c 93       	st	X, r24
    2ce8:	07 c0       	rjmp	.+14     	; 0x2cf8 <PWM_enuSetInterruptMode+0xc6>
										}
										else
										{
											SET_BIT( TIMSK , OCIE1A_BIT );				/*	Enable OCIE1A Interrupt */
    2cea:	a9 e5       	ldi	r26, 0x59	; 89
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	e9 e5       	ldi	r30, 0x59	; 89
    2cf0:	f0 e0       	ldi	r31, 0x00	; 0
    2cf2:	80 81       	ld	r24, Z
    2cf4:	80 61       	ori	r24, 0x10	; 16
    2cf6:	8c 93       	st	X, r24
										}
										break;
		}
		if( !Local_u8Updated )
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	88 23       	and	r24, r24
    2cfc:	69 f5       	brne	.+90     	; 0x2d58 <PWM_enuSetInterruptMode+0x126>
		{
			for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2cfe:	1a 82       	std	Y+2, r1	; 0x02
    2d00:	23 c0       	rjmp	.+70     	; 0x2d48 <PWM_enuSetInterruptMode+0x116>
			{
				if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	c9 01       	movw	r24, r18
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	88 0f       	add	r24, r24
    2d10:	99 1f       	adc	r25, r25
    2d12:	82 0f       	add	r24, r18
    2d14:	93 1f       	adc	r25, r19
    2d16:	fc 01       	movw	r30, r24
    2d18:	ec 57       	subi	r30, 0x7C	; 124
    2d1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d1c:	90 81       	ld	r25, Z
    2d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d20:	98 17       	cp	r25, r24
    2d22:	79 f4       	brne	.+30     	; 0x2d42 <PWM_enuSetInterruptMode+0x110>
				{
					PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
    2d24:	8a 81       	ldd	r24, Y+2	; 0x02
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	c9 01       	movw	r24, r18
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	82 0f       	add	r24, r18
    2d36:	93 1f       	adc	r25, r19
    2d38:	fc 01       	movw	r30, r24
    2d3a:	e8 57       	subi	r30, 0x78	; 120
    2d3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d40:	80 83       	st	Z, r24
										}
										break;
		}
		if( !Local_u8Updated )
		{
			for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	8a 83       	std	Y+2, r24	; 0x02
    2d48:	90 91 81 01 	lds	r25, 0x0181
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	89 17       	cp	r24, r25
    2d50:	c0 f2       	brcs	.-80     	; 0x2d02 <PWM_enuSetInterruptMode+0xd0>
    2d52:	02 c0       	rjmp	.+4      	; 0x2d58 <PWM_enuSetInterruptMode+0x126>
					PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
				}
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2d54:	82 e0       	ldi	r24, 0x02	; 2
    2d56:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2d5a:	27 96       	adiw	r28, 0x07	; 7
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <PWM_enuGetInterruptMode>:

ES_t PWM_enuGetInterruptMode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerInterruptMode )
{
    2d6c:	df 93       	push	r29
    2d6e:	cf 93       	push	r28
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <PWM_enuGetInterruptMode+0x6>
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <PWM_enuGetInterruptMode+0x8>
    2d74:	0f 92       	push	r0
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	8b 83       	std	Y+3, r24	; 0x03
    2d7c:	7d 83       	std	Y+5, r23	; 0x05
    2d7e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pu8TimerInterruptMode != NULL )
    2d84:	8c 81       	ldd	r24, Y+4	; 0x04
    2d86:	9d 81       	ldd	r25, Y+5	; 0x05
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	b1 f1       	breq	.+108    	; 0x2df8 <PWM_enuGetInterruptMode+0x8c>
	{
		if( Copy_u8TimerNum == TIMER1A	|| Copy_u8TimerNum == TIMER1A )
    2d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8e:	89 3c       	cpi	r24, 0xC9	; 201
    2d90:	19 f0       	breq	.+6      	; 0x2d98 <PWM_enuGetInterruptMode+0x2c>
    2d92:	8b 81       	ldd	r24, Y+3	; 0x03
    2d94:	89 3c       	cpi	r24, 0xC9	; 201
    2d96:	69 f5       	brne	.+90     	; 0x2df2 <PWM_enuGetInterruptMode+0x86>
		{
			for( u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2d98:	19 82       	std	Y+1, r1	; 0x01
    2d9a:	25 c0       	rjmp	.+74     	; 0x2de6 <PWM_enuGetInterruptMode+0x7a>
			{
				if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	28 2f       	mov	r18, r24
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	c9 01       	movw	r24, r18
    2da4:	88 0f       	add	r24, r24
    2da6:	99 1f       	adc	r25, r25
    2da8:	88 0f       	add	r24, r24
    2daa:	99 1f       	adc	r25, r25
    2dac:	82 0f       	add	r24, r18
    2dae:	93 1f       	adc	r25, r19
    2db0:	fc 01       	movw	r30, r24
    2db2:	ec 57       	subi	r30, 0x7C	; 124
    2db4:	fe 4f       	sbci	r31, 0xFE	; 254
    2db6:	90 81       	ld	r25, Z
    2db8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dba:	98 17       	cp	r25, r24
    2dbc:	89 f4       	brne	.+34     	; 0x2de0 <PWM_enuGetInterruptMode+0x74>
				{
					*Copy_pu8TimerInterruptMode = PWMs[Local_u8Iter].InterruptMode ;
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	28 2f       	mov	r18, r24
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	c9 01       	movw	r24, r18
    2dc6:	88 0f       	add	r24, r24
    2dc8:	99 1f       	adc	r25, r25
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	82 0f       	add	r24, r18
    2dd0:	93 1f       	adc	r25, r19
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	e8 57       	subi	r30, 0x78	; 120
    2dd6:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd8:	80 81       	ld	r24, Z
    2dda:	ec 81       	ldd	r30, Y+4	; 0x04
    2ddc:	fd 81       	ldd	r31, Y+5	; 0x05
    2dde:	80 83       	st	Z, r24

	if( Copy_pu8TimerInterruptMode != NULL )
	{
		if( Copy_u8TimerNum == TIMER1A	|| Copy_u8TimerNum == TIMER1A )
		{
			for( u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	8f 5f       	subi	r24, 0xFF	; 255
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	90 91 81 01 	lds	r25, 0x0181
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	89 17       	cp	r24, r25
    2dee:	b0 f2       	brcs	.-84     	; 0x2d9c <PWM_enuGetInterruptMode+0x30>
    2df0:	05 c0       	rjmp	.+10     	; 0x2dfc <PWM_enuGetInterruptMode+0x90>
				{
					*Copy_pu8TimerInterruptMode = PWMs[Local_u8Iter].InterruptMode ;
				}
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    2df2:	82 e0       	ldi	r24, 0x02	; 2
    2df4:	8a 83       	std	Y+2, r24	; 0x02
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <PWM_enuGetInterruptMode+0x90>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    2df8:	83 e0       	ldi	r24, 0x03	; 3
    2dfa:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <PWM_enuSetDutyCycle>:

ES_t PWM_enuSetDutyCycle( u8 Copy_u8TimerNum , f32 Copy_f32DutyCycle )
{
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	6d 97       	sbiw	r28, 0x1d	; 29
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
    2e2a:	8c 87       	std	Y+12, r24	; 0x0c
    2e2c:	4d 87       	std	Y+13, r20	; 0x0d
    2e2e:	5e 87       	std	Y+14, r21	; 0x0e
    2e30:	6f 87       	std	Y+15, r22	; 0x0f
    2e32:	78 8b       	std	Y+16, r23	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	8b 87       	std	Y+11, r24	; 0x0b

	u8 Local_u8TimerWGM_Mode , Local_u8TimerCOM_Mode , Local_u8Flag = 0 ;
    2e38:	18 86       	std	Y+8, r1	; 0x08
	u16 Local_u16TimerTop , Local_u16OCRValue ;

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    2e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e3c:	89 3c       	cpi	r24, 0xC9	; 201
    2e3e:	21 f0       	breq	.+8      	; 0x2e48 <PWM_enuSetDutyCycle+0x3a>
    2e40:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e42:	8a 3c       	cpi	r24, 0xCA	; 202
    2e44:	09 f0       	breq	.+2      	; 0x2e48 <PWM_enuSetDutyCycle+0x3a>
    2e46:	62 c7       	rjmp	.+3780   	; 0x3d0c <PWM_enuSetDutyCycle+0xefe>
	{
		for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2e48:	1b 82       	std	Y+3, r1	; 0x03
    2e4a:	32 c0       	rjmp	.+100    	; 0x2eb0 <PWM_enuSetDutyCycle+0xa2>
		{
			if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e4e:	28 2f       	mov	r18, r24
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	c9 01       	movw	r24, r18
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	82 0f       	add	r24, r18
    2e5e:	93 1f       	adc	r25, r19
    2e60:	fc 01       	movw	r30, r24
    2e62:	ec 57       	subi	r30, 0x7C	; 124
    2e64:	fe 4f       	sbci	r31, 0xFE	; 254
    2e66:	90 81       	ld	r25, Z
    2e68:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e6a:	98 17       	cp	r25, r24
    2e6c:	f1 f4       	brne	.+60     	; 0x2eaa <PWM_enuSetDutyCycle+0x9c>
			{
				Local_u8TimerWGM_Mode = PWMs[Local_u8Iter].WaveGenMode ;
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	28 2f       	mov	r18, r24
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	c9 01       	movw	r24, r18
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	88 0f       	add	r24, r24
    2e7c:	99 1f       	adc	r25, r25
    2e7e:	82 0f       	add	r24, r18
    2e80:	93 1f       	adc	r25, r19
    2e82:	fc 01       	movw	r30, r24
    2e84:	e9 57       	subi	r30, 0x79	; 121
    2e86:	fe 4f       	sbci	r31, 0xFE	; 254
    2e88:	80 81       	ld	r24, Z
    2e8a:	8a 87       	std	Y+10, r24	; 0x0a
				Local_u8TimerCOM_Mode = PWMs[Local_u8Iter].CompOutMode ;
    2e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8e:	28 2f       	mov	r18, r24
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	c9 01       	movw	r24, r18
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	88 0f       	add	r24, r24
    2e9a:	99 1f       	adc	r25, r25
    2e9c:	82 0f       	add	r24, r18
    2e9e:	93 1f       	adc	r25, r19
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	ea 57       	subi	r30, 0x7A	; 122
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	80 81       	ld	r24, Z
    2ea8:	89 87       	std	Y+9, r24	; 0x09
	u8 Local_u8TimerWGM_Mode , Local_u8TimerCOM_Mode , Local_u8Flag = 0 ;
	u16 Local_u16TimerTop , Local_u16OCRValue ;

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
	{
		for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	8b 83       	std	Y+3, r24	; 0x03
    2eb0:	90 91 81 01 	lds	r25, 0x0181
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	89 17       	cp	r24, r25
    2eb8:	48 f2       	brcs	.-110    	; 0x2e4c <PWM_enuSetDutyCycle+0x3e>
			{
				Local_u8TimerWGM_Mode = PWMs[Local_u8Iter].WaveGenMode ;
				Local_u8TimerCOM_Mode = PWMs[Local_u8Iter].CompOutMode ;
			}
		}
		switch( Local_u8TimerWGM_Mode )
    2eba:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	3d 8f       	std	Y+29, r19	; 0x1d
    2ec2:	2c 8f       	std	Y+28, r18	; 0x1c
    2ec4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ec6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ec8:	8b 36       	cpi	r24, 0x6B	; 107
    2eca:	91 05       	cpc	r25, r1
    2ecc:	09 f4       	brne	.+2      	; 0x2ed0 <PWM_enuSetDutyCycle+0xc2>
    2ece:	03 c3       	rjmp	.+1542   	; 0x34d6 <PWM_enuSetDutyCycle+0x6c8>
    2ed0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2ed2:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2ed4:	2c 36       	cpi	r18, 0x6C	; 108
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	2c f5       	brge	.+74     	; 0x2f24 <PWM_enuSetDutyCycle+0x116>
    2eda:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2edc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ede:	87 36       	cpi	r24, 0x67	; 103
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <PWM_enuSetDutyCycle+0xd8>
    2ee4:	8a c2       	rjmp	.+1300   	; 0x33fa <PWM_enuSetDutyCycle+0x5ec>
    2ee6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2ee8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2eea:	28 36       	cpi	r18, 0x68	; 104
    2eec:	31 05       	cpc	r19, r1
    2eee:	6c f4       	brge	.+26     	; 0x2f0a <PWM_enuSetDutyCycle+0xfc>
    2ef0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ef2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ef4:	85 36       	cpi	r24, 0x65	; 101
    2ef6:	91 05       	cpc	r25, r1
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <PWM_enuSetDutyCycle+0xee>
    2efa:	3f c0       	rjmp	.+126    	; 0x2f7a <PWM_enuSetDutyCycle+0x16c>
    2efc:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2efe:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2f00:	26 36       	cpi	r18, 0x66	; 102
    2f02:	31 05       	cpc	r19, r1
    2f04:	09 f4       	brne	.+2      	; 0x2f08 <PWM_enuSetDutyCycle+0xfa>
    2f06:	59 c1       	rjmp	.+690    	; 0x31ba <PWM_enuSetDutyCycle+0x3ac>
    2f08:	be c6       	rjmp	.+3452   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    2f0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f0e:	89 36       	cpi	r24, 0x69	; 105
    2f10:	91 05       	cpc	r25, r1
    2f12:	09 f4       	brne	.+2      	; 0x2f16 <PWM_enuSetDutyCycle+0x108>
    2f14:	a0 c0       	rjmp	.+320    	; 0x3056 <PWM_enuSetDutyCycle+0x248>
    2f16:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2f18:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2f1a:	2a 36       	cpi	r18, 0x6A	; 106
    2f1c:	31 05       	cpc	r19, r1
    2f1e:	09 f4       	brne	.+2      	; 0x2f22 <PWM_enuSetDutyCycle+0x114>
    2f20:	ba c1       	rjmp	.+884    	; 0x3296 <PWM_enuSetDutyCycle+0x488>
    2f22:	b1 c6       	rjmp	.+3426   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    2f24:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f26:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f28:	8e 36       	cpi	r24, 0x6E	; 110
    2f2a:	91 05       	cpc	r25, r1
    2f2c:	09 f4       	brne	.+2      	; 0x2f30 <PWM_enuSetDutyCycle+0x122>
    2f2e:	f5 c3       	rjmp	.+2026   	; 0x371a <PWM_enuSetDutyCycle+0x90c>
    2f30:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2f32:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2f34:	2f 36       	cpi	r18, 0x6F	; 111
    2f36:	31 05       	cpc	r19, r1
    2f38:	6c f4       	brge	.+26     	; 0x2f54 <PWM_enuSetDutyCycle+0x146>
    2f3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f3e:	8c 36       	cpi	r24, 0x6C	; 108
    2f40:	91 05       	cpc	r25, r1
    2f42:	09 f4       	brne	.+2      	; 0x2f46 <PWM_enuSetDutyCycle+0x138>
    2f44:	7a c3       	rjmp	.+1780   	; 0x363a <PWM_enuSetDutyCycle+0x82c>
    2f46:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2f48:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2f4a:	2d 36       	cpi	r18, 0x6D	; 109
    2f4c:	31 05       	cpc	r19, r1
    2f4e:	09 f4       	brne	.+2      	; 0x2f52 <PWM_enuSetDutyCycle+0x144>
    2f50:	08 c5       	rjmp	.+2576   	; 0x3962 <PWM_enuSetDutyCycle+0xb54>
    2f52:	99 c6       	rjmp	.+3378   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    2f54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f58:	82 37       	cpi	r24, 0x72	; 114
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <PWM_enuSetDutyCycle+0x152>
    2f5e:	4d c4       	rjmp	.+2202   	; 0x37fa <PWM_enuSetDutyCycle+0x9ec>
    2f60:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2f62:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2f64:	23 37       	cpi	r18, 0x73	; 115
    2f66:	31 05       	cpc	r19, r1
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <PWM_enuSetDutyCycle+0x15e>
    2f6a:	db c5       	rjmp	.+2998   	; 0x3b22 <PWM_enuSetDutyCycle+0xd14>
    2f6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f70:	8f 36       	cpi	r24, 0x6F	; 111
    2f72:	91 05       	cpc	r25, r1
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <PWM_enuSetDutyCycle+0x16a>
    2f76:	65 c5       	rjmp	.+2762   	; 0x3a42 <PWM_enuSetDutyCycle+0xc34>
    2f78:	86 c6       	rjmp	.+3340   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
		{
			case WGM_PC_8_bit	:	Local_u16TimerTop = EIGHT_BIT_TOP ;
    2f7a:	8f ef       	ldi	r24, 0xFF	; 255
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	9f 83       	std	Y+7, r25	; 0x07
    2f80:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    2f82:	89 85       	ldd	r24, Y+9	; 0x09
    2f84:	86 31       	cpi	r24, 0x16	; 22
    2f86:	41 f5       	brne	.+80     	; 0x2fd8 <PWM_enuSetDutyCycle+0x1ca>
    2f88:	8e 81       	ldd	r24, Y+6	; 0x06
    2f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f8c:	cc 01       	movw	r24, r24
    2f8e:	a0 e0       	ldi	r26, 0x00	; 0
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	bc 01       	movw	r22, r24
    2f94:	cd 01       	movw	r24, r26
    2f96:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fa4:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fa6:	4f 85       	ldd	r20, Y+15	; 0x0f
    2fa8:	58 89       	ldd	r21, Y+16	; 0x10
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	48 ec       	ldi	r20, 0xC8	; 200
    2fbc:	52 e4       	ldi	r21, 0x42	; 66
    2fbe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	bc 01       	movw	r22, r24
    2fc8:	cd 01       	movw	r24, r26
    2fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	9d 83       	std	Y+5, r25	; 0x05
    2fd4:	8c 83       	std	Y+4, r24	; 0x04
    2fd6:	57 c6       	rjmp	.+3246   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    2fd8:	89 85       	ldd	r24, Y+9	; 0x09
    2fda:	87 31       	cpi	r24, 0x17	; 23
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <PWM_enuSetDutyCycle+0x1d2>
    2fde:	53 c6       	rjmp	.+3238   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    2fe0:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe2:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe4:	cc 01       	movw	r24, r24
    2fe6:	a0 e0       	ldi	r26, 0x00	; 0
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	bc 01       	movw	r22, r24
    2fec:	cd 01       	movw	r24, r26
    2fee:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    2ff2:	7b 01       	movw	r14, r22
    2ff4:	8c 01       	movw	r16, r24
    2ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff8:	9f 81       	ldd	r25, Y+7	; 0x07
    2ffa:	cc 01       	movw	r24, r24
    2ffc:	a0 e0       	ldi	r26, 0x00	; 0
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	bc 01       	movw	r22, r24
    3002:	cd 01       	movw	r24, r26
    3004:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	bc 01       	movw	r22, r24
    300e:	cd 01       	movw	r24, r26
    3010:	2d 85       	ldd	r18, Y+13	; 0x0d
    3012:	3e 85       	ldd	r19, Y+14	; 0x0e
    3014:	4f 85       	ldd	r20, Y+15	; 0x0f
    3016:	58 89       	ldd	r21, Y+16	; 0x10
    3018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	48 ec       	ldi	r20, 0xC8	; 200
    302a:	52 ec       	ldi	r21, 0xC2	; 194
    302c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	9c 01       	movw	r18, r24
    3036:	ad 01       	movw	r20, r26
    3038:	c8 01       	movw	r24, r16
    303a:	b7 01       	movw	r22, r14
    303c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	bc 01       	movw	r22, r24
    3046:	cd 01       	movw	r24, r26
    3048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	9d 83       	std	Y+5, r25	; 0x05
    3052:	8c 83       	std	Y+4, r24	; 0x04
    3054:	18 c6       	rjmp	.+3120   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_8_bit	:	Local_u16TimerTop = EIGHT_BIT_TOP ;
    3056:	8f ef       	ldi	r24, 0xFF	; 255
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9f 83       	std	Y+7, r25	; 0x07
    305c:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    305e:	89 85       	ldd	r24, Y+9	; 0x09
    3060:	86 31       	cpi	r24, 0x16	; 22
    3062:	b9 f4       	brne	.+46     	; 0x3092 <PWM_enuSetDutyCycle+0x284>
    3064:	1b 8e       	std	Y+27, r1	; 0x1b
    3066:	6d 85       	ldd	r22, Y+13	; 0x0d
    3068:	7e 85       	ldd	r23, Y+14	; 0x0e
    306a:	8f 85       	ldd	r24, Y+15	; 0x0f
    306c:	98 89       	ldd	r25, Y+16	; 0x10
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e0       	ldi	r20, 0x00	; 0
    3074:	50 e0       	ldi	r21, 0x00	; 0
    3076:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    307a:	88 23       	and	r24, r24
    307c:	11 f4       	brne	.+4      	; 0x3082 <PWM_enuSetDutyCycle+0x274>
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	9b 8f       	std	Y+27, r25	; 0x1b
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3086:	82 27       	eor	r24, r18
    3088:	88 23       	and	r24, r24
    308a:	19 f4       	brne	.+6      	; 0x3092 <PWM_enuSetDutyCycle+0x284>
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	88 87       	std	Y+8, r24	; 0x08
    3090:	fa c5       	rjmp	.+3060   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3092:	89 85       	ldd	r24, Y+9	; 0x09
    3094:	87 31       	cpi	r24, 0x17	; 23
    3096:	b9 f4       	brne	.+46     	; 0x30c6 <PWM_enuSetDutyCycle+0x2b8>
    3098:	1a 8e       	std	Y+26, r1	; 0x1a
    309a:	6d 85       	ldd	r22, Y+13	; 0x0d
    309c:	7e 85       	ldd	r23, Y+14	; 0x0e
    309e:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a0:	98 89       	ldd	r25, Y+16	; 0x10
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	48 ec       	ldi	r20, 0xC8	; 200
    30a8:	52 e4       	ldi	r21, 0x42	; 66
    30aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    30ae:	88 23       	and	r24, r24
    30b0:	11 f4       	brne	.+4      	; 0x30b6 <PWM_enuSetDutyCycle+0x2a8>
    30b2:	31 e0       	ldi	r19, 0x01	; 1
    30b4:	3a 8f       	std	Y+26, r19	; 0x1a
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30ba:	89 27       	eor	r24, r25
    30bc:	88 23       	and	r24, r24
    30be:	19 f4       	brne	.+6      	; 0x30c6 <PWM_enuSetDutyCycle+0x2b8>
    30c0:	81 e0       	ldi	r24, 0x01	; 1
    30c2:	88 87       	std	Y+8, r24	; 0x08
    30c4:	e0 c5       	rjmp	.+3008   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    30c6:	89 85       	ldd	r24, Y+9	; 0x09
    30c8:	86 31       	cpi	r24, 0x16	; 22
    30ca:	a9 f5       	brne	.+106    	; 0x3136 <PWM_enuSetDutyCycle+0x328>
    30cc:	8e 81       	ldd	r24, Y+6	; 0x06
    30ce:	9f 81       	ldd	r25, Y+7	; 0x07
    30d0:	cc 01       	movw	r24, r24
    30d2:	a0 e0       	ldi	r26, 0x00	; 0
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	01 96       	adiw	r24, 0x01	; 1
    30d8:	a1 1d       	adc	r26, r1
    30da:	b1 1d       	adc	r27, r1
    30dc:	bc 01       	movw	r22, r24
    30de:	cd 01       	movw	r24, r26
    30e0:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	bc 01       	movw	r22, r24
    30ea:	cd 01       	movw	r24, r26
    30ec:	2d 85       	ldd	r18, Y+13	; 0x0d
    30ee:	3e 85       	ldd	r19, Y+14	; 0x0e
    30f0:	4f 85       	ldd	r20, Y+15	; 0x0f
    30f2:	58 89       	ldd	r21, Y+16	; 0x10
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	bc 01       	movw	r22, r24
    30fe:	cd 01       	movw	r24, r26
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	48 ec       	ldi	r20, 0xC8	; 200
    3106:	52 e4       	ldi	r21, 0x42	; 66
    3108:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e8       	ldi	r20, 0x80	; 128
    311a:	5f e3       	ldi	r21, 0x3F	; 63
    311c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	bc 01       	movw	r22, r24
    3126:	cd 01       	movw	r24, r26
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	9d 83       	std	Y+5, r25	; 0x05
    3132:	8c 83       	std	Y+4, r24	; 0x04
    3134:	a8 c5       	rjmp	.+2896   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3136:	89 85       	ldd	r24, Y+9	; 0x09
    3138:	87 31       	cpi	r24, 0x17	; 23
    313a:	09 f0       	breq	.+2      	; 0x313e <PWM_enuSetDutyCycle+0x330>
    313c:	a4 c5       	rjmp	.+2888   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    313e:	8e 81       	ldd	r24, Y+6	; 0x06
    3140:	9f 81       	ldd	r25, Y+7	; 0x07
    3142:	cc 01       	movw	r24, r24
    3144:	a0 e0       	ldi	r26, 0x00	; 0
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3150:	7b 01       	movw	r14, r22
    3152:	8c 01       	movw	r16, r24
    3154:	8e 81       	ldd	r24, Y+6	; 0x06
    3156:	9f 81       	ldd	r25, Y+7	; 0x07
    3158:	cc 01       	movw	r24, r24
    315a:	a0 e0       	ldi	r26, 0x00	; 0
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	01 96       	adiw	r24, 0x01	; 1
    3160:	a1 1d       	adc	r26, r1
    3162:	b1 1d       	adc	r27, r1
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	bc 01       	movw	r22, r24
    3172:	cd 01       	movw	r24, r26
    3174:	2d 85       	ldd	r18, Y+13	; 0x0d
    3176:	3e 85       	ldd	r19, Y+14	; 0x0e
    3178:	4f 85       	ldd	r20, Y+15	; 0x0f
    317a:	58 89       	ldd	r21, Y+16	; 0x10
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	bc 01       	movw	r22, r24
    3186:	cd 01       	movw	r24, r26
    3188:	20 e0       	ldi	r18, 0x00	; 0
    318a:	30 e0       	ldi	r19, 0x00	; 0
    318c:	48 ec       	ldi	r20, 0xC8	; 200
    318e:	52 ec       	ldi	r21, 0xC2	; 194
    3190:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9c 01       	movw	r18, r24
    319a:	ad 01       	movw	r20, r26
    319c:	c8 01       	movw	r24, r16
    319e:	b7 01       	movw	r22, r14
    31a0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	bc 01       	movw	r22, r24
    31aa:	cd 01       	movw	r24, r26
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9d 83       	std	Y+5, r25	; 0x05
    31b6:	8c 83       	std	Y+4, r24	; 0x04
    31b8:	66 c5       	rjmp	.+2764   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_9_bit	:	Local_u16TimerTop = NINE_BIT_TOP ;
    31ba:	8f ef       	ldi	r24, 0xFF	; 255
    31bc:	91 e0       	ldi	r25, 0x01	; 1
    31be:	9f 83       	std	Y+7, r25	; 0x07
    31c0:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    31c2:	89 85       	ldd	r24, Y+9	; 0x09
    31c4:	86 31       	cpi	r24, 0x16	; 22
    31c6:	41 f5       	brne	.+80     	; 0x3218 <PWM_enuSetDutyCycle+0x40a>
    31c8:	8e 81       	ldd	r24, Y+6	; 0x06
    31ca:	9f 81       	ldd	r25, Y+7	; 0x07
    31cc:	cc 01       	movw	r24, r24
    31ce:	a0 e0       	ldi	r26, 0x00	; 0
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	bc 01       	movw	r22, r24
    31d4:	cd 01       	movw	r24, r26
    31d6:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	bc 01       	movw	r22, r24
    31e0:	cd 01       	movw	r24, r26
    31e2:	2d 85       	ldd	r18, Y+13	; 0x0d
    31e4:	3e 85       	ldd	r19, Y+14	; 0x0e
    31e6:	4f 85       	ldd	r20, Y+15	; 0x0f
    31e8:	58 89       	ldd	r21, Y+16	; 0x10
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	48 ec       	ldi	r20, 0xC8	; 200
    31fc:	52 e4       	ldi	r21, 0x42	; 66
    31fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9d 83       	std	Y+5, r25	; 0x05
    3214:	8c 83       	std	Y+4, r24	; 0x04
    3216:	37 c5       	rjmp	.+2670   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3218:	89 85       	ldd	r24, Y+9	; 0x09
    321a:	87 31       	cpi	r24, 0x17	; 23
    321c:	09 f0       	breq	.+2      	; 0x3220 <PWM_enuSetDutyCycle+0x412>
    321e:	33 c5       	rjmp	.+2662   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3220:	8e 81       	ldd	r24, Y+6	; 0x06
    3222:	9f 81       	ldd	r25, Y+7	; 0x07
    3224:	cc 01       	movw	r24, r24
    3226:	a0 e0       	ldi	r26, 0x00	; 0
    3228:	b0 e0       	ldi	r27, 0x00	; 0
    322a:	bc 01       	movw	r22, r24
    322c:	cd 01       	movw	r24, r26
    322e:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3232:	7b 01       	movw	r14, r22
    3234:	8c 01       	movw	r16, r24
    3236:	8e 81       	ldd	r24, Y+6	; 0x06
    3238:	9f 81       	ldd	r25, Y+7	; 0x07
    323a:	cc 01       	movw	r24, r24
    323c:	a0 e0       	ldi	r26, 0x00	; 0
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	bc 01       	movw	r22, r24
    3242:	cd 01       	movw	r24, r26
    3244:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	2d 85       	ldd	r18, Y+13	; 0x0d
    3252:	3e 85       	ldd	r19, Y+14	; 0x0e
    3254:	4f 85       	ldd	r20, Y+15	; 0x0f
    3256:	58 89       	ldd	r21, Y+16	; 0x10
    3258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    325c:	dc 01       	movw	r26, r24
    325e:	cb 01       	movw	r24, r22
    3260:	bc 01       	movw	r22, r24
    3262:	cd 01       	movw	r24, r26
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	48 ec       	ldi	r20, 0xC8	; 200
    326a:	52 ec       	ldi	r21, 0xC2	; 194
    326c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	9c 01       	movw	r18, r24
    3276:	ad 01       	movw	r20, r26
    3278:	c8 01       	movw	r24, r16
    327a:	b7 01       	movw	r22, r14
    327c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9d 83       	std	Y+5, r25	; 0x05
    3292:	8c 83       	std	Y+4, r24	; 0x04
    3294:	f8 c4       	rjmp	.+2544   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_9_bit	:	Local_u16TimerTop = NINE_BIT_TOP ;
    3296:	8f ef       	ldi	r24, 0xFF	; 255
    3298:	91 e0       	ldi	r25, 0x01	; 1
    329a:	9f 83       	std	Y+7, r25	; 0x07
    329c:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    329e:	89 85       	ldd	r24, Y+9	; 0x09
    32a0:	86 31       	cpi	r24, 0x16	; 22
    32a2:	b9 f4       	brne	.+46     	; 0x32d2 <PWM_enuSetDutyCycle+0x4c4>
    32a4:	19 8e       	std	Y+25, r1	; 0x19
    32a6:	6d 85       	ldd	r22, Y+13	; 0x0d
    32a8:	7e 85       	ldd	r23, Y+14	; 0x0e
    32aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    32ac:	98 89       	ldd	r25, Y+16	; 0x10
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	50 e0       	ldi	r21, 0x00	; 0
    32b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    32ba:	88 23       	and	r24, r24
    32bc:	11 f4       	brne	.+4      	; 0x32c2 <PWM_enuSetDutyCycle+0x4b4>
    32be:	21 e0       	ldi	r18, 0x01	; 1
    32c0:	29 8f       	std	Y+25, r18	; 0x19
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	39 8d       	ldd	r19, Y+25	; 0x19
    32c6:	83 27       	eor	r24, r19
    32c8:	88 23       	and	r24, r24
    32ca:	19 f4       	brne	.+6      	; 0x32d2 <PWM_enuSetDutyCycle+0x4c4>
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	88 87       	std	Y+8, r24	; 0x08
    32d0:	da c4       	rjmp	.+2484   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    32d2:	89 85       	ldd	r24, Y+9	; 0x09
    32d4:	87 31       	cpi	r24, 0x17	; 23
    32d6:	b9 f4       	brne	.+46     	; 0x3306 <PWM_enuSetDutyCycle+0x4f8>
    32d8:	18 8e       	std	Y+24, r1	; 0x18
    32da:	6d 85       	ldd	r22, Y+13	; 0x0d
    32dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    32de:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e0:	98 89       	ldd	r25, Y+16	; 0x10
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	48 ec       	ldi	r20, 0xC8	; 200
    32e8:	52 e4       	ldi	r21, 0x42	; 66
    32ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    32ee:	88 23       	and	r24, r24
    32f0:	11 f4       	brne	.+4      	; 0x32f6 <PWM_enuSetDutyCycle+0x4e8>
    32f2:	81 e0       	ldi	r24, 0x01	; 1
    32f4:	88 8f       	std	Y+24, r24	; 0x18
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	98 8d       	ldd	r25, Y+24	; 0x18
    32fa:	89 27       	eor	r24, r25
    32fc:	88 23       	and	r24, r24
    32fe:	19 f4       	brne	.+6      	; 0x3306 <PWM_enuSetDutyCycle+0x4f8>
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	88 87       	std	Y+8, r24	; 0x08
    3304:	c0 c4       	rjmp	.+2432   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3306:	89 85       	ldd	r24, Y+9	; 0x09
    3308:	86 31       	cpi	r24, 0x16	; 22
    330a:	a9 f5       	brne	.+106    	; 0x3376 <PWM_enuSetDutyCycle+0x568>
    330c:	8e 81       	ldd	r24, Y+6	; 0x06
    330e:	9f 81       	ldd	r25, Y+7	; 0x07
    3310:	cc 01       	movw	r24, r24
    3312:	a0 e0       	ldi	r26, 0x00	; 0
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	01 96       	adiw	r24, 0x01	; 1
    3318:	a1 1d       	adc	r26, r1
    331a:	b1 1d       	adc	r27, r1
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	bc 01       	movw	r22, r24
    332a:	cd 01       	movw	r24, r26
    332c:	2d 85       	ldd	r18, Y+13	; 0x0d
    332e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3330:	4f 85       	ldd	r20, Y+15	; 0x0f
    3332:	58 89       	ldd	r21, Y+16	; 0x10
    3334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	bc 01       	movw	r22, r24
    333e:	cd 01       	movw	r24, r26
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	48 ec       	ldi	r20, 0xC8	; 200
    3346:	52 e4       	ldi	r21, 0x42	; 66
    3348:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	40 e8       	ldi	r20, 0x80	; 128
    335a:	5f e3       	ldi	r21, 0x3F	; 63
    335c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	bc 01       	movw	r22, r24
    3366:	cd 01       	movw	r24, r26
    3368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	9d 83       	std	Y+5, r25	; 0x05
    3372:	8c 83       	std	Y+4, r24	; 0x04
    3374:	88 c4       	rjmp	.+2320   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3376:	89 85       	ldd	r24, Y+9	; 0x09
    3378:	87 31       	cpi	r24, 0x17	; 23
    337a:	09 f0       	breq	.+2      	; 0x337e <PWM_enuSetDutyCycle+0x570>
    337c:	84 c4       	rjmp	.+2312   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    337e:	8e 81       	ldd	r24, Y+6	; 0x06
    3380:	9f 81       	ldd	r25, Y+7	; 0x07
    3382:	cc 01       	movw	r24, r24
    3384:	a0 e0       	ldi	r26, 0x00	; 0
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3390:	7b 01       	movw	r14, r22
    3392:	8c 01       	movw	r16, r24
    3394:	8e 81       	ldd	r24, Y+6	; 0x06
    3396:	9f 81       	ldd	r25, Y+7	; 0x07
    3398:	cc 01       	movw	r24, r24
    339a:	a0 e0       	ldi	r26, 0x00	; 0
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	01 96       	adiw	r24, 0x01	; 1
    33a0:	a1 1d       	adc	r26, r1
    33a2:	b1 1d       	adc	r27, r1
    33a4:	bc 01       	movw	r22, r24
    33a6:	cd 01       	movw	r24, r26
    33a8:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	bc 01       	movw	r22, r24
    33b2:	cd 01       	movw	r24, r26
    33b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    33b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    33b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    33ba:	58 89       	ldd	r21, Y+16	; 0x10
    33bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	bc 01       	movw	r22, r24
    33c6:	cd 01       	movw	r24, r26
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	48 ec       	ldi	r20, 0xC8	; 200
    33ce:	52 ec       	ldi	r21, 0xC2	; 194
    33d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	9c 01       	movw	r18, r24
    33da:	ad 01       	movw	r20, r26
    33dc:	c8 01       	movw	r24, r16
    33de:	b7 01       	movw	r22, r14
    33e0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    33e4:	dc 01       	movw	r26, r24
    33e6:	cb 01       	movw	r24, r22
    33e8:	bc 01       	movw	r22, r24
    33ea:	cd 01       	movw	r24, r26
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	9d 83       	std	Y+5, r25	; 0x05
    33f6:	8c 83       	std	Y+4, r24	; 0x04
    33f8:	46 c4       	rjmp	.+2188   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_10_bit	:	Local_u16TimerTop = TEN_BIT_TOP ;
    33fa:	8f ef       	ldi	r24, 0xFF	; 255
    33fc:	93 e0       	ldi	r25, 0x03	; 3
    33fe:	9f 83       	std	Y+7, r25	; 0x07
    3400:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    3402:	89 85       	ldd	r24, Y+9	; 0x09
    3404:	86 31       	cpi	r24, 0x16	; 22
    3406:	41 f5       	brne	.+80     	; 0x3458 <PWM_enuSetDutyCycle+0x64a>
    3408:	8e 81       	ldd	r24, Y+6	; 0x06
    340a:	9f 81       	ldd	r25, Y+7	; 0x07
    340c:	cc 01       	movw	r24, r24
    340e:	a0 e0       	ldi	r26, 0x00	; 0
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	2d 85       	ldd	r18, Y+13	; 0x0d
    3424:	3e 85       	ldd	r19, Y+14	; 0x0e
    3426:	4f 85       	ldd	r20, Y+15	; 0x0f
    3428:	58 89       	ldd	r21, Y+16	; 0x10
    342a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342e:	dc 01       	movw	r26, r24
    3430:	cb 01       	movw	r24, r22
    3432:	bc 01       	movw	r22, r24
    3434:	cd 01       	movw	r24, r26
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	48 ec       	ldi	r20, 0xC8	; 200
    343c:	52 e4       	ldi	r21, 0x42	; 66
    343e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9d 83       	std	Y+5, r25	; 0x05
    3454:	8c 83       	std	Y+4, r24	; 0x04
    3456:	17 c4       	rjmp	.+2094   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3458:	89 85       	ldd	r24, Y+9	; 0x09
    345a:	87 31       	cpi	r24, 0x17	; 23
    345c:	09 f0       	breq	.+2      	; 0x3460 <PWM_enuSetDutyCycle+0x652>
    345e:	13 c4       	rjmp	.+2086   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3460:	8e 81       	ldd	r24, Y+6	; 0x06
    3462:	9f 81       	ldd	r25, Y+7	; 0x07
    3464:	cc 01       	movw	r24, r24
    3466:	a0 e0       	ldi	r26, 0x00	; 0
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	bc 01       	movw	r22, r24
    346c:	cd 01       	movw	r24, r26
    346e:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3472:	7b 01       	movw	r14, r22
    3474:	8c 01       	movw	r16, r24
    3476:	8e 81       	ldd	r24, Y+6	; 0x06
    3478:	9f 81       	ldd	r25, Y+7	; 0x07
    347a:	cc 01       	movw	r24, r24
    347c:	a0 e0       	ldi	r26, 0x00	; 0
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	bc 01       	movw	r22, r24
    3482:	cd 01       	movw	r24, r26
    3484:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	bc 01       	movw	r22, r24
    348e:	cd 01       	movw	r24, r26
    3490:	2d 85       	ldd	r18, Y+13	; 0x0d
    3492:	3e 85       	ldd	r19, Y+14	; 0x0e
    3494:	4f 85       	ldd	r20, Y+15	; 0x0f
    3496:	58 89       	ldd	r21, Y+16	; 0x10
    3498:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	bc 01       	movw	r22, r24
    34a2:	cd 01       	movw	r24, r26
    34a4:	20 e0       	ldi	r18, 0x00	; 0
    34a6:	30 e0       	ldi	r19, 0x00	; 0
    34a8:	48 ec       	ldi	r20, 0xC8	; 200
    34aa:	52 ec       	ldi	r21, 0xC2	; 194
    34ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	9c 01       	movw	r18, r24
    34b6:	ad 01       	movw	r20, r26
    34b8:	c8 01       	movw	r24, r16
    34ba:	b7 01       	movw	r22, r14
    34bc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	9d 83       	std	Y+5, r25	; 0x05
    34d2:	8c 83       	std	Y+4, r24	; 0x04
    34d4:	d8 c3       	rjmp	.+1968   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_10_bit:	Local_u16TimerTop = TEN_BIT_TOP ;
    34d6:	8f ef       	ldi	r24, 0xFF	; 255
    34d8:	93 e0       	ldi	r25, 0x03	; 3
    34da:	9f 83       	std	Y+7, r25	; 0x07
    34dc:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    34de:	89 85       	ldd	r24, Y+9	; 0x09
    34e0:	86 31       	cpi	r24, 0x16	; 22
    34e2:	b9 f4       	brne	.+46     	; 0x3512 <PWM_enuSetDutyCycle+0x704>
    34e4:	1f 8a       	std	Y+23, r1	; 0x17
    34e6:	6d 85       	ldd	r22, Y+13	; 0x0d
    34e8:	7e 85       	ldd	r23, Y+14	; 0x0e
    34ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    34ec:	98 89       	ldd	r25, Y+16	; 0x10
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    34fa:	88 23       	and	r24, r24
    34fc:	11 f4       	brne	.+4      	; 0x3502 <PWM_enuSetDutyCycle+0x6f4>
    34fe:	21 e0       	ldi	r18, 0x01	; 1
    3500:	2f 8b       	std	Y+23, r18	; 0x17
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	3f 89       	ldd	r19, Y+23	; 0x17
    3506:	83 27       	eor	r24, r19
    3508:	88 23       	and	r24, r24
    350a:	19 f4       	brne	.+6      	; 0x3512 <PWM_enuSetDutyCycle+0x704>
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	88 87       	std	Y+8, r24	; 0x08
    3510:	ba c3       	rjmp	.+1908   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3512:	89 85       	ldd	r24, Y+9	; 0x09
    3514:	87 31       	cpi	r24, 0x17	; 23
    3516:	b9 f4       	brne	.+46     	; 0x3546 <PWM_enuSetDutyCycle+0x738>
    3518:	1e 8a       	std	Y+22, r1	; 0x16
    351a:	6d 85       	ldd	r22, Y+13	; 0x0d
    351c:	7e 85       	ldd	r23, Y+14	; 0x0e
    351e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3520:	98 89       	ldd	r25, Y+16	; 0x10
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	48 ec       	ldi	r20, 0xC8	; 200
    3528:	52 e4       	ldi	r21, 0x42	; 66
    352a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    352e:	88 23       	and	r24, r24
    3530:	11 f4       	brne	.+4      	; 0x3536 <PWM_enuSetDutyCycle+0x728>
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	8e 8b       	std	Y+22, r24	; 0x16
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	9e 89       	ldd	r25, Y+22	; 0x16
    353a:	89 27       	eor	r24, r25
    353c:	88 23       	and	r24, r24
    353e:	19 f4       	brne	.+6      	; 0x3546 <PWM_enuSetDutyCycle+0x738>
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	88 87       	std	Y+8, r24	; 0x08
    3544:	a0 c3       	rjmp	.+1856   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3546:	89 85       	ldd	r24, Y+9	; 0x09
    3548:	86 31       	cpi	r24, 0x16	; 22
    354a:	a9 f5       	brne	.+106    	; 0x35b6 <PWM_enuSetDutyCycle+0x7a8>
    354c:	8e 81       	ldd	r24, Y+6	; 0x06
    354e:	9f 81       	ldd	r25, Y+7	; 0x07
    3550:	cc 01       	movw	r24, r24
    3552:	a0 e0       	ldi	r26, 0x00	; 0
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	01 96       	adiw	r24, 0x01	; 1
    3558:	a1 1d       	adc	r26, r1
    355a:	b1 1d       	adc	r27, r1
    355c:	bc 01       	movw	r22, r24
    355e:	cd 01       	movw	r24, r26
    3560:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	bc 01       	movw	r22, r24
    356a:	cd 01       	movw	r24, r26
    356c:	2d 85       	ldd	r18, Y+13	; 0x0d
    356e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3570:	4f 85       	ldd	r20, Y+15	; 0x0f
    3572:	58 89       	ldd	r21, Y+16	; 0x10
    3574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	bc 01       	movw	r22, r24
    357e:	cd 01       	movw	r24, r26
    3580:	20 e0       	ldi	r18, 0x00	; 0
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	48 ec       	ldi	r20, 0xC8	; 200
    3586:	52 e4       	ldi	r21, 0x42	; 66
    3588:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	bc 01       	movw	r22, r24
    3592:	cd 01       	movw	r24, r26
    3594:	20 e0       	ldi	r18, 0x00	; 0
    3596:	30 e0       	ldi	r19, 0x00	; 0
    3598:	40 e8       	ldi	r20, 0x80	; 128
    359a:	5f e3       	ldi	r21, 0x3F	; 63
    359c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	bc 01       	movw	r22, r24
    35a6:	cd 01       	movw	r24, r26
    35a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	9d 83       	std	Y+5, r25	; 0x05
    35b2:	8c 83       	std	Y+4, r24	; 0x04
    35b4:	68 c3       	rjmp	.+1744   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    35b6:	89 85       	ldd	r24, Y+9	; 0x09
    35b8:	87 31       	cpi	r24, 0x17	; 23
    35ba:	09 f0       	breq	.+2      	; 0x35be <PWM_enuSetDutyCycle+0x7b0>
    35bc:	64 c3       	rjmp	.+1736   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    35be:	8e 81       	ldd	r24, Y+6	; 0x06
    35c0:	9f 81       	ldd	r25, Y+7	; 0x07
    35c2:	cc 01       	movw	r24, r24
    35c4:	a0 e0       	ldi	r26, 0x00	; 0
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	bc 01       	movw	r22, r24
    35ca:	cd 01       	movw	r24, r26
    35cc:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    35d0:	7b 01       	movw	r14, r22
    35d2:	8c 01       	movw	r16, r24
    35d4:	8e 81       	ldd	r24, Y+6	; 0x06
    35d6:	9f 81       	ldd	r25, Y+7	; 0x07
    35d8:	cc 01       	movw	r24, r24
    35da:	a0 e0       	ldi	r26, 0x00	; 0
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	01 96       	adiw	r24, 0x01	; 1
    35e0:	a1 1d       	adc	r26, r1
    35e2:	b1 1d       	adc	r27, r1
    35e4:	bc 01       	movw	r22, r24
    35e6:	cd 01       	movw	r24, r26
    35e8:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    35f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    35f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    35fa:	58 89       	ldd	r21, Y+16	; 0x10
    35fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3600:	dc 01       	movw	r26, r24
    3602:	cb 01       	movw	r24, r22
    3604:	bc 01       	movw	r22, r24
    3606:	cd 01       	movw	r24, r26
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	48 ec       	ldi	r20, 0xC8	; 200
    360e:	52 ec       	ldi	r21, 0xC2	; 194
    3610:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	9c 01       	movw	r18, r24
    361a:	ad 01       	movw	r20, r26
    361c:	c8 01       	movw	r24, r16
    361e:	b7 01       	movw	r22, r14
    3620:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	bc 01       	movw	r22, r24
    362a:	cd 01       	movw	r24, r26
    362c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3630:	dc 01       	movw	r26, r24
    3632:	cb 01       	movw	r24, r22
    3634:	9d 83       	std	Y+5, r25	; 0x05
    3636:	8c 83       	std	Y+4, r24	; 0x04
    3638:	26 c3       	rjmp	.+1612   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PFC_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    363a:	80 91 2f 02 	lds	r24, 0x022F
    363e:	90 91 30 02 	lds	r25, 0x0230
    3642:	9f 83       	std	Y+7, r25	; 0x07
    3644:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR ;
    3646:	89 85       	ldd	r24, Y+9	; 0x09
    3648:	86 31       	cpi	r24, 0x16	; 22
    364a:	41 f5       	brne	.+80     	; 0x369c <PWM_enuSetDutyCycle+0x88e>
    364c:	8e 81       	ldd	r24, Y+6	; 0x06
    364e:	9f 81       	ldd	r25, Y+7	; 0x07
    3650:	cc 01       	movw	r24, r24
    3652:	a0 e0       	ldi	r26, 0x00	; 0
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	2d 85       	ldd	r18, Y+13	; 0x0d
    3668:	3e 85       	ldd	r19, Y+14	; 0x0e
    366a:	4f 85       	ldd	r20, Y+15	; 0x0f
    366c:	58 89       	ldd	r21, Y+16	; 0x10
    366e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	bc 01       	movw	r22, r24
    3678:	cd 01       	movw	r24, r26
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	48 ec       	ldi	r20, 0xC8	; 200
    3680:	52 e4       	ldi	r21, 0x42	; 66
    3682:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3692:	dc 01       	movw	r26, r24
    3694:	cb 01       	movw	r24, r22
    3696:	9d 83       	std	Y+5, r25	; 0x05
    3698:	8c 83       	std	Y+4, r24	; 0x04
    369a:	f5 c2       	rjmp	.+1514   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    369c:	89 85       	ldd	r24, Y+9	; 0x09
    369e:	87 31       	cpi	r24, 0x17	; 23
    36a0:	09 f0       	breq	.+2      	; 0x36a4 <PWM_enuSetDutyCycle+0x896>
    36a2:	f1 c2       	rjmp	.+1506   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    36a4:	8e 81       	ldd	r24, Y+6	; 0x06
    36a6:	9f 81       	ldd	r25, Y+7	; 0x07
    36a8:	cc 01       	movw	r24, r24
    36aa:	a0 e0       	ldi	r26, 0x00	; 0
    36ac:	b0 e0       	ldi	r27, 0x00	; 0
    36ae:	bc 01       	movw	r22, r24
    36b0:	cd 01       	movw	r24, r26
    36b2:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    36b6:	7b 01       	movw	r14, r22
    36b8:	8c 01       	movw	r16, r24
    36ba:	8e 81       	ldd	r24, Y+6	; 0x06
    36bc:	9f 81       	ldd	r25, Y+7	; 0x07
    36be:	cc 01       	movw	r24, r24
    36c0:	a0 e0       	ldi	r26, 0x00	; 0
    36c2:	b0 e0       	ldi	r27, 0x00	; 0
    36c4:	bc 01       	movw	r22, r24
    36c6:	cd 01       	movw	r24, r26
    36c8:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    36d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    36d8:	4f 85       	ldd	r20, Y+15	; 0x0f
    36da:	58 89       	ldd	r21, Y+16	; 0x10
    36dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	bc 01       	movw	r22, r24
    36e6:	cd 01       	movw	r24, r26
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	48 ec       	ldi	r20, 0xC8	; 200
    36ee:	52 ec       	ldi	r21, 0xC2	; 194
    36f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	9c 01       	movw	r18, r24
    36fa:	ad 01       	movw	r20, r26
    36fc:	c8 01       	movw	r24, r16
    36fe:	b7 01       	movw	r22, r14
    3700:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3704:	dc 01       	movw	r26, r24
    3706:	cb 01       	movw	r24, r22
    3708:	bc 01       	movw	r22, r24
    370a:	cd 01       	movw	r24, r26
    370c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	9d 83       	std	Y+5, r25	; 0x05
    3716:	8c 83       	std	Y+4, r24	; 0x04
    3718:	b6 c2       	rjmp	.+1388   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    371a:	80 91 2f 02 	lds	r24, 0x022F
    371e:	90 91 30 02 	lds	r25, 0x0230
    3722:	9f 83       	std	Y+7, r25	; 0x07
    3724:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    3726:	89 85       	ldd	r24, Y+9	; 0x09
    3728:	86 31       	cpi	r24, 0x16	; 22
    372a:	41 f5       	brne	.+80     	; 0x377c <PWM_enuSetDutyCycle+0x96e>
    372c:	8e 81       	ldd	r24, Y+6	; 0x06
    372e:	9f 81       	ldd	r25, Y+7	; 0x07
    3730:	cc 01       	movw	r24, r24
    3732:	a0 e0       	ldi	r26, 0x00	; 0
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    373e:	dc 01       	movw	r26, r24
    3740:	cb 01       	movw	r24, r22
    3742:	bc 01       	movw	r22, r24
    3744:	cd 01       	movw	r24, r26
    3746:	2d 85       	ldd	r18, Y+13	; 0x0d
    3748:	3e 85       	ldd	r19, Y+14	; 0x0e
    374a:	4f 85       	ldd	r20, Y+15	; 0x0f
    374c:	58 89       	ldd	r21, Y+16	; 0x10
    374e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3752:	dc 01       	movw	r26, r24
    3754:	cb 01       	movw	r24, r22
    3756:	bc 01       	movw	r22, r24
    3758:	cd 01       	movw	r24, r26
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	48 ec       	ldi	r20, 0xC8	; 200
    3760:	52 e4       	ldi	r21, 0x42	; 66
    3762:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3766:	dc 01       	movw	r26, r24
    3768:	cb 01       	movw	r24, r22
    376a:	bc 01       	movw	r22, r24
    376c:	cd 01       	movw	r24, r26
    376e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3772:	dc 01       	movw	r26, r24
    3774:	cb 01       	movw	r24, r22
    3776:	9d 83       	std	Y+5, r25	; 0x05
    3778:	8c 83       	std	Y+4, r24	; 0x04
    377a:	85 c2       	rjmp	.+1290   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    377c:	89 85       	ldd	r24, Y+9	; 0x09
    377e:	87 31       	cpi	r24, 0x17	; 23
    3780:	09 f0       	breq	.+2      	; 0x3784 <PWM_enuSetDutyCycle+0x976>
    3782:	81 c2       	rjmp	.+1282   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3784:	8e 81       	ldd	r24, Y+6	; 0x06
    3786:	9f 81       	ldd	r25, Y+7	; 0x07
    3788:	cc 01       	movw	r24, r24
    378a:	a0 e0       	ldi	r26, 0x00	; 0
    378c:	b0 e0       	ldi	r27, 0x00	; 0
    378e:	bc 01       	movw	r22, r24
    3790:	cd 01       	movw	r24, r26
    3792:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3796:	7b 01       	movw	r14, r22
    3798:	8c 01       	movw	r16, r24
    379a:	8e 81       	ldd	r24, Y+6	; 0x06
    379c:	9f 81       	ldd	r25, Y+7	; 0x07
    379e:	cc 01       	movw	r24, r24
    37a0:	a0 e0       	ldi	r26, 0x00	; 0
    37a2:	b0 e0       	ldi	r27, 0x00	; 0
    37a4:	bc 01       	movw	r22, r24
    37a6:	cd 01       	movw	r24, r26
    37a8:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	bc 01       	movw	r22, r24
    37b2:	cd 01       	movw	r24, r26
    37b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    37b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    37b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    37ba:	58 89       	ldd	r21, Y+16	; 0x10
    37bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	cd 01       	movw	r24, r26
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	48 ec       	ldi	r20, 0xC8	; 200
    37ce:	52 ec       	ldi	r21, 0xC2	; 194
    37d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37d4:	dc 01       	movw	r26, r24
    37d6:	cb 01       	movw	r24, r22
    37d8:	9c 01       	movw	r18, r24
    37da:	ad 01       	movw	r20, r26
    37dc:	c8 01       	movw	r24, r16
    37de:	b7 01       	movw	r22, r14
    37e0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	bc 01       	movw	r22, r24
    37ea:	cd 01       	movw	r24, r26
    37ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	9d 83       	std	Y+5, r25	; 0x05
    37f6:	8c 83       	std	Y+4, r24	; 0x04
    37f8:	46 c2       	rjmp	.+1164   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    37fa:	80 91 2f 02 	lds	r24, 0x022F
    37fe:	90 91 30 02 	lds	r25, 0x0230
    3802:	9f 83       	std	Y+7, r25	; 0x07
    3804:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    3806:	89 85       	ldd	r24, Y+9	; 0x09
    3808:	86 31       	cpi	r24, 0x16	; 22
    380a:	b9 f4       	brne	.+46     	; 0x383a <PWM_enuSetDutyCycle+0xa2c>
    380c:	1d 8a       	std	Y+21, r1	; 0x15
    380e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3810:	7e 85       	ldd	r23, Y+14	; 0x0e
    3812:	8f 85       	ldd	r24, Y+15	; 0x0f
    3814:	98 89       	ldd	r25, Y+16	; 0x10
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e0       	ldi	r20, 0x00	; 0
    381c:	50 e0       	ldi	r21, 0x00	; 0
    381e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3822:	88 23       	and	r24, r24
    3824:	11 f4       	brne	.+4      	; 0x382a <PWM_enuSetDutyCycle+0xa1c>
    3826:	21 e0       	ldi	r18, 0x01	; 1
    3828:	2d 8b       	std	Y+21, r18	; 0x15
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	3d 89       	ldd	r19, Y+21	; 0x15
    382e:	83 27       	eor	r24, r19
    3830:	88 23       	and	r24, r24
    3832:	19 f4       	brne	.+6      	; 0x383a <PWM_enuSetDutyCycle+0xa2c>
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	88 87       	std	Y+8, r24	; 0x08
    3838:	26 c2       	rjmp	.+1100   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    383a:	89 85       	ldd	r24, Y+9	; 0x09
    383c:	87 31       	cpi	r24, 0x17	; 23
    383e:	b9 f4       	brne	.+46     	; 0x386e <PWM_enuSetDutyCycle+0xa60>
    3840:	1c 8a       	std	Y+20, r1	; 0x14
    3842:	6d 85       	ldd	r22, Y+13	; 0x0d
    3844:	7e 85       	ldd	r23, Y+14	; 0x0e
    3846:	8f 85       	ldd	r24, Y+15	; 0x0f
    3848:	98 89       	ldd	r25, Y+16	; 0x10
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	48 ec       	ldi	r20, 0xC8	; 200
    3850:	52 e4       	ldi	r21, 0x42	; 66
    3852:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3856:	88 23       	and	r24, r24
    3858:	11 f4       	brne	.+4      	; 0x385e <PWM_enuSetDutyCycle+0xa50>
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	8c 8b       	std	Y+20, r24	; 0x14
    385e:	81 e0       	ldi	r24, 0x01	; 1
    3860:	9c 89       	ldd	r25, Y+20	; 0x14
    3862:	89 27       	eor	r24, r25
    3864:	88 23       	and	r24, r24
    3866:	19 f4       	brne	.+6      	; 0x386e <PWM_enuSetDutyCycle+0xa60>
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	88 87       	std	Y+8, r24	; 0x08
    386c:	0c c2       	rjmp	.+1048   	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    386e:	89 85       	ldd	r24, Y+9	; 0x09
    3870:	86 31       	cpi	r24, 0x16	; 22
    3872:	a9 f5       	brne	.+106    	; 0x38de <PWM_enuSetDutyCycle+0xad0>
    3874:	8e 81       	ldd	r24, Y+6	; 0x06
    3876:	9f 81       	ldd	r25, Y+7	; 0x07
    3878:	cc 01       	movw	r24, r24
    387a:	a0 e0       	ldi	r26, 0x00	; 0
    387c:	b0 e0       	ldi	r27, 0x00	; 0
    387e:	01 96       	adiw	r24, 0x01	; 1
    3880:	a1 1d       	adc	r26, r1
    3882:	b1 1d       	adc	r27, r1
    3884:	bc 01       	movw	r22, r24
    3886:	cd 01       	movw	r24, r26
    3888:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    388c:	dc 01       	movw	r26, r24
    388e:	cb 01       	movw	r24, r22
    3890:	bc 01       	movw	r22, r24
    3892:	cd 01       	movw	r24, r26
    3894:	2d 85       	ldd	r18, Y+13	; 0x0d
    3896:	3e 85       	ldd	r19, Y+14	; 0x0e
    3898:	4f 85       	ldd	r20, Y+15	; 0x0f
    389a:	58 89       	ldd	r21, Y+16	; 0x10
    389c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a0:	dc 01       	movw	r26, r24
    38a2:	cb 01       	movw	r24, r22
    38a4:	bc 01       	movw	r22, r24
    38a6:	cd 01       	movw	r24, r26
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	48 ec       	ldi	r20, 0xC8	; 200
    38ae:	52 e4       	ldi	r21, 0x42	; 66
    38b0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	bc 01       	movw	r22, r24
    38ba:	cd 01       	movw	r24, r26
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 e8       	ldi	r20, 0x80	; 128
    38c2:	5f e3       	ldi	r21, 0x3F	; 63
    38c4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    38c8:	dc 01       	movw	r26, r24
    38ca:	cb 01       	movw	r24, r22
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	9d 83       	std	Y+5, r25	; 0x05
    38da:	8c 83       	std	Y+4, r24	; 0x04
    38dc:	d4 c1       	rjmp	.+936    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    38de:	89 85       	ldd	r24, Y+9	; 0x09
    38e0:	87 31       	cpi	r24, 0x17	; 23
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <PWM_enuSetDutyCycle+0xad8>
    38e4:	d0 c1       	rjmp	.+928    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    38e6:	8e 81       	ldd	r24, Y+6	; 0x06
    38e8:	9f 81       	ldd	r25, Y+7	; 0x07
    38ea:	cc 01       	movw	r24, r24
    38ec:	a0 e0       	ldi	r26, 0x00	; 0
    38ee:	b0 e0       	ldi	r27, 0x00	; 0
    38f0:	bc 01       	movw	r22, r24
    38f2:	cd 01       	movw	r24, r26
    38f4:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    38f8:	7b 01       	movw	r14, r22
    38fa:	8c 01       	movw	r16, r24
    38fc:	8e 81       	ldd	r24, Y+6	; 0x06
    38fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3900:	cc 01       	movw	r24, r24
    3902:	a0 e0       	ldi	r26, 0x00	; 0
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	01 96       	adiw	r24, 0x01	; 1
    3908:	a1 1d       	adc	r26, r1
    390a:	b1 1d       	adc	r27, r1
    390c:	bc 01       	movw	r22, r24
    390e:	cd 01       	movw	r24, r26
    3910:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	bc 01       	movw	r22, r24
    391a:	cd 01       	movw	r24, r26
    391c:	2d 85       	ldd	r18, Y+13	; 0x0d
    391e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3920:	4f 85       	ldd	r20, Y+15	; 0x0f
    3922:	58 89       	ldd	r21, Y+16	; 0x10
    3924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3928:	dc 01       	movw	r26, r24
    392a:	cb 01       	movw	r24, r22
    392c:	bc 01       	movw	r22, r24
    392e:	cd 01       	movw	r24, r26
    3930:	20 e0       	ldi	r18, 0x00	; 0
    3932:	30 e0       	ldi	r19, 0x00	; 0
    3934:	48 ec       	ldi	r20, 0xC8	; 200
    3936:	52 ec       	ldi	r21, 0xC2	; 194
    3938:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    393c:	dc 01       	movw	r26, r24
    393e:	cb 01       	movw	r24, r22
    3940:	9c 01       	movw	r18, r24
    3942:	ad 01       	movw	r20, r26
    3944:	c8 01       	movw	r24, r16
    3946:	b7 01       	movw	r22, r14
    3948:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	9d 83       	std	Y+5, r25	; 0x05
    395e:	8c 83       	std	Y+4, r24	; 0x04
    3960:	92 c1       	rjmp	.+804    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PFC_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    3962:	80 91 2b 02 	lds	r24, 0x022B
    3966:	90 91 2c 02 	lds	r25, 0x022C
    396a:	9f 83       	std	Y+7, r25	; 0x07
    396c:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    396e:	89 85       	ldd	r24, Y+9	; 0x09
    3970:	86 31       	cpi	r24, 0x16	; 22
    3972:	41 f5       	brne	.+80     	; 0x39c4 <PWM_enuSetDutyCycle+0xbb6>
    3974:	8e 81       	ldd	r24, Y+6	; 0x06
    3976:	9f 81       	ldd	r25, Y+7	; 0x07
    3978:	cc 01       	movw	r24, r24
    397a:	a0 e0       	ldi	r26, 0x00	; 0
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	bc 01       	movw	r22, r24
    398c:	cd 01       	movw	r24, r26
    398e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3990:	3e 85       	ldd	r19, Y+14	; 0x0e
    3992:	4f 85       	ldd	r20, Y+15	; 0x0f
    3994:	58 89       	ldd	r21, Y+16	; 0x10
    3996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	bc 01       	movw	r22, r24
    39a0:	cd 01       	movw	r24, r26
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	48 ec       	ldi	r20, 0xC8	; 200
    39a8:	52 e4       	ldi	r21, 0x42	; 66
    39aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39ae:	dc 01       	movw	r26, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	bc 01       	movw	r22, r24
    39b4:	cd 01       	movw	r24, r26
    39b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	9d 83       	std	Y+5, r25	; 0x05
    39c0:	8c 83       	std	Y+4, r24	; 0x04
    39c2:	61 c1       	rjmp	.+706    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    39c4:	89 85       	ldd	r24, Y+9	; 0x09
    39c6:	87 31       	cpi	r24, 0x17	; 23
    39c8:	09 f0       	breq	.+2      	; 0x39cc <PWM_enuSetDutyCycle+0xbbe>
    39ca:	5d c1       	rjmp	.+698    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    39cc:	8e 81       	ldd	r24, Y+6	; 0x06
    39ce:	9f 81       	ldd	r25, Y+7	; 0x07
    39d0:	cc 01       	movw	r24, r24
    39d2:	a0 e0       	ldi	r26, 0x00	; 0
    39d4:	b0 e0       	ldi	r27, 0x00	; 0
    39d6:	bc 01       	movw	r22, r24
    39d8:	cd 01       	movw	r24, r26
    39da:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    39de:	7b 01       	movw	r14, r22
    39e0:	8c 01       	movw	r16, r24
    39e2:	8e 81       	ldd	r24, Y+6	; 0x06
    39e4:	9f 81       	ldd	r25, Y+7	; 0x07
    39e6:	cc 01       	movw	r24, r24
    39e8:	a0 e0       	ldi	r26, 0x00	; 0
    39ea:	b0 e0       	ldi	r27, 0x00	; 0
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	bc 01       	movw	r22, r24
    39fa:	cd 01       	movw	r24, r26
    39fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a00:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a02:	58 89       	ldd	r21, Y+16	; 0x10
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	bc 01       	movw	r22, r24
    3a0e:	cd 01       	movw	r24, r26
    3a10:	20 e0       	ldi	r18, 0x00	; 0
    3a12:	30 e0       	ldi	r19, 0x00	; 0
    3a14:	48 ec       	ldi	r20, 0xC8	; 200
    3a16:	52 ec       	ldi	r21, 0xC2	; 194
    3a18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	9c 01       	movw	r18, r24
    3a22:	ad 01       	movw	r20, r26
    3a24:	c8 01       	movw	r24, r16
    3a26:	b7 01       	movw	r22, r14
    3a28:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	bc 01       	movw	r22, r24
    3a32:	cd 01       	movw	r24, r26
    3a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	9d 83       	std	Y+5, r25	; 0x05
    3a3e:	8c 83       	std	Y+4, r24	; 0x04
    3a40:	22 c1       	rjmp	.+580    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    3a42:	80 91 2b 02 	lds	r24, 0x022B
    3a46:	90 91 2c 02 	lds	r25, 0x022C
    3a4a:	9f 83       	std	Y+7, r25	; 0x07
    3a4c:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    3a4e:	89 85       	ldd	r24, Y+9	; 0x09
    3a50:	86 31       	cpi	r24, 0x16	; 22
    3a52:	41 f5       	brne	.+80     	; 0x3aa4 <PWM_enuSetDutyCycle+0xc96>
    3a54:	8e 81       	ldd	r24, Y+6	; 0x06
    3a56:	9f 81       	ldd	r25, Y+7	; 0x07
    3a58:	cc 01       	movw	r24, r24
    3a5a:	a0 e0       	ldi	r26, 0x00	; 0
    3a5c:	b0 e0       	ldi	r27, 0x00	; 0
    3a5e:	bc 01       	movw	r22, r24
    3a60:	cd 01       	movw	r24, r26
    3a62:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	bc 01       	movw	r22, r24
    3a6c:	cd 01       	movw	r24, r26
    3a6e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a70:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a72:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a74:	58 89       	ldd	r21, Y+16	; 0x10
    3a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7a:	dc 01       	movw	r26, r24
    3a7c:	cb 01       	movw	r24, r22
    3a7e:	bc 01       	movw	r22, r24
    3a80:	cd 01       	movw	r24, r26
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	48 ec       	ldi	r20, 0xC8	; 200
    3a88:	52 e4       	ldi	r21, 0x42	; 66
    3a8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a9a:	dc 01       	movw	r26, r24
    3a9c:	cb 01       	movw	r24, r22
    3a9e:	9d 83       	std	Y+5, r25	; 0x05
    3aa0:	8c 83       	std	Y+4, r24	; 0x04
    3aa2:	f1 c0       	rjmp	.+482    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3aa4:	89 85       	ldd	r24, Y+9	; 0x09
    3aa6:	87 31       	cpi	r24, 0x17	; 23
    3aa8:	09 f0       	breq	.+2      	; 0x3aac <PWM_enuSetDutyCycle+0xc9e>
    3aaa:	ed c0       	rjmp	.+474    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3aac:	8e 81       	ldd	r24, Y+6	; 0x06
    3aae:	9f 81       	ldd	r25, Y+7	; 0x07
    3ab0:	cc 01       	movw	r24, r24
    3ab2:	a0 e0       	ldi	r26, 0x00	; 0
    3ab4:	b0 e0       	ldi	r27, 0x00	; 0
    3ab6:	bc 01       	movw	r22, r24
    3ab8:	cd 01       	movw	r24, r26
    3aba:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3abe:	7b 01       	movw	r14, r22
    3ac0:	8c 01       	movw	r16, r24
    3ac2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ac4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ac6:	cc 01       	movw	r24, r24
    3ac8:	a0 e0       	ldi	r26, 0x00	; 0
    3aca:	b0 e0       	ldi	r27, 0x00	; 0
    3acc:	bc 01       	movw	r22, r24
    3ace:	cd 01       	movw	r24, r26
    3ad0:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	bc 01       	movw	r22, r24
    3ada:	cd 01       	movw	r24, r26
    3adc:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ade:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ae0:	4f 85       	ldd	r20, Y+15	; 0x0f
    3ae2:	58 89       	ldd	r21, Y+16	; 0x10
    3ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	bc 01       	movw	r22, r24
    3aee:	cd 01       	movw	r24, r26
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	48 ec       	ldi	r20, 0xC8	; 200
    3af6:	52 ec       	ldi	r21, 0xC2	; 194
    3af8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	9c 01       	movw	r18, r24
    3b02:	ad 01       	movw	r20, r26
    3b04:	c8 01       	movw	r24, r16
    3b06:	b7 01       	movw	r22, r14
    3b08:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	bc 01       	movw	r22, r24
    3b12:	cd 01       	movw	r24, r26
    3b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	9d 83       	std	Y+5, r25	; 0x05
    3b1e:	8c 83       	std	Y+4, r24	; 0x04
    3b20:	b2 c0       	rjmp	.+356    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    3b22:	80 91 2b 02 	lds	r24, 0x022B
    3b26:	90 91 2c 02 	lds	r25, 0x022C
    3b2a:	9f 83       	std	Y+7, r25	; 0x07
    3b2c:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    3b2e:	89 85       	ldd	r24, Y+9	; 0x09
    3b30:	86 31       	cpi	r24, 0x16	; 22
    3b32:	b9 f4       	brne	.+46     	; 0x3b62 <PWM_enuSetDutyCycle+0xd54>
    3b34:	1b 8a       	std	Y+19, r1	; 0x13
    3b36:	6d 85       	ldd	r22, Y+13	; 0x0d
    3b38:	7e 85       	ldd	r23, Y+14	; 0x0e
    3b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b3c:	98 89       	ldd	r25, Y+16	; 0x10
    3b3e:	20 e0       	ldi	r18, 0x00	; 0
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	40 e0       	ldi	r20, 0x00	; 0
    3b44:	50 e0       	ldi	r21, 0x00	; 0
    3b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3b4a:	88 23       	and	r24, r24
    3b4c:	11 f4       	brne	.+4      	; 0x3b52 <PWM_enuSetDutyCycle+0xd44>
    3b4e:	21 e0       	ldi	r18, 0x01	; 1
    3b50:	2b 8b       	std	Y+19, r18	; 0x13
    3b52:	81 e0       	ldi	r24, 0x01	; 1
    3b54:	3b 89       	ldd	r19, Y+19	; 0x13
    3b56:	83 27       	eor	r24, r19
    3b58:	88 23       	and	r24, r24
    3b5a:	19 f4       	brne	.+6      	; 0x3b62 <PWM_enuSetDutyCycle+0xd54>
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	88 87       	std	Y+8, r24	; 0x08
    3b60:	92 c0       	rjmp	.+292    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	87 31       	cpi	r24, 0x17	; 23
    3b66:	b9 f4       	brne	.+46     	; 0x3b96 <PWM_enuSetDutyCycle+0xd88>
    3b68:	1a 8a       	std	Y+18, r1	; 0x12
    3b6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    3b6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    3b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b70:	98 89       	ldd	r25, Y+16	; 0x10
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	48 ec       	ldi	r20, 0xC8	; 200
    3b78:	52 e4       	ldi	r21, 0x42	; 66
    3b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3b7e:	88 23       	and	r24, r24
    3b80:	11 f4       	brne	.+4      	; 0x3b86 <PWM_enuSetDutyCycle+0xd78>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	8a 8b       	std	Y+18, r24	; 0x12
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	9a 89       	ldd	r25, Y+18	; 0x12
    3b8a:	89 27       	eor	r24, r25
    3b8c:	88 23       	and	r24, r24
    3b8e:	19 f4       	brne	.+6      	; 0x3b96 <PWM_enuSetDutyCycle+0xd88>
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	88 87       	std	Y+8, r24	; 0x08
    3b94:	78 c0       	rjmp	.+240    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3b96:	89 85       	ldd	r24, Y+9	; 0x09
    3b98:	86 31       	cpi	r24, 0x16	; 22
    3b9a:	a9 f5       	brne	.+106    	; 0x3c06 <PWM_enuSetDutyCycle+0xdf8>
    3b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    3b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    3ba0:	cc 01       	movw	r24, r24
    3ba2:	a0 e0       	ldi	r26, 0x00	; 0
    3ba4:	b0 e0       	ldi	r27, 0x00	; 0
    3ba6:	01 96       	adiw	r24, 0x01	; 1
    3ba8:	a1 1d       	adc	r26, r1
    3baa:	b1 1d       	adc	r27, r1
    3bac:	bc 01       	movw	r22, r24
    3bae:	cd 01       	movw	r24, r26
    3bb0:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3bb4:	dc 01       	movw	r26, r24
    3bb6:	cb 01       	movw	r24, r22
    3bb8:	bc 01       	movw	r22, r24
    3bba:	cd 01       	movw	r24, r26
    3bbc:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bbe:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bc0:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bc2:	58 89       	ldd	r21, Y+16	; 0x10
    3bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc8:	dc 01       	movw	r26, r24
    3bca:	cb 01       	movw	r24, r22
    3bcc:	bc 01       	movw	r22, r24
    3bce:	cd 01       	movw	r24, r26
    3bd0:	20 e0       	ldi	r18, 0x00	; 0
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	48 ec       	ldi	r20, 0xC8	; 200
    3bd6:	52 e4       	ldi	r21, 0x42	; 66
    3bd8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
    3be0:	bc 01       	movw	r22, r24
    3be2:	cd 01       	movw	r24, r26
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	30 e0       	ldi	r19, 0x00	; 0
    3be8:	40 e8       	ldi	r20, 0x80	; 128
    3bea:	5f e3       	ldi	r21, 0x3F	; 63
    3bec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	cb 01       	movw	r24, r22
    3bf4:	bc 01       	movw	r22, r24
    3bf6:	cd 01       	movw	r24, r26
    3bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	9d 83       	std	Y+5, r25	; 0x05
    3c02:	8c 83       	std	Y+4, r24	; 0x04
    3c04:	40 c0       	rjmp	.+128    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3c06:	89 85       	ldd	r24, Y+9	; 0x09
    3c08:	87 31       	cpi	r24, 0x17	; 23
    3c0a:	e9 f5       	brne	.+122    	; 0x3c86 <PWM_enuSetDutyCycle+0xe78>
    3c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c0e:	9f 81       	ldd	r25, Y+7	; 0x07
    3c10:	cc 01       	movw	r24, r24
    3c12:	a0 e0       	ldi	r26, 0x00	; 0
    3c14:	b0 e0       	ldi	r27, 0x00	; 0
    3c16:	bc 01       	movw	r22, r24
    3c18:	cd 01       	movw	r24, r26
    3c1a:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3c1e:	7b 01       	movw	r14, r22
    3c20:	8c 01       	movw	r16, r24
    3c22:	8e 81       	ldd	r24, Y+6	; 0x06
    3c24:	9f 81       	ldd	r25, Y+7	; 0x07
    3c26:	cc 01       	movw	r24, r24
    3c28:	a0 e0       	ldi	r26, 0x00	; 0
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	01 96       	adiw	r24, 0x01	; 1
    3c2e:	a1 1d       	adc	r26, r1
    3c30:	b1 1d       	adc	r27, r1
    3c32:	bc 01       	movw	r22, r24
    3c34:	cd 01       	movw	r24, r26
    3c36:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	cb 01       	movw	r24, r22
    3c3e:	bc 01       	movw	r22, r24
    3c40:	cd 01       	movw	r24, r26
    3c42:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c44:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c46:	4f 85       	ldd	r20, Y+15	; 0x0f
    3c48:	58 89       	ldd	r21, Y+16	; 0x10
    3c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	bc 01       	movw	r22, r24
    3c54:	cd 01       	movw	r24, r26
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	48 ec       	ldi	r20, 0xC8	; 200
    3c5c:	52 ec       	ldi	r21, 0xC2	; 194
    3c5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3c62:	dc 01       	movw	r26, r24
    3c64:	cb 01       	movw	r24, r22
    3c66:	9c 01       	movw	r18, r24
    3c68:	ad 01       	movw	r20, r26
    3c6a:	c8 01       	movw	r24, r16
    3c6c:	b7 01       	movw	r22, r14
    3c6e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	bc 01       	movw	r22, r24
    3c78:	cd 01       	movw	r24, r26
    3c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c7e:	dc 01       	movw	r26, r24
    3c80:	cb 01       	movw	r24, r22
    3c82:	9d 83       	std	Y+5, r25	; 0x05
    3c84:	8c 83       	std	Y+4, r24	; 0x04
									break;
		}

		if( !Local_u8Flag )
    3c86:	88 85       	ldd	r24, Y+8	; 0x08
    3c88:	88 23       	and	r24, r24
    3c8a:	09 f0       	breq	.+2      	; 0x3c8e <PWM_enuSetDutyCycle+0xe80>
    3c8c:	3c c0       	rjmp	.+120    	; 0x3d06 <PWM_enuSetDutyCycle+0xef8>
		{
			if( Copy_u8TimerNum == TIMER1A )
    3c8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c90:	89 3c       	cpi	r24, 0xC9	; 201
    3c92:	d9 f4       	brne	.+54     	; 0x3cca <PWM_enuSetDutyCycle+0xebc>
			{
				u8 Local_u8Temp = SREG ;
    3c94:	ef e5       	ldi	r30, 0x5F	; 95
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	80 81       	ld	r24, Z
    3c9a:	8a 83       	std	Y+2, r24	; 0x02
				_CLI_;
    3c9c:	f8 94       	cli
				OCR1AH  = Local_u16OCRValue >> _BYTE_SHIFT_ ;
    3c9e:	eb e4       	ldi	r30, 0x4B	; 75
    3ca0:	f0 e0       	ldi	r31, 0x00	; 0
    3ca2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca6:	89 2f       	mov	r24, r25
    3ca8:	99 27       	eor	r25, r25
    3caa:	80 83       	st	Z, r24
				OCR1AL 	= Local_u16OCRValue ;
    3cac:	ea e4       	ldi	r30, 0x4A	; 74
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb2:	80 83       	st	Z, r24
				SREG = Local_u8Temp;
    3cb4:	ef e5       	ldi	r30, 0x5F	; 95
    3cb6:	f0 e0       	ldi	r31, 0x00	; 0
    3cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3cba:	80 83       	st	Z, r24
				Global_u16OCR1A_Value = Local_u16OCRValue ;
    3cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    3cc0:	90 93 2c 02 	sts	0x022C, r25
    3cc4:	80 93 2b 02 	sts	0x022B, r24
    3cc8:	23 c0       	rjmp	.+70     	; 0x3d10 <PWM_enuSetDutyCycle+0xf02>
			}
			else if( Copy_u8TimerNum == TIMER1B )
    3cca:	8c 85       	ldd	r24, Y+12	; 0x0c
    3ccc:	8a 3c       	cpi	r24, 0xCA	; 202
    3cce:	01 f5       	brne	.+64     	; 0x3d10 <PWM_enuSetDutyCycle+0xf02>
			{
				u8 Local_u8Temp = SREG ;
    3cd0:	ef e5       	ldi	r30, 0x5F	; 95
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	80 81       	ld	r24, Z
    3cd6:	89 83       	std	Y+1, r24	; 0x01
				_CLI_;
    3cd8:	f8 94       	cli
				OCR1BH  = Local_u16OCRValue >> _BYTE_SHIFT_ ;
    3cda:	e9 e4       	ldi	r30, 0x49	; 73
    3cdc:	f0 e0       	ldi	r31, 0x00	; 0
    3cde:	8c 81       	ldd	r24, Y+4	; 0x04
    3ce0:	9d 81       	ldd	r25, Y+5	; 0x05
    3ce2:	89 2f       	mov	r24, r25
    3ce4:	99 27       	eor	r25, r25
    3ce6:	80 83       	st	Z, r24
				OCR1BL 	= Local_u16OCRValue ;
    3ce8:	e8 e4       	ldi	r30, 0x48	; 72
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	8c 81       	ldd	r24, Y+4	; 0x04
    3cee:	80 83       	st	Z, r24
				SREG = Local_u8Temp;
    3cf0:	ef e5       	ldi	r30, 0x5F	; 95
    3cf2:	f0 e0       	ldi	r31, 0x00	; 0
    3cf4:	89 81       	ldd	r24, Y+1	; 0x01
    3cf6:	80 83       	st	Z, r24
				Global_u16OCR1B_Value = Local_u16OCRValue ;
    3cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    3cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    3cfc:	90 93 2e 02 	sts	0x022E, r25
    3d00:	80 93 2d 02 	sts	0x022D, r24
    3d04:	05 c0       	rjmp	.+10     	; 0x3d10 <PWM_enuSetDutyCycle+0xf02>
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    3d06:	82 e0       	ldi	r24, 0x02	; 2
    3d08:	8b 87       	std	Y+11, r24	; 0x0b
    3d0a:	02 c0       	rjmp	.+4      	; 0x3d10 <PWM_enuSetDutyCycle+0xf02>
			#warning " PWM_enuSetDutyCycle(): Requested Duty Cycle Can NOT be reached in this mode "
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    3d0c:	82 e0       	ldi	r24, 0x02	; 2
    3d0e:	8b 87       	std	Y+11, r24	; 0x0b

	return ( Local_enuErrorState == ES_NOK ? ES_OK : Local_enuErrorState ) ;
    3d10:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d12:	81 30       	cpi	r24, 0x01	; 1
    3d14:	19 f0       	breq	.+6      	; 0x3d1c <PWM_enuSetDutyCycle+0xf0e>
    3d16:	2b 85       	ldd	r18, Y+11	; 0x0b
    3d18:	29 8b       	std	Y+17, r18	; 0x11
    3d1a:	01 c0       	rjmp	.+2      	; 0x3d1e <PWM_enuSetDutyCycle+0xf10>
    3d1c:	19 8a       	std	Y+17, r1	; 0x11
    3d1e:	89 89       	ldd	r24, Y+17	; 0x11
}
    3d20:	6d 96       	adiw	r28, 0x1d	; 29
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	cf 91       	pop	r28
    3d2e:	df 91       	pop	r29
    3d30:	1f 91       	pop	r17
    3d32:	0f 91       	pop	r16
    3d34:	ff 90       	pop	r15
    3d36:	ef 90       	pop	r14
    3d38:	08 95       	ret

00003d3a <PWM_enuInterruptEnable>:

ES_t PWM_enuInterruptEnable( u8 Copy_u8TimerIntName)
{
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	00 d0       	rcall	.+0      	; 0x3d40 <PWM_enuInterruptEnable+0x6>
    3d40:	00 d0       	rcall	.+0      	; 0x3d42 <PWM_enuInterruptEnable+0x8>
    3d42:	0f 92       	push	r0
    3d44:	cd b7       	in	r28, 0x3d	; 61
    3d46:	de b7       	in	r29, 0x3e	; 62
    3d48:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	89 83       	std	Y+1, r24	; 0x01

	_CLI_;														// Disable all Interrupts
    3d4e:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    3d50:	8a 81       	ldd	r24, Y+2	; 0x02
    3d52:	28 2f       	mov	r18, r24
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	3d 83       	std	Y+5, r19	; 0x05
    3d58:	2c 83       	std	Y+4, r18	; 0x04
    3d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    3d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    3d5e:	8f 33       	cpi	r24, 0x3F	; 63
    3d60:	91 05       	cpc	r25, r1
    3d62:	91 f0       	breq	.+36     	; 0x3d88 <PWM_enuInterruptEnable+0x4e>
    3d64:	2c 81       	ldd	r18, Y+4	; 0x04
    3d66:	3d 81       	ldd	r19, Y+5	; 0x05
    3d68:	20 34       	cpi	r18, 0x40	; 64
    3d6a:	31 05       	cpc	r19, r1
    3d6c:	a9 f0       	breq	.+42     	; 0x3d98 <PWM_enuInterruptEnable+0x5e>
    3d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d70:	9d 81       	ldd	r25, Y+5	; 0x05
    3d72:	8e 33       	cpi	r24, 0x3E	; 62
    3d74:	91 05       	cpc	r25, r1
    3d76:	c1 f4       	brne	.+48     	; 0x3da8 <PWM_enuInterruptEnable+0x6e>
	{
		case TOIE1	:	SET_BIT( TIMSK , TOIE1_BIT);
    3d78:	a9 e5       	ldi	r26, 0x59	; 89
    3d7a:	b0 e0       	ldi	r27, 0x00	; 0
    3d7c:	e9 e5       	ldi	r30, 0x59	; 89
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	84 60       	ori	r24, 0x04	; 4
    3d84:	8c 93       	st	X, r24
    3d86:	12 c0       	rjmp	.+36     	; 0x3dac <PWM_enuInterruptEnable+0x72>
						break;
		case OCIE1B	:	SET_BIT( TIMSK , OCIE1B_BIT);
    3d88:	a9 e5       	ldi	r26, 0x59	; 89
    3d8a:	b0 e0       	ldi	r27, 0x00	; 0
    3d8c:	e9 e5       	ldi	r30, 0x59	; 89
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	80 81       	ld	r24, Z
    3d92:	88 60       	ori	r24, 0x08	; 8
    3d94:	8c 93       	st	X, r24
    3d96:	0a c0       	rjmp	.+20     	; 0x3dac <PWM_enuInterruptEnable+0x72>
						break;
		case OCIE1A	:	SET_BIT( TIMSK , OCIE1A_BIT);
    3d98:	a9 e5       	ldi	r26, 0x59	; 89
    3d9a:	b0 e0       	ldi	r27, 0x00	; 0
    3d9c:	e9 e5       	ldi	r30, 0x59	; 89
    3d9e:	f0 e0       	ldi	r31, 0x00	; 0
    3da0:	80 81       	ld	r24, Z
    3da2:	80 61       	ori	r24, 0x10	; 16
    3da4:	8c 93       	st	X, r24
    3da6:	02 c0       	rjmp	.+4      	; 0x3dac <PWM_enuInterruptEnable+0x72>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    3da8:	82 e0       	ldi	r24, 0x02	; 2
    3daa:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}
	_SEI_;													// Enable ALL Interrupts
    3dac:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
    3db0:	81 30       	cpi	r24, 0x01	; 1
    3db2:	19 f0       	breq	.+6      	; 0x3dba <PWM_enuInterruptEnable+0x80>
    3db4:	99 81       	ldd	r25, Y+1	; 0x01
    3db6:	9b 83       	std	Y+3, r25	; 0x03
    3db8:	01 c0       	rjmp	.+2      	; 0x3dbc <PWM_enuInterruptEnable+0x82>
    3dba:	1b 82       	std	Y+3, r1	; 0x03
    3dbc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3dbe:	0f 90       	pop	r0
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	08 95       	ret

00003dce <PWM_enuInterruptDisable>:

ES_t PWM_enuInterruptDisable( u8 Copy_u8TimerIntName)
{
    3dce:	df 93       	push	r29
    3dd0:	cf 93       	push	r28
    3dd2:	00 d0       	rcall	.+0      	; 0x3dd4 <PWM_enuInterruptDisable+0x6>
    3dd4:	00 d0       	rcall	.+0      	; 0x3dd6 <PWM_enuInterruptDisable+0x8>
    3dd6:	0f 92       	push	r0
    3dd8:	cd b7       	in	r28, 0x3d	; 61
    3dda:	de b7       	in	r29, 0x3e	; 62
    3ddc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	89 83       	std	Y+1, r24	; 0x01

	_CLI_;																// Disable ALL Interrupts
    3de2:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    3de4:	8a 81       	ldd	r24, Y+2	; 0x02
    3de6:	28 2f       	mov	r18, r24
    3de8:	30 e0       	ldi	r19, 0x00	; 0
    3dea:	3d 83       	std	Y+5, r19	; 0x05
    3dec:	2c 83       	std	Y+4, r18	; 0x04
    3dee:	8c 81       	ldd	r24, Y+4	; 0x04
    3df0:	9d 81       	ldd	r25, Y+5	; 0x05
    3df2:	8f 33       	cpi	r24, 0x3F	; 63
    3df4:	91 05       	cpc	r25, r1
    3df6:	91 f0       	breq	.+36     	; 0x3e1c <PWM_enuInterruptDisable+0x4e>
    3df8:	2c 81       	ldd	r18, Y+4	; 0x04
    3dfa:	3d 81       	ldd	r19, Y+5	; 0x05
    3dfc:	20 34       	cpi	r18, 0x40	; 64
    3dfe:	31 05       	cpc	r19, r1
    3e00:	a9 f0       	breq	.+42     	; 0x3e2c <PWM_enuInterruptDisable+0x5e>
    3e02:	8c 81       	ldd	r24, Y+4	; 0x04
    3e04:	9d 81       	ldd	r25, Y+5	; 0x05
    3e06:	8e 33       	cpi	r24, 0x3E	; 62
    3e08:	91 05       	cpc	r25, r1
    3e0a:	c1 f4       	brne	.+48     	; 0x3e3c <PWM_enuInterruptDisable+0x6e>
	{
		case TOIE1	:	CLR_BIT( TIMSK , TOIE1_BIT);
    3e0c:	a9 e5       	ldi	r26, 0x59	; 89
    3e0e:	b0 e0       	ldi	r27, 0x00	; 0
    3e10:	e9 e5       	ldi	r30, 0x59	; 89
    3e12:	f0 e0       	ldi	r31, 0x00	; 0
    3e14:	80 81       	ld	r24, Z
    3e16:	8b 7f       	andi	r24, 0xFB	; 251
    3e18:	8c 93       	st	X, r24
    3e1a:	12 c0       	rjmp	.+36     	; 0x3e40 <PWM_enuInterruptDisable+0x72>
						break;
		case OCIE1B	:	CLR_BIT( TIMSK , OCIE1B_BIT);
    3e1c:	a9 e5       	ldi	r26, 0x59	; 89
    3e1e:	b0 e0       	ldi	r27, 0x00	; 0
    3e20:	e9 e5       	ldi	r30, 0x59	; 89
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	80 81       	ld	r24, Z
    3e26:	87 7f       	andi	r24, 0xF7	; 247
    3e28:	8c 93       	st	X, r24
    3e2a:	0a c0       	rjmp	.+20     	; 0x3e40 <PWM_enuInterruptDisable+0x72>
						break;
		case OCIE1A	:	CLR_BIT( TIMSK , OCIE1A_BIT);
    3e2c:	a9 e5       	ldi	r26, 0x59	; 89
    3e2e:	b0 e0       	ldi	r27, 0x00	; 0
    3e30:	e9 e5       	ldi	r30, 0x59	; 89
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	80 81       	ld	r24, Z
    3e36:	8f 7e       	andi	r24, 0xEF	; 239
    3e38:	8c 93       	st	X, r24
    3e3a:	02 c0       	rjmp	.+4      	; 0x3e40 <PWM_enuInterruptDisable+0x72>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    3e3c:	82 e0       	ldi	r24, 0x02	; 2
    3e3e:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}

	_SEI_;																// Re-Enable Global Interrupt
    3e40:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	81 30       	cpi	r24, 0x01	; 1
    3e46:	19 f0       	breq	.+6      	; 0x3e4e <PWM_enuInterruptDisable+0x80>
    3e48:	99 81       	ldd	r25, Y+1	; 0x01
    3e4a:	9b 83       	std	Y+3, r25	; 0x03
    3e4c:	01 c0       	rjmp	.+2      	; 0x3e50 <PWM_enuInterruptDisable+0x82>
    3e4e:	1b 82       	std	Y+3, r1	; 0x03
    3e50:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3e52:	0f 90       	pop	r0
    3e54:	0f 90       	pop	r0
    3e56:	0f 90       	pop	r0
    3e58:	0f 90       	pop	r0
    3e5a:	0f 90       	pop	r0
    3e5c:	cf 91       	pop	r28
    3e5e:	df 91       	pop	r29
    3e60:	08 95       	ret

00003e62 <PWM_enuCallBack>:
	return ( ( Local_u8Status )? TRUE : FALSE ) ;
}
#endif

ES_t PWM_enuCallBack( u8 Copy_u8TimerIntName , void (*Copy_pAppFun)(void) )
{
    3e62:	df 93       	push	r29
    3e64:	cf 93       	push	r28
    3e66:	00 d0       	rcall	.+0      	; 0x3e68 <PWM_enuCallBack+0x6>
    3e68:	00 d0       	rcall	.+0      	; 0x3e6a <PWM_enuCallBack+0x8>
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <PWM_enuCallBack+0xa>
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	8c 83       	std	Y+4, r24	; 0x04
    3e72:	7e 83       	std	Y+6, r23	; 0x06
    3e74:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	8b 83       	std	Y+3, r24	; 0x03

	u8 found = 0 ;
    3e7a:	1a 82       	std	Y+2, r1	; 0x02

	if( Copy_pAppFun != NULL )
    3e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3e80:	00 97       	sbiw	r24, 0x00	; 0
    3e82:	79 f1       	breq	.+94     	; 0x3ee2 <PWM_enuCallBack+0x80>
    3e84:	25 c0       	rjmp	.+74     	; 0x3ed0 <PWM_enuCallBack+0x6e>
	{
		for( u8 Local_u8Iter; Local_u8Iter < PWM_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrPWM_Pointers[Local_u8Iter].InterruptName == Copy_u8TimerIntName )
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	28 2f       	mov	r18, r24
    3e8a:	30 e0       	ldi	r19, 0x00	; 0
    3e8c:	c9 01       	movw	r24, r18
    3e8e:	88 0f       	add	r24, r24
    3e90:	99 1f       	adc	r25, r25
    3e92:	82 0f       	add	r24, r18
    3e94:	93 1f       	adc	r25, r19
    3e96:	fc 01       	movw	r30, r24
    3e98:	e2 57       	subi	r30, 0x72	; 114
    3e9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3e9c:	90 81       	ld	r25, Z
    3e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea0:	98 17       	cp	r25, r24
    3ea2:	99 f4       	brne	.+38     	; 0x3eca <PWM_enuCallBack+0x68>
			{
				Global_AstrPWM_Pointers[Local_u8Iter].ptrFun = Copy_pAppFun;
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	28 2f       	mov	r18, r24
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	c9 01       	movw	r24, r18
    3eac:	88 0f       	add	r24, r24
    3eae:	99 1f       	adc	r25, r25
    3eb0:	82 0f       	add	r24, r18
    3eb2:	93 1f       	adc	r25, r19
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	e1 57       	subi	r30, 0x71	; 113
    3eb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3eba:	8d 81       	ldd	r24, Y+5	; 0x05
    3ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    3ebe:	91 83       	std	Z+1, r25	; 0x01
    3ec0:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK ;
    3ec2:	1b 82       	std	Y+3, r1	; 0x03
				found = 1;
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	8a 83       	std	Y+2, r24	; 0x02
    3ec8:	06 c0       	rjmp	.+12     	; 0x3ed6 <PWM_enuCallBack+0x74>

	u8 found = 0 ;

	if( Copy_pAppFun != NULL )
	{
		for( u8 Local_u8Iter; Local_u8Iter < PWM_INTERRUPTS ; Local_u8Iter++ )
    3eca:	89 81       	ldd	r24, Y+1	; 0x01
    3ecc:	8f 5f       	subi	r24, 0xFF	; 255
    3ece:	89 83       	std	Y+1, r24	; 0x01
    3ed0:	89 81       	ldd	r24, Y+1	; 0x01
    3ed2:	83 30       	cpi	r24, 0x03	; 3
    3ed4:	c0 f2       	brcs	.-80     	; 0x3e86 <PWM_enuCallBack+0x24>
				Local_enuErrorState = ES_OK ;
				found = 1;
				break;
			}
		}
		if(!found) Local_enuErrorState = ES_OUT_RANGE ;
    3ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed8:	88 23       	and	r24, r24
    3eda:	29 f4       	brne	.+10     	; 0x3ee6 <PWM_enuCallBack+0x84>
    3edc:	82 e0       	ldi	r24, 0x02	; 2
    3ede:	8b 83       	std	Y+3, r24	; 0x03
    3ee0:	02 c0       	rjmp	.+4      	; 0x3ee6 <PWM_enuCallBack+0x84>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    3ee2:	83 e0       	ldi	r24, 0x03	; 3
    3ee4:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    3ee6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3ee8:	26 96       	adiw	r28, 0x06	; 6
    3eea:	0f b6       	in	r0, 0x3f	; 63
    3eec:	f8 94       	cli
    3eee:	de bf       	out	0x3e, r29	; 62
    3ef0:	0f be       	out	0x3f, r0	; 63
    3ef2:	cd bf       	out	0x3d, r28	; 61
    3ef4:	cf 91       	pop	r28
    3ef6:	df 91       	pop	r29
    3ef8:	08 95       	ret

00003efa <__vector_7>:
void __vector_8( void )__attribute__((signal));		/*	Timer1	Compare Match B Interrupt ISR	*/
void __vector_9( void )__attribute__((signal));		/*	Timer1	Overflow Interrupt	ISR			*/


void __vector_7( void )/*	OCIE1A	*/
{
    3efa:	1f 92       	push	r1
    3efc:	0f 92       	push	r0
    3efe:	0f b6       	in	r0, 0x3f	; 63
    3f00:	0f 92       	push	r0
    3f02:	11 24       	eor	r1, r1
    3f04:	2f 93       	push	r18
    3f06:	3f 93       	push	r19
    3f08:	4f 93       	push	r20
    3f0a:	5f 93       	push	r21
    3f0c:	6f 93       	push	r22
    3f0e:	7f 93       	push	r23
    3f10:	8f 93       	push	r24
    3f12:	9f 93       	push	r25
    3f14:	af 93       	push	r26
    3f16:	bf 93       	push	r27
    3f18:	ef 93       	push	r30
    3f1a:	ff 93       	push	r31
    3f1c:	df 93       	push	r29
    3f1e:	cf 93       	push	r28
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[2].ptrFun != NULL )
    3f24:	80 91 95 01 	lds	r24, 0x0195
    3f28:	90 91 96 01 	lds	r25, 0x0196
    3f2c:	00 97       	sbiw	r24, 0x00	; 0
    3f2e:	29 f0       	breq	.+10     	; 0x3f3a <__vector_7+0x40>
	{
		(*Global_AstrPWM_Pointers[2].ptrFun)( );
    3f30:	e0 91 95 01 	lds	r30, 0x0195
    3f34:	f0 91 96 01 	lds	r31, 0x0196
    3f38:	09 95       	icall
	}
}
    3f3a:	cf 91       	pop	r28
    3f3c:	df 91       	pop	r29
    3f3e:	ff 91       	pop	r31
    3f40:	ef 91       	pop	r30
    3f42:	bf 91       	pop	r27
    3f44:	af 91       	pop	r26
    3f46:	9f 91       	pop	r25
    3f48:	8f 91       	pop	r24
    3f4a:	7f 91       	pop	r23
    3f4c:	6f 91       	pop	r22
    3f4e:	5f 91       	pop	r21
    3f50:	4f 91       	pop	r20
    3f52:	3f 91       	pop	r19
    3f54:	2f 91       	pop	r18
    3f56:	0f 90       	pop	r0
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	0f 90       	pop	r0
    3f5c:	1f 90       	pop	r1
    3f5e:	18 95       	reti

00003f60 <__vector_8>:
void __vector_8( void )/*	OCIE1B	*/
{
    3f60:	1f 92       	push	r1
    3f62:	0f 92       	push	r0
    3f64:	0f b6       	in	r0, 0x3f	; 63
    3f66:	0f 92       	push	r0
    3f68:	11 24       	eor	r1, r1
    3f6a:	2f 93       	push	r18
    3f6c:	3f 93       	push	r19
    3f6e:	4f 93       	push	r20
    3f70:	5f 93       	push	r21
    3f72:	6f 93       	push	r22
    3f74:	7f 93       	push	r23
    3f76:	8f 93       	push	r24
    3f78:	9f 93       	push	r25
    3f7a:	af 93       	push	r26
    3f7c:	bf 93       	push	r27
    3f7e:	ef 93       	push	r30
    3f80:	ff 93       	push	r31
    3f82:	df 93       	push	r29
    3f84:	cf 93       	push	r28
    3f86:	cd b7       	in	r28, 0x3d	; 61
    3f88:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[1].ptrFun != NULL )
    3f8a:	80 91 92 01 	lds	r24, 0x0192
    3f8e:	90 91 93 01 	lds	r25, 0x0193
    3f92:	00 97       	sbiw	r24, 0x00	; 0
    3f94:	29 f0       	breq	.+10     	; 0x3fa0 <__vector_8+0x40>
	{
		(*Global_AstrPWM_Pointers[1].ptrFun)( );
    3f96:	e0 91 92 01 	lds	r30, 0x0192
    3f9a:	f0 91 93 01 	lds	r31, 0x0193
    3f9e:	09 95       	icall
	}
}
    3fa0:	cf 91       	pop	r28
    3fa2:	df 91       	pop	r29
    3fa4:	ff 91       	pop	r31
    3fa6:	ef 91       	pop	r30
    3fa8:	bf 91       	pop	r27
    3faa:	af 91       	pop	r26
    3fac:	9f 91       	pop	r25
    3fae:	8f 91       	pop	r24
    3fb0:	7f 91       	pop	r23
    3fb2:	6f 91       	pop	r22
    3fb4:	5f 91       	pop	r21
    3fb6:	4f 91       	pop	r20
    3fb8:	3f 91       	pop	r19
    3fba:	2f 91       	pop	r18
    3fbc:	0f 90       	pop	r0
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	0f 90       	pop	r0
    3fc2:	1f 90       	pop	r1
    3fc4:	18 95       	reti

00003fc6 <__vector_9>:
void __vector_9( void )/*	TOIE1	*/
{
    3fc6:	1f 92       	push	r1
    3fc8:	0f 92       	push	r0
    3fca:	0f b6       	in	r0, 0x3f	; 63
    3fcc:	0f 92       	push	r0
    3fce:	11 24       	eor	r1, r1
    3fd0:	2f 93       	push	r18
    3fd2:	3f 93       	push	r19
    3fd4:	4f 93       	push	r20
    3fd6:	5f 93       	push	r21
    3fd8:	6f 93       	push	r22
    3fda:	7f 93       	push	r23
    3fdc:	8f 93       	push	r24
    3fde:	9f 93       	push	r25
    3fe0:	af 93       	push	r26
    3fe2:	bf 93       	push	r27
    3fe4:	ef 93       	push	r30
    3fe6:	ff 93       	push	r31
    3fe8:	df 93       	push	r29
    3fea:	cf 93       	push	r28
    3fec:	cd b7       	in	r28, 0x3d	; 61
    3fee:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[0].ptrFun != NULL )
    3ff0:	80 91 8f 01 	lds	r24, 0x018F
    3ff4:	90 91 90 01 	lds	r25, 0x0190
    3ff8:	00 97       	sbiw	r24, 0x00	; 0
    3ffa:	29 f0       	breq	.+10     	; 0x4006 <__vector_9+0x40>
	{
		(*Global_AstrPWM_Pointers[0].ptrFun)( );
    3ffc:	e0 91 8f 01 	lds	r30, 0x018F
    4000:	f0 91 90 01 	lds	r31, 0x0190
    4004:	09 95       	icall
	}
}
    4006:	cf 91       	pop	r28
    4008:	df 91       	pop	r29
    400a:	ff 91       	pop	r31
    400c:	ef 91       	pop	r30
    400e:	bf 91       	pop	r27
    4010:	af 91       	pop	r26
    4012:	9f 91       	pop	r25
    4014:	8f 91       	pop	r24
    4016:	7f 91       	pop	r23
    4018:	6f 91       	pop	r22
    401a:	5f 91       	pop	r21
    401c:	4f 91       	pop	r20
    401e:	3f 91       	pop	r19
    4020:	2f 91       	pop	r18
    4022:	0f 90       	pop	r0
    4024:	0f be       	out	0x3f, r0	; 63
    4026:	0f 90       	pop	r0
    4028:	1f 90       	pop	r1
    402a:	18 95       	reti

0000402c <EXTI_enuInit>:

extern 	EXTI_t EXTI_AstrEXTI_Config[] ;


ES_t EXTI_enuInit(void)
{
    402c:	df 93       	push	r29
    402e:	cf 93       	push	r28
    4030:	cd b7       	in	r28, 0x3d	; 61
    4032:	de b7       	in	r29, 0x3e	; 62
    4034:	2e 97       	sbiw	r28, 0x0e	; 14
    4036:	0f b6       	in	r0, 0x3f	; 63
    4038:	f8 94       	cli
    403a:	de bf       	out	0x3e, r29	; 62
    403c:	0f be       	out	0x3f, r0	; 63
    403e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    4044:	19 82       	std	Y+1, r1	; 0x01
    4046:	93 c1       	rjmp	.+806    	; 0x436e <EXTI_enuInit+0x342>
	{
		if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT0 )						/********************************************************************/
    4048:	89 81       	ldd	r24, Y+1	; 0x01
    404a:	28 2f       	mov	r18, r24
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	c9 01       	movw	r24, r18
    4050:	88 0f       	add	r24, r24
    4052:	99 1f       	adc	r25, r25
    4054:	82 0f       	add	r24, r18
    4056:	93 1f       	adc	r25, r19
    4058:	fc 01       	movw	r30, r24
    405a:	e8 56       	subi	r30, 0x68	; 104
    405c:	fe 4f       	sbci	r31, 0xFE	; 254
    405e:	80 81       	ld	r24, Z
    4060:	8d 33       	cpi	r24, 0x3D	; 61
    4062:	09 f0       	breq	.+2      	; 0x4066 <EXTI_enuInit+0x3a>
    4064:	82 c0       	rjmp	.+260    	; 0x416a <EXTI_enuInit+0x13e>
		{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	_TWO_BITS_MASK_	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    4066:	a5 e5       	ldi	r26, 0x55	; 85
    4068:	b0 e0       	ldi	r27, 0x00	; 0
    406a:	e5 e5       	ldi	r30, 0x55	; 85
    406c:	f0 e0       	ldi	r31, 0x00	; 0
    406e:	80 81       	ld	r24, Z
    4070:	8c 7f       	andi	r24, 0xFC	; 252
    4072:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	28 2f       	mov	r18, r24
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	c9 01       	movw	r24, r18
    407c:	88 0f       	add	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	82 0f       	add	r24, r18
    4082:	93 1f       	adc	r25, r19
    4084:	fc 01       	movw	r30, r24
    4086:	e7 56       	subi	r30, 0x67	; 103
    4088:	fe 4f       	sbci	r31, 0xFE	; 254
    408a:	80 81       	ld	r24, Z
    408c:	28 2f       	mov	r18, r24
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	3e 87       	std	Y+14, r19	; 0x0e
    4092:	2d 87       	std	Y+13, r18	; 0x0d
    4094:	8d 85       	ldd	r24, Y+13	; 0x0d
    4096:	9e 85       	ldd	r25, Y+14	; 0x0e
    4098:	88 33       	cpi	r24, 0x38	; 56
    409a:	91 05       	cpc	r25, r1
    409c:	b1 f0       	breq	.+44     	; 0x40ca <EXTI_enuInit+0x9e>
    409e:	2d 85       	ldd	r18, Y+13	; 0x0d
    40a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    40a2:	29 33       	cpi	r18, 0x39	; 57
    40a4:	31 05       	cpc	r19, r1
    40a6:	34 f4       	brge	.+12     	; 0x40b4 <EXTI_enuInit+0x88>
    40a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    40aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    40ac:	87 33       	cpi	r24, 0x37	; 55
    40ae:	91 05       	cpc	r25, r1
    40b0:	31 f1       	breq	.+76     	; 0x40fe <EXTI_enuInit+0xd2>
    40b2:	23 c0       	rjmp	.+70     	; 0x40fa <EXTI_enuInit+0xce>
    40b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    40b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    40b8:	29 33       	cpi	r18, 0x39	; 57
    40ba:	31 05       	cpc	r19, r1
    40bc:	71 f0       	breq	.+28     	; 0x40da <EXTI_enuInit+0xae>
    40be:	8d 85       	ldd	r24, Y+13	; 0x0d
    40c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40c2:	8a 33       	cpi	r24, 0x3A	; 58
    40c4:	91 05       	cpc	r25, r1
    40c6:	89 f0       	breq	.+34     	; 0x40ea <EXTI_enuInit+0xbe>
    40c8:	18 c0       	rjmp	.+48     	; 0x40fa <EXTI_enuInit+0xce>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	SET_BIT( MCUCR , ISC00_BIT );				/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    40ca:	a5 e5       	ldi	r26, 0x55	; 85
    40cc:	b0 e0       	ldi	r27, 0x00	; 0
    40ce:	e5 e5       	ldi	r30, 0x55	; 85
    40d0:	f0 e0       	ldi	r31, 0x00	; 0
    40d2:	80 81       	ld	r24, Z
    40d4:	81 60       	ori	r24, 0x01	; 1
    40d6:	8c 93       	st	X, r24
    40d8:	12 c0       	rjmp	.+36     	; 0x40fe <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	FALLING_EDGE:	SET_BIT( MCUCR , ISC01_BIT );				/*		Setting them to '10' for Falling Edge Sense Choice			*/
    40da:	a5 e5       	ldi	r26, 0x55	; 85
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	e5 e5       	ldi	r30, 0x55	; 85
    40e0:	f0 e0       	ldi	r31, 0x00	; 0
    40e2:	80 81       	ld	r24, Z
    40e4:	82 60       	ori	r24, 0x02	; 2
    40e6:	8c 93       	st	X, r24
    40e8:	0a c0       	rjmp	.+20     	; 0x40fe <EXTI_enuInit+0xd2>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= ( _TWO_BITS_MASK_	<<	ISC00_BIT );/*		Setting them to '11' for Rising Edge Sense Choice			*/
    40ea:	a5 e5       	ldi	r26, 0x55	; 85
    40ec:	b0 e0       	ldi	r27, 0x00	; 0
    40ee:	e5 e5       	ldi	r30, 0x55	; 85
    40f0:	f0 e0       	ldi	r31, 0x00	; 0
    40f2:	80 81       	ld	r24, Z
    40f4:	83 60       	ori	r24, 0x03	; 3
    40f6:	8c 93       	st	X, r24
    40f8:	02 c0       	rjmp	.+4      	; 0x40fe <EXTI_enuInit+0xd2>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	82 30       	cpi	r24, 0x02	; 2
    4102:	09 f4       	brne	.+2      	; 0x4106 <EXTI_enuInit+0xda>
    4104:	3a c1       	rjmp	.+628    	; 0x437a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT0	mode		*/
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	28 2f       	mov	r18, r24
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	c9 01       	movw	r24, r18
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	82 0f       	add	r24, r18
    4114:	93 1f       	adc	r25, r19
    4116:	fc 01       	movw	r30, r24
    4118:	e6 56       	subi	r30, 0x66	; 102
    411a:	fe 4f       	sbci	r31, 0xFE	; 254
    411c:	80 81       	ld	r24, Z
    411e:	28 2f       	mov	r18, r24
    4120:	30 e0       	ldi	r19, 0x00	; 0
    4122:	3c 87       	std	Y+12, r19	; 0x0c
    4124:	2b 87       	std	Y+11, r18	; 0x0b
    4126:	8b 85       	ldd	r24, Y+11	; 0x0b
    4128:	9c 85       	ldd	r25, Y+12	; 0x0c
    412a:	8b 33       	cpi	r24, 0x3B	; 59
    412c:	91 05       	cpc	r25, r1
    412e:	31 f0       	breq	.+12     	; 0x413c <EXTI_enuInit+0x110>
    4130:	2b 85       	ldd	r18, Y+11	; 0x0b
    4132:	3c 85       	ldd	r19, Y+12	; 0x0c
    4134:	2c 33       	cpi	r18, 0x3C	; 60
    4136:	31 05       	cpc	r19, r1
    4138:	49 f0       	breq	.+18     	; 0x414c <EXTI_enuInit+0x120>
    413a:	10 c0       	rjmp	.+32     	; 0x415c <EXTI_enuInit+0x130>
			{																		/************************************/
				case	INTERRUPT	:	SET_BIT( GICR ,	PIE0_BIT );					/*			ENABLE INTERRUPT		*/
    413c:	ab e5       	ldi	r26, 0x5B	; 91
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	eb e5       	ldi	r30, 0x5B	; 91
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	80 81       	ld	r24, Z
    4146:	80 64       	ori	r24, 0x40	; 64
    4148:	8c 93       	st	X, r24
    414a:	0a c0       	rjmp	.+20     	; 0x4160 <EXTI_enuInit+0x134>
										break;										/*									*/
				case	POLLING		:	CLR_BIT( GICR ,	PIE0_BIT );					/*			DISABLE INTERRUPT		*/
    414c:	ab e5       	ldi	r26, 0x5B	; 91
    414e:	b0 e0       	ldi	r27, 0x00	; 0
    4150:	eb e5       	ldi	r30, 0x5B	; 91
    4152:	f0 e0       	ldi	r31, 0x00	; 0
    4154:	80 81       	ld	r24, Z
    4156:	8f 7b       	andi	r24, 0xBF	; 191
    4158:	8c 93       	st	X, r24
    415a:	02 c0       	rjmp	.+4      	; 0x4160 <EXTI_enuInit+0x134>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    415c:	82 e0       	ldi	r24, 0x02	; 2
    415e:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    4160:	8a 81       	ldd	r24, Y+2	; 0x02
    4162:	82 30       	cpi	r24, 0x02	; 2
    4164:	09 f4       	brne	.+2      	; 0x4168 <EXTI_enuInit+0x13c>
    4166:	09 c1       	rjmp	.+530    	; 0x437a <EXTI_enuInit+0x34e>
    4168:	ff c0       	rjmp	.+510    	; 0x4368 <EXTI_enuInit+0x33c>
		}

		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT1 )				/********************************************************************/
    416a:	89 81       	ldd	r24, Y+1	; 0x01
    416c:	28 2f       	mov	r18, r24
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	c9 01       	movw	r24, r18
    4172:	88 0f       	add	r24, r24
    4174:	99 1f       	adc	r25, r25
    4176:	82 0f       	add	r24, r18
    4178:	93 1f       	adc	r25, r19
    417a:	fc 01       	movw	r30, r24
    417c:	e8 56       	subi	r30, 0x68	; 104
    417e:	fe 4f       	sbci	r31, 0xFE	; 254
    4180:	80 81       	ld	r24, Z
    4182:	8e 33       	cpi	r24, 0x3E	; 62
    4184:	09 f0       	breq	.+2      	; 0x4188 <EXTI_enuInit+0x15c>
    4186:	7e c0       	rjmp	.+252    	; 0x4284 <EXTI_enuInit+0x258>
		{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																					/********************************************************************/
			MCUCR &= ~(	_TWO_BITS_MASK_	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    4188:	a5 e5       	ldi	r26, 0x55	; 85
    418a:	b0 e0       	ldi	r27, 0x00	; 0
    418c:	e5 e5       	ldi	r30, 0x55	; 85
    418e:	f0 e0       	ldi	r31, 0x00	; 0
    4190:	80 81       	ld	r24, Z
    4192:	83 7f       	andi	r24, 0xF3	; 243
    4194:	8c 93       	st	X, r24
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/*																	*/
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	28 2f       	mov	r18, r24
    419a:	30 e0       	ldi	r19, 0x00	; 0
    419c:	c9 01       	movw	r24, r18
    419e:	88 0f       	add	r24, r24
    41a0:	99 1f       	adc	r25, r25
    41a2:	82 0f       	add	r24, r18
    41a4:	93 1f       	adc	r25, r19
    41a6:	fc 01       	movw	r30, r24
    41a8:	e7 56       	subi	r30, 0x67	; 103
    41aa:	fe 4f       	sbci	r31, 0xFE	; 254
    41ac:	80 81       	ld	r24, Z
    41ae:	28 2f       	mov	r18, r24
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	3a 87       	std	Y+10, r19	; 0x0a
    41b4:	29 87       	std	Y+9, r18	; 0x09
    41b6:	89 85       	ldd	r24, Y+9	; 0x09
    41b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ba:	88 33       	cpi	r24, 0x38	; 56
    41bc:	91 05       	cpc	r25, r1
    41be:	b1 f0       	breq	.+44     	; 0x41ec <EXTI_enuInit+0x1c0>
    41c0:	29 85       	ldd	r18, Y+9	; 0x09
    41c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    41c4:	29 33       	cpi	r18, 0x39	; 57
    41c6:	31 05       	cpc	r19, r1
    41c8:	34 f4       	brge	.+12     	; 0x41d6 <EXTI_enuInit+0x1aa>
    41ca:	89 85       	ldd	r24, Y+9	; 0x09
    41cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ce:	87 33       	cpi	r24, 0x37	; 55
    41d0:	91 05       	cpc	r25, r1
    41d2:	31 f1       	breq	.+76     	; 0x4220 <EXTI_enuInit+0x1f4>
    41d4:	23 c0       	rjmp	.+70     	; 0x421c <EXTI_enuInit+0x1f0>
    41d6:	29 85       	ldd	r18, Y+9	; 0x09
    41d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    41da:	29 33       	cpi	r18, 0x39	; 57
    41dc:	31 05       	cpc	r19, r1
    41de:	71 f0       	breq	.+28     	; 0x41fc <EXTI_enuInit+0x1d0>
    41e0:	89 85       	ldd	r24, Y+9	; 0x09
    41e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    41e4:	8a 33       	cpi	r24, 0x3A	; 58
    41e6:	91 05       	cpc	r25, r1
    41e8:	89 f0       	breq	.+34     	; 0x420c <EXTI_enuInit+0x1e0>
    41ea:	18 c0       	rjmp	.+48     	; 0x421c <EXTI_enuInit+0x1f0>
			{																		/*																	*/
				case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
										break;										/*																	*/
				case	ANY_LGC_LVL	:	SET_BIT( MCUCR , ISC10_BIT );				/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    41ec:	a5 e5       	ldi	r26, 0x55	; 85
    41ee:	b0 e0       	ldi	r27, 0x00	; 0
    41f0:	e5 e5       	ldi	r30, 0x55	; 85
    41f2:	f0 e0       	ldi	r31, 0x00	; 0
    41f4:	80 81       	ld	r24, Z
    41f6:	84 60       	ori	r24, 0x04	; 4
    41f8:	8c 93       	st	X, r24
    41fa:	12 c0       	rjmp	.+36     	; 0x4220 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	FALLING_EDGE:	SET_BIT( MCUCR , ISC11_BIT );				/*		Setting them to '10' for Falling Edge Sense Choice			*/
    41fc:	a5 e5       	ldi	r26, 0x55	; 85
    41fe:	b0 e0       	ldi	r27, 0x00	; 0
    4200:	e5 e5       	ldi	r30, 0x55	; 85
    4202:	f0 e0       	ldi	r31, 0x00	; 0
    4204:	80 81       	ld	r24, Z
    4206:	88 60       	ori	r24, 0x08	; 8
    4208:	8c 93       	st	X, r24
    420a:	0a c0       	rjmp	.+20     	; 0x4220 <EXTI_enuInit+0x1f4>
										break;										/*																	*/
				case	RISING_EDGE	:	MCUCR |= ( _TWO_BITS_MASK_	<<	ISC10_BIT );/*		Setting them to '11' for Rising Edge Sense Choice			*/
    420c:	a5 e5       	ldi	r26, 0x55	; 85
    420e:	b0 e0       	ldi	r27, 0x00	; 0
    4210:	e5 e5       	ldi	r30, 0x55	; 85
    4212:	f0 e0       	ldi	r31, 0x00	; 0
    4214:	80 81       	ld	r24, Z
    4216:	8c 60       	ori	r24, 0x0C	; 12
    4218:	8c 93       	st	X, r24
    421a:	02 c0       	rjmp	.+4      	; 0x4220 <EXTI_enuInit+0x1f4>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    421c:	82 e0       	ldi	r24, 0x02	; 2
    421e:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    4220:	8a 81       	ldd	r24, Y+2	; 0x02
    4222:	82 30       	cpi	r24, 0x02	; 2
    4224:	09 f4       	brne	.+2      	; 0x4228 <EXTI_enuInit+0x1fc>
    4226:	a9 c0       	rjmp	.+338    	; 0x437a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT1	mode		*/
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	28 2f       	mov	r18, r24
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	c9 01       	movw	r24, r18
    4230:	88 0f       	add	r24, r24
    4232:	99 1f       	adc	r25, r25
    4234:	82 0f       	add	r24, r18
    4236:	93 1f       	adc	r25, r19
    4238:	fc 01       	movw	r30, r24
    423a:	e6 56       	subi	r30, 0x66	; 102
    423c:	fe 4f       	sbci	r31, 0xFE	; 254
    423e:	80 81       	ld	r24, Z
    4240:	28 2f       	mov	r18, r24
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	38 87       	std	Y+8, r19	; 0x08
    4246:	2f 83       	std	Y+7, r18	; 0x07
    4248:	8f 81       	ldd	r24, Y+7	; 0x07
    424a:	98 85       	ldd	r25, Y+8	; 0x08
    424c:	8b 33       	cpi	r24, 0x3B	; 59
    424e:	91 05       	cpc	r25, r1
    4250:	31 f0       	breq	.+12     	; 0x425e <EXTI_enuInit+0x232>
    4252:	2f 81       	ldd	r18, Y+7	; 0x07
    4254:	38 85       	ldd	r19, Y+8	; 0x08
    4256:	2c 33       	cpi	r18, 0x3C	; 60
    4258:	31 05       	cpc	r19, r1
    425a:	49 f0       	breq	.+18     	; 0x426e <EXTI_enuInit+0x242>
    425c:	10 c0       	rjmp	.+32     	; 0x427e <EXTI_enuInit+0x252>
			{																		/************************************/
				case	INTERRUPT	:	SET_BIT( GICR ,	PIE1_BIT );					/*			ENABLE INTERRUPT		*/
    425e:	ab e5       	ldi	r26, 0x5B	; 91
    4260:	b0 e0       	ldi	r27, 0x00	; 0
    4262:	eb e5       	ldi	r30, 0x5B	; 91
    4264:	f0 e0       	ldi	r31, 0x00	; 0
    4266:	80 81       	ld	r24, Z
    4268:	80 68       	ori	r24, 0x80	; 128
    426a:	8c 93       	st	X, r24
    426c:	7d c0       	rjmp	.+250    	; 0x4368 <EXTI_enuInit+0x33c>
										break;										/*									*/
				case	POLLING		:	CLR_BIT( GICR ,	PIE1_BIT );					/*			DISABLE INTERRUPT		*/
    426e:	ab e5       	ldi	r26, 0x5B	; 91
    4270:	b0 e0       	ldi	r27, 0x00	; 0
    4272:	eb e5       	ldi	r30, 0x5B	; 91
    4274:	f0 e0       	ldi	r31, 0x00	; 0
    4276:	80 81       	ld	r24, Z
    4278:	8f 77       	andi	r24, 0x7F	; 127
    427a:	8c 93       	st	X, r24
    427c:	75 c0       	rjmp	.+234    	; 0x4368 <EXTI_enuInit+0x33c>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    427e:	82 e0       	ldi	r24, 0x02	; 2
    4280:	8a 83       	std	Y+2, r24	; 0x02
    4282:	72 c0       	rjmp	.+228    	; 0x4368 <EXTI_enuInit+0x33c>
			}
		}
		else if( EXTI_AstrEXTI_Config[Local_u8Iter].IntNum == INT2 )				/********************************************************************/
    4284:	89 81       	ldd	r24, Y+1	; 0x01
    4286:	28 2f       	mov	r18, r24
    4288:	30 e0       	ldi	r19, 0x00	; 0
    428a:	c9 01       	movw	r24, r18
    428c:	88 0f       	add	r24, r24
    428e:	99 1f       	adc	r25, r25
    4290:	82 0f       	add	r24, r18
    4292:	93 1f       	adc	r25, r19
    4294:	fc 01       	movw	r30, r24
    4296:	e8 56       	subi	r30, 0x68	; 104
    4298:	fe 4f       	sbci	r31, 0xFE	; 254
    429a:	80 81       	ld	r24, Z
    429c:	8f 33       	cpi	r24, 0x3F	; 63
    429e:	09 f0       	breq	.+2      	; 0x42a2 <EXTI_enuInit+0x276>
    42a0:	61 c0       	rjmp	.+194    	; 0x4364 <EXTI_enuInit+0x338>
		{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].SenseLvl)						/********************************************************************/
    42a2:	89 81       	ldd	r24, Y+1	; 0x01
    42a4:	28 2f       	mov	r18, r24
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	c9 01       	movw	r24, r18
    42aa:	88 0f       	add	r24, r24
    42ac:	99 1f       	adc	r25, r25
    42ae:	82 0f       	add	r24, r18
    42b0:	93 1f       	adc	r25, r19
    42b2:	fc 01       	movw	r30, r24
    42b4:	e7 56       	subi	r30, 0x67	; 103
    42b6:	fe 4f       	sbci	r31, 0xFE	; 254
    42b8:	80 81       	ld	r24, Z
    42ba:	28 2f       	mov	r18, r24
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	3e 83       	std	Y+6, r19	; 0x06
    42c0:	2d 83       	std	Y+5, r18	; 0x05
    42c2:	8d 81       	ldd	r24, Y+5	; 0x05
    42c4:	9e 81       	ldd	r25, Y+6	; 0x06
    42c6:	89 33       	cpi	r24, 0x39	; 57
    42c8:	91 05       	cpc	r25, r1
    42ca:	31 f0       	breq	.+12     	; 0x42d8 <EXTI_enuInit+0x2ac>
    42cc:	2d 81       	ldd	r18, Y+5	; 0x05
    42ce:	3e 81       	ldd	r19, Y+6	; 0x06
    42d0:	2a 33       	cpi	r18, 0x3A	; 58
    42d2:	31 05       	cpc	r19, r1
    42d4:	49 f0       	breq	.+18     	; 0x42e8 <EXTI_enuInit+0x2bc>
    42d6:	10 c0       	rjmp	.+32     	; 0x42f8 <EXTI_enuInit+0x2cc>
			{																		/*																	*/
				case	FALLING_EDGE:	CLR_BIT( MCUCSR , ISC2_BIT );				/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    42d8:	a4 e5       	ldi	r26, 0x54	; 84
    42da:	b0 e0       	ldi	r27, 0x00	; 0
    42dc:	e4 e5       	ldi	r30, 0x54	; 84
    42de:	f0 e0       	ldi	r31, 0x00	; 0
    42e0:	80 81       	ld	r24, Z
    42e2:	8f 7b       	andi	r24, 0xBF	; 191
    42e4:	8c 93       	st	X, r24
    42e6:	0a c0       	rjmp	.+20     	; 0x42fc <EXTI_enuInit+0x2d0>
										break;										/*																	*/
				case	RISING_EDGE	:	SET_BIT( MCUCSR , ISC2_BIT );				/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    42e8:	a4 e5       	ldi	r26, 0x54	; 84
    42ea:	b0 e0       	ldi	r27, 0x00	; 0
    42ec:	e4 e5       	ldi	r30, 0x54	; 84
    42ee:	f0 e0       	ldi	r31, 0x00	; 0
    42f0:	80 81       	ld	r24, Z
    42f2:	80 64       	ori	r24, 0x40	; 64
    42f4:	8c 93       	st	X, r24
    42f6:	02 c0       	rjmp	.+4      	; 0x42fc <EXTI_enuInit+0x2d0>
										break;										/********************************************************************/
				default				: Local_enuErrorState = ES_OUT_RANGE;
    42f8:	82 e0       	ldi	r24, 0x02	; 2
    42fa:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;						/************************************/
    42fc:	8a 81       	ldd	r24, Y+2	; 0x02
    42fe:	82 30       	cpi	r24, 0x02	; 2
    4300:	e1 f1       	breq	.+120    	; 0x437a <EXTI_enuInit+0x34e>
			switch(EXTI_AstrEXTI_Config[Local_u8Iter].IntMode)						/*		PIE0 Sets INT2	mode		*/
    4302:	89 81       	ldd	r24, Y+1	; 0x01
    4304:	28 2f       	mov	r18, r24
    4306:	30 e0       	ldi	r19, 0x00	; 0
    4308:	c9 01       	movw	r24, r18
    430a:	88 0f       	add	r24, r24
    430c:	99 1f       	adc	r25, r25
    430e:	82 0f       	add	r24, r18
    4310:	93 1f       	adc	r25, r19
    4312:	fc 01       	movw	r30, r24
    4314:	e6 56       	subi	r30, 0x66	; 102
    4316:	fe 4f       	sbci	r31, 0xFE	; 254
    4318:	80 81       	ld	r24, Z
    431a:	28 2f       	mov	r18, r24
    431c:	30 e0       	ldi	r19, 0x00	; 0
    431e:	3c 83       	std	Y+4, r19	; 0x04
    4320:	2b 83       	std	Y+3, r18	; 0x03
    4322:	8b 81       	ldd	r24, Y+3	; 0x03
    4324:	9c 81       	ldd	r25, Y+4	; 0x04
    4326:	8b 33       	cpi	r24, 0x3B	; 59
    4328:	91 05       	cpc	r25, r1
    432a:	31 f0       	breq	.+12     	; 0x4338 <EXTI_enuInit+0x30c>
    432c:	2b 81       	ldd	r18, Y+3	; 0x03
    432e:	3c 81       	ldd	r19, Y+4	; 0x04
    4330:	2c 33       	cpi	r18, 0x3C	; 60
    4332:	31 05       	cpc	r19, r1
    4334:	49 f0       	breq	.+18     	; 0x4348 <EXTI_enuInit+0x31c>
    4336:	10 c0       	rjmp	.+32     	; 0x4358 <EXTI_enuInit+0x32c>
			{																		/************************************/
				case	INTERRUPT	:	SET_BIT( GICR , PIE2_BIT );					/*			ENABLE INTERRUPT		*/
    4338:	ab e5       	ldi	r26, 0x5B	; 91
    433a:	b0 e0       	ldi	r27, 0x00	; 0
    433c:	eb e5       	ldi	r30, 0x5B	; 91
    433e:	f0 e0       	ldi	r31, 0x00	; 0
    4340:	80 81       	ld	r24, Z
    4342:	80 62       	ori	r24, 0x20	; 32
    4344:	8c 93       	st	X, r24
    4346:	0a c0       	rjmp	.+20     	; 0x435c <EXTI_enuInit+0x330>
										break;										/*									*/
				case	POLLING		:	CLR_BIT( GICR , PIE2_BIT);					/*			DISABLE INTERRUPT		*/
    4348:	ab e5       	ldi	r26, 0x5B	; 91
    434a:	b0 e0       	ldi	r27, 0x00	; 0
    434c:	eb e5       	ldi	r30, 0x5B	; 91
    434e:	f0 e0       	ldi	r31, 0x00	; 0
    4350:	80 81       	ld	r24, Z
    4352:	8f 7d       	andi	r24, 0xDF	; 223
    4354:	8c 93       	st	X, r24
    4356:	02 c0       	rjmp	.+4      	; 0x435c <EXTI_enuInit+0x330>
										break;										/************************************/
				default				:	Local_enuErrorState = ES_OUT_RANGE;
    4358:	82 e0       	ldi	r24, 0x02	; 2
    435a:	8a 83       	std	Y+2, r24	; 0x02
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
    435c:	8a 81       	ldd	r24, Y+2	; 0x02
    435e:	82 30       	cpi	r24, 0x02	; 2
    4360:	61 f0       	breq	.+24     	; 0x437a <EXTI_enuInit+0x34e>
    4362:	02 c0       	rjmp	.+4      	; 0x4368 <EXTI_enuInit+0x33c>
		}
		else Local_enuErrorState = ES_OUT_RANGE;
    4364:	82 e0       	ldi	r24, 0x02	; 2
    4366:	8a 83       	std	Y+2, r24	; 0x02

ES_t EXTI_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < EXTI_u8EXTI_Num ; Local_u8Iter++)
    4368:	89 81       	ldd	r24, Y+1	; 0x01
    436a:	8f 5f       	subi	r24, 0xFF	; 255
    436c:	89 83       	std	Y+1, r24	; 0x01
    436e:	90 91 97 01 	lds	r25, 0x0197
    4372:	89 81       	ldd	r24, Y+1	; 0x01
    4374:	89 17       	cp	r24, r25
    4376:	08 f4       	brcc	.+2      	; 0x437a <EXTI_enuInit+0x34e>
    4378:	67 ce       	rjmp	.-818    	; 0x4048 <EXTI_enuInit+0x1c>
			}
			if( Local_enuErrorState == ES_OUT_RANGE)	break;
		}
		else Local_enuErrorState = ES_OUT_RANGE;
	}
	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    437a:	8a 81       	ldd	r24, Y+2	; 0x02
    437c:	82 30       	cpi	r24, 0x02	; 2
    437e:	09 f0       	breq	.+2      	; 0x4382 <EXTI_enuInit+0x356>
    4380:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    4382:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4384:	2e 96       	adiw	r28, 0x0e	; 14
    4386:	0f b6       	in	r0, 0x3f	; 63
    4388:	f8 94       	cli
    438a:	de bf       	out	0x3e, r29	; 62
    438c:	0f be       	out	0x3f, r0	; 63
    438e:	cd bf       	out	0x3d, r28	; 61
    4390:	cf 91       	pop	r28
    4392:	df 91       	pop	r29
    4394:	08 95       	ret

00004396 <EXTI_enuEnableInterrupt>:

ES_t EXTI_enuEnableInterrupt( u8 Copy_u8IntNum )
{
    4396:	df 93       	push	r29
    4398:	cf 93       	push	r28
    439a:	00 d0       	rcall	.+0      	; 0x439c <EXTI_enuEnableInterrupt+0x6>
    439c:	cd b7       	in	r28, 0x3d	; 61
    439e:	de b7       	in	r29, 0x3e	; 62
    43a0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    43a6:	8a 81       	ldd	r24, Y+2	; 0x02
    43a8:	8d 33       	cpi	r24, 0x3D	; 61
    43aa:	41 f4       	brne	.+16     	; 0x43bc <EXTI_enuEnableInterrupt+0x26>
	{																		/********************************/
		SET_BIT( GICR , PIE0_BIT );											/*			ENABLE INT0			*/
    43ac:	ab e5       	ldi	r26, 0x5B	; 91
    43ae:	b0 e0       	ldi	r27, 0x00	; 0
    43b0:	eb e5       	ldi	r30, 0x5B	; 91
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	80 81       	ld	r24, Z
    43b6:	80 64       	ori	r24, 0x40	; 64
    43b8:	8c 93       	st	X, r24
    43ba:	18 c0       	rjmp	.+48     	; 0x43ec <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    43bc:	8a 81       	ldd	r24, Y+2	; 0x02
    43be:	8e 33       	cpi	r24, 0x3E	; 62
    43c0:	41 f4       	brne	.+16     	; 0x43d2 <EXTI_enuEnableInterrupt+0x3c>
	{																		/********************************/
		SET_BIT( GICR , PIE1_BIT );											/*			ENABLE INT1			*/
    43c2:	ab e5       	ldi	r26, 0x5B	; 91
    43c4:	b0 e0       	ldi	r27, 0x00	; 0
    43c6:	eb e5       	ldi	r30, 0x5B	; 91
    43c8:	f0 e0       	ldi	r31, 0x00	; 0
    43ca:	80 81       	ld	r24, Z
    43cc:	80 68       	ori	r24, 0x80	; 128
    43ce:	8c 93       	st	X, r24
    43d0:	0d c0       	rjmp	.+26     	; 0x43ec <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    43d2:	8a 81       	ldd	r24, Y+2	; 0x02
    43d4:	8f 33       	cpi	r24, 0x3F	; 63
    43d6:	41 f4       	brne	.+16     	; 0x43e8 <EXTI_enuEnableInterrupt+0x52>
	{																		/********************************/
		SET_BIT( GICR , PIE2_BIT );											/*			ENABLE INT2			*/
    43d8:	ab e5       	ldi	r26, 0x5B	; 91
    43da:	b0 e0       	ldi	r27, 0x00	; 0
    43dc:	eb e5       	ldi	r30, 0x5B	; 91
    43de:	f0 e0       	ldi	r31, 0x00	; 0
    43e0:	80 81       	ld	r24, Z
    43e2:	80 62       	ori	r24, 0x20	; 32
    43e4:	8c 93       	st	X, r24
    43e6:	02 c0       	rjmp	.+4      	; 0x43ec <EXTI_enuEnableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    43e8:	82 e0       	ldi	r24, 0x02	; 2
    43ea:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    43ec:	89 81       	ldd	r24, Y+1	; 0x01
    43ee:	82 30       	cpi	r24, 0x02	; 2
    43f0:	09 f0       	breq	.+2      	; 0x43f4 <EXTI_enuEnableInterrupt+0x5e>
    43f2:	19 82       	std	Y+1, r1	; 0x01


	return Local_enuErrorState ;
    43f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    43f6:	0f 90       	pop	r0
    43f8:	0f 90       	pop	r0
    43fa:	cf 91       	pop	r28
    43fc:	df 91       	pop	r29
    43fe:	08 95       	ret

00004400 <EXTI_enuDisableInterrupt>:

ES_t EXTI_enuDisableInterrupt( u8 Copy_u8IntNum )
{
    4400:	df 93       	push	r29
    4402:	cf 93       	push	r28
    4404:	00 d0       	rcall	.+0      	; 0x4406 <EXTI_enuDisableInterrupt+0x6>
    4406:	cd b7       	in	r28, 0x3d	; 61
    4408:	de b7       	in	r29, 0x3e	; 62
    440a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    440c:	81 e0       	ldi	r24, 0x01	; 1
    440e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8IntNum == INT0 )
    4410:	8a 81       	ldd	r24, Y+2	; 0x02
    4412:	8d 33       	cpi	r24, 0x3D	; 61
    4414:	41 f4       	brne	.+16     	; 0x4426 <EXTI_enuDisableInterrupt+0x26>
	{																		/********************************/
		CLR_BIT( GICR , PIE0_BIT );											/*			DISABLE INT0		*/
    4416:	ab e5       	ldi	r26, 0x5B	; 91
    4418:	b0 e0       	ldi	r27, 0x00	; 0
    441a:	eb e5       	ldi	r30, 0x5B	; 91
    441c:	f0 e0       	ldi	r31, 0x00	; 0
    441e:	80 81       	ld	r24, Z
    4420:	8f 7b       	andi	r24, 0xBF	; 191
    4422:	8c 93       	st	X, r24
    4424:	18 c0       	rjmp	.+48     	; 0x4456 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT1 )
    4426:	8a 81       	ldd	r24, Y+2	; 0x02
    4428:	8e 33       	cpi	r24, 0x3E	; 62
    442a:	41 f4       	brne	.+16     	; 0x443c <EXTI_enuDisableInterrupt+0x3c>
	{																		/********************************/
		CLR_BIT( GICR , PIE1_BIT );											/*			DISABLE INT1		*/
    442c:	ab e5       	ldi	r26, 0x5B	; 91
    442e:	b0 e0       	ldi	r27, 0x00	; 0
    4430:	eb e5       	ldi	r30, 0x5B	; 91
    4432:	f0 e0       	ldi	r31, 0x00	; 0
    4434:	80 81       	ld	r24, Z
    4436:	8f 77       	andi	r24, 0x7F	; 127
    4438:	8c 93       	st	X, r24
    443a:	0d c0       	rjmp	.+26     	; 0x4456 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else if(Copy_u8IntNum == INT2 )
    443c:	8a 81       	ldd	r24, Y+2	; 0x02
    443e:	8f 33       	cpi	r24, 0x3F	; 63
    4440:	41 f4       	brne	.+16     	; 0x4452 <EXTI_enuDisableInterrupt+0x52>
	{																		/********************************/
		CLR_BIT( GICR , PIE2_BIT );											/*			DISABLE INT2		*/
    4442:	ab e5       	ldi	r26, 0x5B	; 91
    4444:	b0 e0       	ldi	r27, 0x00	; 0
    4446:	eb e5       	ldi	r30, 0x5B	; 91
    4448:	f0 e0       	ldi	r31, 0x00	; 0
    444a:	80 81       	ld	r24, Z
    444c:	8f 7d       	andi	r24, 0xDF	; 223
    444e:	8c 93       	st	X, r24
    4450:	02 c0       	rjmp	.+4      	; 0x4456 <EXTI_enuDisableInterrupt+0x56>
	}																		/********************************/
	else Local_enuErrorState = ES_OUT_RANGE;
    4452:	82 e0       	ldi	r24, 0x02	; 2
    4454:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    4456:	89 81       	ldd	r24, Y+1	; 0x01
    4458:	82 30       	cpi	r24, 0x02	; 2
    445a:	09 f0       	breq	.+2      	; 0x445e <EXTI_enuDisableInterrupt+0x5e>
    445c:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    445e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4460:	0f 90       	pop	r0
    4462:	0f 90       	pop	r0
    4464:	cf 91       	pop	r28
    4466:	df 91       	pop	r29
    4468:	08 95       	ret

0000446a <EXTI_enuSetSenseLevel>:

ES_t EXTI_enuSetSenseLevel( u8 Copy_u8IntNum , u8 Copy_u8SenseLevel )
{
    446a:	df 93       	push	r29
    446c:	cf 93       	push	r28
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
    4472:	29 97       	sbiw	r28, 0x09	; 9
    4474:	0f b6       	in	r0, 0x3f	; 63
    4476:	f8 94       	cli
    4478:	de bf       	out	0x3e, r29	; 62
    447a:	0f be       	out	0x3f, r0	; 63
    447c:	cd bf       	out	0x3d, r28	; 61
    447e:	8a 83       	std	Y+2, r24	; 0x02
    4480:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	89 83       	std	Y+1, r24	; 0x01


	if( Copy_u8IntNum == INT0 )													/********************************************************************/
    4486:	8a 81       	ldd	r24, Y+2	; 0x02
    4488:	8d 33       	cpi	r24, 0x3D	; 61
    448a:	09 f0       	breq	.+2      	; 0x448e <EXTI_enuSetSenseLevel+0x24>
    448c:	43 c0       	rjmp	.+134    	; 0x4514 <EXTI_enuSetSenseLevel+0xaa>
	{																			/*	The Two Bits [ISC01|ISC00] combinations select INT0 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	_TWO_BITS_MASK_	<<	ISC00_BIT	);							/*		Masking the two bits to change according to Choice			*/
    448e:	a5 e5       	ldi	r26, 0x55	; 85
    4490:	b0 e0       	ldi	r27, 0x00	; 0
    4492:	e5 e5       	ldi	r30, 0x55	; 85
    4494:	f0 e0       	ldi	r31, 0x00	; 0
    4496:	80 81       	ld	r24, Z
    4498:	8c 7f       	andi	r24, 0xFC	; 252
    449a:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    449c:	8b 81       	ldd	r24, Y+3	; 0x03
    449e:	28 2f       	mov	r18, r24
    44a0:	30 e0       	ldi	r19, 0x00	; 0
    44a2:	39 87       	std	Y+9, r19	; 0x09
    44a4:	28 87       	std	Y+8, r18	; 0x08
    44a6:	88 85       	ldd	r24, Y+8	; 0x08
    44a8:	99 85       	ldd	r25, Y+9	; 0x09
    44aa:	88 33       	cpi	r24, 0x38	; 56
    44ac:	91 05       	cpc	r25, r1
    44ae:	b9 f0       	breq	.+46     	; 0x44de <EXTI_enuSetSenseLevel+0x74>
    44b0:	28 85       	ldd	r18, Y+8	; 0x08
    44b2:	39 85       	ldd	r19, Y+9	; 0x09
    44b4:	29 33       	cpi	r18, 0x39	; 57
    44b6:	31 05       	cpc	r19, r1
    44b8:	3c f4       	brge	.+14     	; 0x44c8 <EXTI_enuSetSenseLevel+0x5e>
    44ba:	88 85       	ldd	r24, Y+8	; 0x08
    44bc:	99 85       	ldd	r25, Y+9	; 0x09
    44be:	87 33       	cpi	r24, 0x37	; 55
    44c0:	91 05       	cpc	r25, r1
    44c2:	09 f4       	brne	.+2      	; 0x44c6 <EXTI_enuSetSenseLevel+0x5c>
    44c4:	96 c0       	rjmp	.+300    	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
    44c6:	23 c0       	rjmp	.+70     	; 0x450e <EXTI_enuSetSenseLevel+0xa4>
    44c8:	28 85       	ldd	r18, Y+8	; 0x08
    44ca:	39 85       	ldd	r19, Y+9	; 0x09
    44cc:	29 33       	cpi	r18, 0x39	; 57
    44ce:	31 05       	cpc	r19, r1
    44d0:	71 f0       	breq	.+28     	; 0x44ee <EXTI_enuSetSenseLevel+0x84>
    44d2:	88 85       	ldd	r24, Y+8	; 0x08
    44d4:	99 85       	ldd	r25, Y+9	; 0x09
    44d6:	8a 33       	cpi	r24, 0x3A	; 58
    44d8:	91 05       	cpc	r25, r1
    44da:	89 f0       	breq	.+34     	; 0x44fe <EXTI_enuSetSenseLevel+0x94>
    44dc:	18 c0       	rjmp	.+48     	; 0x450e <EXTI_enuSetSenseLevel+0xa4>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	SET_BIT( MCUCR , ISC00_BIT );				/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    44de:	a5 e5       	ldi	r26, 0x55	; 85
    44e0:	b0 e0       	ldi	r27, 0x00	; 0
    44e2:	e5 e5       	ldi	r30, 0x55	; 85
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	80 81       	ld	r24, Z
    44e8:	81 60       	ori	r24, 0x01	; 1
    44ea:	8c 93       	st	X, r24
    44ec:	82 c0       	rjmp	.+260    	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	SET_BIT( MCUCR , ISC01_BIT );				/*		Setting them to '10' for Falling Edge Sense Choice			*/
    44ee:	a5 e5       	ldi	r26, 0x55	; 85
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	e5 e5       	ldi	r30, 0x55	; 85
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	80 81       	ld	r24, Z
    44f8:	82 60       	ori	r24, 0x02	; 2
    44fa:	8c 93       	st	X, r24
    44fc:	7a c0       	rjmp	.+244    	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	SET_BIT( MCUCR , ISC00_BIT );				/*		Setting them to '11' for Rising Edge Sense Choice			*/
    44fe:	a5 e5       	ldi	r26, 0x55	; 85
    4500:	b0 e0       	ldi	r27, 0x00	; 0
    4502:	e5 e5       	ldi	r30, 0x55	; 85
    4504:	f0 e0       	ldi	r31, 0x00	; 0
    4506:	80 81       	ld	r24, Z
    4508:	81 60       	ori	r24, 0x01	; 1
    450a:	8c 93       	st	X, r24
    450c:	72 c0       	rjmp	.+228    	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    450e:	82 e0       	ldi	r24, 0x02	; 2
    4510:	89 83       	std	Y+1, r24	; 0x01
    4512:	6f c0       	rjmp	.+222    	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
		}
	}

	else if( Copy_u8IntNum == INT1 )											/********************************************************************/
    4514:	8a 81       	ldd	r24, Y+2	; 0x02
    4516:	8e 33       	cpi	r24, 0x3E	; 62
    4518:	09 f0       	breq	.+2      	; 0x451c <EXTI_enuSetSenseLevel+0xb2>
    451a:	43 c0       	rjmp	.+134    	; 0x45a2 <EXTI_enuSetSenseLevel+0x138>
	{																			/*	The Two Bits [ISC11|ISC10] combinations select INT1 Sense Choice*/
																				/********************************************************************/
		MCUCR &= ~(	_TWO_BITS_MASK_	<<	ISC10_BIT	);							/*		Masking the two bits to change according to Choice			*/
    451c:	a5 e5       	ldi	r26, 0x55	; 85
    451e:	b0 e0       	ldi	r27, 0x00	; 0
    4520:	e5 e5       	ldi	r30, 0x55	; 85
    4522:	f0 e0       	ldi	r31, 0x00	; 0
    4524:	80 81       	ld	r24, Z
    4526:	83 7f       	andi	r24, 0xF3	; 243
    4528:	8c 93       	st	X, r24
		switch( Copy_u8SenseLevel )												/*																	*/
    452a:	8b 81       	ldd	r24, Y+3	; 0x03
    452c:	28 2f       	mov	r18, r24
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	3f 83       	std	Y+7, r19	; 0x07
    4532:	2e 83       	std	Y+6, r18	; 0x06
    4534:	8e 81       	ldd	r24, Y+6	; 0x06
    4536:	9f 81       	ldd	r25, Y+7	; 0x07
    4538:	88 33       	cpi	r24, 0x38	; 56
    453a:	91 05       	cpc	r25, r1
    453c:	b9 f0       	breq	.+46     	; 0x456c <EXTI_enuSetSenseLevel+0x102>
    453e:	2e 81       	ldd	r18, Y+6	; 0x06
    4540:	3f 81       	ldd	r19, Y+7	; 0x07
    4542:	29 33       	cpi	r18, 0x39	; 57
    4544:	31 05       	cpc	r19, r1
    4546:	3c f4       	brge	.+14     	; 0x4556 <EXTI_enuSetSenseLevel+0xec>
    4548:	8e 81       	ldd	r24, Y+6	; 0x06
    454a:	9f 81       	ldd	r25, Y+7	; 0x07
    454c:	87 33       	cpi	r24, 0x37	; 55
    454e:	91 05       	cpc	r25, r1
    4550:	09 f4       	brne	.+2      	; 0x4554 <EXTI_enuSetSenseLevel+0xea>
    4552:	4f c0       	rjmp	.+158    	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
    4554:	23 c0       	rjmp	.+70     	; 0x459c <EXTI_enuSetSenseLevel+0x132>
    4556:	2e 81       	ldd	r18, Y+6	; 0x06
    4558:	3f 81       	ldd	r19, Y+7	; 0x07
    455a:	29 33       	cpi	r18, 0x39	; 57
    455c:	31 05       	cpc	r19, r1
    455e:	71 f0       	breq	.+28     	; 0x457c <EXTI_enuSetSenseLevel+0x112>
    4560:	8e 81       	ldd	r24, Y+6	; 0x06
    4562:	9f 81       	ldd	r25, Y+7	; 0x07
    4564:	8a 33       	cpi	r24, 0x3A	; 58
    4566:	91 05       	cpc	r25, r1
    4568:	89 f0       	breq	.+34     	; 0x458c <EXTI_enuSetSenseLevel+0x122>
    456a:	18 c0       	rjmp	.+48     	; 0x459c <EXTI_enuSetSenseLevel+0x132>
		{																		/*																	*/
			case	LOW_LEVEL	:											  	/*		Keeping them as '00' for Low Level Sense Choice				*/
									break;										/*																	*/
			case	ANY_LGC_LVL	:	SET_BIT( MCUCR , ISC10_BIT );				/*		Setting them to '01' for Any Logical Level Sense Choice		*/
    456c:	a5 e5       	ldi	r26, 0x55	; 85
    456e:	b0 e0       	ldi	r27, 0x00	; 0
    4570:	e5 e5       	ldi	r30, 0x55	; 85
    4572:	f0 e0       	ldi	r31, 0x00	; 0
    4574:	80 81       	ld	r24, Z
    4576:	84 60       	ori	r24, 0x04	; 4
    4578:	8c 93       	st	X, r24
    457a:	3b c0       	rjmp	.+118    	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	FALLING_EDGE:	SET_BIT( MCUCR , ISC11_BIT );				/*		Setting them to '10' for Falling Edge Sense Choice			*/
    457c:	a5 e5       	ldi	r26, 0x55	; 85
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	e5 e5       	ldi	r30, 0x55	; 85
    4582:	f0 e0       	ldi	r31, 0x00	; 0
    4584:	80 81       	ld	r24, Z
    4586:	88 60       	ori	r24, 0x08	; 8
    4588:	8c 93       	st	X, r24
    458a:	33 c0       	rjmp	.+102    	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	MCUCR |= ( _TWO_BITS_MASK_	<<	ISC10_BIT );/*		Setting them to '11' for Rising Edge Sense Choice			*/
    458c:	a5 e5       	ldi	r26, 0x55	; 85
    458e:	b0 e0       	ldi	r27, 0x00	; 0
    4590:	e5 e5       	ldi	r30, 0x55	; 85
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	80 81       	ld	r24, Z
    4596:	8c 60       	ori	r24, 0x0C	; 12
    4598:	8c 93       	st	X, r24
    459a:	2b c0       	rjmp	.+86     	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    459c:	82 e0       	ldi	r24, 0x02	; 2
    459e:	89 83       	std	Y+1, r24	; 0x01
    45a0:	28 c0       	rjmp	.+80     	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else if( Copy_u8IntNum == INT2 )											/********************************************************************/
    45a2:	8a 81       	ldd	r24, Y+2	; 0x02
    45a4:	8f 33       	cpi	r24, 0x3F	; 63
    45a6:	19 f5       	brne	.+70     	; 0x45ee <EXTI_enuSetSenseLevel+0x184>
	{																			/*	 		The ISC2 Bit Value select INT2 Sense Choice				*/
		switch( Copy_u8SenseLevel )												/********************************************************************/
    45a8:	8b 81       	ldd	r24, Y+3	; 0x03
    45aa:	28 2f       	mov	r18, r24
    45ac:	30 e0       	ldi	r19, 0x00	; 0
    45ae:	3d 83       	std	Y+5, r19	; 0x05
    45b0:	2c 83       	std	Y+4, r18	; 0x04
    45b2:	8c 81       	ldd	r24, Y+4	; 0x04
    45b4:	9d 81       	ldd	r25, Y+5	; 0x05
    45b6:	89 33       	cpi	r24, 0x39	; 57
    45b8:	91 05       	cpc	r25, r1
    45ba:	31 f0       	breq	.+12     	; 0x45c8 <EXTI_enuSetSenseLevel+0x15e>
    45bc:	2c 81       	ldd	r18, Y+4	; 0x04
    45be:	3d 81       	ldd	r19, Y+5	; 0x05
    45c0:	2a 33       	cpi	r18, 0x3A	; 58
    45c2:	31 05       	cpc	r19, r1
    45c4:	49 f0       	breq	.+18     	; 0x45d8 <EXTI_enuSetSenseLevel+0x16e>
    45c6:	10 c0       	rjmp	.+32     	; 0x45e8 <EXTI_enuSetSenseLevel+0x17e>
		{																		/*																	*/
			case	FALLING_EDGE:	CLR_BIT( MCUCR , ISC2_BIT );				/*			Setting ISC2 to '0' for Falling Edge Sense Choice 		*/
    45c8:	a5 e5       	ldi	r26, 0x55	; 85
    45ca:	b0 e0       	ldi	r27, 0x00	; 0
    45cc:	e5 e5       	ldi	r30, 0x55	; 85
    45ce:	f0 e0       	ldi	r31, 0x00	; 0
    45d0:	80 81       	ld	r24, Z
    45d2:	8f 7b       	andi	r24, 0xBF	; 191
    45d4:	8c 93       	st	X, r24
    45d6:	0d c0       	rjmp	.+26     	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
									break;										/*																	*/
			case	RISING_EDGE	:	SET_BIT( MCUCR , ISC2_BIT );				/*			Setting ISC2 to '1' for Rising Edge Sense Choice 		*/
    45d8:	a5 e5       	ldi	r26, 0x55	; 85
    45da:	b0 e0       	ldi	r27, 0x00	; 0
    45dc:	e5 e5       	ldi	r30, 0x55	; 85
    45de:	f0 e0       	ldi	r31, 0x00	; 0
    45e0:	80 81       	ld	r24, Z
    45e2:	80 64       	ori	r24, 0x40	; 64
    45e4:	8c 93       	st	X, r24
    45e6:	05 c0       	rjmp	.+10     	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
									break;										/********************************************************************/
			default				:	Local_enuErrorState = ES_OUT_RANGE;
    45e8:	82 e0       	ldi	r24, 0x02	; 2
    45ea:	89 83       	std	Y+1, r24	; 0x01
    45ec:	02 c0       	rjmp	.+4      	; 0x45f2 <EXTI_enuSetSenseLevel+0x188>
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    45ee:	82 e0       	ldi	r24, 0x02	; 2
    45f0:	89 83       	std	Y+1, r24	; 0x01

	if( Local_enuErrorState != ES_OUT_RANGE) Local_enuErrorState = ES_OK;
    45f2:	89 81       	ldd	r24, Y+1	; 0x01
    45f4:	82 30       	cpi	r24, 0x02	; 2
    45f6:	09 f0       	breq	.+2      	; 0x45fa <EXTI_enuSetSenseLevel+0x190>
    45f8:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    45fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    45fc:	29 96       	adiw	r28, 0x09	; 9
    45fe:	0f b6       	in	r0, 0x3f	; 63
    4600:	f8 94       	cli
    4602:	de bf       	out	0x3e, r29	; 62
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	cd bf       	out	0x3d, r28	; 61
    4608:	cf 91       	pop	r28
    460a:	df 91       	pop	r29
    460c:	08 95       	ret

0000460e <__vector_1>:
void __vector_2(void)__attribute__((signal));	//ISR	INT1
void __vector_3(void)__attribute__((signal));	//ISR	INT2


void __vector_1(void)
{
    460e:	1f 92       	push	r1
    4610:	0f 92       	push	r0
    4612:	0f b6       	in	r0, 0x3f	; 63
    4614:	0f 92       	push	r0
    4616:	11 24       	eor	r1, r1
    4618:	2f 93       	push	r18
    461a:	3f 93       	push	r19
    461c:	4f 93       	push	r20
    461e:	5f 93       	push	r21
    4620:	6f 93       	push	r22
    4622:	7f 93       	push	r23
    4624:	8f 93       	push	r24
    4626:	9f 93       	push	r25
    4628:	af 93       	push	r26
    462a:	bf 93       	push	r27
    462c:	ef 93       	push	r30
    462e:	ff 93       	push	r31
    4630:	df 93       	push	r29
    4632:	cf 93       	push	r28
    4634:	cd b7       	in	r28, 0x3d	; 61
    4636:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[0] != NULL)
    4638:	80 91 35 02 	lds	r24, 0x0235
    463c:	90 91 36 02 	lds	r25, 0x0236
    4640:	00 97       	sbiw	r24, 0x00	; 0
    4642:	29 f0       	breq	.+10     	; 0x464e <__vector_1+0x40>
	{
		EXTI_ApFunction_AppFun[0]();
    4644:	e0 91 35 02 	lds	r30, 0x0235
    4648:	f0 91 36 02 	lds	r31, 0x0236
    464c:	09 95       	icall
	}
}
    464e:	cf 91       	pop	r28
    4650:	df 91       	pop	r29
    4652:	ff 91       	pop	r31
    4654:	ef 91       	pop	r30
    4656:	bf 91       	pop	r27
    4658:	af 91       	pop	r26
    465a:	9f 91       	pop	r25
    465c:	8f 91       	pop	r24
    465e:	7f 91       	pop	r23
    4660:	6f 91       	pop	r22
    4662:	5f 91       	pop	r21
    4664:	4f 91       	pop	r20
    4666:	3f 91       	pop	r19
    4668:	2f 91       	pop	r18
    466a:	0f 90       	pop	r0
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	0f 90       	pop	r0
    4670:	1f 90       	pop	r1
    4672:	18 95       	reti

00004674 <__vector_2>:
void __vector_2(void)
{
    4674:	1f 92       	push	r1
    4676:	0f 92       	push	r0
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	0f 92       	push	r0
    467c:	11 24       	eor	r1, r1
    467e:	2f 93       	push	r18
    4680:	3f 93       	push	r19
    4682:	4f 93       	push	r20
    4684:	5f 93       	push	r21
    4686:	6f 93       	push	r22
    4688:	7f 93       	push	r23
    468a:	8f 93       	push	r24
    468c:	9f 93       	push	r25
    468e:	af 93       	push	r26
    4690:	bf 93       	push	r27
    4692:	ef 93       	push	r30
    4694:	ff 93       	push	r31
    4696:	df 93       	push	r29
    4698:	cf 93       	push	r28
    469a:	cd b7       	in	r28, 0x3d	; 61
    469c:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[1] != NULL)
    469e:	80 91 37 02 	lds	r24, 0x0237
    46a2:	90 91 38 02 	lds	r25, 0x0238
    46a6:	00 97       	sbiw	r24, 0x00	; 0
    46a8:	29 f0       	breq	.+10     	; 0x46b4 <__vector_2+0x40>
	{
		EXTI_ApFunction_AppFun[1]();
    46aa:	e0 91 37 02 	lds	r30, 0x0237
    46ae:	f0 91 38 02 	lds	r31, 0x0238
    46b2:	09 95       	icall
	}
}
    46b4:	cf 91       	pop	r28
    46b6:	df 91       	pop	r29
    46b8:	ff 91       	pop	r31
    46ba:	ef 91       	pop	r30
    46bc:	bf 91       	pop	r27
    46be:	af 91       	pop	r26
    46c0:	9f 91       	pop	r25
    46c2:	8f 91       	pop	r24
    46c4:	7f 91       	pop	r23
    46c6:	6f 91       	pop	r22
    46c8:	5f 91       	pop	r21
    46ca:	4f 91       	pop	r20
    46cc:	3f 91       	pop	r19
    46ce:	2f 91       	pop	r18
    46d0:	0f 90       	pop	r0
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	0f 90       	pop	r0
    46d6:	1f 90       	pop	r1
    46d8:	18 95       	reti

000046da <__vector_3>:
void __vector_3(void)
{
    46da:	1f 92       	push	r1
    46dc:	0f 92       	push	r0
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	0f 92       	push	r0
    46e2:	11 24       	eor	r1, r1
    46e4:	2f 93       	push	r18
    46e6:	3f 93       	push	r19
    46e8:	4f 93       	push	r20
    46ea:	5f 93       	push	r21
    46ec:	6f 93       	push	r22
    46ee:	7f 93       	push	r23
    46f0:	8f 93       	push	r24
    46f2:	9f 93       	push	r25
    46f4:	af 93       	push	r26
    46f6:	bf 93       	push	r27
    46f8:	ef 93       	push	r30
    46fa:	ff 93       	push	r31
    46fc:	df 93       	push	r29
    46fe:	cf 93       	push	r28
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
	if ( EXTI_ApFunction_AppFun[2] != NULL)
    4704:	80 91 39 02 	lds	r24, 0x0239
    4708:	90 91 3a 02 	lds	r25, 0x023A
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	29 f0       	breq	.+10     	; 0x471a <__vector_3+0x40>
	{
		EXTI_ApFunction_AppFun[2]();
    4710:	e0 91 39 02 	lds	r30, 0x0239
    4714:	f0 91 3a 02 	lds	r31, 0x023A
    4718:	09 95       	icall
	}
}
    471a:	cf 91       	pop	r28
    471c:	df 91       	pop	r29
    471e:	ff 91       	pop	r31
    4720:	ef 91       	pop	r30
    4722:	bf 91       	pop	r27
    4724:	af 91       	pop	r26
    4726:	9f 91       	pop	r25
    4728:	8f 91       	pop	r24
    472a:	7f 91       	pop	r23
    472c:	6f 91       	pop	r22
    472e:	5f 91       	pop	r21
    4730:	4f 91       	pop	r20
    4732:	3f 91       	pop	r19
    4734:	2f 91       	pop	r18
    4736:	0f 90       	pop	r0
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	0f 90       	pop	r0
    473c:	1f 90       	pop	r1
    473e:	18 95       	reti

00004740 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack( u8 Copy_u8IntNum , void (*Copy_pAppFunction)(void) )
{
    4740:	df 93       	push	r29
    4742:	cf 93       	push	r28
    4744:	00 d0       	rcall	.+0      	; 0x4746 <EXTI_enuCallBack+0x6>
    4746:	00 d0       	rcall	.+0      	; 0x4748 <EXTI_enuCallBack+0x8>
    4748:	cd b7       	in	r28, 0x3d	; 61
    474a:	de b7       	in	r29, 0x3e	; 62
    474c:	8a 83       	std	Y+2, r24	; 0x02
    474e:	7c 83       	std	Y+4, r23	; 0x04
    4750:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pAppFunction != NULL)
    4756:	8b 81       	ldd	r24, Y+3	; 0x03
    4758:	9c 81       	ldd	r25, Y+4	; 0x04
    475a:	00 97       	sbiw	r24, 0x00	; 0
    475c:	89 f0       	breq	.+34     	; 0x4780 <EXTI_enuCallBack+0x40>
	{
		EXTI_ApFunction_AppFun[(Copy_u8IntNum -= INT0)] =  Copy_pAppFunction ;
    475e:	8a 81       	ldd	r24, Y+2	; 0x02
    4760:	8d 53       	subi	r24, 0x3D	; 61
    4762:	8a 83       	std	Y+2, r24	; 0x02
    4764:	8a 81       	ldd	r24, Y+2	; 0x02
    4766:	88 2f       	mov	r24, r24
    4768:	90 e0       	ldi	r25, 0x00	; 0
    476a:	88 0f       	add	r24, r24
    476c:	99 1f       	adc	r25, r25
    476e:	fc 01       	movw	r30, r24
    4770:	eb 5c       	subi	r30, 0xCB	; 203
    4772:	fd 4f       	sbci	r31, 0xFD	; 253
    4774:	8b 81       	ldd	r24, Y+3	; 0x03
    4776:	9c 81       	ldd	r25, Y+4	; 0x04
    4778:	91 83       	std	Z+1, r25	; 0x01
    477a:	80 83       	st	Z, r24

		Local_enuErrorState = ES_OK;
    477c:	19 82       	std	Y+1, r1	; 0x01
    477e:	02 c0       	rjmp	.+4      	; 0x4784 <EXTI_enuCallBack+0x44>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    4780:	83 e0       	ldi	r24, 0x03	; 3
    4782:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4784:	89 81       	ldd	r24, Y+1	; 0x01
}
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	0f 90       	pop	r0
    478e:	cf 91       	pop	r28
    4790:	df 91       	pop	r29
    4792:	08 95       	ret

00004794 <EEPROM_enuWriteByte>:
#include "..\..\SHARED\errorState.h"

#include "EEPROM_priv.h"

ES_t EEPROM_enuWriteByte( u16 Copy_u16Address , u8 Copy_u8Data )
{
    4794:	df 93       	push	r29
    4796:	cf 93       	push	r28
    4798:	00 d0       	rcall	.+0      	; 0x479a <EEPROM_enuWriteByte+0x6>
    479a:	00 d0       	rcall	.+0      	; 0x479c <EEPROM_enuWriteByte+0x8>
    479c:	cd b7       	in	r28, 0x3d	; 61
    479e:	de b7       	in	r29, 0x3e	; 62
    47a0:	9b 83       	std	Y+3, r25	; 0x03
    47a2:	8a 83       	std	Y+2, r24	; 0x02
    47a4:	6c 83       	std	Y+4, r22	; 0x04
	WAIT_TILL_BIT_IS_CLR( EECR , EEWE ) ;
    47a6:	ec e3       	ldi	r30, 0x3C	; 60
    47a8:	f0 e0       	ldi	r31, 0x00	; 0
    47aa:	80 81       	ld	r24, Z
    47ac:	86 95       	lsr	r24
    47ae:	88 2f       	mov	r24, r24
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	81 70       	andi	r24, 0x01	; 1
    47b4:	90 70       	andi	r25, 0x00	; 0
    47b6:	88 23       	and	r24, r24
    47b8:	b1 f7       	brne	.-20     	; 0x47a6 <EEPROM_enuWriteByte+0x12>
	WAIT_TILL_BIT_IS_CLR( SPMCR , SPMEN ) ;
    47ba:	e7 e5       	ldi	r30, 0x57	; 87
    47bc:	f0 e0       	ldi	r31, 0x00	; 0
    47be:	80 81       	ld	r24, Z
    47c0:	88 2f       	mov	r24, r24
    47c2:	90 e0       	ldi	r25, 0x00	; 0
    47c4:	81 70       	andi	r24, 0x01	; 1
    47c6:	90 70       	andi	r25, 0x00	; 0
    47c8:	88 23       	and	r24, r24
    47ca:	b9 f7       	brne	.-18     	; 0x47ba <EEPROM_enuWriteByte+0x26>

	u8 Local_u8CopySREG = SREG ;						// Keeping a copy of Status register SREG
    47cc:	ef e5       	ldi	r30, 0x5F	; 95
    47ce:	f0 e0       	ldi	r31, 0x00	; 0
    47d0:	80 81       	ld	r24, Z
    47d2:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;												// Disable Interrupts
    47d4:	f8 94       	cli

	EEARH = ( Copy_u16Address >> _BYTE_SHIFT_ );		// Writing the higher byte of address in EEARH
    47d6:	ef e3       	ldi	r30, 0x3F	; 63
    47d8:	f0 e0       	ldi	r31, 0x00	; 0
    47da:	8a 81       	ldd	r24, Y+2	; 0x02
    47dc:	9b 81       	ldd	r25, Y+3	; 0x03
    47de:	89 2f       	mov	r24, r25
    47e0:	99 27       	eor	r25, r25
    47e2:	80 83       	st	Z, r24
	EEARL = (u8)Copy_u16Address;						// Writing the Lower byte of address in EEARL
    47e4:	ee e3       	ldi	r30, 0x3E	; 62
    47e6:	f0 e0       	ldi	r31, 0x00	; 0
    47e8:	8a 81       	ldd	r24, Y+2	; 0x02
    47ea:	80 83       	st	Z, r24
	EEDR = Copy_u8Data ;								// Writing the data byte in EEDR register
    47ec:	ed e3       	ldi	r30, 0x3D	; 61
    47ee:	f0 e0       	ldi	r31, 0x00	; 0
    47f0:	8c 81       	ldd	r24, Y+4	; 0x04
    47f2:	80 83       	st	Z, r24
	ASM_SET_BIT( _SFR_EECR_ , EEMWE );					// Setting EEMWE bit in EECR register
    47f4:	e2 9a       	sbi	0x1c, 2	; 28
	ASM_SET_BIT( _SFR_EECR_ , EEWE  );					// Setting EEWE bit in EECR register
    47f6:	e1 9a       	sbi	0x1c, 1	; 28

	SREG = Local_u8CopySREG ;
    47f8:	ef e5       	ldi	r30, 0x5F	; 95
    47fa:	f0 e0       	ldi	r31, 0x00	; 0
    47fc:	89 81       	ldd	r24, Y+1	; 0x01
    47fe:	80 83       	st	Z, r24
	return ES_OK;
    4800:	80 e0       	ldi	r24, 0x00	; 0
}
    4802:	0f 90       	pop	r0
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	cf 91       	pop	r28
    480c:	df 91       	pop	r29
    480e:	08 95       	ret

00004810 <EEPROM_enuReadByte>:

ES_t EEPROM_enuReadByte( u16 Copy_u16Address , u8 *Copy_pu8Data )
{
    4810:	df 93       	push	r29
    4812:	cf 93       	push	r28
    4814:	00 d0       	rcall	.+0      	; 0x4816 <EEPROM_enuReadByte+0x6>
    4816:	00 d0       	rcall	.+0      	; 0x4818 <EEPROM_enuReadByte+0x8>
    4818:	0f 92       	push	r0
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
    481e:	9b 83       	std	Y+3, r25	; 0x03
    4820:	8a 83       	std	Y+2, r24	; 0x02
    4822:	7d 83       	std	Y+5, r23	; 0x05
    4824:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pu8Data != NULL )
    482a:	8c 81       	ldd	r24, Y+4	; 0x04
    482c:	9d 81       	ldd	r25, Y+5	; 0x05
    482e:	00 97       	sbiw	r24, 0x00	; 0
    4830:	f1 f0       	breq	.+60     	; 0x486e <EEPROM_enuReadByte+0x5e>
	{
		WAIT_TILL_BIT_IS_CLR( EECR , EEWE ) ;
    4832:	ec e3       	ldi	r30, 0x3C	; 60
    4834:	f0 e0       	ldi	r31, 0x00	; 0
    4836:	80 81       	ld	r24, Z
    4838:	86 95       	lsr	r24
    483a:	88 2f       	mov	r24, r24
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	81 70       	andi	r24, 0x01	; 1
    4840:	90 70       	andi	r25, 0x00	; 0
    4842:	88 23       	and	r24, r24
    4844:	b1 f7       	brne	.-20     	; 0x4832 <EEPROM_enuReadByte+0x22>
		EEARH = ( Copy_u16Address >> _BYTE_SHIFT_ );	// Writing the Higher byte of address in EEARH
    4846:	ef e3       	ldi	r30, 0x3F	; 63
    4848:	f0 e0       	ldi	r31, 0x00	; 0
    484a:	8a 81       	ldd	r24, Y+2	; 0x02
    484c:	9b 81       	ldd	r25, Y+3	; 0x03
    484e:	89 2f       	mov	r24, r25
    4850:	99 27       	eor	r25, r25
    4852:	80 83       	st	Z, r24
		EEARL = (u8)Copy_u16Address;					// Writing the Lower byte of address in EEARL
    4854:	ee e3       	ldi	r30, 0x3E	; 62
    4856:	f0 e0       	ldi	r31, 0x00	; 0
    4858:	8a 81       	ldd	r24, Y+2	; 0x02
    485a:	80 83       	st	Z, r24
		ASM_SET_BIT( _SFR_EECR_ , EERE );				// Setting EERE bit in EECR register
    485c:	e0 9a       	sbi	0x1c, 0	; 28
		* Copy_pu8Data = EEDR ;							// Reading the data byte from EEDR register
    485e:	ed e3       	ldi	r30, 0x3D	; 61
    4860:	f0 e0       	ldi	r31, 0x00	; 0
    4862:	80 81       	ld	r24, Z
    4864:	ec 81       	ldd	r30, Y+4	; 0x04
    4866:	fd 81       	ldd	r31, Y+5	; 0x05
    4868:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK ;
    486a:	19 82       	std	Y+1, r1	; 0x01
    486c:	02 c0       	rjmp	.+4      	; 0x4872 <EEPROM_enuReadByte+0x62>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    486e:	83 e0       	ldi	r24, 0x03	; 3
    4870:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    4872:	89 81       	ldd	r24, Y+1	; 0x01
}
    4874:	0f 90       	pop	r0
    4876:	0f 90       	pop	r0
    4878:	0f 90       	pop	r0
    487a:	0f 90       	pop	r0
    487c:	0f 90       	pop	r0
    487e:	cf 91       	pop	r28
    4880:	df 91       	pop	r29
    4882:	08 95       	ret

00004884 <DIO_enuInit>:

#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    4884:	df 93       	push	r29
    4886:	cf 93       	push	r28
    4888:	cd b7       	in	r28, 0x3d	; 61
    488a:	de b7       	in	r29, 0x3e	; 62
	return ES_OK ;
    488c:	80 e0       	ldi	r24, 0x00	; 0
}
    488e:	cf 91       	pop	r28
    4890:	df 91       	pop	r29
    4892:	08 95       	ret

00004894 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    4894:	df 93       	push	r29
    4896:	cf 93       	push	r28
    4898:	00 d0       	rcall	.+0      	; 0x489a <DIO_enuSetPinDirection+0x6>
    489a:	00 d0       	rcall	.+0      	; 0x489c <DIO_enuSetPinDirection+0x8>
    489c:	00 d0       	rcall	.+0      	; 0x489e <DIO_enuSetPinDirection+0xa>
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
    48a2:	8a 83       	std	Y+2, r24	; 0x02
    48a4:	6b 83       	std	Y+3, r22	; 0x03
    48a6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    48ac:	8a 81       	ldd	r24, Y+2	; 0x02
    48ae:	80 31       	cpi	r24, 0x10	; 16
    48b0:	08 f0       	brcs	.+2      	; 0x48b4 <DIO_enuSetPinDirection+0x20>
    48b2:	b3 c0       	rjmp	.+358    	; 0x4a1a <DIO_enuSetPinDirection+0x186>
    48b4:	8b 81       	ldd	r24, Y+3	; 0x03
    48b6:	88 30       	cpi	r24, 0x08	; 8
    48b8:	08 f0       	brcs	.+2      	; 0x48bc <DIO_enuSetPinDirection+0x28>
    48ba:	af c0       	rjmp	.+350    	; 0x4a1a <DIO_enuSetPinDirection+0x186>
    48bc:	8c 81       	ldd	r24, Y+4	; 0x04
    48be:	82 30       	cpi	r24, 0x02	; 2
    48c0:	08 f0       	brcs	.+2      	; 0x48c4 <DIO_enuSetPinDirection+0x30>
    48c2:	ab c0       	rjmp	.+342    	; 0x4a1a <DIO_enuSetPinDirection+0x186>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
    48c4:	8a 81       	ldd	r24, Y+2	; 0x02
    48c6:	28 2f       	mov	r18, r24
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	3e 83       	std	Y+6, r19	; 0x06
    48cc:	2d 83       	std	Y+5, r18	; 0x05
    48ce:	6d 81       	ldd	r22, Y+5	; 0x05
    48d0:	7e 81       	ldd	r23, Y+6	; 0x06
    48d2:	6d 30       	cpi	r22, 0x0D	; 13
    48d4:	71 05       	cpc	r23, r1
    48d6:	d1 f1       	breq	.+116    	; 0x494c <DIO_enuSetPinDirection+0xb8>
    48d8:	8d 81       	ldd	r24, Y+5	; 0x05
    48da:	9e 81       	ldd	r25, Y+6	; 0x06
    48dc:	8e 30       	cpi	r24, 0x0E	; 14
    48de:	91 05       	cpc	r25, r1
    48e0:	34 f4       	brge	.+12     	; 0x48ee <DIO_enuSetPinDirection+0x5a>
    48e2:	2d 81       	ldd	r18, Y+5	; 0x05
    48e4:	3e 81       	ldd	r19, Y+6	; 0x06
    48e6:	2c 30       	cpi	r18, 0x0C	; 12
    48e8:	31 05       	cpc	r19, r1
    48ea:	71 f0       	breq	.+28     	; 0x4908 <DIO_enuSetPinDirection+0x74>
    48ec:	94 c0       	rjmp	.+296    	; 0x4a16 <DIO_enuSetPinDirection+0x182>
    48ee:	6d 81       	ldd	r22, Y+5	; 0x05
    48f0:	7e 81       	ldd	r23, Y+6	; 0x06
    48f2:	6e 30       	cpi	r22, 0x0E	; 14
    48f4:	71 05       	cpc	r23, r1
    48f6:	09 f4       	brne	.+2      	; 0x48fa <DIO_enuSetPinDirection+0x66>
    48f8:	4b c0       	rjmp	.+150    	; 0x4990 <DIO_enuSetPinDirection+0xfc>
    48fa:	8d 81       	ldd	r24, Y+5	; 0x05
    48fc:	9e 81       	ldd	r25, Y+6	; 0x06
    48fe:	8f 30       	cpi	r24, 0x0F	; 15
    4900:	91 05       	cpc	r25, r1
    4902:	09 f4       	brne	.+2      	; 0x4906 <DIO_enuSetPinDirection+0x72>
    4904:	67 c0       	rjmp	.+206    	; 0x49d4 <DIO_enuSetPinDirection+0x140>
    4906:	87 c0       	rjmp	.+270    	; 0x4a16 <DIO_enuSetPinDirection+0x182>
		{
		case DIO_u8GROUP_A:
			ASSIGN_BIT_VALUE( DDR_A , Copy_u8PinID , Copy_u8Direction );
    4908:	aa e3       	ldi	r26, 0x3A	; 58
    490a:	b0 e0       	ldi	r27, 0x00	; 0
    490c:	ea e3       	ldi	r30, 0x3A	; 58
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	80 81       	ld	r24, Z
    4912:	48 2f       	mov	r20, r24
    4914:	8b 81       	ldd	r24, Y+3	; 0x03
    4916:	28 2f       	mov	r18, r24
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	81 e0       	ldi	r24, 0x01	; 1
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	02 c0       	rjmp	.+4      	; 0x4924 <DIO_enuSetPinDirection+0x90>
    4920:	88 0f       	add	r24, r24
    4922:	99 1f       	adc	r25, r25
    4924:	2a 95       	dec	r18
    4926:	e2 f7       	brpl	.-8      	; 0x4920 <DIO_enuSetPinDirection+0x8c>
    4928:	80 95       	com	r24
    492a:	48 23       	and	r20, r24
    492c:	8c 81       	ldd	r24, Y+4	; 0x04
    492e:	28 2f       	mov	r18, r24
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	8b 81       	ldd	r24, Y+3	; 0x03
    4934:	88 2f       	mov	r24, r24
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	b9 01       	movw	r22, r18
    493a:	02 c0       	rjmp	.+4      	; 0x4940 <DIO_enuSetPinDirection+0xac>
    493c:	66 0f       	add	r22, r22
    493e:	77 1f       	adc	r23, r23
    4940:	8a 95       	dec	r24
    4942:	e2 f7       	brpl	.-8      	; 0x493c <DIO_enuSetPinDirection+0xa8>
    4944:	cb 01       	movw	r24, r22
    4946:	84 2b       	or	r24, r20
    4948:	8c 93       	st	X, r24
    494a:	65 c0       	rjmp	.+202    	; 0x4a16 <DIO_enuSetPinDirection+0x182>
			break;
		case DIO_u8GROUP_B:
			ASSIGN_BIT_VALUE( DDR_B , Copy_u8PinID , Copy_u8Direction );
    494c:	a7 e3       	ldi	r26, 0x37	; 55
    494e:	b0 e0       	ldi	r27, 0x00	; 0
    4950:	e7 e3       	ldi	r30, 0x37	; 55
    4952:	f0 e0       	ldi	r31, 0x00	; 0
    4954:	80 81       	ld	r24, Z
    4956:	48 2f       	mov	r20, r24
    4958:	8b 81       	ldd	r24, Y+3	; 0x03
    495a:	28 2f       	mov	r18, r24
    495c:	30 e0       	ldi	r19, 0x00	; 0
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	90 e0       	ldi	r25, 0x00	; 0
    4962:	02 c0       	rjmp	.+4      	; 0x4968 <DIO_enuSetPinDirection+0xd4>
    4964:	88 0f       	add	r24, r24
    4966:	99 1f       	adc	r25, r25
    4968:	2a 95       	dec	r18
    496a:	e2 f7       	brpl	.-8      	; 0x4964 <DIO_enuSetPinDirection+0xd0>
    496c:	80 95       	com	r24
    496e:	48 23       	and	r20, r24
    4970:	8c 81       	ldd	r24, Y+4	; 0x04
    4972:	28 2f       	mov	r18, r24
    4974:	30 e0       	ldi	r19, 0x00	; 0
    4976:	8b 81       	ldd	r24, Y+3	; 0x03
    4978:	88 2f       	mov	r24, r24
    497a:	90 e0       	ldi	r25, 0x00	; 0
    497c:	b9 01       	movw	r22, r18
    497e:	02 c0       	rjmp	.+4      	; 0x4984 <DIO_enuSetPinDirection+0xf0>
    4980:	66 0f       	add	r22, r22
    4982:	77 1f       	adc	r23, r23
    4984:	8a 95       	dec	r24
    4986:	e2 f7       	brpl	.-8      	; 0x4980 <DIO_enuSetPinDirection+0xec>
    4988:	cb 01       	movw	r24, r22
    498a:	84 2b       	or	r24, r20
    498c:	8c 93       	st	X, r24
    498e:	43 c0       	rjmp	.+134    	; 0x4a16 <DIO_enuSetPinDirection+0x182>
			break;
		case DIO_u8GROUP_C:
			ASSIGN_BIT_VALUE( DDR_C , Copy_u8PinID , Copy_u8Direction );
    4990:	a4 e3       	ldi	r26, 0x34	; 52
    4992:	b0 e0       	ldi	r27, 0x00	; 0
    4994:	e4 e3       	ldi	r30, 0x34	; 52
    4996:	f0 e0       	ldi	r31, 0x00	; 0
    4998:	80 81       	ld	r24, Z
    499a:	48 2f       	mov	r20, r24
    499c:	8b 81       	ldd	r24, Y+3	; 0x03
    499e:	28 2f       	mov	r18, r24
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	81 e0       	ldi	r24, 0x01	; 1
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	02 c0       	rjmp	.+4      	; 0x49ac <DIO_enuSetPinDirection+0x118>
    49a8:	88 0f       	add	r24, r24
    49aa:	99 1f       	adc	r25, r25
    49ac:	2a 95       	dec	r18
    49ae:	e2 f7       	brpl	.-8      	; 0x49a8 <DIO_enuSetPinDirection+0x114>
    49b0:	80 95       	com	r24
    49b2:	48 23       	and	r20, r24
    49b4:	8c 81       	ldd	r24, Y+4	; 0x04
    49b6:	28 2f       	mov	r18, r24
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	8b 81       	ldd	r24, Y+3	; 0x03
    49bc:	88 2f       	mov	r24, r24
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	b9 01       	movw	r22, r18
    49c2:	02 c0       	rjmp	.+4      	; 0x49c8 <DIO_enuSetPinDirection+0x134>
    49c4:	66 0f       	add	r22, r22
    49c6:	77 1f       	adc	r23, r23
    49c8:	8a 95       	dec	r24
    49ca:	e2 f7       	brpl	.-8      	; 0x49c4 <DIO_enuSetPinDirection+0x130>
    49cc:	cb 01       	movw	r24, r22
    49ce:	84 2b       	or	r24, r20
    49d0:	8c 93       	st	X, r24
    49d2:	21 c0       	rjmp	.+66     	; 0x4a16 <DIO_enuSetPinDirection+0x182>
			break;
		case DIO_u8GROUP_D:
			ASSIGN_BIT_VALUE( DDR_D , Copy_u8PinID , Copy_u8Direction );
    49d4:	a1 e3       	ldi	r26, 0x31	; 49
    49d6:	b0 e0       	ldi	r27, 0x00	; 0
    49d8:	e1 e3       	ldi	r30, 0x31	; 49
    49da:	f0 e0       	ldi	r31, 0x00	; 0
    49dc:	80 81       	ld	r24, Z
    49de:	48 2f       	mov	r20, r24
    49e0:	8b 81       	ldd	r24, Y+3	; 0x03
    49e2:	28 2f       	mov	r18, r24
    49e4:	30 e0       	ldi	r19, 0x00	; 0
    49e6:	81 e0       	ldi	r24, 0x01	; 1
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	02 c0       	rjmp	.+4      	; 0x49f0 <DIO_enuSetPinDirection+0x15c>
    49ec:	88 0f       	add	r24, r24
    49ee:	99 1f       	adc	r25, r25
    49f0:	2a 95       	dec	r18
    49f2:	e2 f7       	brpl	.-8      	; 0x49ec <DIO_enuSetPinDirection+0x158>
    49f4:	80 95       	com	r24
    49f6:	48 23       	and	r20, r24
    49f8:	8c 81       	ldd	r24, Y+4	; 0x04
    49fa:	28 2f       	mov	r18, r24
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4a00:	88 2f       	mov	r24, r24
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	b9 01       	movw	r22, r18
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <DIO_enuSetPinDirection+0x178>
    4a08:	66 0f       	add	r22, r22
    4a0a:	77 1f       	adc	r23, r23
    4a0c:	8a 95       	dec	r24
    4a0e:	e2 f7       	brpl	.-8      	; 0x4a08 <DIO_enuSetPinDirection+0x174>
    4a10:	cb 01       	movw	r24, r22
    4a12:	84 2b       	or	r24, r20
    4a14:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    4a16:	19 82       	std	Y+1, r1	; 0x01
    4a18:	02 c0       	rjmp	.+4      	; 0x4a1e <DIO_enuSetPinDirection+0x18a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    4a1a:	82 e0       	ldi	r24, 0x02	; 2
    4a1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    4a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a20:	26 96       	adiw	r28, 0x06	; 6
    4a22:	0f b6       	in	r0, 0x3f	; 63
    4a24:	f8 94       	cli
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	0f be       	out	0x3f, r0	; 63
    4a2a:	cd bf       	out	0x3d, r28	; 61
    4a2c:	cf 91       	pop	r28
    4a2e:	df 91       	pop	r29
    4a30:	08 95       	ret

00004a32 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    4a32:	df 93       	push	r29
    4a34:	cf 93       	push	r28
    4a36:	00 d0       	rcall	.+0      	; 0x4a38 <DIO_enuSetPinValue+0x6>
    4a38:	00 d0       	rcall	.+0      	; 0x4a3a <DIO_enuSetPinValue+0x8>
    4a3a:	00 d0       	rcall	.+0      	; 0x4a3c <DIO_enuSetPinValue+0xa>
    4a3c:	cd b7       	in	r28, 0x3d	; 61
    4a3e:	de b7       	in	r29, 0x3e	; 62
    4a40:	8a 83       	std	Y+2, r24	; 0x02
    4a42:	6b 83       	std	Y+3, r22	; 0x03
    4a44:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4a46:	81 e0       	ldi	r24, 0x01	; 1
    4a48:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    4a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4c:	80 31       	cpi	r24, 0x10	; 16
    4a4e:	08 f0       	brcs	.+2      	; 0x4a52 <DIO_enuSetPinValue+0x20>
    4a50:	b6 c0       	rjmp	.+364    	; 0x4bbe <DIO_enuSetPinValue+0x18c>
    4a52:	8b 81       	ldd	r24, Y+3	; 0x03
    4a54:	88 30       	cpi	r24, 0x08	; 8
    4a56:	08 f0       	brcs	.+2      	; 0x4a5a <DIO_enuSetPinValue+0x28>
    4a58:	b2 c0       	rjmp	.+356    	; 0x4bbe <DIO_enuSetPinValue+0x18c>
    4a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a5c:	82 30       	cpi	r24, 0x02	; 2
    4a5e:	20 f0       	brcs	.+8      	; 0x4a68 <DIO_enuSetPinValue+0x36>
    4a60:	8c 81       	ldd	r24, Y+4	; 0x04
    4a62:	82 30       	cpi	r24, 0x02	; 2
    4a64:	08 f0       	brcs	.+2      	; 0x4a68 <DIO_enuSetPinValue+0x36>
    4a66:	ab c0       	rjmp	.+342    	; 0x4bbe <DIO_enuSetPinValue+0x18c>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
    4a68:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6a:	28 2f       	mov	r18, r24
    4a6c:	30 e0       	ldi	r19, 0x00	; 0
    4a6e:	3e 83       	std	Y+6, r19	; 0x06
    4a70:	2d 83       	std	Y+5, r18	; 0x05
    4a72:	6d 81       	ldd	r22, Y+5	; 0x05
    4a74:	7e 81       	ldd	r23, Y+6	; 0x06
    4a76:	6d 30       	cpi	r22, 0x0D	; 13
    4a78:	71 05       	cpc	r23, r1
    4a7a:	d1 f1       	breq	.+116    	; 0x4af0 <DIO_enuSetPinValue+0xbe>
    4a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a80:	8e 30       	cpi	r24, 0x0E	; 14
    4a82:	91 05       	cpc	r25, r1
    4a84:	34 f4       	brge	.+12     	; 0x4a92 <DIO_enuSetPinValue+0x60>
    4a86:	2d 81       	ldd	r18, Y+5	; 0x05
    4a88:	3e 81       	ldd	r19, Y+6	; 0x06
    4a8a:	2c 30       	cpi	r18, 0x0C	; 12
    4a8c:	31 05       	cpc	r19, r1
    4a8e:	71 f0       	breq	.+28     	; 0x4aac <DIO_enuSetPinValue+0x7a>
    4a90:	94 c0       	rjmp	.+296    	; 0x4bba <DIO_enuSetPinValue+0x188>
    4a92:	6d 81       	ldd	r22, Y+5	; 0x05
    4a94:	7e 81       	ldd	r23, Y+6	; 0x06
    4a96:	6e 30       	cpi	r22, 0x0E	; 14
    4a98:	71 05       	cpc	r23, r1
    4a9a:	09 f4       	brne	.+2      	; 0x4a9e <DIO_enuSetPinValue+0x6c>
    4a9c:	4b c0       	rjmp	.+150    	; 0x4b34 <DIO_enuSetPinValue+0x102>
    4a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    4aa2:	8f 30       	cpi	r24, 0x0F	; 15
    4aa4:	91 05       	cpc	r25, r1
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <DIO_enuSetPinValue+0x78>
    4aa8:	67 c0       	rjmp	.+206    	; 0x4b78 <DIO_enuSetPinValue+0x146>
    4aaa:	87 c0       	rjmp	.+270    	; 0x4bba <DIO_enuSetPinValue+0x188>
		{
		case DIO_u8GROUP_A:
			ASSIGN_BIT_VALUE( PORT_A , Copy_u8PinID , Copy_u8Value );
    4aac:	ab e3       	ldi	r26, 0x3B	; 59
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
    4ab0:	eb e3       	ldi	r30, 0x3B	; 59
    4ab2:	f0 e0       	ldi	r31, 0x00	; 0
    4ab4:	80 81       	ld	r24, Z
    4ab6:	48 2f       	mov	r20, r24
    4ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    4aba:	28 2f       	mov	r18, r24
    4abc:	30 e0       	ldi	r19, 0x00	; 0
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	90 e0       	ldi	r25, 0x00	; 0
    4ac2:	02 c0       	rjmp	.+4      	; 0x4ac8 <DIO_enuSetPinValue+0x96>
    4ac4:	88 0f       	add	r24, r24
    4ac6:	99 1f       	adc	r25, r25
    4ac8:	2a 95       	dec	r18
    4aca:	e2 f7       	brpl	.-8      	; 0x4ac4 <DIO_enuSetPinValue+0x92>
    4acc:	80 95       	com	r24
    4ace:	48 23       	and	r20, r24
    4ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    4ad2:	28 2f       	mov	r18, r24
    4ad4:	30 e0       	ldi	r19, 0x00	; 0
    4ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ad8:	88 2f       	mov	r24, r24
    4ada:	90 e0       	ldi	r25, 0x00	; 0
    4adc:	b9 01       	movw	r22, r18
    4ade:	02 c0       	rjmp	.+4      	; 0x4ae4 <DIO_enuSetPinValue+0xb2>
    4ae0:	66 0f       	add	r22, r22
    4ae2:	77 1f       	adc	r23, r23
    4ae4:	8a 95       	dec	r24
    4ae6:	e2 f7       	brpl	.-8      	; 0x4ae0 <DIO_enuSetPinValue+0xae>
    4ae8:	cb 01       	movw	r24, r22
    4aea:	84 2b       	or	r24, r20
    4aec:	8c 93       	st	X, r24
    4aee:	65 c0       	rjmp	.+202    	; 0x4bba <DIO_enuSetPinValue+0x188>

			break;
		case DIO_u8GROUP_B:
			ASSIGN_BIT_VALUE( PORT_B , Copy_u8PinID , Copy_u8Value );
    4af0:	a8 e3       	ldi	r26, 0x38	; 56
    4af2:	b0 e0       	ldi	r27, 0x00	; 0
    4af4:	e8 e3       	ldi	r30, 0x38	; 56
    4af6:	f0 e0       	ldi	r31, 0x00	; 0
    4af8:	80 81       	ld	r24, Z
    4afa:	48 2f       	mov	r20, r24
    4afc:	8b 81       	ldd	r24, Y+3	; 0x03
    4afe:	28 2f       	mov	r18, r24
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	81 e0       	ldi	r24, 0x01	; 1
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <DIO_enuSetPinValue+0xda>
    4b08:	88 0f       	add	r24, r24
    4b0a:	99 1f       	adc	r25, r25
    4b0c:	2a 95       	dec	r18
    4b0e:	e2 f7       	brpl	.-8      	; 0x4b08 <DIO_enuSetPinValue+0xd6>
    4b10:	80 95       	com	r24
    4b12:	48 23       	and	r20, r24
    4b14:	8c 81       	ldd	r24, Y+4	; 0x04
    4b16:	28 2f       	mov	r18, r24
    4b18:	30 e0       	ldi	r19, 0x00	; 0
    4b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b1c:	88 2f       	mov	r24, r24
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	b9 01       	movw	r22, r18
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <DIO_enuSetPinValue+0xf6>
    4b24:	66 0f       	add	r22, r22
    4b26:	77 1f       	adc	r23, r23
    4b28:	8a 95       	dec	r24
    4b2a:	e2 f7       	brpl	.-8      	; 0x4b24 <DIO_enuSetPinValue+0xf2>
    4b2c:	cb 01       	movw	r24, r22
    4b2e:	84 2b       	or	r24, r20
    4b30:	8c 93       	st	X, r24
    4b32:	43 c0       	rjmp	.+134    	; 0x4bba <DIO_enuSetPinValue+0x188>

			break;
		case DIO_u8GROUP_C:
			ASSIGN_BIT_VALUE( PORT_C , Copy_u8PinID , Copy_u8Value );
    4b34:	a5 e3       	ldi	r26, 0x35	; 53
    4b36:	b0 e0       	ldi	r27, 0x00	; 0
    4b38:	e5 e3       	ldi	r30, 0x35	; 53
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	80 81       	ld	r24, Z
    4b3e:	48 2f       	mov	r20, r24
    4b40:	8b 81       	ldd	r24, Y+3	; 0x03
    4b42:	28 2f       	mov	r18, r24
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	90 e0       	ldi	r25, 0x00	; 0
    4b4a:	02 c0       	rjmp	.+4      	; 0x4b50 <DIO_enuSetPinValue+0x11e>
    4b4c:	88 0f       	add	r24, r24
    4b4e:	99 1f       	adc	r25, r25
    4b50:	2a 95       	dec	r18
    4b52:	e2 f7       	brpl	.-8      	; 0x4b4c <DIO_enuSetPinValue+0x11a>
    4b54:	80 95       	com	r24
    4b56:	48 23       	and	r20, r24
    4b58:	8c 81       	ldd	r24, Y+4	; 0x04
    4b5a:	28 2f       	mov	r18, r24
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4b60:	88 2f       	mov	r24, r24
    4b62:	90 e0       	ldi	r25, 0x00	; 0
    4b64:	b9 01       	movw	r22, r18
    4b66:	02 c0       	rjmp	.+4      	; 0x4b6c <DIO_enuSetPinValue+0x13a>
    4b68:	66 0f       	add	r22, r22
    4b6a:	77 1f       	adc	r23, r23
    4b6c:	8a 95       	dec	r24
    4b6e:	e2 f7       	brpl	.-8      	; 0x4b68 <DIO_enuSetPinValue+0x136>
    4b70:	cb 01       	movw	r24, r22
    4b72:	84 2b       	or	r24, r20
    4b74:	8c 93       	st	X, r24
    4b76:	21 c0       	rjmp	.+66     	; 0x4bba <DIO_enuSetPinValue+0x188>
			break;
		case DIO_u8GROUP_D:
			ASSIGN_BIT_VALUE( PORT_D , Copy_u8PinID , Copy_u8Value );
    4b78:	a2 e3       	ldi	r26, 0x32	; 50
    4b7a:	b0 e0       	ldi	r27, 0x00	; 0
    4b7c:	e2 e3       	ldi	r30, 0x32	; 50
    4b7e:	f0 e0       	ldi	r31, 0x00	; 0
    4b80:	80 81       	ld	r24, Z
    4b82:	48 2f       	mov	r20, r24
    4b84:	8b 81       	ldd	r24, Y+3	; 0x03
    4b86:	28 2f       	mov	r18, r24
    4b88:	30 e0       	ldi	r19, 0x00	; 0
    4b8a:	81 e0       	ldi	r24, 0x01	; 1
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	02 c0       	rjmp	.+4      	; 0x4b94 <DIO_enuSetPinValue+0x162>
    4b90:	88 0f       	add	r24, r24
    4b92:	99 1f       	adc	r25, r25
    4b94:	2a 95       	dec	r18
    4b96:	e2 f7       	brpl	.-8      	; 0x4b90 <DIO_enuSetPinValue+0x15e>
    4b98:	80 95       	com	r24
    4b9a:	48 23       	and	r20, r24
    4b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b9e:	28 2f       	mov	r18, r24
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
    4ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba4:	88 2f       	mov	r24, r24
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	b9 01       	movw	r22, r18
    4baa:	02 c0       	rjmp	.+4      	; 0x4bb0 <DIO_enuSetPinValue+0x17e>
    4bac:	66 0f       	add	r22, r22
    4bae:	77 1f       	adc	r23, r23
    4bb0:	8a 95       	dec	r24
    4bb2:	e2 f7       	brpl	.-8      	; 0x4bac <DIO_enuSetPinValue+0x17a>
    4bb4:	cb 01       	movw	r24, r22
    4bb6:	84 2b       	or	r24, r20
    4bb8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    4bba:	19 82       	std	Y+1, r1	; 0x01
    4bbc:	02 c0       	rjmp	.+4      	; 0x4bc2 <DIO_enuSetPinValue+0x190>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    4bbe:	82 e0       	ldi	r24, 0x02	; 2
    4bc0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    4bc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bc4:	26 96       	adiw	r28, 0x06	; 6
    4bc6:	0f b6       	in	r0, 0x3f	; 63
    4bc8:	f8 94       	cli
    4bca:	de bf       	out	0x3e, r29	; 62
    4bcc:	0f be       	out	0x3f, r0	; 63
    4bce:	cd bf       	out	0x3d, r28	; 61
    4bd0:	cf 91       	pop	r28
    4bd2:	df 91       	pop	r29
    4bd4:	08 95       	ret

00004bd6 <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    4bd6:	df 93       	push	r29
    4bd8:	cf 93       	push	r28
    4bda:	00 d0       	rcall	.+0      	; 0x4bdc <DIO_enuTogglePinValue+0x6>
    4bdc:	00 d0       	rcall	.+0      	; 0x4bde <DIO_enuTogglePinValue+0x8>
    4bde:	0f 92       	push	r0
    4be0:	cd b7       	in	r28, 0x3d	; 61
    4be2:	de b7       	in	r29, 0x3e	; 62
    4be4:	8a 83       	std	Y+2, r24	; 0x02
    4be6:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    4bec:	8a 81       	ldd	r24, Y+2	; 0x02
    4bee:	80 31       	cpi	r24, 0x10	; 16
    4bf0:	08 f0       	brcs	.+2      	; 0x4bf4 <DIO_enuTogglePinValue+0x1e>
    4bf2:	75 c0       	rjmp	.+234    	; 0x4cde <DIO_enuTogglePinValue+0x108>
    4bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf6:	88 30       	cpi	r24, 0x08	; 8
    4bf8:	08 f0       	brcs	.+2      	; 0x4bfc <DIO_enuTogglePinValue+0x26>
    4bfa:	71 c0       	rjmp	.+226    	; 0x4cde <DIO_enuTogglePinValue+0x108>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
    4bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    4bfe:	28 2f       	mov	r18, r24
    4c00:	30 e0       	ldi	r19, 0x00	; 0
    4c02:	3d 83       	std	Y+5, r19	; 0x05
    4c04:	2c 83       	std	Y+4, r18	; 0x04
    4c06:	8c 81       	ldd	r24, Y+4	; 0x04
    4c08:	9d 81       	ldd	r25, Y+5	; 0x05
    4c0a:	8d 30       	cpi	r24, 0x0D	; 13
    4c0c:	91 05       	cpc	r25, r1
    4c0e:	51 f1       	breq	.+84     	; 0x4c64 <DIO_enuTogglePinValue+0x8e>
    4c10:	2c 81       	ldd	r18, Y+4	; 0x04
    4c12:	3d 81       	ldd	r19, Y+5	; 0x05
    4c14:	2e 30       	cpi	r18, 0x0E	; 14
    4c16:	31 05       	cpc	r19, r1
    4c18:	34 f4       	brge	.+12     	; 0x4c26 <DIO_enuTogglePinValue+0x50>
    4c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    4c1c:	9d 81       	ldd	r25, Y+5	; 0x05
    4c1e:	8c 30       	cpi	r24, 0x0C	; 12
    4c20:	91 05       	cpc	r25, r1
    4c22:	61 f0       	breq	.+24     	; 0x4c3c <DIO_enuTogglePinValue+0x66>
    4c24:	5a c0       	rjmp	.+180    	; 0x4cda <DIO_enuTogglePinValue+0x104>
    4c26:	2c 81       	ldd	r18, Y+4	; 0x04
    4c28:	3d 81       	ldd	r19, Y+5	; 0x05
    4c2a:	2e 30       	cpi	r18, 0x0E	; 14
    4c2c:	31 05       	cpc	r19, r1
    4c2e:	71 f1       	breq	.+92     	; 0x4c8c <DIO_enuTogglePinValue+0xb6>
    4c30:	8c 81       	ldd	r24, Y+4	; 0x04
    4c32:	9d 81       	ldd	r25, Y+5	; 0x05
    4c34:	8f 30       	cpi	r24, 0x0F	; 15
    4c36:	91 05       	cpc	r25, r1
    4c38:	e9 f1       	breq	.+122    	; 0x4cb4 <DIO_enuTogglePinValue+0xde>
    4c3a:	4f c0       	rjmp	.+158    	; 0x4cda <DIO_enuTogglePinValue+0x104>
		{
		case DIO_u8GROUP_A:
			TOG_BIT( PORT_A , Copy_u8PinID );
    4c3c:	ab e3       	ldi	r26, 0x3B	; 59
    4c3e:	b0 e0       	ldi	r27, 0x00	; 0
    4c40:	eb e3       	ldi	r30, 0x3B	; 59
    4c42:	f0 e0       	ldi	r31, 0x00	; 0
    4c44:	80 81       	ld	r24, Z
    4c46:	48 2f       	mov	r20, r24
    4c48:	8b 81       	ldd	r24, Y+3	; 0x03
    4c4a:	28 2f       	mov	r18, r24
    4c4c:	30 e0       	ldi	r19, 0x00	; 0
    4c4e:	81 e0       	ldi	r24, 0x01	; 1
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	02 2e       	mov	r0, r18
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <DIO_enuTogglePinValue+0x84>
    4c56:	88 0f       	add	r24, r24
    4c58:	99 1f       	adc	r25, r25
    4c5a:	0a 94       	dec	r0
    4c5c:	e2 f7       	brpl	.-8      	; 0x4c56 <DIO_enuTogglePinValue+0x80>
    4c5e:	84 27       	eor	r24, r20
    4c60:	8c 93       	st	X, r24
    4c62:	3b c0       	rjmp	.+118    	; 0x4cda <DIO_enuTogglePinValue+0x104>
			break;
		case DIO_u8GROUP_B:
			TOG_BIT( PORT_A , Copy_u8PinID );
    4c64:	ab e3       	ldi	r26, 0x3B	; 59
    4c66:	b0 e0       	ldi	r27, 0x00	; 0
    4c68:	eb e3       	ldi	r30, 0x3B	; 59
    4c6a:	f0 e0       	ldi	r31, 0x00	; 0
    4c6c:	80 81       	ld	r24, Z
    4c6e:	48 2f       	mov	r20, r24
    4c70:	8b 81       	ldd	r24, Y+3	; 0x03
    4c72:	28 2f       	mov	r18, r24
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	81 e0       	ldi	r24, 0x01	; 1
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	02 2e       	mov	r0, r18
    4c7c:	02 c0       	rjmp	.+4      	; 0x4c82 <DIO_enuTogglePinValue+0xac>
    4c7e:	88 0f       	add	r24, r24
    4c80:	99 1f       	adc	r25, r25
    4c82:	0a 94       	dec	r0
    4c84:	e2 f7       	brpl	.-8      	; 0x4c7e <DIO_enuTogglePinValue+0xa8>
    4c86:	84 27       	eor	r24, r20
    4c88:	8c 93       	st	X, r24
    4c8a:	27 c0       	rjmp	.+78     	; 0x4cda <DIO_enuTogglePinValue+0x104>
			break;
		case DIO_u8GROUP_C:
			TOG_BIT( PORT_A , Copy_u8PinID );
    4c8c:	ab e3       	ldi	r26, 0x3B	; 59
    4c8e:	b0 e0       	ldi	r27, 0x00	; 0
    4c90:	eb e3       	ldi	r30, 0x3B	; 59
    4c92:	f0 e0       	ldi	r31, 0x00	; 0
    4c94:	80 81       	ld	r24, Z
    4c96:	48 2f       	mov	r20, r24
    4c98:	8b 81       	ldd	r24, Y+3	; 0x03
    4c9a:	28 2f       	mov	r18, r24
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	81 e0       	ldi	r24, 0x01	; 1
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	02 2e       	mov	r0, r18
    4ca4:	02 c0       	rjmp	.+4      	; 0x4caa <DIO_enuTogglePinValue+0xd4>
    4ca6:	88 0f       	add	r24, r24
    4ca8:	99 1f       	adc	r25, r25
    4caa:	0a 94       	dec	r0
    4cac:	e2 f7       	brpl	.-8      	; 0x4ca6 <DIO_enuTogglePinValue+0xd0>
    4cae:	84 27       	eor	r24, r20
    4cb0:	8c 93       	st	X, r24
    4cb2:	13 c0       	rjmp	.+38     	; 0x4cda <DIO_enuTogglePinValue+0x104>
			break;
		case DIO_u8GROUP_D:
			TOG_BIT( PORT_A , Copy_u8PinID );
    4cb4:	ab e3       	ldi	r26, 0x3B	; 59
    4cb6:	b0 e0       	ldi	r27, 0x00	; 0
    4cb8:	eb e3       	ldi	r30, 0x3B	; 59
    4cba:	f0 e0       	ldi	r31, 0x00	; 0
    4cbc:	80 81       	ld	r24, Z
    4cbe:	48 2f       	mov	r20, r24
    4cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    4cc2:	28 2f       	mov	r18, r24
    4cc4:	30 e0       	ldi	r19, 0x00	; 0
    4cc6:	81 e0       	ldi	r24, 0x01	; 1
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	02 2e       	mov	r0, r18
    4ccc:	02 c0       	rjmp	.+4      	; 0x4cd2 <DIO_enuTogglePinValue+0xfc>
    4cce:	88 0f       	add	r24, r24
    4cd0:	99 1f       	adc	r25, r25
    4cd2:	0a 94       	dec	r0
    4cd4:	e2 f7       	brpl	.-8      	; 0x4cce <DIO_enuTogglePinValue+0xf8>
    4cd6:	84 27       	eor	r24, r20
    4cd8:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    4cda:	19 82       	std	Y+1, r1	; 0x01
    4cdc:	02 c0       	rjmp	.+4      	; 0x4ce2 <DIO_enuTogglePinValue+0x10c>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    4cde:	82 e0       	ldi	r24, 0x02	; 2
    4ce0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    4ce2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ce4:	0f 90       	pop	r0
    4ce6:	0f 90       	pop	r0
    4ce8:	0f 90       	pop	r0
    4cea:	0f 90       	pop	r0
    4cec:	0f 90       	pop	r0
    4cee:	cf 91       	pop	r28
    4cf0:	df 91       	pop	r29
    4cf2:	08 95       	ret

00004cf4 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 *Copy_pu8Value)
{
    4cf4:	df 93       	push	r29
    4cf6:	cf 93       	push	r28
    4cf8:	cd b7       	in	r28, 0x3d	; 61
    4cfa:	de b7       	in	r29, 0x3e	; 62
    4cfc:	27 97       	sbiw	r28, 0x07	; 7
    4cfe:	0f b6       	in	r0, 0x3f	; 63
    4d00:	f8 94       	cli
    4d02:	de bf       	out	0x3e, r29	; 62
    4d04:	0f be       	out	0x3f, r0	; 63
    4d06:	cd bf       	out	0x3d, r28	; 61
    4d08:	8a 83       	std	Y+2, r24	; 0x02
    4d0a:	6b 83       	std	Y+3, r22	; 0x03
    4d0c:	5d 83       	std	Y+5, r21	; 0x05
    4d0e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    4d14:	8c 81       	ldd	r24, Y+4	; 0x04
    4d16:	9d 81       	ldd	r25, Y+5	; 0x05
    4d18:	00 97       	sbiw	r24, 0x00	; 0
    4d1a:	09 f4       	brne	.+2      	; 0x4d1e <DIO_enuGetPinValue+0x2a>
    4d1c:	7d c0       	rjmp	.+250    	; 0x4e18 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
    4d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d20:	80 31       	cpi	r24, 0x10	; 16
    4d22:	08 f0       	brcs	.+2      	; 0x4d26 <DIO_enuGetPinValue+0x32>
    4d24:	76 c0       	rjmp	.+236    	; 0x4e12 <DIO_enuGetPinValue+0x11e>
    4d26:	8b 81       	ldd	r24, Y+3	; 0x03
    4d28:	88 30       	cpi	r24, 0x08	; 8
    4d2a:	08 f0       	brcs	.+2      	; 0x4d2e <DIO_enuGetPinValue+0x3a>
    4d2c:	72 c0       	rjmp	.+228    	; 0x4e12 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    4d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    4d30:	28 2f       	mov	r18, r24
    4d32:	30 e0       	ldi	r19, 0x00	; 0
    4d34:	3f 83       	std	Y+7, r19	; 0x07
    4d36:	2e 83       	std	Y+6, r18	; 0x06
    4d38:	4e 81       	ldd	r20, Y+6	; 0x06
    4d3a:	5f 81       	ldd	r21, Y+7	; 0x07
    4d3c:	4d 30       	cpi	r20, 0x0D	; 13
    4d3e:	51 05       	cpc	r21, r1
    4d40:	59 f1       	breq	.+86     	; 0x4d98 <DIO_enuGetPinValue+0xa4>
    4d42:	8e 81       	ldd	r24, Y+6	; 0x06
    4d44:	9f 81       	ldd	r25, Y+7	; 0x07
    4d46:	8e 30       	cpi	r24, 0x0E	; 14
    4d48:	91 05       	cpc	r25, r1
    4d4a:	34 f4       	brge	.+12     	; 0x4d58 <DIO_enuGetPinValue+0x64>
    4d4c:	2e 81       	ldd	r18, Y+6	; 0x06
    4d4e:	3f 81       	ldd	r19, Y+7	; 0x07
    4d50:	2c 30       	cpi	r18, 0x0C	; 12
    4d52:	31 05       	cpc	r19, r1
    4d54:	69 f0       	breq	.+26     	; 0x4d70 <DIO_enuGetPinValue+0x7c>
    4d56:	5b c0       	rjmp	.+182    	; 0x4e0e <DIO_enuGetPinValue+0x11a>
    4d58:	4e 81       	ldd	r20, Y+6	; 0x06
    4d5a:	5f 81       	ldd	r21, Y+7	; 0x07
    4d5c:	4e 30       	cpi	r20, 0x0E	; 14
    4d5e:	51 05       	cpc	r21, r1
    4d60:	79 f1       	breq	.+94     	; 0x4dc0 <DIO_enuGetPinValue+0xcc>
    4d62:	8e 81       	ldd	r24, Y+6	; 0x06
    4d64:	9f 81       	ldd	r25, Y+7	; 0x07
    4d66:	8f 30       	cpi	r24, 0x0F	; 15
    4d68:	91 05       	cpc	r25, r1
    4d6a:	09 f4       	brne	.+2      	; 0x4d6e <DIO_enuGetPinValue+0x7a>
    4d6c:	3d c0       	rjmp	.+122    	; 0x4de8 <DIO_enuGetPinValue+0xf4>
    4d6e:	4f c0       	rjmp	.+158    	; 0x4e0e <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = IS_BIT( PIN_A , Copy_u8PinID ) ;
    4d70:	e9 e3       	ldi	r30, 0x39	; 57
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	80 81       	ld	r24, Z
    4d76:	28 2f       	mov	r18, r24
    4d78:	30 e0       	ldi	r19, 0x00	; 0
    4d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    4d7c:	88 2f       	mov	r24, r24
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	a9 01       	movw	r20, r18
    4d82:	02 c0       	rjmp	.+4      	; 0x4d88 <DIO_enuGetPinValue+0x94>
    4d84:	55 95       	asr	r21
    4d86:	47 95       	ror	r20
    4d88:	8a 95       	dec	r24
    4d8a:	e2 f7       	brpl	.-8      	; 0x4d84 <DIO_enuGetPinValue+0x90>
    4d8c:	ca 01       	movw	r24, r20
    4d8e:	81 70       	andi	r24, 0x01	; 1
    4d90:	ec 81       	ldd	r30, Y+4	; 0x04
    4d92:	fd 81       	ldd	r31, Y+5	; 0x05
    4d94:	80 83       	st	Z, r24
    4d96:	3b c0       	rjmp	.+118    	; 0x4e0e <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = IS_BIT( PIN_B , Copy_u8PinID ) ;
    4d98:	e6 e3       	ldi	r30, 0x36	; 54
    4d9a:	f0 e0       	ldi	r31, 0x00	; 0
    4d9c:	80 81       	ld	r24, Z
    4d9e:	28 2f       	mov	r18, r24
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	8b 81       	ldd	r24, Y+3	; 0x03
    4da4:	88 2f       	mov	r24, r24
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	a9 01       	movw	r20, r18
    4daa:	02 c0       	rjmp	.+4      	; 0x4db0 <DIO_enuGetPinValue+0xbc>
    4dac:	55 95       	asr	r21
    4dae:	47 95       	ror	r20
    4db0:	8a 95       	dec	r24
    4db2:	e2 f7       	brpl	.-8      	; 0x4dac <DIO_enuGetPinValue+0xb8>
    4db4:	ca 01       	movw	r24, r20
    4db6:	81 70       	andi	r24, 0x01	; 1
    4db8:	ec 81       	ldd	r30, Y+4	; 0x04
    4dba:	fd 81       	ldd	r31, Y+5	; 0x05
    4dbc:	80 83       	st	Z, r24
    4dbe:	27 c0       	rjmp	.+78     	; 0x4e0e <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = IS_BIT( PIN_C , Copy_u8PinID ) ;
    4dc0:	e3 e3       	ldi	r30, 0x33	; 51
    4dc2:	f0 e0       	ldi	r31, 0x00	; 0
    4dc4:	80 81       	ld	r24, Z
    4dc6:	28 2f       	mov	r18, r24
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	8b 81       	ldd	r24, Y+3	; 0x03
    4dcc:	88 2f       	mov	r24, r24
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	a9 01       	movw	r20, r18
    4dd2:	02 c0       	rjmp	.+4      	; 0x4dd8 <DIO_enuGetPinValue+0xe4>
    4dd4:	55 95       	asr	r21
    4dd6:	47 95       	ror	r20
    4dd8:	8a 95       	dec	r24
    4dda:	e2 f7       	brpl	.-8      	; 0x4dd4 <DIO_enuGetPinValue+0xe0>
    4ddc:	ca 01       	movw	r24, r20
    4dde:	81 70       	andi	r24, 0x01	; 1
    4de0:	ec 81       	ldd	r30, Y+4	; 0x04
    4de2:	fd 81       	ldd	r31, Y+5	; 0x05
    4de4:	80 83       	st	Z, r24
    4de6:	13 c0       	rjmp	.+38     	; 0x4e0e <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = IS_BIT( PIN_D , Copy_u8PinID ) ;
    4de8:	e0 e3       	ldi	r30, 0x30	; 48
    4dea:	f0 e0       	ldi	r31, 0x00	; 0
    4dec:	80 81       	ld	r24, Z
    4dee:	28 2f       	mov	r18, r24
    4df0:	30 e0       	ldi	r19, 0x00	; 0
    4df2:	8b 81       	ldd	r24, Y+3	; 0x03
    4df4:	88 2f       	mov	r24, r24
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	a9 01       	movw	r20, r18
    4dfa:	02 c0       	rjmp	.+4      	; 0x4e00 <DIO_enuGetPinValue+0x10c>
    4dfc:	55 95       	asr	r21
    4dfe:	47 95       	ror	r20
    4e00:	8a 95       	dec	r24
    4e02:	e2 f7       	brpl	.-8      	; 0x4dfc <DIO_enuGetPinValue+0x108>
    4e04:	ca 01       	movw	r24, r20
    4e06:	81 70       	andi	r24, 0x01	; 1
    4e08:	ec 81       	ldd	r30, Y+4	; 0x04
    4e0a:	fd 81       	ldd	r31, Y+5	; 0x05
    4e0c:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    4e0e:	19 82       	std	Y+1, r1	; 0x01
    4e10:	05 c0       	rjmp	.+10     	; 0x4e1c <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    4e12:	82 e0       	ldi	r24, 0x02	; 2
    4e14:	89 83       	std	Y+1, r24	; 0x01
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4e18:	83 e0       	ldi	r24, 0x03	; 3
    4e1a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    4e1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e1e:	27 96       	adiw	r28, 0x07	; 7
    4e20:	0f b6       	in	r0, 0x3f	; 63
    4e22:	f8 94       	cli
    4e24:	de bf       	out	0x3e, r29	; 62
    4e26:	0f be       	out	0x3f, r0	; 63
    4e28:	cd bf       	out	0x3d, r28	; 61
    4e2a:	cf 91       	pop	r28
    4e2c:	df 91       	pop	r29
    4e2e:	08 95       	ret

00004e30 <ADC_enuInit>:

static void(*ADC_pFunISRFun)(void) = NULL ;


ES_t ADC_enuInit(void)
{
    4e30:	df 93       	push	r29
    4e32:	cf 93       	push	r28
    4e34:	0f 92       	push	r0
    4e36:	cd b7       	in	r28, 0x3d	; 61
    4e38:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	89 83       	std	Y+1, r24	; 0x01

	//////////////////////////////////
	// 	Setting Prescalar Factor	//
	//////////////////////////////////
	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    4e3e:	a6 e2       	ldi	r26, 0x26	; 38
    4e40:	b0 e0       	ldi	r27, 0x00	; 0
    4e42:	e6 e2       	ldi	r30, 0x26	; 38
    4e44:	f0 e0       	ldi	r31, 0x00	; 0
    4e46:	80 81       	ld	r24, Z
    4e48:	88 7f       	andi	r24, 0xF8	; 248
    4e4a:	8c 93       	st	X, r24
#if ( ADC_PRES >= ADC_PRES_2 && ADC_PRES <= ADC_PRES_128 )
	ADCSRA |= ( (ADC_PRES - ADC_PRES_0 ) << ADC_PRE_SCALAR_BITS );
    4e4c:	a6 e2       	ldi	r26, 0x26	; 38
    4e4e:	b0 e0       	ldi	r27, 0x00	; 0
    4e50:	e6 e2       	ldi	r30, 0x26	; 38
    4e52:	f0 e0       	ldi	r31, 0x00	; 0
    4e54:	80 81       	ld	r24, Z
    4e56:	86 60       	ori	r24, 0x06	; 6
    4e58:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	// Setting Reference Voltage	//
	//////////////////////////////////
	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    4e5a:	a7 e2       	ldi	r26, 0x27	; 39
    4e5c:	b0 e0       	ldi	r27, 0x00	; 0
    4e5e:	e7 e2       	ldi	r30, 0x27	; 39
    4e60:	f0 e0       	ldi	r31, 0x00	; 0
    4e62:	80 81       	ld	r24, Z
    4e64:	8f 73       	andi	r24, 0x3F	; 63
    4e66:	8c 93       	st	X, r24
#if ( ADC_VREF >= AREF_REF && ADC_VREF <= INTERNAL_REF )
	ADMUX |= ( (ADC_VREF - AREF_REF) << ADC_REF_SEL_BITS );
    4e68:	a7 e2       	ldi	r26, 0x27	; 39
    4e6a:	b0 e0       	ldi	r27, 0x00	; 0
    4e6c:	e7 e2       	ldi	r30, 0x27	; 39
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	80 81       	ld	r24, Z
    4e72:	8c 93       	st	X, r24

	//////////////////////////////////////
	// Setting Output Adjust Direction	//
	//////////////////////////////////////
#if ( ADC_ADJUST == RIGHT_ADJUST )
	ASM_CLR_BIT( _SFR_ADMUX_ , ADLAR_BIT );
    4e74:	3d 98       	cbi	0x07, 5	; 7
#endif

	//////////////////////////////////////
	//	 Selecting Initial Channel		//
	//////////////////////////////////////
	ADMUX &= ~(ADC_CH_SEL_BITS_MASK);
    4e76:	a7 e2       	ldi	r26, 0x27	; 39
    4e78:	b0 e0       	ldi	r27, 0x00	; 0
    4e7a:	e7 e2       	ldi	r30, 0x27	; 39
    4e7c:	f0 e0       	ldi	r31, 0x00	; 0
    4e7e:	80 81       	ld	r24, Z
    4e80:	80 7e       	andi	r24, 0xE0	; 224
    4e82:	8c 93       	st	X, r24
#if ( ADC_INIT_CHANNEL >= CH_00 && ADC_INIT_CHANNEL <= CH_31 )
	ADMUX |= ( (ADC_INIT_CHANNEL - CH_00) << ADC_CH_SEL_BITS );
    4e84:	a7 e2       	ldi	r26, 0x27	; 39
    4e86:	b0 e0       	ldi	r27, 0x00	; 0
    4e88:	e7 e2       	ldi	r30, 0x27	; 39
    4e8a:	f0 e0       	ldi	r31, 0x00	; 0
    4e8c:	80 81       	ld	r24, Z
    4e8e:	8c 93       	st	X, r24
	//	 Setting ADC Interrupt Mode		//
	//////////////////////////////////////
#if ( ADC_INTERRUPT_MODE == ADC_POLLING )
	ASM_CLR_BIT( _SFR_ADCSRA_ , ADC_INT_ENABLE_BIT );
#elif ( ADC_INTERRUPT_MODE == ADC_INTERRUPT )
	ASM_SET_BIT( _SFR_ADCSRA_ , ADC_INT_ENABLE_BIT );
    4e90:	33 9a       	sbi	0x06, 3	; 6
	///////////////////////////////////
	// Selecting ADC Trigger  Source //
	///////////////////////////////////
#if ( ADC_TRIGGER_SOURCE >= FREE_RUNNING && ADC_TRIGGER_SOURCE <= TIMER1_CAPT_EVENT )

	SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    4e92:	a0 e5       	ldi	r26, 0x50	; 80
    4e94:	b0 e0       	ldi	r27, 0x00	; 0
    4e96:	e0 e5       	ldi	r30, 0x50	; 80
    4e98:	f0 e0       	ldi	r31, 0x00	; 0
    4e9a:	80 81       	ld	r24, Z
    4e9c:	88 7f       	andi	r24, 0xF8	; 248
    4e9e:	8c 93       	st	X, r24

	SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING) << ADC_TRIGGER_SEL_BITS );
    4ea0:	a0 e5       	ldi	r26, 0x50	; 80
    4ea2:	b0 e0       	ldi	r27, 0x00	; 0
    4ea4:	e0 e5       	ldi	r30, 0x50	; 80
    4ea6:	f0 e0       	ldi	r31, 0x00	; 0
    4ea8:	80 81       	ld	r24, Z
    4eaa:	8e 6d       	ori	r24, 0xDE	; 222
    4eac:	8c 93       	st	X, r24
	//////////////////////////////////
	// Selecting ADC Trigger Mode	//
	//////////////////////////////////
#if ( ADC_TRIGGER_MODE == AUTO_TRIGGER || ADC_TRIGGER_MODE == SINGLE_TRIGGER )

	ASM_CLR_BIT( _SFR_ADCSRA_ , ADC_AUTO_TRIGGER_EN_BIT );
    4eae:	35 98       	cbi	0x06, 5	; 6
#endif

	//////////////////////////////////
	//	 ENABLE ADC Peripheral		//
	//////////////////////////////////
	ASM_SET_BIT( _SFR_ADCSRA_ , ADC_ENABLE_BIT );
    4eb0:	37 9a       	sbi	0x06, 7	; 6

	if( Local_enuErrorState != ES_OUT_RANGE)
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
    4eb4:	82 30       	cpi	r24, 0x02	; 2
    4eb6:	09 f0       	breq	.+2      	; 0x4eba <ADC_enuInit+0x8a>
		Local_enuErrorState = ES_OK ;
    4eb8:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    4eba:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ebc:	0f 90       	pop	r0
    4ebe:	cf 91       	pop	r28
    4ec0:	df 91       	pop	r29
    4ec2:	08 95       	ret

00004ec4 <ADC_enuSetPreScalar>:

ES_t ADC_enuSetPreScalar(u8 Copy_u8PreScalarID)
{
    4ec4:	df 93       	push	r29
    4ec6:	cf 93       	push	r28
    4ec8:	00 d0       	rcall	.+0      	; 0x4eca <ADC_enuSetPreScalar+0x6>
    4eca:	cd b7       	in	r28, 0x3d	; 61
    4ecc:	de b7       	in	r29, 0x3e	; 62
    4ece:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4ed0:	81 e0       	ldi	r24, 0x01	; 1
    4ed2:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    4ed4:	a6 e2       	ldi	r26, 0x26	; 38
    4ed6:	b0 e0       	ldi	r27, 0x00	; 0
    4ed8:	e6 e2       	ldi	r30, 0x26	; 38
    4eda:	f0 e0       	ldi	r31, 0x00	; 0
    4edc:	80 81       	ld	r24, Z
    4ede:	88 7f       	andi	r24, 0xF8	; 248
    4ee0:	8c 93       	st	X, r24

	if ( Copy_u8PreScalarID >= ADC_PRES_2 && Copy_u8PreScalarID <= ADC_PRES_128 )
    4ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee4:	89 37       	cpi	r24, 0x79	; 121
    4ee6:	78 f0       	brcs	.+30     	; 0x4f06 <ADC_enuSetPreScalar+0x42>
    4ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eea:	88 23       	and	r24, r24
    4eec:	64 f0       	brlt	.+24     	; 0x4f06 <ADC_enuSetPreScalar+0x42>
	{
		ADCSRA |= ( (Copy_u8PreScalarID - ADC_PRES_0 ) << ADC_PRE_SCALAR_BITS );
    4eee:	a6 e2       	ldi	r26, 0x26	; 38
    4ef0:	b0 e0       	ldi	r27, 0x00	; 0
    4ef2:	e6 e2       	ldi	r30, 0x26	; 38
    4ef4:	f0 e0       	ldi	r31, 0x00	; 0
    4ef6:	80 81       	ld	r24, Z
    4ef8:	98 2f       	mov	r25, r24
    4efa:	8a 81       	ldd	r24, Y+2	; 0x02
    4efc:	88 57       	subi	r24, 0x78	; 120
    4efe:	89 2b       	or	r24, r25
    4f00:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    4f02:	19 82       	std	Y+1, r1	; 0x01
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <ADC_enuSetPreScalar+0x46>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    4f06:	82 e0       	ldi	r24, 0x02	; 2
    4f08:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    4f0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f0c:	0f 90       	pop	r0
    4f0e:	0f 90       	pop	r0
    4f10:	cf 91       	pop	r28
    4f12:	df 91       	pop	r29
    4f14:	08 95       	ret

00004f16 <ADC_enuSetRefVolt>:

ES_t ADC_enuSetRefVolt(u8 Copy_u8RefVoltID)
{
    4f16:	df 93       	push	r29
    4f18:	cf 93       	push	r28
    4f1a:	00 d0       	rcall	.+0      	; 0x4f1c <ADC_enuSetRefVolt+0x6>
    4f1c:	cd b7       	in	r28, 0x3d	; 61
    4f1e:	de b7       	in	r29, 0x3e	; 62
    4f20:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    4f26:	a7 e2       	ldi	r26, 0x27	; 39
    4f28:	b0 e0       	ldi	r27, 0x00	; 0
    4f2a:	e7 e2       	ldi	r30, 0x27	; 39
    4f2c:	f0 e0       	ldi	r31, 0x00	; 0
    4f2e:	80 81       	ld	r24, Z
    4f30:	8f 73       	andi	r24, 0x3F	; 63
    4f32:	8c 93       	st	X, r24

	if ( Copy_u8RefVoltID >= AREF_REF && Copy_u8RefVoltID <= INTERNAL_REF )
    4f34:	8a 81       	ldd	r24, Y+2	; 0x02
    4f36:	88 23       	and	r24, r24
    4f38:	dc f4       	brge	.+54     	; 0x4f70 <ADC_enuSetRefVolt+0x5a>
    4f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3c:	83 38       	cpi	r24, 0x83	; 131
    4f3e:	c0 f4       	brcc	.+48     	; 0x4f70 <ADC_enuSetRefVolt+0x5a>
	{
		ADMUX |= ( (Copy_u8RefVoltID - AREF_REF) << ADC_REF_SEL_BITS);
    4f40:	a7 e2       	ldi	r26, 0x27	; 39
    4f42:	b0 e0       	ldi	r27, 0x00	; 0
    4f44:	e7 e2       	ldi	r30, 0x27	; 39
    4f46:	f0 e0       	ldi	r31, 0x00	; 0
    4f48:	80 81       	ld	r24, Z
    4f4a:	28 2f       	mov	r18, r24
    4f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f4e:	88 2f       	mov	r24, r24
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	80 58       	subi	r24, 0x80	; 128
    4f54:	90 40       	sbci	r25, 0x00	; 0
    4f56:	00 24       	eor	r0, r0
    4f58:	96 95       	lsr	r25
    4f5a:	87 95       	ror	r24
    4f5c:	07 94       	ror	r0
    4f5e:	96 95       	lsr	r25
    4f60:	87 95       	ror	r24
    4f62:	07 94       	ror	r0
    4f64:	98 2f       	mov	r25, r24
    4f66:	80 2d       	mov	r24, r0
    4f68:	82 2b       	or	r24, r18
    4f6a:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    4f6c:	19 82       	std	Y+1, r1	; 0x01
    4f6e:	02 c0       	rjmp	.+4      	; 0x4f74 <ADC_enuSetRefVolt+0x5e>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    4f70:	82 e0       	ldi	r24, 0x02	; 2
    4f72:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    4f74:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f76:	0f 90       	pop	r0
    4f78:	0f 90       	pop	r0
    4f7a:	cf 91       	pop	r28
    4f7c:	df 91       	pop	r29
    4f7e:	08 95       	ret

00004f80 <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    4f80:	df 93       	push	r29
    4f82:	cf 93       	push	r28
    4f84:	00 d0       	rcall	.+0      	; 0x4f86 <ADC_enuSelectChannel+0x6>
    4f86:	cd b7       	in	r28, 0x3d	; 61
    4f88:	de b7       	in	r29, 0x3e	; 62
    4f8a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ChannelID >= CH_00 && Copy_u8ChannelID <= CH_31 )
    4f90:	8a 81       	ldd	r24, Y+2	; 0x02
    4f92:	85 38       	cpi	r24, 0x85	; 133
    4f94:	b0 f0       	brcs	.+44     	; 0x4fc2 <ADC_enuSelectChannel+0x42>
    4f96:	8a 81       	ldd	r24, Y+2	; 0x02
    4f98:	85 3a       	cpi	r24, 0xA5	; 165
    4f9a:	98 f4       	brcc	.+38     	; 0x4fc2 <ADC_enuSelectChannel+0x42>
	{
		ADMUX &= ~( ADC_CH_SEL_BITS_MASK);
    4f9c:	a7 e2       	ldi	r26, 0x27	; 39
    4f9e:	b0 e0       	ldi	r27, 0x00	; 0
    4fa0:	e7 e2       	ldi	r30, 0x27	; 39
    4fa2:	f0 e0       	ldi	r31, 0x00	; 0
    4fa4:	80 81       	ld	r24, Z
    4fa6:	80 7e       	andi	r24, 0xE0	; 224
    4fa8:	8c 93       	st	X, r24
		ADMUX |= ( ( Copy_u8ChannelID - CH_00 ) << ADC_CH_SEL_BITS );
    4faa:	a7 e2       	ldi	r26, 0x27	; 39
    4fac:	b0 e0       	ldi	r27, 0x00	; 0
    4fae:	e7 e2       	ldi	r30, 0x27	; 39
    4fb0:	f0 e0       	ldi	r31, 0x00	; 0
    4fb2:	80 81       	ld	r24, Z
    4fb4:	98 2f       	mov	r25, r24
    4fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb8:	85 58       	subi	r24, 0x85	; 133
    4fba:	89 2b       	or	r24, r25
    4fbc:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK ;
    4fbe:	19 82       	std	Y+1, r1	; 0x01
    4fc0:	02 c0       	rjmp	.+4      	; 0x4fc6 <ADC_enuSelectChannel+0x46>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    4fc2:	82 e0       	ldi	r24, 0x02	; 2
    4fc4:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4fc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fc8:	0f 90       	pop	r0
    4fca:	0f 90       	pop	r0
    4fcc:	cf 91       	pop	r28
    4fce:	df 91       	pop	r29
    4fd0:	08 95       	ret

00004fd2 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    4fd2:	df 93       	push	r29
    4fd4:	cf 93       	push	r28
    4fd6:	cd b7       	in	r28, 0x3d	; 61
    4fd8:	de b7       	in	r29, 0x3e	; 62
	ASM_SET_BIT( _SFR_ADCSRA_ , ADC_START_CONVERSION_BIT );
    4fda:	36 9a       	sbi	0x06, 6	; 6

	return ES_OK;
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
}
    4fde:	cf 91       	pop	r28
    4fe0:	df 91       	pop	r29
    4fe2:	08 95       	ret

00004fe4 <ADC_enuEnableAutoTrigger>:

ES_t ADC_enuEnableAutoTrigger(u8 Copy_u8TriggerSource)
{
    4fe4:	df 93       	push	r29
    4fe6:	cf 93       	push	r28
    4fe8:	00 d0       	rcall	.+0      	; 0x4fea <ADC_enuEnableAutoTrigger+0x6>
    4fea:	cd b7       	in	r28, 0x3d	; 61
    4fec:	de b7       	in	r29, 0x3e	; 62
    4fee:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4ff0:	81 e0       	ldi	r24, 0x01	; 1
    4ff2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8TriggerSource >= FREE_RUNNING && Copy_u8TriggerSource <= TIMER1_CAPT_EVENT )
    4ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff6:	87 3a       	cpi	r24, 0xA7	; 167
    4ff8:	c0 f0       	brcs	.+48     	; 0x502a <ADC_enuEnableAutoTrigger+0x46>
    4ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffc:	8f 3a       	cpi	r24, 0xAF	; 175
    4ffe:	a8 f4       	brcc	.+42     	; 0x502a <ADC_enuEnableAutoTrigger+0x46>
	{
		ASM_CLR_BIT( _SFR_ADCSRA_ , ADC_AUTO_TRIGGER_EN_BIT );
    5000:	35 98       	cbi	0x06, 5	; 6

		SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    5002:	a0 e5       	ldi	r26, 0x50	; 80
    5004:	b0 e0       	ldi	r27, 0x00	; 0
    5006:	e0 e5       	ldi	r30, 0x50	; 80
    5008:	f0 e0       	ldi	r31, 0x00	; 0
    500a:	80 81       	ld	r24, Z
    500c:	88 7f       	andi	r24, 0xF8	; 248
    500e:	8c 93       	st	X, r24
		SFIOR |= ( ( Copy_u8TriggerSource - FREE_RUNNING ) << ADC_TRIGGER_SEL_BITS );
    5010:	a0 e5       	ldi	r26, 0x50	; 80
    5012:	b0 e0       	ldi	r27, 0x00	; 0
    5014:	e0 e5       	ldi	r30, 0x50	; 80
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	80 81       	ld	r24, Z
    501a:	98 2f       	mov	r25, r24
    501c:	8a 81       	ldd	r24, Y+2	; 0x02
    501e:	87 5a       	subi	r24, 0xA7	; 167
    5020:	89 2b       	or	r24, r25
    5022:	8c 93       	st	X, r24

		ASM_SET_BIT( _SFR_ADCSRA_ , ADC_AUTO_TRIGGER_EN_BIT );
    5024:	35 9a       	sbi	0x06, 5	; 6

		Local_enuErrorState = ES_OK;
    5026:	19 82       	std	Y+1, r1	; 0x01
    5028:	02 c0       	rjmp	.+4      	; 0x502e <ADC_enuEnableAutoTrigger+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    502a:	82 e0       	ldi	r24, 0x02	; 2
    502c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    502e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5030:	0f 90       	pop	r0
    5032:	0f 90       	pop	r0
    5034:	cf 91       	pop	r28
    5036:	df 91       	pop	r29
    5038:	08 95       	ret

0000503a <ADC_enuDisableAutoTrigger>:

ES_t ADC_enuDisableAutoTrigger(void)
{
    503a:	df 93       	push	r29
    503c:	cf 93       	push	r28
    503e:	cd b7       	in	r28, 0x3d	; 61
    5040:	de b7       	in	r29, 0x3e	; 62
	ASM_CLR_BIT( _SFR_ADCSRA_ , ADC_AUTO_TRIGGER_EN_BIT );
    5042:	35 98       	cbi	0x06, 5	; 6

	return ES_OK;
    5044:	80 e0       	ldi	r24, 0x00	; 0
}
    5046:	cf 91       	pop	r28
    5048:	df 91       	pop	r29
    504a:	08 95       	ret

0000504c <ADC_enuRead>:


ES_t ADC_enuRead(u16 *Copy_u16ADC_Value)
{
    504c:	df 93       	push	r29
    504e:	cf 93       	push	r28
    5050:	00 d0       	rcall	.+0      	; 0x5052 <ADC_enuRead+0x6>
    5052:	0f 92       	push	r0
    5054:	cd b7       	in	r28, 0x3d	; 61
    5056:	de b7       	in	r29, 0x3e	; 62
    5058:	9b 83       	std	Y+3, r25	; 0x03
    505a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u16ADC_Value != NULL )
    5060:	8a 81       	ldd	r24, Y+2	; 0x02
    5062:	9b 81       	ldd	r25, Y+3	; 0x03
    5064:	00 97       	sbiw	r24, 0x00	; 0
    5066:	e1 f0       	breq	.+56     	; 0x50a0 <ADC_enuRead+0x54>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u16ADC_Value  = ADCL;
    5068:	e4 e2       	ldi	r30, 0x24	; 36
    506a:	f0 e0       	ldi	r31, 0x00	; 0
    506c:	80 81       	ld	r24, Z
    506e:	88 2f       	mov	r24, r24
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	ea 81       	ldd	r30, Y+2	; 0x02
    5074:	fb 81       	ldd	r31, Y+3	; 0x03
    5076:	91 83       	std	Z+1, r25	; 0x01
    5078:	80 83       	st	Z, r24
			*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    507a:	ea 81       	ldd	r30, Y+2	; 0x02
    507c:	fb 81       	ldd	r31, Y+3	; 0x03
    507e:	20 81       	ld	r18, Z
    5080:	31 81       	ldd	r19, Z+1	; 0x01
    5082:	e5 e2       	ldi	r30, 0x25	; 37
    5084:	f0 e0       	ldi	r31, 0x00	; 0
    5086:	80 81       	ld	r24, Z
    5088:	88 2f       	mov	r24, r24
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	98 2f       	mov	r25, r24
    508e:	88 27       	eor	r24, r24
    5090:	82 2b       	or	r24, r18
    5092:	93 2b       	or	r25, r19
    5094:	ea 81       	ldd	r30, Y+2	; 0x02
    5096:	fb 81       	ldd	r31, Y+3	; 0x03
    5098:	91 83       	std	Z+1, r25	; 0x01
    509a:	80 83       	st	Z, r24

			#warning "ADC_enuRead(u16*): Optimumt Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

		#endif

		Local_enuErrorState = ES_OK ;
    509c:	19 82       	std	Y+1, r1	; 0x01
    509e:	02 c0       	rjmp	.+4      	; 0x50a4 <ADC_enuRead+0x58>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    50a0:	83 e0       	ldi	r24, 0x03	; 3
    50a2:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    50a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    50a6:	0f 90       	pop	r0
    50a8:	0f 90       	pop	r0
    50aa:	0f 90       	pop	r0
    50ac:	cf 91       	pop	r28
    50ae:	df 91       	pop	r29
    50b0:	08 95       	ret

000050b2 <ADC_enuReadHigh>:

ES_t ADC_enuReadHigh(u8 *Copy_u8ADC_Value)

{
    50b2:	df 93       	push	r29
    50b4:	cf 93       	push	r28
    50b6:	00 d0       	rcall	.+0      	; 0x50b8 <ADC_enuReadHigh+0x6>
    50b8:	0f 92       	push	r0
    50ba:	cd b7       	in	r28, 0x3d	; 61
    50bc:	de b7       	in	r29, 0x3e	; 62
    50be:	9b 83       	std	Y+3, r25	; 0x03
    50c0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ADC_Value != NULL )
    50c6:	8a 81       	ldd	r24, Y+2	; 0x02
    50c8:	9b 81       	ldd	r25, Y+3	; 0x03
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	01 f1       	breq	.+64     	; 0x510e <ADC_enuReadHigh+0x5c>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    50ce:	e4 e2       	ldi	r30, 0x24	; 36
    50d0:	f0 e0       	ldi	r31, 0x00	; 0
    50d2:	80 81       	ld	r24, Z
    50d4:	86 95       	lsr	r24
    50d6:	86 95       	lsr	r24
    50d8:	ea 81       	ldd	r30, Y+2	; 0x02
    50da:	fb 81       	ldd	r31, Y+3	; 0x03
    50dc:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    50de:	ea 81       	ldd	r30, Y+2	; 0x02
    50e0:	fb 81       	ldd	r31, Y+3	; 0x03
    50e2:	80 81       	ld	r24, Z
    50e4:	28 2f       	mov	r18, r24
    50e6:	e5 e2       	ldi	r30, 0x25	; 37
    50e8:	f0 e0       	ldi	r31, 0x00	; 0
    50ea:	80 81       	ld	r24, Z
    50ec:	88 2f       	mov	r24, r24
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	00 24       	eor	r0, r0
    50f2:	96 95       	lsr	r25
    50f4:	87 95       	ror	r24
    50f6:	07 94       	ror	r0
    50f8:	96 95       	lsr	r25
    50fa:	87 95       	ror	r24
    50fc:	07 94       	ror	r0
    50fe:	98 2f       	mov	r25, r24
    5100:	80 2d       	mov	r24, r0
    5102:	82 2b       	or	r24, r18
    5104:	ea 81       	ldd	r30, Y+2	; 0x02
    5106:	fb 81       	ldd	r31, Y+3	; 0x03
    5108:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    510a:	19 82       	std	Y+1, r1	; 0x01
    510c:	02 c0       	rjmp	.+4      	; 0x5112 <ADC_enuReadHigh+0x60>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    510e:	83 e0       	ldi	r24, 0x03	; 3
    5110:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5112:	89 81       	ldd	r24, Y+1	; 0x01
}
    5114:	0f 90       	pop	r0
    5116:	0f 90       	pop	r0
    5118:	0f 90       	pop	r0
    511a:	cf 91       	pop	r28
    511c:	df 91       	pop	r29
    511e:	08 95       	ret

00005120 <ADC_enuPollingRead>:

ES_t ADC_enuPollingRead(u16 *Copy_u16ADC_Value)
{
    5120:	df 93       	push	r29
    5122:	cf 93       	push	r28
    5124:	00 d0       	rcall	.+0      	; 0x5126 <ADC_enuPollingRead+0x6>
    5126:	0f 92       	push	r0
    5128:	cd b7       	in	r28, 0x3d	; 61
    512a:	de b7       	in	r29, 0x3e	; 62
    512c:	9b 83       	std	Y+3, r25	; 0x03
    512e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5130:	81 e0       	ldi	r24, 0x01	; 1
    5132:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    5134:	e6 e2       	ldi	r30, 0x26	; 38
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	80 81       	ld	r24, Z
    513a:	82 95       	swap	r24
    513c:	8f 70       	andi	r24, 0x0F	; 15
    513e:	88 2f       	mov	r24, r24
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	81 70       	andi	r24, 0x01	; 1
    5144:	90 70       	andi	r25, 0x00	; 0
    5146:	00 97       	sbiw	r24, 0x00	; 0
    5148:	a9 f3       	breq	.-22     	; 0x5134 <ADC_enuPollingRead+0x14>

	if( Copy_u16ADC_Value != NULL)
    514a:	8a 81       	ldd	r24, Y+2	; 0x02
    514c:	9b 81       	ldd	r25, Y+3	; 0x03
    514e:	00 97       	sbiw	r24, 0x00	; 0
    5150:	e1 f0       	breq	.+56     	; 0x518a <ADC_enuPollingRead+0x6a>
	{
#if ( ADC_ADJUST == RIGHT_ADJUST)

		*Copy_u16ADC_Value  = ADCL;
    5152:	e4 e2       	ldi	r30, 0x24	; 36
    5154:	f0 e0       	ldi	r31, 0x00	; 0
    5156:	80 81       	ld	r24, Z
    5158:	88 2f       	mov	r24, r24
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	ea 81       	ldd	r30, Y+2	; 0x02
    515e:	fb 81       	ldd	r31, Y+3	; 0x03
    5160:	91 83       	std	Z+1, r25	; 0x01
    5162:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    5164:	ea 81       	ldd	r30, Y+2	; 0x02
    5166:	fb 81       	ldd	r31, Y+3	; 0x03
    5168:	20 81       	ld	r18, Z
    516a:	31 81       	ldd	r19, Z+1	; 0x01
    516c:	e5 e2       	ldi	r30, 0x25	; 37
    516e:	f0 e0       	ldi	r31, 0x00	; 0
    5170:	80 81       	ld	r24, Z
    5172:	88 2f       	mov	r24, r24
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	98 2f       	mov	r25, r24
    5178:	88 27       	eor	r24, r24
    517a:	82 2b       	or	r24, r18
    517c:	93 2b       	or	r25, r19
    517e:	ea 81       	ldd	r30, Y+2	; 0x02
    5180:	fb 81       	ldd	r31, Y+3	; 0x03
    5182:	91 83       	std	Z+1, r25	; 0x01
    5184:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 2 );

		#warning "ADC_enuRead(u16*): Optimum Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

#endif
		Local_enuErrorState = ES_OK ;
    5186:	19 82       	std	Y+1, r1	; 0x01
    5188:	02 c0       	rjmp	.+4      	; 0x518e <ADC_enuPollingRead+0x6e>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    518a:	83 e0       	ldi	r24, 0x03	; 3
    518c:	89 83       	std	Y+1, r24	; 0x01

	ASM_SET_BIT( _SFR_ADCSRA_ , ADC_INT_FLAG_BIT );
    518e:	34 9a       	sbi	0x06, 4	; 6

	return Local_enuErrorState;
    5190:	89 81       	ldd	r24, Y+1	; 0x01
}
    5192:	0f 90       	pop	r0
    5194:	0f 90       	pop	r0
    5196:	0f 90       	pop	r0
    5198:	cf 91       	pop	r28
    519a:	df 91       	pop	r29
    519c:	08 95       	ret

0000519e <ADC_enuPollingReadHigh>:

ES_t ADC_enuPollingReadHigh(u8 *Copy_u8ADC_Value)

{
    519e:	df 93       	push	r29
    51a0:	cf 93       	push	r28
    51a2:	00 d0       	rcall	.+0      	; 0x51a4 <ADC_enuPollingReadHigh+0x6>
    51a4:	0f 92       	push	r0
    51a6:	cd b7       	in	r28, 0x3d	; 61
    51a8:	de b7       	in	r29, 0x3e	; 62
    51aa:	9b 83       	std	Y+3, r25	; 0x03
    51ac:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    51b2:	e6 e2       	ldi	r30, 0x26	; 38
    51b4:	f0 e0       	ldi	r31, 0x00	; 0
    51b6:	80 81       	ld	r24, Z
    51b8:	82 95       	swap	r24
    51ba:	8f 70       	andi	r24, 0x0F	; 15
    51bc:	88 2f       	mov	r24, r24
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	81 70       	andi	r24, 0x01	; 1
    51c2:	90 70       	andi	r25, 0x00	; 0
    51c4:	00 97       	sbiw	r24, 0x00	; 0
    51c6:	a9 f3       	breq	.-22     	; 0x51b2 <ADC_enuPollingReadHigh+0x14>

	if( Copy_u8ADC_Value != NULL)
    51c8:	8a 81       	ldd	r24, Y+2	; 0x02
    51ca:	9b 81       	ldd	r25, Y+3	; 0x03
    51cc:	00 97       	sbiw	r24, 0x00	; 0
    51ce:	01 f1       	breq	.+64     	; 0x5210 <ADC_enuPollingReadHigh+0x72>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    51d0:	e4 e2       	ldi	r30, 0x24	; 36
    51d2:	f0 e0       	ldi	r31, 0x00	; 0
    51d4:	80 81       	ld	r24, Z
    51d6:	86 95       	lsr	r24
    51d8:	86 95       	lsr	r24
    51da:	ea 81       	ldd	r30, Y+2	; 0x02
    51dc:	fb 81       	ldd	r31, Y+3	; 0x03
    51de:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    51e0:	ea 81       	ldd	r30, Y+2	; 0x02
    51e2:	fb 81       	ldd	r31, Y+3	; 0x03
    51e4:	80 81       	ld	r24, Z
    51e6:	28 2f       	mov	r18, r24
    51e8:	e5 e2       	ldi	r30, 0x25	; 37
    51ea:	f0 e0       	ldi	r31, 0x00	; 0
    51ec:	80 81       	ld	r24, Z
    51ee:	88 2f       	mov	r24, r24
    51f0:	90 e0       	ldi	r25, 0x00	; 0
    51f2:	00 24       	eor	r0, r0
    51f4:	96 95       	lsr	r25
    51f6:	87 95       	ror	r24
    51f8:	07 94       	ror	r0
    51fa:	96 95       	lsr	r25
    51fc:	87 95       	ror	r24
    51fe:	07 94       	ror	r0
    5200:	98 2f       	mov	r25, r24
    5202:	80 2d       	mov	r24, r0
    5204:	82 2b       	or	r24, r18
    5206:	ea 81       	ldd	r30, Y+2	; 0x02
    5208:	fb 81       	ldd	r31, Y+3	; 0x03
    520a:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    520c:	19 82       	std	Y+1, r1	; 0x01
    520e:	02 c0       	rjmp	.+4      	; 0x5214 <ADC_enuPollingReadHigh+0x76>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    5210:	83 e0       	ldi	r24, 0x03	; 3
    5212:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    5214:	e6 e2       	ldi	r30, 0x26	; 38
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	80 81       	ld	r24, Z
    521a:	82 95       	swap	r24
    521c:	8f 70       	andi	r24, 0x0F	; 15
    521e:	88 2f       	mov	r24, r24
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	81 70       	andi	r24, 0x01	; 1
    5224:	90 70       	andi	r25, 0x00	; 0
    5226:	00 97       	sbiw	r24, 0x00	; 0
    5228:	a9 f3       	breq	.-22     	; 0x5214 <ADC_enuPollingReadHigh+0x76>

	return Local_enuErrorState;
    522a:	89 81       	ldd	r24, Y+1	; 0x01
}
    522c:	0f 90       	pop	r0
    522e:	0f 90       	pop	r0
    5230:	0f 90       	pop	r0
    5232:	cf 91       	pop	r28
    5234:	df 91       	pop	r29
    5236:	08 95       	ret

00005238 <ADC_enuCallBack>:


ES_t ADC_enuCallBack(void ( *Copy_pFunAppFun )(void))
{
    5238:	df 93       	push	r29
    523a:	cf 93       	push	r28
    523c:	00 d0       	rcall	.+0      	; 0x523e <ADC_enuCallBack+0x6>
    523e:	0f 92       	push	r0
    5240:	cd b7       	in	r28, 0x3d	; 61
    5242:	de b7       	in	r29, 0x3e	; 62
    5244:	9b 83       	std	Y+3, r25	; 0x03
    5246:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5248:	81 e0       	ldi	r24, 0x01	; 1
    524a:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pFunAppFun != NULL)
    524c:	8a 81       	ldd	r24, Y+2	; 0x02
    524e:	9b 81       	ldd	r25, Y+3	; 0x03
    5250:	00 97       	sbiw	r24, 0x00	; 0
    5252:	41 f0       	breq	.+16     	; 0x5264 <ADC_enuCallBack+0x2c>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    5254:	8a 81       	ldd	r24, Y+2	; 0x02
    5256:	9b 81       	ldd	r25, Y+3	; 0x03
    5258:	90 93 3c 02 	sts	0x023C, r25
    525c:	80 93 3b 02 	sts	0x023B, r24
		Local_enuErrorState = ES_OK;
    5260:	19 82       	std	Y+1, r1	; 0x01
    5262:	02 c0       	rjmp	.+4      	; 0x5268 <ADC_enuCallBack+0x30>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    5264:	83 e0       	ldi	r24, 0x03	; 3
    5266:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    5268:	89 81       	ldd	r24, Y+1	; 0x01
}
    526a:	0f 90       	pop	r0
    526c:	0f 90       	pop	r0
    526e:	0f 90       	pop	r0
    5270:	cf 91       	pop	r28
    5272:	df 91       	pop	r29
    5274:	08 95       	ret

00005276 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    5276:	df 93       	push	r29
    5278:	cf 93       	push	r28
    527a:	cd b7       	in	r28, 0x3d	; 61
    527c:	de b7       	in	r29, 0x3e	; 62
	ASM_SET_BIT( _SFR_ADCSRA_ , ADC_ENABLE_BIT );
    527e:	37 9a       	sbi	0x06, 7	; 6

	return ES_OK;
    5280:	80 e0       	ldi	r24, 0x00	; 0
}
    5282:	cf 91       	pop	r28
    5284:	df 91       	pop	r29
    5286:	08 95       	ret

00005288 <ADC_enuDisable>:

ES_t ADC_enuDisable(void)

{
    5288:	df 93       	push	r29
    528a:	cf 93       	push	r28
    528c:	cd b7       	in	r28, 0x3d	; 61
    528e:	de b7       	in	r29, 0x3e	; 62
	ASM_CLR_BIT( _SFR_ADCSRA_ , ADC_ENABLE_BIT );
    5290:	37 98       	cbi	0x06, 7	; 6

	return ES_OK;
    5292:	80 e0       	ldi	r24, 0x00	; 0
}
    5294:	cf 91       	pop	r28
    5296:	df 91       	pop	r29
    5298:	08 95       	ret

0000529a <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    529a:	df 93       	push	r29
    529c:	cf 93       	push	r28
    529e:	cd b7       	in	r28, 0x3d	; 61
    52a0:	de b7       	in	r29, 0x3e	; 62
	ASM_SET_BIT( _SFR_ADCSRA_ , ADC_ENABLE_BIT );
    52a2:	37 9a       	sbi	0x06, 7	; 6

	return ES_OK;
    52a4:	80 e0       	ldi	r24, 0x00	; 0
}
    52a6:	cf 91       	pop	r28
    52a8:	df 91       	pop	r29
    52aa:	08 95       	ret

000052ac <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    52ac:	df 93       	push	r29
    52ae:	cf 93       	push	r28
    52b0:	cd b7       	in	r28, 0x3d	; 61
    52b2:	de b7       	in	r29, 0x3e	; 62
	ASM_CLR_BIT( _SFR_ADCSRA_ , ADC_ENABLE_BIT );
    52b4:	37 98       	cbi	0x06, 7	; 6

	return ES_OK;
    52b6:	80 e0       	ldi	r24, 0x00	; 0
}
    52b8:	cf 91       	pop	r28
    52ba:	df 91       	pop	r29
    52bc:	08 95       	ret

000052be <__vector_16>:


void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    52be:	1f 92       	push	r1
    52c0:	0f 92       	push	r0
    52c2:	0f b6       	in	r0, 0x3f	; 63
    52c4:	0f 92       	push	r0
    52c6:	11 24       	eor	r1, r1
    52c8:	2f 93       	push	r18
    52ca:	3f 93       	push	r19
    52cc:	4f 93       	push	r20
    52ce:	5f 93       	push	r21
    52d0:	6f 93       	push	r22
    52d2:	7f 93       	push	r23
    52d4:	8f 93       	push	r24
    52d6:	9f 93       	push	r25
    52d8:	af 93       	push	r26
    52da:	bf 93       	push	r27
    52dc:	ef 93       	push	r30
    52de:	ff 93       	push	r31
    52e0:	df 93       	push	r29
    52e2:	cf 93       	push	r28
    52e4:	cd b7       	in	r28, 0x3d	; 61
    52e6:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pFunISRFun != NULL)
    52e8:	80 91 3b 02 	lds	r24, 0x023B
    52ec:	90 91 3c 02 	lds	r25, 0x023C
    52f0:	00 97       	sbiw	r24, 0x00	; 0
    52f2:	29 f0       	breq	.+10     	; 0x52fe <__vector_16+0x40>
		ADC_pFunISRFun();
    52f4:	e0 91 3b 02 	lds	r30, 0x023B
    52f8:	f0 91 3c 02 	lds	r31, 0x023C
    52fc:	09 95       	icall
}
    52fe:	cf 91       	pop	r28
    5300:	df 91       	pop	r29
    5302:	ff 91       	pop	r31
    5304:	ef 91       	pop	r30
    5306:	bf 91       	pop	r27
    5308:	af 91       	pop	r26
    530a:	9f 91       	pop	r25
    530c:	8f 91       	pop	r24
    530e:	7f 91       	pop	r23
    5310:	6f 91       	pop	r22
    5312:	5f 91       	pop	r21
    5314:	4f 91       	pop	r20
    5316:	3f 91       	pop	r19
    5318:	2f 91       	pop	r18
    531a:	0f 90       	pop	r0
    531c:	0f be       	out	0x3f, r0	; 63
    531e:	0f 90       	pop	r0
    5320:	1f 90       	pop	r1
    5322:	18 95       	reti

00005324 <Switch_enuInit>:
extern u8 Switch_u8SwitchesMaxNum ;
extern Switch_t Switch[];


ES_t Switch_enuInit(void)
{
    5324:	df 93       	push	r29
    5326:	cf 93       	push	r28
    5328:	00 d0       	rcall	.+0      	; 0x532a <Switch_enuInit+0x6>
    532a:	00 d0       	rcall	.+0      	; 0x532c <Switch_enuInit+0x8>
    532c:	cd b7       	in	r28, 0x3d	; 61
    532e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    5330:	81 e0       	ldi	r24, 0x01	; 1
    5332:	8a 83       	std	Y+2, r24	; 0x02
    5334:	51 c0       	rjmp	.+162    	; 0x53d8 <Switch_enuInit+0xb4>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    5336:	89 81       	ldd	r24, Y+1	; 0x01
    5338:	28 2f       	mov	r18, r24
    533a:	30 e0       	ldi	r19, 0x00	; 0
    533c:	c9 01       	movw	r24, r18
    533e:	88 0f       	add	r24, r24
    5340:	99 1f       	adc	r25, r25
    5342:	82 0f       	add	r24, r18
    5344:	93 1f       	adc	r25, r19
    5346:	fc 01       	movw	r30, r24
    5348:	ee 55       	subi	r30, 0x5E	; 94
    534a:	fe 4f       	sbci	r31, 0xFE	; 254
    534c:	40 81       	ld	r20, Z
    534e:	89 81       	ldd	r24, Y+1	; 0x01
    5350:	28 2f       	mov	r18, r24
    5352:	30 e0       	ldi	r19, 0x00	; 0
    5354:	c9 01       	movw	r24, r18
    5356:	88 0f       	add	r24, r24
    5358:	99 1f       	adc	r25, r25
    535a:	82 0f       	add	r24, r18
    535c:	93 1f       	adc	r25, r19
    535e:	fc 01       	movw	r30, r24
    5360:	ed 55       	subi	r30, 0x5D	; 93
    5362:	fe 4f       	sbci	r31, 0xFE	; 254
    5364:	90 81       	ld	r25, Z
    5366:	84 2f       	mov	r24, r20
    5368:	69 2f       	mov	r22, r25
    536a:	40 e0       	ldi	r20, 0x00	; 0
    536c:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    5370:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    5372:	89 81       	ldd	r24, Y+1	; 0x01
    5374:	28 2f       	mov	r18, r24
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	c9 01       	movw	r24, r18
    537a:	88 0f       	add	r24, r24
    537c:	99 1f       	adc	r25, r25
    537e:	82 0f       	add	r24, r18
    5380:	93 1f       	adc	r25, r19
    5382:	fc 01       	movw	r30, r24
    5384:	ee 55       	subi	r30, 0x5E	; 94
    5386:	fe 4f       	sbci	r31, 0xFE	; 254
    5388:	50 81       	ld	r21, Z
    538a:	89 81       	ldd	r24, Y+1	; 0x01
    538c:	28 2f       	mov	r18, r24
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	c9 01       	movw	r24, r18
    5392:	88 0f       	add	r24, r24
    5394:	99 1f       	adc	r25, r25
    5396:	82 0f       	add	r24, r18
    5398:	93 1f       	adc	r25, r19
    539a:	fc 01       	movw	r30, r24
    539c:	ed 55       	subi	r30, 0x5D	; 93
    539e:	fe 4f       	sbci	r31, 0xFE	; 254
    53a0:	40 81       	ld	r20, Z
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	28 2f       	mov	r18, r24
    53a6:	30 e0       	ldi	r19, 0x00	; 0
    53a8:	c9 01       	movw	r24, r18
    53aa:	88 0f       	add	r24, r24
    53ac:	99 1f       	adc	r25, r25
    53ae:	82 0f       	add	r24, r18
    53b0:	93 1f       	adc	r25, r19
    53b2:	fc 01       	movw	r30, r24
    53b4:	ec 55       	subi	r30, 0x5C	; 92
    53b6:	fe 4f       	sbci	r31, 0xFE	; 254
    53b8:	90 81       	ld	r25, Z
    53ba:	85 2f       	mov	r24, r21
    53bc:	64 2f       	mov	r22, r20
    53be:	49 2f       	mov	r20, r25
    53c0:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    53c4:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    53c6:	8b 81       	ldd	r24, Y+3	; 0x03
    53c8:	88 23       	and	r24, r24
    53ca:	61 f4       	brne	.+24     	; 0x53e4 <Switch_enuInit+0xc0>
    53cc:	8c 81       	ldd	r24, Y+4	; 0x04
    53ce:	88 23       	and	r24, r24
    53d0:	49 f4       	brne	.+18     	; 0x53e4 <Switch_enuInit+0xc0>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    53d2:	89 81       	ldd	r24, Y+1	; 0x01
    53d4:	8f 5f       	subi	r24, 0xFF	; 255
    53d6:	89 83       	std	Y+1, r24	; 0x01
    53d8:	90 91 a1 01 	lds	r25, 0x01A1
    53dc:	89 81       	ldd	r24, Y+1	; 0x01
    53de:	89 17       	cp	r24, r25
    53e0:	08 f4       	brcc	.+2      	; 0x53e4 <Switch_enuInit+0xc0>
    53e2:	a9 cf       	rjmp	.-174    	; 0x5336 <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    53e4:	8b 81       	ldd	r24, Y+3	; 0x03
    53e6:	88 23       	and	r24, r24
    53e8:	21 f4       	brne	.+8      	; 0x53f2 <Switch_enuInit+0xce>
    53ea:	8c 81       	ldd	r24, Y+4	; 0x04
    53ec:	88 23       	and	r24, r24
    53ee:	09 f4       	brne	.+2      	; 0x53f2 <Switch_enuInit+0xce>
		Local_enuErrorState = ES_OK;
    53f0:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    53f2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    53f4:	0f 90       	pop	r0
    53f6:	0f 90       	pop	r0
    53f8:	0f 90       	pop	r0
    53fa:	0f 90       	pop	r0
    53fc:	cf 91       	pop	r28
    53fe:	df 91       	pop	r29
    5400:	08 95       	ret

00005402 <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 *Copy_pu8SwitchValue)
{
    5402:	df 93       	push	r29
    5404:	cf 93       	push	r28
    5406:	00 d0       	rcall	.+0      	; 0x5408 <Switch_enuGetPressed+0x6>
    5408:	00 d0       	rcall	.+0      	; 0x540a <Switch_enuGetPressed+0x8>
    540a:	cd b7       	in	r28, 0x3d	; 61
    540c:	de b7       	in	r29, 0x3e	; 62
    540e:	8a 83       	std	Y+2, r24	; 0x02
    5410:	7c 83       	std	Y+4, r23	; 0x04
    5412:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	89 83       	std	Y+1, r24	; 0x01


	if( (Copy_u8SwitchNum -= SWITCH_ZERO) < Switch_u8SwitchesMaxNum )
    5418:	8a 81       	ldd	r24, Y+2	; 0x02
    541a:	89 5c       	subi	r24, 0xC9	; 201
    541c:	8a 83       	std	Y+2, r24	; 0x02
    541e:	90 91 a1 01 	lds	r25, 0x01A1
    5422:	8a 81       	ldd	r24, Y+2	; 0x02
    5424:	89 17       	cp	r24, r25
    5426:	08 f5       	brcc	.+66     	; 0x546a <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState =  DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue ) ;
    5428:	8a 81       	ldd	r24, Y+2	; 0x02
    542a:	28 2f       	mov	r18, r24
    542c:	30 e0       	ldi	r19, 0x00	; 0
    542e:	c9 01       	movw	r24, r18
    5430:	88 0f       	add	r24, r24
    5432:	99 1f       	adc	r25, r25
    5434:	82 0f       	add	r24, r18
    5436:	93 1f       	adc	r25, r19
    5438:	fc 01       	movw	r30, r24
    543a:	ee 55       	subi	r30, 0x5E	; 94
    543c:	fe 4f       	sbci	r31, 0xFE	; 254
    543e:	40 81       	ld	r20, Z
    5440:	8a 81       	ldd	r24, Y+2	; 0x02
    5442:	28 2f       	mov	r18, r24
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	c9 01       	movw	r24, r18
    5448:	88 0f       	add	r24, r24
    544a:	99 1f       	adc	r25, r25
    544c:	82 0f       	add	r24, r18
    544e:	93 1f       	adc	r25, r19
    5450:	fc 01       	movw	r30, r24
    5452:	ed 55       	subi	r30, 0x5D	; 93
    5454:	fe 4f       	sbci	r31, 0xFE	; 254
    5456:	90 81       	ld	r25, Z
    5458:	2b 81       	ldd	r18, Y+3	; 0x03
    545a:	3c 81       	ldd	r19, Y+4	; 0x04
    545c:	84 2f       	mov	r24, r20
    545e:	69 2f       	mov	r22, r25
    5460:	a9 01       	movw	r20, r18
    5462:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <DIO_enuGetPinValue>
    5466:	89 83       	std	Y+1, r24	; 0x01
    5468:	02 c0       	rjmp	.+4      	; 0x546e <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    546a:	82 e0       	ldi	r24, 0x02	; 2
    546c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    546e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5470:	0f 90       	pop	r0
    5472:	0f 90       	pop	r0
    5474:	0f 90       	pop	r0
    5476:	0f 90       	pop	r0
    5478:	cf 91       	pop	r28
    547a:	df 91       	pop	r29
    547c:	08 95       	ret

0000547e <SevSeg_enuInit>:

extern u8 ModuleValuePins;
extern SSegModule_t SSegModule;

ES_t SevSeg_enuInit(void)
{
    547e:	df 93       	push	r29
    5480:	cf 93       	push	r28
    5482:	00 d0       	rcall	.+0      	; 0x5484 <SevSeg_enuInit+0x6>
    5484:	cd b7       	in	r28, 0x3d	; 61
    5486:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	8a 83       	std	Y+2, r24	; 0x02

	for( u8 Local_u8PinNum = 0 ; Local_u8PinNum < ModuleValuePins ; Local_u8PinNum++ )
    548c:	19 82       	std	Y+1, r1	; 0x01
    548e:	37 c0       	rjmp	.+110    	; 0x54fe <SevSeg_enuInit+0x80>
	{
		if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule.Value_Conf[Local_u8PinNum].InputGrp ,
    5490:	89 81       	ldd	r24, Y+1	; 0x01
    5492:	88 2f       	mov	r24, r24
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	88 0f       	add	r24, r24
    5498:	99 1f       	adc	r25, r25
    549a:	fc 01       	movw	r30, r24
    549c:	e4 55       	subi	r30, 0x54	; 84
    549e:	fe 4f       	sbci	r31, 0xFE	; 254
    54a0:	20 81       	ld	r18, Z
    54a2:	89 81       	ldd	r24, Y+1	; 0x01
    54a4:	88 2f       	mov	r24, r24
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	88 0f       	add	r24, r24
    54aa:	99 1f       	adc	r25, r25
    54ac:	fc 01       	movw	r30, r24
    54ae:	e3 55       	subi	r30, 0x53	; 83
    54b0:	fe 4f       	sbci	r31, 0xFE	; 254
    54b2:	90 81       	ld	r25, Z
    54b4:	82 2f       	mov	r24, r18
    54b6:	69 2f       	mov	r22, r25
    54b8:	41 e0       	ldi	r20, 0x01	; 1
    54ba:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    54be:	88 23       	and	r24, r24
    54c0:	c1 f4       	brne	.+48     	; 0x54f2 <SevSeg_enuInit+0x74>
													SSegModule.Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Value_Conf[Local_u8PinNum].InputGrp ,
    54c2:	89 81       	ldd	r24, Y+1	; 0x01
    54c4:	88 2f       	mov	r24, r24
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	88 0f       	add	r24, r24
    54ca:	99 1f       	adc	r25, r25
    54cc:	fc 01       	movw	r30, r24
    54ce:	e4 55       	subi	r30, 0x54	; 84
    54d0:	fe 4f       	sbci	r31, 0xFE	; 254
    54d2:	20 81       	ld	r18, Z
    54d4:	89 81       	ldd	r24, Y+1	; 0x01
    54d6:	88 2f       	mov	r24, r24
    54d8:	90 e0       	ldi	r25, 0x00	; 0
    54da:	88 0f       	add	r24, r24
    54dc:	99 1f       	adc	r25, r25
    54de:	fc 01       	movw	r30, r24
    54e0:	e3 55       	subi	r30, 0x53	; 83
    54e2:	fe 4f       	sbci	r31, 0xFE	; 254
    54e4:	90 81       	ld	r25, Z
    54e6:	82 2f       	mov	r24, r18
    54e8:	69 2f       	mov	r22, r25
    54ea:	40 e0       	ldi	r20, 0x00	; 0
    54ec:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    54f0:	8a 83       	std	Y+2, r24	; 0x02
													SSegModule.Value_Conf[Local_u8PinNum].InputPin , SEGMENT_OFF );
		if( Local_enuErrorState != ES_OK) break;
    54f2:	8a 81       	ldd	r24, Y+2	; 0x02
    54f4:	88 23       	and	r24, r24
    54f6:	41 f4       	brne	.+16     	; 0x5508 <SevSeg_enuInit+0x8a>

ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for( u8 Local_u8PinNum = 0 ; Local_u8PinNum < ModuleValuePins ; Local_u8PinNum++ )
    54f8:	89 81       	ldd	r24, Y+1	; 0x01
    54fa:	8f 5f       	subi	r24, 0xFF	; 255
    54fc:	89 83       	std	Y+1, r24	; 0x01
    54fe:	90 91 ab 01 	lds	r25, 0x01AB
    5502:	89 81       	ldd	r24, Y+1	; 0x01
    5504:	89 17       	cp	r24, r25
    5506:	20 f2       	brcs	.-120    	; 0x5490 <SevSeg_enuInit+0x12>
													SSegModule.Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Value_Conf[Local_u8PinNum].InputGrp ,
													SSegModule.Value_Conf[Local_u8PinNum].InputPin , SEGMENT_OFF );
		if( Local_enuErrorState != ES_OK) break;
	}
	if( Local_enuErrorState == ES_OK)
    5508:	8a 81       	ldd	r24, Y+2	; 0x02
    550a:	88 23       	and	r24, r24
    550c:	99 f4       	brne	.+38     	; 0x5534 <SevSeg_enuInit+0xb6>
	{
		if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule.DIP_Conf.InputGrp ,
    550e:	80 91 b4 01 	lds	r24, 0x01B4
    5512:	90 91 b5 01 	lds	r25, 0x01B5
    5516:	69 2f       	mov	r22, r25
    5518:	41 e0       	ldi	r20, 0x01	; 1
    551a:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    551e:	88 23       	and	r24, r24
    5520:	49 f4       	brne	.+18     	; 0x5534 <SevSeg_enuInit+0xb6>
													SSegModule.DIP_Conf.InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.DIP_Conf.InputGrp ,
    5522:	80 91 b4 01 	lds	r24, 0x01B4
    5526:	90 91 b5 01 	lds	r25, 0x01B5
    552a:	69 2f       	mov	r22, r25
    552c:	41 e0       	ldi	r20, 0x01	; 1
    552e:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    5532:	8a 83       	std	Y+2, r24	; 0x02
													SSegModule.DIP_Conf.InputPin , DIP_OFF );
	}
	if( Local_enuErrorState == ES_OK)
    5534:	8a 81       	ldd	r24, Y+2	; 0x02
    5536:	88 23       	and	r24, r24
    5538:	99 f4       	brne	.+38     	; 0x5560 <SevSeg_enuInit+0xe2>
	{
		if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule.Enable1_Conf.InputGrp ,
    553a:	80 91 b6 01 	lds	r24, 0x01B6
    553e:	90 91 b7 01 	lds	r25, 0x01B7
    5542:	69 2f       	mov	r22, r25
    5544:	41 e0       	ldi	r20, 0x01	; 1
    5546:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    554a:	88 23       	and	r24, r24
    554c:	49 f4       	brne	.+18     	; 0x5560 <SevSeg_enuInit+0xe2>
													SSegModule.Enable1_Conf.InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable1_Conf.InputGrp ,
    554e:	80 91 b6 01 	lds	r24, 0x01B6
    5552:	90 91 b7 01 	lds	r25, 0x01B7
    5556:	69 2f       	mov	r22, r25
    5558:	40 e0       	ldi	r20, 0x00	; 0
    555a:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    555e:	8a 83       	std	Y+2, r24	; 0x02
													SSegModule.Enable1_Conf.InputPin , MOD_EN_OFF );
	}
	if( Local_enuErrorState == ES_OK)
    5560:	8a 81       	ldd	r24, Y+2	; 0x02
    5562:	88 23       	and	r24, r24
    5564:	99 f4       	brne	.+38     	; 0x558c <SevSeg_enuInit+0x10e>
	{
		if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule.Enable2_Conf.InputGrp ,
    5566:	80 91 b8 01 	lds	r24, 0x01B8
    556a:	90 91 b9 01 	lds	r25, 0x01B9
    556e:	69 2f       	mov	r22, r25
    5570:	41 e0       	ldi	r20, 0x01	; 1
    5572:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    5576:	88 23       	and	r24, r24
    5578:	49 f4       	brne	.+18     	; 0x558c <SevSeg_enuInit+0x10e>
													SSegModule.Enable2_Conf.InputPin , DIO_u8OUTPUT) )
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable2_Conf.InputGrp ,
    557a:	80 91 b8 01 	lds	r24, 0x01B8
    557e:	90 91 b9 01 	lds	r25, 0x01B9
    5582:	69 2f       	mov	r22, r25
    5584:	40 e0       	ldi	r20, 0x00	; 0
    5586:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    558a:	8a 83       	std	Y+2, r24	; 0x02
													SSegModule.Enable2_Conf.InputPin , MOD_EN_OFF );
	}

	return Local_enuErrorState ;//DONE
    558c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	cf 91       	pop	r28
    5594:	df 91       	pop	r29
    5596:	08 95       	ret

00005598 <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue( u8 Copy_u8SevSegDigitValue )
{
    5598:	df 93       	push	r29
    559a:	cf 93       	push	r28
    559c:	0f 92       	push	r0
    559e:	cd b7       	in	r28, 0x3d	; 61
    55a0:	de b7       	in	r29, 0x3e	; 62
    55a2:	89 83       	std	Y+1, r24	; 0x01
					:"M" ( _SFR_PIN_B_ ),		\
					 "r" ( &Copy_u8SevSegDigitValue ),\
					 "M" ( _SFR_PORT_B_ )		\
				);
*/
	PORT_B = ( (PORT_B = _u8_LOW_NIPPLE_VALUE_( PORT_B ) )) | ( _u8_LOW_NIPPLE_VALUE_( Copy_u8SevSegDigitValue ) << _NIPPLE_SHIFT_ ) ;
    55a4:	48 e3       	ldi	r20, 0x38	; 56
    55a6:	50 e0       	ldi	r21, 0x00	; 0
    55a8:	a8 e3       	ldi	r26, 0x38	; 56
    55aa:	b0 e0       	ldi	r27, 0x00	; 0
    55ac:	e8 e3       	ldi	r30, 0x38	; 56
    55ae:	f0 e0       	ldi	r31, 0x00	; 0
    55b0:	80 81       	ld	r24, Z
    55b2:	8f 70       	andi	r24, 0x0F	; 15
    55b4:	8c 93       	st	X, r24
    55b6:	8c 91       	ld	r24, X
    55b8:	28 2f       	mov	r18, r24
    55ba:	89 81       	ldd	r24, Y+1	; 0x01
    55bc:	88 2f       	mov	r24, r24
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	82 95       	swap	r24
    55c2:	92 95       	swap	r25
    55c4:	90 7f       	andi	r25, 0xF0	; 240
    55c6:	98 27       	eor	r25, r24
    55c8:	80 7f       	andi	r24, 0xF0	; 240
    55ca:	98 27       	eor	r25, r24
    55cc:	82 2b       	or	r24, r18
    55ce:	fa 01       	movw	r30, r20
    55d0:	80 83       	st	Z, r24

	return ES_OK ;//DONE
    55d2:	80 e0       	ldi	r24, 0x00	; 0
}
    55d4:	0f 90       	pop	r0
    55d6:	cf 91       	pop	r28
    55d8:	df 91       	pop	r29
    55da:	08 95       	ret

000055dc <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8SevSegDIPValue)
{
    55dc:	df 93       	push	r29
    55de:	cf 93       	push	r28
    55e0:	00 d0       	rcall	.+0      	; 0x55e2 <SevSeg_enuSetDIPValue+0x6>
    55e2:	cd b7       	in	r28, 0x3d	; 61
    55e4:	de b7       	in	r29, 0x3e	; 62
    55e6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    55e8:	81 e0       	ldi	r24, 0x01	; 1
    55ea:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF )
    55ec:	8a 81       	ldd	r24, Y+2	; 0x02
    55ee:	88 23       	and	r24, r24
    55f0:	19 f0       	breq	.+6      	; 0x55f8 <SevSeg_enuSetDIPValue+0x1c>
    55f2:	8a 81       	ldd	r24, Y+2	; 0x02
    55f4:	81 30       	cpi	r24, 0x01	; 1
    55f6:	51 f4       	brne	.+20     	; 0x560c <SevSeg_enuSetDIPValue+0x30>
	{
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.DIP_Conf.InputGrp ,
    55f8:	80 91 b4 01 	lds	r24, 0x01B4
    55fc:	90 91 b5 01 	lds	r25, 0x01B5
    5600:	69 2f       	mov	r22, r25
    5602:	4a 81       	ldd	r20, Y+2	; 0x02
    5604:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    5608:	89 83       	std	Y+1, r24	; 0x01
    560a:	02 c0       	rjmp	.+4      	; 0x5610 <SevSeg_enuSetDIPValue+0x34>
													SSegModule.DIP_Conf.InputPin , Copy_u8SevSegDIPValue );
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    560c:	82 e0       	ldi	r24, 0x02	; 2
    560e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    5610:	89 81       	ldd	r24, Y+1	; 0x01
}
    5612:	0f 90       	pop	r0
    5614:	0f 90       	pop	r0
    5616:	cf 91       	pop	r28
    5618:	df 91       	pop	r29
    561a:	08 95       	ret

0000561c <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    561c:	df 93       	push	r29
    561e:	cf 93       	push	r28
    5620:	00 d0       	rcall	.+0      	; 0x5622 <SevSeg_enuFrameDelay+0x6>
    5622:	00 d0       	rcall	.+0      	; 0x5624 <SevSeg_enuFrameDelay+0x8>
    5624:	cd b7       	in	r28, 0x3d	; 61
    5626:	de b7       	in	r29, 0x3e	; 62
    5628:	8a 83       	std	Y+2, r24	; 0x02
    562a:	7c 83       	std	Y+4, r23	; 0x04
    562c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    562e:	81 e0       	ldi	r24, 0x01	; 1
    5630:	89 83       	std	Y+1, r24	; 0x01

	*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    5632:	8a 81       	ldd	r24, Y+2	; 0x02
    5634:	88 2f       	mov	r24, r24
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	ac 01       	movw	r20, r24
    563a:	4d 5e       	subi	r20, 0xED	; 237
    563c:	5f 4f       	sbci	r21, 0xFF	; 255
    563e:	8a 81       	ldd	r24, Y+2	; 0x02
    5640:	28 2f       	mov	r18, r24
    5642:	30 e0       	ldi	r19, 0x00	; 0
    5644:	ca 01       	movw	r24, r20
    5646:	b9 01       	movw	r22, r18
    5648:	0e 94 ab 34 	call	0x6956	; 0x6956 <__divmodhi4>
    564c:	cb 01       	movw	r24, r22
    564e:	eb 81       	ldd	r30, Y+3	; 0x03
    5650:	fc 81       	ldd	r31, Y+4	; 0x04
    5652:	80 83       	st	Z, r24

	Local_enuErrorState=ES_OK;
    5654:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;//DONE
    5656:	89 81       	ldd	r24, Y+1	; 0x01
}
    5658:	0f 90       	pop	r0
    565a:	0f 90       	pop	r0
    565c:	0f 90       	pop	r0
    565e:	0f 90       	pop	r0
    5660:	cf 91       	pop	r28
    5662:	df 91       	pop	r29
    5664:	08 95       	ret

00005666 <SevSeg_enuModuleEnable>:

ES_t SevSeg_enuModuleEnable(u8 Copy_u8ModuleNum )
{
    5666:	df 93       	push	r29
    5668:	cf 93       	push	r28
    566a:	00 d0       	rcall	.+0      	; 0x566c <SevSeg_enuModuleEnable+0x6>
    566c:	cd b7       	in	r28, 0x3d	; 61
    566e:	de b7       	in	r29, 0x3e	; 62
    5670:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    5672:	81 e0       	ldi	r24, 0x01	; 1
    5674:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ModuleNum == MODULE_1)
    5676:	8a 81       	ldd	r24, Y+2	; 0x02
    5678:	8b 30       	cpi	r24, 0x0B	; 11
    567a:	51 f4       	brne	.+20     	; 0x5690 <SevSeg_enuModuleEnable+0x2a>
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable1_Conf.InputGrp ,
    567c:	80 91 b6 01 	lds	r24, 0x01B6
    5680:	90 91 b7 01 	lds	r25, 0x01B7
    5684:	69 2f       	mov	r22, r25
    5686:	41 e0       	ldi	r20, 0x01	; 1
    5688:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    568c:	89 83       	std	Y+1, r24	; 0x01
    568e:	0f c0       	rjmp	.+30     	; 0x56ae <SevSeg_enuModuleEnable+0x48>
													SSegModule.Enable1_Conf.InputPin ,	MOD_EN_ON );
	else if( Copy_u8ModuleNum == MODULE_2)
    5690:	8a 81       	ldd	r24, Y+2	; 0x02
    5692:	8c 30       	cpi	r24, 0x0C	; 12
    5694:	51 f4       	brne	.+20     	; 0x56aa <SevSeg_enuModuleEnable+0x44>
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable2_Conf.InputGrp ,
    5696:	80 91 b8 01 	lds	r24, 0x01B8
    569a:	90 91 b9 01 	lds	r25, 0x01B9
    569e:	69 2f       	mov	r22, r25
    56a0:	41 e0       	ldi	r20, 0x01	; 1
    56a2:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    56a6:	89 83       	std	Y+1, r24	; 0x01
    56a8:	02 c0       	rjmp	.+4      	; 0x56ae <SevSeg_enuModuleEnable+0x48>
																	SSegModule.Enable2_Conf.InputPin ,	MOD_EN_ON );
	else Local_enuErrorState = ES_OUT_RANGE ;
    56aa:	82 e0       	ldi	r24, 0x02	; 2
    56ac:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    56ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    56b0:	0f 90       	pop	r0
    56b2:	0f 90       	pop	r0
    56b4:	cf 91       	pop	r28
    56b6:	df 91       	pop	r29
    56b8:	08 95       	ret

000056ba <SevSeg_enuModuleDisable>:

ES_t SevSeg_enuModuleDisable(u8 Copy_u8ModuleNum )
{
    56ba:	df 93       	push	r29
    56bc:	cf 93       	push	r28
    56be:	00 d0       	rcall	.+0      	; 0x56c0 <SevSeg_enuModuleDisable+0x6>
    56c0:	cd b7       	in	r28, 0x3d	; 61
    56c2:	de b7       	in	r29, 0x3e	; 62
    56c4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState=ES_NOK;
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ModuleNum == MODULE_1)
    56ca:	8a 81       	ldd	r24, Y+2	; 0x02
    56cc:	8b 30       	cpi	r24, 0x0B	; 11
    56ce:	51 f4       	brne	.+20     	; 0x56e4 <SevSeg_enuModuleDisable+0x2a>
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable1_Conf.InputGrp ,
    56d0:	80 91 b6 01 	lds	r24, 0x01B6
    56d4:	90 91 b7 01 	lds	r25, 0x01B7
    56d8:	69 2f       	mov	r22, r25
    56da:	40 e0       	ldi	r20, 0x00	; 0
    56dc:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    56e0:	89 83       	std	Y+1, r24	; 0x01
    56e2:	0f c0       	rjmp	.+30     	; 0x5702 <SevSeg_enuModuleDisable+0x48>
													SSegModule.Enable1_Conf.InputPin ,	MOD_EN_OFF );
	else if( Copy_u8ModuleNum == MODULE_2)
    56e4:	8a 81       	ldd	r24, Y+2	; 0x02
    56e6:	8c 30       	cpi	r24, 0x0C	; 12
    56e8:	51 f4       	brne	.+20     	; 0x56fe <SevSeg_enuModuleDisable+0x44>
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule.Enable2_Conf.InputGrp ,
    56ea:	80 91 b8 01 	lds	r24, 0x01B8
    56ee:	90 91 b9 01 	lds	r25, 0x01B9
    56f2:	69 2f       	mov	r22, r25
    56f4:	40 e0       	ldi	r20, 0x00	; 0
    56f6:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    56fa:	89 83       	std	Y+1, r24	; 0x01
    56fc:	02 c0       	rjmp	.+4      	; 0x5702 <SevSeg_enuModuleDisable+0x48>
																	SSegModule.Enable2_Conf.InputPin ,	MOD_EN_OFF );
	else Local_enuErrorState = ES_OUT_RANGE ;
    56fe:	82 e0       	ldi	r24, 0x02	; 2
    5700:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    5702:	89 81       	ldd	r24, Y+1	; 0x01
}
    5704:	0f 90       	pop	r0
    5706:	0f 90       	pop	r0
    5708:	cf 91       	pop	r28
    570a:	df 91       	pop	r29
    570c:	08 95       	ret

0000570e <LD_enuInit>:
extern u8 LD_u8LD_MaxNum;
extern LD_t LD[];


ES_t LD_enuInit(void)
{
    570e:	df 93       	push	r29
    5710:	cf 93       	push	r28
    5712:	00 d0       	rcall	.+0      	; 0x5714 <LD_enuInit+0x6>
    5714:	00 d0       	rcall	.+0      	; 0x5716 <LD_enuInit+0x8>
    5716:	cd b7       	in	r28, 0x3d	; 61
    5718:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    571a:	81 e0       	ldi	r24, 0x01	; 1
    571c:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    571e:	19 82       	std	Y+1, r1	; 0x01
    5720:	39 c0       	rjmp	.+114    	; 0x5794 <LD_enuInit+0x86>
	{
		Local_AenuStatus[0] = DIO_enuSetPinDirection( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    5722:	89 81       	ldd	r24, Y+1	; 0x01
    5724:	88 2f       	mov	r24, r24
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	88 0f       	add	r24, r24
    572a:	99 1f       	adc	r25, r25
    572c:	fc 01       	movw	r30, r24
    572e:	e5 54       	subi	r30, 0x45	; 69
    5730:	fe 4f       	sbci	r31, 0xFE	; 254
    5732:	20 81       	ld	r18, Z
    5734:	89 81       	ldd	r24, Y+1	; 0x01
    5736:	88 2f       	mov	r24, r24
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	88 0f       	add	r24, r24
    573c:	99 1f       	adc	r25, r25
    573e:	fc 01       	movw	r30, r24
    5740:	e4 54       	subi	r30, 0x44	; 68
    5742:	fe 4f       	sbci	r31, 0xFE	; 254
    5744:	90 81       	ld	r25, Z
    5746:	82 2f       	mov	r24, r18
    5748:	69 2f       	mov	r22, r25
    574a:	41 e0       	ldi	r20, 0x01	; 1
    574c:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    5750:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);
    5752:	89 81       	ldd	r24, Y+1	; 0x01
    5754:	88 2f       	mov	r24, r24
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	88 0f       	add	r24, r24
    575a:	99 1f       	adc	r25, r25
    575c:	fc 01       	movw	r30, r24
    575e:	e5 54       	subi	r30, 0x45	; 69
    5760:	fe 4f       	sbci	r31, 0xFE	; 254
    5762:	20 81       	ld	r18, Z
    5764:	89 81       	ldd	r24, Y+1	; 0x01
    5766:	88 2f       	mov	r24, r24
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	88 0f       	add	r24, r24
    576c:	99 1f       	adc	r25, r25
    576e:	fc 01       	movw	r30, r24
    5770:	e4 54       	subi	r30, 0x44	; 68
    5772:	fe 4f       	sbci	r31, 0xFE	; 254
    5774:	90 81       	ld	r25, Z
    5776:	82 2f       	mov	r24, r18
    5778:	69 2f       	mov	r22, r25
    577a:	40 e0       	ldi	r20, 0x00	; 0
    577c:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    5780:	8c 83       	std	Y+4, r24	; 0x04

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    5782:	8b 81       	ldd	r24, Y+3	; 0x03
    5784:	88 23       	and	r24, r24
    5786:	59 f4       	brne	.+22     	; 0x579e <LD_enuInit+0x90>
    5788:	8c 81       	ldd	r24, Y+4	; 0x04
    578a:	88 23       	and	r24, r24
    578c:	41 f4       	brne	.+16     	; 0x579e <LD_enuInit+0x90>

ES_t LD_enuInit(void)
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    578e:	89 81       	ldd	r24, Y+1	; 0x01
    5790:	8f 5f       	subi	r24, 0xFF	; 255
    5792:	89 83       	std	Y+1, r24	; 0x01
    5794:	90 91 ba 01 	lds	r25, 0x01BA
    5798:	89 81       	ldd	r24, Y+1	; 0x01
    579a:	89 17       	cp	r24, r25
    579c:	10 f2       	brcs	.-124    	; 0x5722 <LD_enuInit+0x14>
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
	}

	if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    579e:	8b 81       	ldd	r24, Y+3	; 0x03
    57a0:	88 23       	and	r24, r24
    57a2:	21 f4       	brne	.+8      	; 0x57ac <LD_enuInit+0x9e>
    57a4:	8c 81       	ldd	r24, Y+4	; 0x04
    57a6:	88 23       	and	r24, r24
    57a8:	09 f4       	brne	.+2      	; 0x57ac <LD_enuInit+0x9e>
		Local_enuErrorStatus = ES_OK;
    57aa:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorStatus;
    57ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
    57ae:	0f 90       	pop	r0
    57b0:	0f 90       	pop	r0
    57b2:	0f 90       	pop	r0
    57b4:	0f 90       	pop	r0
    57b6:	cf 91       	pop	r28
    57b8:	df 91       	pop	r29
    57ba:	08 95       	ret

000057bc <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    57bc:	df 93       	push	r29
    57be:	cf 93       	push	r28
    57c0:	00 d0       	rcall	.+0      	; 0x57c2 <LD_enuSetState+0x6>
    57c2:	0f 92       	push	r0
    57c4:	cd b7       	in	r28, 0x3d	; 61
    57c6:	de b7       	in	r29, 0x3e	; 62
    57c8:	8a 83       	std	Y+2, r24	; 0x02
    57ca:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    57cc:	81 e0       	ldi	r24, 0x01	; 1
    57ce:	89 83       	std	Y+1, r24	; 0x01

	if( ( ( Copy_u8LD_Num -= LD_ZERO ) < LD_u8LD_MaxNum ) &&
    57d0:	8a 81       	ldd	r24, Y+2	; 0x02
    57d2:	8e 51       	subi	r24, 0x1E	; 30
    57d4:	8a 83       	std	Y+2, r24	; 0x02
    57d6:	90 91 ba 01 	lds	r25, 0x01BA
    57da:	8a 81       	ldd	r24, Y+2	; 0x02
    57dc:	89 17       	cp	r24, r25
    57de:	f8 f4       	brcc	.+62     	; 0x581e <LD_enuSetState+0x62>
    57e0:	8b 81       	ldd	r24, Y+3	; 0x03
    57e2:	81 30       	cpi	r24, 0x01	; 1
    57e4:	19 f0       	breq	.+6      	; 0x57ec <LD_enuSetState+0x30>
    57e6:	8b 81       	ldd	r24, Y+3	; 0x03
    57e8:	88 23       	and	r24, r24
    57ea:	c9 f4       	brne	.+50     	; 0x581e <LD_enuSetState+0x62>
		( Copy_u8LDSetValue == LD_u8ON || Copy_u8LDSetValue == LD_u8OFF ) )
	{
		Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    57ec:	8a 81       	ldd	r24, Y+2	; 0x02
    57ee:	88 2f       	mov	r24, r24
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	88 0f       	add	r24, r24
    57f4:	99 1f       	adc	r25, r25
    57f6:	fc 01       	movw	r30, r24
    57f8:	e5 54       	subi	r30, 0x45	; 69
    57fa:	fe 4f       	sbci	r31, 0xFE	; 254
    57fc:	20 81       	ld	r18, Z
    57fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5800:	88 2f       	mov	r24, r24
    5802:	90 e0       	ldi	r25, 0x00	; 0
    5804:	88 0f       	add	r24, r24
    5806:	99 1f       	adc	r25, r25
    5808:	fc 01       	movw	r30, r24
    580a:	e4 54       	subi	r30, 0x44	; 68
    580c:	fe 4f       	sbci	r31, 0xFE	; 254
    580e:	90 81       	ld	r25, Z
    5810:	82 2f       	mov	r24, r18
    5812:	69 2f       	mov	r22, r25
    5814:	4b 81       	ldd	r20, Y+3	; 0x03
    5816:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    581a:	89 83       	std	Y+1, r24	; 0x01
    581c:	02 c0       	rjmp	.+4      	; 0x5822 <LD_enuSetState+0x66>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    581e:	82 e0       	ldi	r24, 0x02	; 2
    5820:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    5822:	89 81       	ldd	r24, Y+1	; 0x01
}
    5824:	0f 90       	pop	r0
    5826:	0f 90       	pop	r0
    5828:	0f 90       	pop	r0
    582a:	cf 91       	pop	r28
    582c:	df 91       	pop	r29
    582e:	08 95       	ret

00005830 <Coolent_enuInit>:
#define COOL_INIT_DUTY_CYCLE	0.0F
#define COOL_MAX_DUTY_CYCLE		80.0F


ES_t Coolent_enuInit(void)
{
    5830:	df 93       	push	r29
    5832:	cf 93       	push	r28
    5834:	00 d0       	rcall	.+0      	; 0x5836 <Coolent_enuInit+0x6>
    5836:	00 d0       	rcall	.+0      	; 0x5838 <Coolent_enuInit+0x8>
    5838:	cd b7       	in	r28, 0x3d	; 61
    583a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    583c:	81 e0       	ldi	r24, 0x01	; 1
    583e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter = 0 ;
    5840:	19 82       	std	Y+1, r1	; 0x01

#ifdef COOLENT_PWM_SETUP
	Local_AenuErrorState[0] = PWM_enuInit();
    5842:	0e 94 57 11 	call	0x22ae	; 0x22ae <PWM_enuInit>
    5846:	8b 83       	std	Y+3, r24	; 0x03
	Local_AenuErrorState[1] = PWM_enuSetICR1Value( (u16)ICR1_VALUE );
    5848:	80 e7       	ldi	r24, 0x70	; 112
    584a:	92 e0       	ldi	r25, 0x02	; 2
    584c:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <PWM_enuSetICR1Value>
    5850:	8c 83       	std	Y+4, r24	; 0x04
	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    5852:	19 82       	std	Y+1, r1	; 0x01
    5854:	03 c0       	rjmp	.+6      	; 0x585c <Coolent_enuInit+0x2c>
    5856:	89 81       	ldd	r24, Y+1	; 0x01
    5858:	8f 5f       	subi	r24, 0xFF	; 255
    585a:	89 83       	std	Y+1, r24	; 0x01
    585c:	89 81       	ldd	r24, Y+1	; 0x01
    585e:	82 30       	cpi	r24, 0x02	; 2
    5860:	58 f4       	brcc	.+22     	; 0x5878 <Coolent_enuInit+0x48>
    5862:	89 81       	ldd	r24, Y+1	; 0x01
    5864:	28 2f       	mov	r18, r24
    5866:	30 e0       	ldi	r19, 0x00	; 0
    5868:	ce 01       	movw	r24, r28
    586a:	03 96       	adiw	r24, 0x03	; 3
    586c:	fc 01       	movw	r30, r24
    586e:	e2 0f       	add	r30, r18
    5870:	f3 1f       	adc	r31, r19
    5872:	80 81       	ld	r24, Z
    5874:	88 23       	and	r24, r24
    5876:	79 f3       	breq	.-34     	; 0x5856 <Coolent_enuInit+0x26>
	if( Local_u8Iter == 2 )
    5878:	89 81       	ldd	r24, Y+1	; 0x01
    587a:	82 30       	cpi	r24, 0x02	; 2
    587c:	61 f4       	brne	.+24     	; 0x5896 <Coolent_enuInit+0x66>
	{
#endif
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( COOLENT_GRP , COOLENT_CNTRL , DIO_u8OUTPUT );
    587e:	8f e0       	ldi	r24, 0x0F	; 15
    5880:	65 e0       	ldi	r22, 0x05	; 5
    5882:	41 e0       	ldi	r20, 0x01	; 1
    5884:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    5888:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuErrorState[1] = DIO_enuSetPinValue( COOLENT_GRP , COOLENT_CNTRL , DIO_u8LOW );
    588a:	8f e0       	ldi	r24, 0x0F	; 15
    588c:	65 e0       	ldi	r22, 0x05	; 5
    588e:	40 e0       	ldi	r20, 0x00	; 0
    5890:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    5894:	8c 83       	std	Y+4, r24	; 0x04

#ifdef COOLENT_PWM_SETUP
	}
#endif
	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    5896:	19 82       	std	Y+1, r1	; 0x01
    5898:	03 c0       	rjmp	.+6      	; 0x58a0 <Coolent_enuInit+0x70>
    589a:	89 81       	ldd	r24, Y+1	; 0x01
    589c:	8f 5f       	subi	r24, 0xFF	; 255
    589e:	89 83       	std	Y+1, r24	; 0x01
    58a0:	89 81       	ldd	r24, Y+1	; 0x01
    58a2:	82 30       	cpi	r24, 0x02	; 2
    58a4:	58 f4       	brcc	.+22     	; 0x58bc <Coolent_enuInit+0x8c>
    58a6:	89 81       	ldd	r24, Y+1	; 0x01
    58a8:	28 2f       	mov	r18, r24
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	ce 01       	movw	r24, r28
    58ae:	03 96       	adiw	r24, 0x03	; 3
    58b0:	fc 01       	movw	r30, r24
    58b2:	e2 0f       	add	r30, r18
    58b4:	f3 1f       	adc	r31, r19
    58b6:	80 81       	ld	r24, Z
    58b8:	88 23       	and	r24, r24
    58ba:	79 f3       	breq	.-34     	; 0x589a <Coolent_enuInit+0x6a>
	if( Local_u8Iter == 2 )
    58bc:	89 81       	ldd	r24, Y+1	; 0x01
    58be:	82 30       	cpi	r24, 0x02	; 2
    58c0:	61 f4       	brne	.+24     	; 0x58da <Coolent_enuInit+0xaa>
	{
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( COOLENT_GRP , COOLENT_EN , DIO_u8OUTPUT );
    58c2:	8f e0       	ldi	r24, 0x0F	; 15
    58c4:	66 e0       	ldi	r22, 0x06	; 6
    58c6:	41 e0       	ldi	r20, 0x01	; 1
    58c8:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    58cc:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuErrorState[1] = DIO_enuSetPinValue( COOLENT_GRP , COOLENT_EN , DIO_u8LOW );
    58ce:	8f e0       	ldi	r24, 0x0F	; 15
    58d0:	66 e0       	ldi	r22, 0x06	; 6
    58d2:	40 e0       	ldi	r20, 0x00	; 0
    58d4:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    58d8:	8c 83       	std	Y+4, r24	; 0x04
	}
	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    58da:	19 82       	std	Y+1, r1	; 0x01
    58dc:	03 c0       	rjmp	.+6      	; 0x58e4 <Coolent_enuInit+0xb4>
    58de:	89 81       	ldd	r24, Y+1	; 0x01
    58e0:	8f 5f       	subi	r24, 0xFF	; 255
    58e2:	89 83       	std	Y+1, r24	; 0x01
    58e4:	89 81       	ldd	r24, Y+1	; 0x01
    58e6:	82 30       	cpi	r24, 0x02	; 2
    58e8:	58 f4       	brcc	.+22     	; 0x5900 <Coolent_enuInit+0xd0>
    58ea:	89 81       	ldd	r24, Y+1	; 0x01
    58ec:	28 2f       	mov	r18, r24
    58ee:	30 e0       	ldi	r19, 0x00	; 0
    58f0:	ce 01       	movw	r24, r28
    58f2:	03 96       	adiw	r24, 0x03	; 3
    58f4:	fc 01       	movw	r30, r24
    58f6:	e2 0f       	add	r30, r18
    58f8:	f3 1f       	adc	r31, r19
    58fa:	80 81       	ld	r24, Z
    58fc:	88 23       	and	r24, r24
    58fe:	79 f3       	breq	.-34     	; 0x58de <Coolent_enuInit+0xae>
	if( Local_u8Iter == 2)
    5900:	89 81       	ldd	r24, Y+1	; 0x01
    5902:	82 30       	cpi	r24, 0x02	; 2
    5904:	41 f4       	brne	.+16     	; 0x5916 <Coolent_enuInit+0xe6>
		Local_enuErrorState = PWM_enuSetDutyCycle( COOLENT_PWM , COOL_INIT_DUTY_CYCLE );
    5906:	89 ec       	ldi	r24, 0xC9	; 201
    5908:	40 e0       	ldi	r20, 0x00	; 0
    590a:	50 e0       	ldi	r21, 0x00	; 0
    590c:	60 e0       	ldi	r22, 0x00	; 0
    590e:	70 e0       	ldi	r23, 0x00	; 0
    5910:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <PWM_enuSetDutyCycle>
    5914:	8a 83       	std	Y+2, r24	; 0x02


	return  Local_enuErrorState  ;
    5916:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5918:	0f 90       	pop	r0
    591a:	0f 90       	pop	r0
    591c:	0f 90       	pop	r0
    591e:	0f 90       	pop	r0
    5920:	cf 91       	pop	r28
    5922:	df 91       	pop	r29
    5924:	08 95       	ret

00005926 <Coolent_enuEnable>:

ES_t Coolent_enuEnable( void )
{
    5926:	df 93       	push	r29
    5928:	cf 93       	push	r28
    592a:	cd b7       	in	r28, 0x3d	; 61
    592c:	de b7       	in	r29, 0x3e	; 62

	ASM_SET_BIT( COOLENT_PORT , COOLENT_EN ) ;
    592e:	96 9a       	sbi	0x12, 6	; 18

	return ES_OK ;
    5930:	80 e0       	ldi	r24, 0x00	; 0
}
    5932:	cf 91       	pop	r28
    5934:	df 91       	pop	r29
    5936:	08 95       	ret

00005938 <Coolent_enuDisable>:

ES_t Coolent_enuDisable( void )
{
    5938:	df 93       	push	r29
    593a:	cf 93       	push	r28
    593c:	cd b7       	in	r28, 0x3d	; 61
    593e:	de b7       	in	r29, 0x3e	; 62
	ASM_CLR_BIT( COOLENT_PORT , COOLENT_EN ) ;
    5940:	96 98       	cbi	0x12, 6	; 18

	return ES_OK ;
    5942:	80 e0       	ldi	r24, 0x00	; 0
}
    5944:	cf 91       	pop	r28
    5946:	df 91       	pop	r29
    5948:	08 95       	ret

0000594a <Coolent_enuSetState>:


ES_t Coolent_enuSetState( s8 Copy_s8TempError )
{
    594a:	ef 92       	push	r14
    594c:	ff 92       	push	r15
    594e:	0f 93       	push	r16
    5950:	1f 93       	push	r17
    5952:	df 93       	push	r29
    5954:	cf 93       	push	r28
    5956:	00 d0       	rcall	.+0      	; 0x5958 <Coolent_enuSetState+0xe>
    5958:	00 d0       	rcall	.+0      	; 0x595a <Coolent_enuSetState+0x10>
    595a:	00 d0       	rcall	.+0      	; 0x595c <Coolent_enuSetState+0x12>
    595c:	cd b7       	in	r28, 0x3d	; 61
    595e:	de b7       	in	r29, 0x3e	; 62
    5960:	8e 83       	std	Y+6, r24	; 0x06
	ES_t Local_enuErrorState = ES_NOK ;
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	8d 83       	std	Y+5, r24	; 0x05
	static s8 PrevTempError = 0 ;// AccTempError = 0;
	f32 DutyCycle;
	static f32 PrevDutyCycle = 0.0F ;

	Copy_s8TempError = (-1)* Copy_s8TempError ;
    5966:	8e 81       	ldd	r24, Y+6	; 0x06
    5968:	81 95       	neg	r24
    596a:	8e 83       	std	Y+6, r24	; 0x06

	if( Copy_s8TempError >= COOLENT_TEMP_TOLERANCE )
    596c:	8e 81       	ldd	r24, Y+6	; 0x06
    596e:	85 30       	cpi	r24, 0x05	; 5
    5970:	4c f0       	brlt	.+18     	; 0x5984 <Coolent_enuSetState+0x3a>
		DutyCycle = 0.0 ;
    5972:	80 e0       	ldi	r24, 0x00	; 0
    5974:	90 e0       	ldi	r25, 0x00	; 0
    5976:	a0 e0       	ldi	r26, 0x00	; 0
    5978:	b0 e0       	ldi	r27, 0x00	; 0
    597a:	89 83       	std	Y+1, r24	; 0x01
    597c:	9a 83       	std	Y+2, r25	; 0x02
    597e:	ab 83       	std	Y+3, r26	; 0x03
    5980:	bc 83       	std	Y+4, r27	; 0x04
    5982:	af c0       	rjmp	.+350    	; 0x5ae2 <Coolent_enuSetState+0x198>
	else if( Copy_s8TempError < 0 )
    5984:	8e 81       	ldd	r24, Y+6	; 0x06
    5986:	88 23       	and	r24, r24
    5988:	4c f4       	brge	.+18     	; 0x599c <Coolent_enuSetState+0x52>
		DutyCycle = COOL_MAX_DUTY_CYCLE ;
    598a:	80 e0       	ldi	r24, 0x00	; 0
    598c:	90 e0       	ldi	r25, 0x00	; 0
    598e:	a0 ea       	ldi	r26, 0xA0	; 160
    5990:	b2 e4       	ldi	r27, 0x42	; 66
    5992:	89 83       	std	Y+1, r24	; 0x01
    5994:	9a 83       	std	Y+2, r25	; 0x02
    5996:	ab 83       	std	Y+3, r26	; 0x03
    5998:	bc 83       	std	Y+4, r27	; 0x04
    599a:	a3 c0       	rjmp	.+326    	; 0x5ae2 <Coolent_enuSetState+0x198>
	else
	{
//		AccTempError += Copy_s8TempError ;
		DutyCycle = COOL_MAX_DUTY_CYCLE - (	( COOL_KP * Copy_s8TempError 	) +
    599c:	8e 81       	ldd	r24, Y+6	; 0x06
    599e:	99 27       	eor	r25, r25
    59a0:	87 fd       	sbrc	r24, 7
    59a2:	90 95       	com	r25
    59a4:	a9 2f       	mov	r26, r25
    59a6:	b9 2f       	mov	r27, r25
    59a8:	bc 01       	movw	r22, r24
    59aa:	cd 01       	movw	r24, r26
    59ac:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    59b0:	dc 01       	movw	r26, r24
    59b2:	cb 01       	movw	r24, r22
    59b4:	bc 01       	movw	r22, r24
    59b6:	cd 01       	movw	r24, r26
    59b8:	20 e0       	ldi	r18, 0x00	; 0
    59ba:	30 e0       	ldi	r19, 0x00	; 0
    59bc:	40 e0       	ldi	r20, 0x00	; 0
    59be:	51 e4       	ldi	r21, 0x41	; 65
    59c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59c4:	dc 01       	movw	r26, r24
    59c6:	cb 01       	movw	r24, r22
    59c8:	7c 01       	movw	r14, r24
    59ca:	8d 01       	movw	r16, r26
    59cc:	8e 81       	ldd	r24, Y+6	; 0x06
    59ce:	28 2f       	mov	r18, r24
    59d0:	33 27       	eor	r19, r19
    59d2:	27 fd       	sbrc	r18, 7
    59d4:	30 95       	com	r19
    59d6:	80 91 41 02 	lds	r24, 0x0241
    59da:	99 27       	eor	r25, r25
    59dc:	87 fd       	sbrc	r24, 7
    59de:	90 95       	com	r25
    59e0:	82 0f       	add	r24, r18
    59e2:	93 1f       	adc	r25, r19
    59e4:	aa 27       	eor	r26, r26
    59e6:	97 fd       	sbrc	r25, 7
    59e8:	a0 95       	com	r26
    59ea:	ba 2f       	mov	r27, r26
    59ec:	bc 01       	movw	r22, r24
    59ee:	cd 01       	movw	r24, r26
    59f0:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    59f4:	dc 01       	movw	r26, r24
    59f6:	cb 01       	movw	r24, r22
    59f8:	bc 01       	movw	r22, r24
    59fa:	cd 01       	movw	r24, r26
    59fc:	20 e0       	ldi	r18, 0x00	; 0
    59fe:	30 e0       	ldi	r19, 0x00	; 0
    5a00:	40 e8       	ldi	r20, 0x80	; 128
    5a02:	50 e4       	ldi	r21, 0x40	; 64
    5a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a08:	dc 01       	movw	r26, r24
    5a0a:	cb 01       	movw	r24, r22
    5a0c:	9c 01       	movw	r18, r24
    5a0e:	ad 01       	movw	r20, r26
    5a10:	c8 01       	movw	r24, r16
    5a12:	b7 01       	movw	r22, r14
    5a14:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5a18:	dc 01       	movw	r26, r24
    5a1a:	cb 01       	movw	r24, r22
    5a1c:	7c 01       	movw	r14, r24
    5a1e:	8d 01       	movw	r16, r26
    5a20:	8e 81       	ldd	r24, Y+6	; 0x06
    5a22:	28 2f       	mov	r18, r24
    5a24:	33 27       	eor	r19, r19
    5a26:	27 fd       	sbrc	r18, 7
    5a28:	30 95       	com	r19
    5a2a:	80 91 41 02 	lds	r24, 0x0241
    5a2e:	99 27       	eor	r25, r25
    5a30:	87 fd       	sbrc	r24, 7
    5a32:	90 95       	com	r25
    5a34:	a9 01       	movw	r20, r18
    5a36:	48 1b       	sub	r20, r24
    5a38:	59 0b       	sbc	r21, r25
    5a3a:	ca 01       	movw	r24, r20
    5a3c:	aa 27       	eor	r26, r26
    5a3e:	97 fd       	sbrc	r25, 7
    5a40:	a0 95       	com	r26
    5a42:	ba 2f       	mov	r27, r26
    5a44:	bc 01       	movw	r22, r24
    5a46:	cd 01       	movw	r24, r26
    5a48:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    5a4c:	dc 01       	movw	r26, r24
    5a4e:	cb 01       	movw	r24, r22
    5a50:	bc 01       	movw	r22, r24
    5a52:	cd 01       	movw	r24, r26
    5a54:	20 e0       	ldi	r18, 0x00	; 0
    5a56:	30 e0       	ldi	r19, 0x00	; 0
    5a58:	40 e8       	ldi	r20, 0x80	; 128
    5a5a:	50 e4       	ldi	r21, 0x40	; 64
    5a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a60:	dc 01       	movw	r26, r24
    5a62:	cb 01       	movw	r24, r22
    5a64:	9c 01       	movw	r18, r24
    5a66:	ad 01       	movw	r20, r26
    5a68:	c8 01       	movw	r24, r16
    5a6a:	b7 01       	movw	r22, r14
    5a6c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5a70:	dc 01       	movw	r26, r24
    5a72:	cb 01       	movw	r24, r22
    5a74:	9c 01       	movw	r18, r24
    5a76:	ad 01       	movw	r20, r26
    5a78:	60 e0       	ldi	r22, 0x00	; 0
    5a7a:	70 e0       	ldi	r23, 0x00	; 0
    5a7c:	80 ea       	ldi	r24, 0xA0	; 160
    5a7e:	92 e4       	ldi	r25, 0x42	; 66
    5a80:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5a84:	dc 01       	movw	r26, r24
    5a86:	cb 01       	movw	r24, r22
    5a88:	89 83       	std	Y+1, r24	; 0x01
    5a8a:	9a 83       	std	Y+2, r25	; 0x02
    5a8c:	ab 83       	std	Y+3, r26	; 0x03
    5a8e:	bc 83       	std	Y+4, r27	; 0x04
											( COOL_KI * ( Copy_s8TempError + PrevTempError ) ) +
											( COOL_KD * ( Copy_s8TempError - PrevTempError ) ) ) ;
		if( DutyCycle < 0.0 ) DutyCycle = 0.0 ;
    5a90:	69 81       	ldd	r22, Y+1	; 0x01
    5a92:	7a 81       	ldd	r23, Y+2	; 0x02
    5a94:	8b 81       	ldd	r24, Y+3	; 0x03
    5a96:	9c 81       	ldd	r25, Y+4	; 0x04
    5a98:	20 e0       	ldi	r18, 0x00	; 0
    5a9a:	30 e0       	ldi	r19, 0x00	; 0
    5a9c:	40 e0       	ldi	r20, 0x00	; 0
    5a9e:	50 e0       	ldi	r21, 0x00	; 0
    5aa0:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5aa4:	88 23       	and	r24, r24
    5aa6:	4c f4       	brge	.+18     	; 0x5aba <Coolent_enuSetState+0x170>
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	a0 e0       	ldi	r26, 0x00	; 0
    5aae:	b0 e0       	ldi	r27, 0x00	; 0
    5ab0:	89 83       	std	Y+1, r24	; 0x01
    5ab2:	9a 83       	std	Y+2, r25	; 0x02
    5ab4:	ab 83       	std	Y+3, r26	; 0x03
    5ab6:	bc 83       	std	Y+4, r27	; 0x04
    5ab8:	14 c0       	rjmp	.+40     	; 0x5ae2 <Coolent_enuSetState+0x198>
		else if( DutyCycle > COOL_MAX_DUTY_CYCLE ) DutyCycle = COOL_MAX_DUTY_CYCLE ;
    5aba:	69 81       	ldd	r22, Y+1	; 0x01
    5abc:	7a 81       	ldd	r23, Y+2	; 0x02
    5abe:	8b 81       	ldd	r24, Y+3	; 0x03
    5ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    5ac2:	20 e0       	ldi	r18, 0x00	; 0
    5ac4:	30 e0       	ldi	r19, 0x00	; 0
    5ac6:	40 ea       	ldi	r20, 0xA0	; 160
    5ac8:	52 e4       	ldi	r21, 0x42	; 66
    5aca:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5ace:	18 16       	cp	r1, r24
    5ad0:	44 f4       	brge	.+16     	; 0x5ae2 <Coolent_enuSetState+0x198>
    5ad2:	80 e0       	ldi	r24, 0x00	; 0
    5ad4:	90 e0       	ldi	r25, 0x00	; 0
    5ad6:	a0 ea       	ldi	r26, 0xA0	; 160
    5ad8:	b2 e4       	ldi	r27, 0x42	; 66
    5ada:	89 83       	std	Y+1, r24	; 0x01
    5adc:	9a 83       	std	Y+2, r25	; 0x02
    5ade:	ab 83       	std	Y+3, r26	; 0x03
    5ae0:	bc 83       	std	Y+4, r27	; 0x04

	}

	if( ( DutyCycle >= ( PrevDutyCycle + COOLENT_DUTY_CYC_TOL ) )	|| ( DutyCycle = COOL_MAX_DUTY_CYCLE )	||
    5ae2:	80 91 3d 02 	lds	r24, 0x023D
    5ae6:	90 91 3e 02 	lds	r25, 0x023E
    5aea:	a0 91 3f 02 	lds	r26, 0x023F
    5aee:	b0 91 40 02 	lds	r27, 0x0240
    5af2:	bc 01       	movw	r22, r24
    5af4:	cd 01       	movw	r24, r26
    5af6:	20 e0       	ldi	r18, 0x00	; 0
    5af8:	30 e0       	ldi	r19, 0x00	; 0
    5afa:	40 e0       	ldi	r20, 0x00	; 0
    5afc:	50 e0       	ldi	r21, 0x00	; 0
    5afe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5b02:	dc 01       	movw	r26, r24
    5b04:	cb 01       	movw	r24, r22
    5b06:	bc 01       	movw	r22, r24
    5b08:	cd 01       	movw	r24, r26
    5b0a:	29 81       	ldd	r18, Y+1	; 0x01
    5b0c:	3a 81       	ldd	r19, Y+2	; 0x02
    5b0e:	4b 81       	ldd	r20, Y+3	; 0x03
    5b10:	5c 81       	ldd	r21, Y+4	; 0x04
    5b12:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    5b16:	18 16       	cp	r1, r24
    5b18:	84 f5       	brge	.+96     	; 0x5b7a <Coolent_enuSetState+0x230>
    5b1a:	80 e0       	ldi	r24, 0x00	; 0
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	a0 ea       	ldi	r26, 0xA0	; 160
    5b20:	b2 e4       	ldi	r27, 0x42	; 66
    5b22:	89 83       	std	Y+1, r24	; 0x01
    5b24:	9a 83       	std	Y+2, r25	; 0x02
    5b26:	ab 83       	std	Y+3, r26	; 0x03
    5b28:	bc 83       	std	Y+4, r27	; 0x04
    5b2a:	69 81       	ldd	r22, Y+1	; 0x01
    5b2c:	7a 81       	ldd	r23, Y+2	; 0x02
    5b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b30:	9c 81       	ldd	r25, Y+4	; 0x04
    5b32:	20 e0       	ldi	r18, 0x00	; 0
    5b34:	30 e0       	ldi	r19, 0x00	; 0
    5b36:	40 e0       	ldi	r20, 0x00	; 0
    5b38:	50 e0       	ldi	r21, 0x00	; 0
    5b3a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__nesf2>
    5b3e:	88 23       	and	r24, r24
    5b40:	e1 f4       	brne	.+56     	; 0x5b7a <Coolent_enuSetState+0x230>
    5b42:	20 91 3d 02 	lds	r18, 0x023D
    5b46:	30 91 3e 02 	lds	r19, 0x023E
    5b4a:	40 91 3f 02 	lds	r20, 0x023F
    5b4e:	50 91 40 02 	lds	r21, 0x0240
    5b52:	69 81       	ldd	r22, Y+1	; 0x01
    5b54:	7a 81       	ldd	r23, Y+2	; 0x02
    5b56:	8b 81       	ldd	r24, Y+3	; 0x03
    5b58:	9c 81       	ldd	r25, Y+4	; 0x04
    5b5a:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    5b5e:	18 16       	cp	r1, r24
    5b60:	64 f4       	brge	.+24     	; 0x5b7a <Coolent_enuSetState+0x230>
    5b62:	69 81       	ldd	r22, Y+1	; 0x01
    5b64:	7a 81       	ldd	r23, Y+2	; 0x02
    5b66:	8b 81       	ldd	r24, Y+3	; 0x03
    5b68:	9c 81       	ldd	r25, Y+4	; 0x04
    5b6a:	20 e0       	ldi	r18, 0x00	; 0
    5b6c:	30 e0       	ldi	r19, 0x00	; 0
    5b6e:	40 e0       	ldi	r20, 0x00	; 0
    5b70:	50 e0       	ldi	r21, 0x00	; 0
    5b72:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    5b76:	88 23       	and	r24, r24
    5b78:	b1 f4       	brne	.+44     	; 0x5ba6 <Coolent_enuSetState+0x25c>
		( DutyCycle <= ( PrevDutyCycle - COOLENT_DUTY_CYC_TOL ) )	|| ( DutyCycle == 0.0F ) )
	{
		PrevDutyCycle = DutyCycle ;
    5b7a:	89 81       	ldd	r24, Y+1	; 0x01
    5b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b7e:	ab 81       	ldd	r26, Y+3	; 0x03
    5b80:	bc 81       	ldd	r27, Y+4	; 0x04
    5b82:	80 93 3d 02 	sts	0x023D, r24
    5b86:	90 93 3e 02 	sts	0x023E, r25
    5b8a:	a0 93 3f 02 	sts	0x023F, r26
    5b8e:	b0 93 40 02 	sts	0x0240, r27
		Local_enuErrorState = PWM_enuSetDutyCycle( COOLENT_PWM , DutyCycle );
    5b92:	29 81       	ldd	r18, Y+1	; 0x01
    5b94:	3a 81       	ldd	r19, Y+2	; 0x02
    5b96:	4b 81       	ldd	r20, Y+3	; 0x03
    5b98:	5c 81       	ldd	r21, Y+4	; 0x04
    5b9a:	89 ec       	ldi	r24, 0xC9	; 201
    5b9c:	ba 01       	movw	r22, r20
    5b9e:	a9 01       	movw	r20, r18
    5ba0:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <PWM_enuSetDutyCycle>
    5ba4:	8d 83       	std	Y+5, r24	; 0x05
	}

	PrevTempError = Copy_s8TempError ;
    5ba6:	8e 81       	ldd	r24, Y+6	; 0x06
    5ba8:	80 93 41 02 	sts	0x0241, r24

	return Local_enuErrorState ;
    5bac:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5bae:	26 96       	adiw	r28, 0x06	; 6
    5bb0:	0f b6       	in	r0, 0x3f	; 63
    5bb2:	f8 94       	cli
    5bb4:	de bf       	out	0x3e, r29	; 62
    5bb6:	0f be       	out	0x3f, r0	; 63
    5bb8:	cd bf       	out	0x3d, r28	; 61
    5bba:	cf 91       	pop	r28
    5bbc:	df 91       	pop	r29
    5bbe:	1f 91       	pop	r17
    5bc0:	0f 91       	pop	r16
    5bc2:	ff 90       	pop	r15
    5bc4:	ef 90       	pop	r14
    5bc6:	08 95       	ret

00005bc8 <Heater_enuInit>:
//bool CounterReset = FALSE;
void INT0_ISR( void);
void Heater_vidZCrossSync( void );

ES_t Heater_enuInit(void)
{
    5bc8:	df 93       	push	r29
    5bca:	cf 93       	push	r28
    5bcc:	00 d0       	rcall	.+0      	; 0x5bce <Heater_enuInit+0x6>
    5bce:	00 d0       	rcall	.+0      	; 0x5bd0 <Heater_enuInit+0x8>
    5bd0:	cd b7       	in	r28, 0x3d	; 61
    5bd2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    5bd4:	81 e0       	ldi	r24, 0x01	; 1
    5bd6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iter = 0 ;
    5bd8:	19 82       	std	Y+1, r1	; 0x01
	Local_AenuErrorState[1] = PWM_enuSetICR1Value( (u16)ICR1_VALUE );
	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
	if( Local_u8Iter == 2 )
	{
#endif
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( HEATER_GRP , HEATER_CNTRL , DIO_u8OUTPUT ) ;
    5bda:	8f e0       	ldi	r24, 0x0F	; 15
    5bdc:	64 e0       	ldi	r22, 0x04	; 4
    5bde:	41 e0       	ldi	r20, 0x01	; 1
    5be0:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    5be4:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuErrorState[1] = DIO_enuSetPinValue( HEATER_GRP , HEATER_CNTRL , DIO_u8LOW ) ;
    5be6:	8f e0       	ldi	r24, 0x0F	; 15
    5be8:	64 e0       	ldi	r22, 0x04	; 4
    5bea:	40 e0       	ldi	r20, 0x00	; 0
    5bec:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    5bf0:	8c 83       	std	Y+4, r24	; 0x04
#ifdef HEATER_PWM_SETUP
	}
#endif


	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    5bf2:	19 82       	std	Y+1, r1	; 0x01
    5bf4:	03 c0       	rjmp	.+6      	; 0x5bfc <Heater_enuInit+0x34>
    5bf6:	89 81       	ldd	r24, Y+1	; 0x01
    5bf8:	8f 5f       	subi	r24, 0xFF	; 255
    5bfa:	89 83       	std	Y+1, r24	; 0x01
    5bfc:	89 81       	ldd	r24, Y+1	; 0x01
    5bfe:	82 30       	cpi	r24, 0x02	; 2
    5c00:	58 f4       	brcc	.+22     	; 0x5c18 <Heater_enuInit+0x50>
    5c02:	89 81       	ldd	r24, Y+1	; 0x01
    5c04:	28 2f       	mov	r18, r24
    5c06:	30 e0       	ldi	r19, 0x00	; 0
    5c08:	ce 01       	movw	r24, r28
    5c0a:	03 96       	adiw	r24, 0x03	; 3
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	e2 0f       	add	r30, r18
    5c10:	f3 1f       	adc	r31, r19
    5c12:	80 81       	ld	r24, Z
    5c14:	88 23       	and	r24, r24
    5c16:	79 f3       	breq	.-34     	; 0x5bf6 <Heater_enuInit+0x2e>
	if( Local_u8Iter == 2 )
    5c18:	89 81       	ldd	r24, Y+1	; 0x01
    5c1a:	82 30       	cpi	r24, 0x02	; 2
    5c1c:	79 f4       	brne	.+30     	; 0x5c3c <Heater_enuInit+0x74>
	{
		Local_AenuErrorState[0] = PWM_enuSetDutyCycle( HEATER_PWM , HTR_INIT_DUTY_CYCLE );
    5c1e:	8a ec       	ldi	r24, 0xCA	; 202
    5c20:	40 e0       	ldi	r20, 0x00	; 0
    5c22:	50 e0       	ldi	r21, 0x00	; 0
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	70 e0       	ldi	r23, 0x00	; 0
    5c28:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <PWM_enuSetDutyCycle>
    5c2c:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuErrorState[1] = EXTI_enuCallBack( INT0 , INT0_ISR );
    5c2e:	25 ea       	ldi	r18, 0xA5	; 165
    5c30:	3f e2       	ldi	r19, 0x2F	; 47
    5c32:	8d e3       	ldi	r24, 0x3D	; 61
    5c34:	b9 01       	movw	r22, r18
    5c36:	0e 94 a0 23 	call	0x4740	; 0x4740 <EXTI_enuCallBack>
    5c3a:	8c 83       	std	Y+4, r24	; 0x04
	}
	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    5c3c:	19 82       	std	Y+1, r1	; 0x01
    5c3e:	03 c0       	rjmp	.+6      	; 0x5c46 <Heater_enuInit+0x7e>
    5c40:	89 81       	ldd	r24, Y+1	; 0x01
    5c42:	8f 5f       	subi	r24, 0xFF	; 255
    5c44:	89 83       	std	Y+1, r24	; 0x01
    5c46:	89 81       	ldd	r24, Y+1	; 0x01
    5c48:	82 30       	cpi	r24, 0x02	; 2
    5c4a:	58 f4       	brcc	.+22     	; 0x5c62 <Heater_enuInit+0x9a>
    5c4c:	89 81       	ldd	r24, Y+1	; 0x01
    5c4e:	28 2f       	mov	r18, r24
    5c50:	30 e0       	ldi	r19, 0x00	; 0
    5c52:	ce 01       	movw	r24, r28
    5c54:	03 96       	adiw	r24, 0x03	; 3
    5c56:	fc 01       	movw	r30, r24
    5c58:	e2 0f       	add	r30, r18
    5c5a:	f3 1f       	adc	r31, r19
    5c5c:	80 81       	ld	r24, Z
    5c5e:	88 23       	and	r24, r24
    5c60:	79 f3       	breq	.-34     	; 0x5c40 <Heater_enuInit+0x78>
	if( Local_u8Iter == 2 )
    5c62:	89 81       	ldd	r24, Y+1	; 0x01
    5c64:	82 30       	cpi	r24, 0x02	; 2
    5c66:	61 f4       	brne	.+24     	; 0x5c80 <Heater_enuInit+0xb8>
	{
		Local_AenuErrorState[0] = DIO_enuSetPinDirection( HEATER_GRP , HEATER_EN , DIO_u8OUTPUT ) ;
    5c68:	8f e0       	ldi	r24, 0x0F	; 15
    5c6a:	63 e0       	ldi	r22, 0x03	; 3
    5c6c:	41 e0       	ldi	r20, 0x01	; 1
    5c6e:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    5c72:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuErrorState[1] = DIO_enuSetPinValue( HEATER_GRP , HEATER_EN , DIO_u8LOW ) ;
    5c74:	8f e0       	ldi	r24, 0x0F	; 15
    5c76:	63 e0       	ldi	r22, 0x03	; 3
    5c78:	40 e0       	ldi	r20, 0x00	; 0
    5c7a:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    5c7e:	8c 83       	std	Y+4, r24	; 0x04
	}
	for( Local_u8Iter = 0 ; (Local_u8Iter < 2) && ( Local_AenuErrorState[Local_u8Iter] == ES_OK ) ; Local_u8Iter++ );
    5c80:	19 82       	std	Y+1, r1	; 0x01
    5c82:	03 c0       	rjmp	.+6      	; 0x5c8a <Heater_enuInit+0xc2>
    5c84:	89 81       	ldd	r24, Y+1	; 0x01
    5c86:	8f 5f       	subi	r24, 0xFF	; 255
    5c88:	89 83       	std	Y+1, r24	; 0x01
    5c8a:	89 81       	ldd	r24, Y+1	; 0x01
    5c8c:	82 30       	cpi	r24, 0x02	; 2
    5c8e:	58 f4       	brcc	.+22     	; 0x5ca6 <Heater_enuInit+0xde>
    5c90:	89 81       	ldd	r24, Y+1	; 0x01
    5c92:	28 2f       	mov	r18, r24
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	ce 01       	movw	r24, r28
    5c98:	03 96       	adiw	r24, 0x03	; 3
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	e2 0f       	add	r30, r18
    5c9e:	f3 1f       	adc	r31, r19
    5ca0:	80 81       	ld	r24, Z
    5ca2:	88 23       	and	r24, r24
    5ca4:	79 f3       	breq	.-34     	; 0x5c84 <Heater_enuInit+0xbc>
	if( Local_u8Iter == 2 )
    5ca6:	89 81       	ldd	r24, Y+1	; 0x01
    5ca8:	82 30       	cpi	r24, 0x02	; 2
    5caa:	09 f4       	brne	.+2      	; 0x5cae <Heater_enuInit+0xe6>
		Local_enuErrorState = ES_OK ;
    5cac:	1a 82       	std	Y+2, r1	; 0x02

//	Heater_vidZCrossSync();

	return Local_enuErrorState ;
    5cae:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5cb0:	0f 90       	pop	r0
    5cb2:	0f 90       	pop	r0
    5cb4:	0f 90       	pop	r0
    5cb6:	0f 90       	pop	r0
    5cb8:	cf 91       	pop	r28
    5cba:	df 91       	pop	r29
    5cbc:	08 95       	ret

00005cbe <Heater_enuEnable>:
	CounterReset = FALSE ;
	SREG = Local_u8SREG ;
}
*/
ES_t Heater_enuEnable( void )
{
    5cbe:	df 93       	push	r29
    5cc0:	cf 93       	push	r28
    5cc2:	cd b7       	in	r28, 0x3d	; 61
    5cc4:	de b7       	in	r29, 0x3e	; 62
	ASM_SET_BIT( HEATER_PORT , HEATER_EN );
    5cc6:	93 9a       	sbi	0x12, 3	; 18

	return ES_OK  ;
    5cc8:	80 e0       	ldi	r24, 0x00	; 0
}
    5cca:	cf 91       	pop	r28
    5ccc:	df 91       	pop	r29
    5cce:	08 95       	ret

00005cd0 <Heater_enuDisable>:

ES_t Heater_enuDisable( void )
{
    5cd0:	df 93       	push	r29
    5cd2:	cf 93       	push	r28
    5cd4:	cd b7       	in	r28, 0x3d	; 61
    5cd6:	de b7       	in	r29, 0x3e	; 62

	ASM_CLR_BIT( HEATER_PORT , HEATER_EN );
    5cd8:	93 98       	cbi	0x12, 3	; 18

	return ES_OK ;
    5cda:	80 e0       	ldi	r24, 0x00	; 0
}
    5cdc:	cf 91       	pop	r28
    5cde:	df 91       	pop	r29
    5ce0:	08 95       	ret

00005ce2 <Heater_enuSetState>:


ES_t Heater_enuSetState( s8 Copy_s8TempError )
{
    5ce2:	ef 92       	push	r14
    5ce4:	ff 92       	push	r15
    5ce6:	0f 93       	push	r16
    5ce8:	1f 93       	push	r17
    5cea:	df 93       	push	r29
    5cec:	cf 93       	push	r28
    5cee:	00 d0       	rcall	.+0      	; 0x5cf0 <Heater_enuSetState+0xe>
    5cf0:	00 d0       	rcall	.+0      	; 0x5cf2 <Heater_enuSetState+0x10>
    5cf2:	00 d0       	rcall	.+0      	; 0x5cf4 <Heater_enuSetState+0x12>
    5cf4:	cd b7       	in	r28, 0x3d	; 61
    5cf6:	de b7       	in	r29, 0x3e	; 62
    5cf8:	8e 83       	std	Y+6, r24	; 0x06
	ES_t Local_enuErrorState = ES_NOK ;
    5cfa:	81 e0       	ldi	r24, 0x01	; 1
    5cfc:	8d 83       	std	Y+5, r24	; 0x05
	static s8 PrevTempError = 0 ; // AccTempError = 0 ;
	static f32 PrevDutyCycle = 0.0F ;

	f32 DutyCycle;

	if( Copy_s8TempError >= HTR_TEMP_TOLERANCE )
    5cfe:	8e 81       	ldd	r24, Y+6	; 0x06
    5d00:	85 30       	cpi	r24, 0x05	; 5
    5d02:	4c f0       	brlt	.+18     	; 0x5d16 <Heater_enuSetState+0x34>
		DutyCycle = 0.0F ;
    5d04:	80 e0       	ldi	r24, 0x00	; 0
    5d06:	90 e0       	ldi	r25, 0x00	; 0
    5d08:	a0 e0       	ldi	r26, 0x00	; 0
    5d0a:	b0 e0       	ldi	r27, 0x00	; 0
    5d0c:	89 83       	std	Y+1, r24	; 0x01
    5d0e:	9a 83       	std	Y+2, r25	; 0x02
    5d10:	ab 83       	std	Y+3, r26	; 0x03
    5d12:	bc 83       	std	Y+4, r27	; 0x04
    5d14:	af c0       	rjmp	.+350    	; 0x5e74 <Heater_enuSetState+0x192>
	else if( Copy_s8TempError < 0 )
    5d16:	8e 81       	ldd	r24, Y+6	; 0x06
    5d18:	88 23       	and	r24, r24
    5d1a:	4c f4       	brge	.+18     	; 0x5d2e <Heater_enuSetState+0x4c>
		DutyCycle = HTR_MAX_DUTY_CYCLE ;
    5d1c:	80 e0       	ldi	r24, 0x00	; 0
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	a0 ea       	ldi	r26, 0xA0	; 160
    5d22:	b2 e4       	ldi	r27, 0x42	; 66
    5d24:	89 83       	std	Y+1, r24	; 0x01
    5d26:	9a 83       	std	Y+2, r25	; 0x02
    5d28:	ab 83       	std	Y+3, r26	; 0x03
    5d2a:	bc 83       	std	Y+4, r27	; 0x04
    5d2c:	a3 c0       	rjmp	.+326    	; 0x5e74 <Heater_enuSetState+0x192>
	else
	{
//		AccTempError += Copy_s8TempError ;
		DutyCycle =	HTR_MAX_DUTY_CYCLE - (	( HTR_KP * Copy_s8TempError	) +
    5d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    5d30:	99 27       	eor	r25, r25
    5d32:	87 fd       	sbrc	r24, 7
    5d34:	90 95       	com	r25
    5d36:	a9 2f       	mov	r26, r25
    5d38:	b9 2f       	mov	r27, r25
    5d3a:	bc 01       	movw	r22, r24
    5d3c:	cd 01       	movw	r24, r26
    5d3e:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    5d42:	dc 01       	movw	r26, r24
    5d44:	cb 01       	movw	r24, r22
    5d46:	bc 01       	movw	r22, r24
    5d48:	cd 01       	movw	r24, r26
    5d4a:	20 e0       	ldi	r18, 0x00	; 0
    5d4c:	30 e0       	ldi	r19, 0x00	; 0
    5d4e:	40 e0       	ldi	r20, 0x00	; 0
    5d50:	51 e4       	ldi	r21, 0x41	; 65
    5d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d56:	dc 01       	movw	r26, r24
    5d58:	cb 01       	movw	r24, r22
    5d5a:	7c 01       	movw	r14, r24
    5d5c:	8d 01       	movw	r16, r26
    5d5e:	8e 81       	ldd	r24, Y+6	; 0x06
    5d60:	28 2f       	mov	r18, r24
    5d62:	33 27       	eor	r19, r19
    5d64:	27 fd       	sbrc	r18, 7
    5d66:	30 95       	com	r19
    5d68:	80 91 46 02 	lds	r24, 0x0246
    5d6c:	99 27       	eor	r25, r25
    5d6e:	87 fd       	sbrc	r24, 7
    5d70:	90 95       	com	r25
    5d72:	82 0f       	add	r24, r18
    5d74:	93 1f       	adc	r25, r19
    5d76:	aa 27       	eor	r26, r26
    5d78:	97 fd       	sbrc	r25, 7
    5d7a:	a0 95       	com	r26
    5d7c:	ba 2f       	mov	r27, r26
    5d7e:	bc 01       	movw	r22, r24
    5d80:	cd 01       	movw	r24, r26
    5d82:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    5d86:	dc 01       	movw	r26, r24
    5d88:	cb 01       	movw	r24, r22
    5d8a:	bc 01       	movw	r22, r24
    5d8c:	cd 01       	movw	r24, r26
    5d8e:	20 e0       	ldi	r18, 0x00	; 0
    5d90:	30 e0       	ldi	r19, 0x00	; 0
    5d92:	40 e8       	ldi	r20, 0x80	; 128
    5d94:	50 e4       	ldi	r21, 0x40	; 64
    5d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d9a:	dc 01       	movw	r26, r24
    5d9c:	cb 01       	movw	r24, r22
    5d9e:	9c 01       	movw	r18, r24
    5da0:	ad 01       	movw	r20, r26
    5da2:	c8 01       	movw	r24, r16
    5da4:	b7 01       	movw	r22, r14
    5da6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5daa:	dc 01       	movw	r26, r24
    5dac:	cb 01       	movw	r24, r22
    5dae:	7c 01       	movw	r14, r24
    5db0:	8d 01       	movw	r16, r26
    5db2:	8e 81       	ldd	r24, Y+6	; 0x06
    5db4:	28 2f       	mov	r18, r24
    5db6:	33 27       	eor	r19, r19
    5db8:	27 fd       	sbrc	r18, 7
    5dba:	30 95       	com	r19
    5dbc:	80 91 46 02 	lds	r24, 0x0246
    5dc0:	99 27       	eor	r25, r25
    5dc2:	87 fd       	sbrc	r24, 7
    5dc4:	90 95       	com	r25
    5dc6:	a9 01       	movw	r20, r18
    5dc8:	48 1b       	sub	r20, r24
    5dca:	59 0b       	sbc	r21, r25
    5dcc:	ca 01       	movw	r24, r20
    5dce:	aa 27       	eor	r26, r26
    5dd0:	97 fd       	sbrc	r25, 7
    5dd2:	a0 95       	com	r26
    5dd4:	ba 2f       	mov	r27, r26
    5dd6:	bc 01       	movw	r22, r24
    5dd8:	cd 01       	movw	r24, r26
    5dda:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__floatsisf>
    5dde:	dc 01       	movw	r26, r24
    5de0:	cb 01       	movw	r24, r22
    5de2:	bc 01       	movw	r22, r24
    5de4:	cd 01       	movw	r24, r26
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	30 e0       	ldi	r19, 0x00	; 0
    5dea:	40 e8       	ldi	r20, 0x80	; 128
    5dec:	50 e4       	ldi	r21, 0x40	; 64
    5dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5df2:	dc 01       	movw	r26, r24
    5df4:	cb 01       	movw	r24, r22
    5df6:	9c 01       	movw	r18, r24
    5df8:	ad 01       	movw	r20, r26
    5dfa:	c8 01       	movw	r24, r16
    5dfc:	b7 01       	movw	r22, r14
    5dfe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5e02:	dc 01       	movw	r26, r24
    5e04:	cb 01       	movw	r24, r22
    5e06:	9c 01       	movw	r18, r24
    5e08:	ad 01       	movw	r20, r26
    5e0a:	60 e0       	ldi	r22, 0x00	; 0
    5e0c:	70 e0       	ldi	r23, 0x00	; 0
    5e0e:	80 ea       	ldi	r24, 0xA0	; 160
    5e10:	92 e4       	ldi	r25, 0x42	; 66
    5e12:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5e16:	dc 01       	movw	r26, r24
    5e18:	cb 01       	movw	r24, r22
    5e1a:	89 83       	std	Y+1, r24	; 0x01
    5e1c:	9a 83       	std	Y+2, r25	; 0x02
    5e1e:	ab 83       	std	Y+3, r26	; 0x03
    5e20:	bc 83       	std	Y+4, r27	; 0x04
											( HTR_KI * ( Copy_s8TempError + PrevTempError ) ) +
											( HTR_KD * ( Copy_s8TempError - PrevTempError ) ) ) ;
		if( DutyCycle < 0.0 ) DutyCycle = 0.0 ;
    5e22:	69 81       	ldd	r22, Y+1	; 0x01
    5e24:	7a 81       	ldd	r23, Y+2	; 0x02
    5e26:	8b 81       	ldd	r24, Y+3	; 0x03
    5e28:	9c 81       	ldd	r25, Y+4	; 0x04
    5e2a:	20 e0       	ldi	r18, 0x00	; 0
    5e2c:	30 e0       	ldi	r19, 0x00	; 0
    5e2e:	40 e0       	ldi	r20, 0x00	; 0
    5e30:	50 e0       	ldi	r21, 0x00	; 0
    5e32:	0e 94 85 04 	call	0x90a	; 0x90a <__ltsf2>
    5e36:	88 23       	and	r24, r24
    5e38:	4c f4       	brge	.+18     	; 0x5e4c <Heater_enuSetState+0x16a>
    5e3a:	80 e0       	ldi	r24, 0x00	; 0
    5e3c:	90 e0       	ldi	r25, 0x00	; 0
    5e3e:	a0 e0       	ldi	r26, 0x00	; 0
    5e40:	b0 e0       	ldi	r27, 0x00	; 0
    5e42:	89 83       	std	Y+1, r24	; 0x01
    5e44:	9a 83       	std	Y+2, r25	; 0x02
    5e46:	ab 83       	std	Y+3, r26	; 0x03
    5e48:	bc 83       	std	Y+4, r27	; 0x04
    5e4a:	14 c0       	rjmp	.+40     	; 0x5e74 <Heater_enuSetState+0x192>
		else if( DutyCycle > HTR_MAX_DUTY_CYCLE ) DutyCycle = HTR_MAX_DUTY_CYCLE ;
    5e4c:	69 81       	ldd	r22, Y+1	; 0x01
    5e4e:	7a 81       	ldd	r23, Y+2	; 0x02
    5e50:	8b 81       	ldd	r24, Y+3	; 0x03
    5e52:	9c 81       	ldd	r25, Y+4	; 0x04
    5e54:	20 e0       	ldi	r18, 0x00	; 0
    5e56:	30 e0       	ldi	r19, 0x00	; 0
    5e58:	40 ea       	ldi	r20, 0xA0	; 160
    5e5a:	52 e4       	ldi	r21, 0x42	; 66
    5e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__gtsf2>
    5e60:	18 16       	cp	r1, r24
    5e62:	44 f4       	brge	.+16     	; 0x5e74 <Heater_enuSetState+0x192>
    5e64:	80 e0       	ldi	r24, 0x00	; 0
    5e66:	90 e0       	ldi	r25, 0x00	; 0
    5e68:	a0 ea       	ldi	r26, 0xA0	; 160
    5e6a:	b2 e4       	ldi	r27, 0x42	; 66
    5e6c:	89 83       	std	Y+1, r24	; 0x01
    5e6e:	9a 83       	std	Y+2, r25	; 0x02
    5e70:	ab 83       	std	Y+3, r26	; 0x03
    5e72:	bc 83       	std	Y+4, r27	; 0x04
	}

	if( ( DutyCycle >= ( PrevDutyCycle + HTR_DUTY_CYC_TOL ) )	|| ( DutyCycle == HTR_MAX_DUTY_CYCLE )	||
    5e74:	80 91 42 02 	lds	r24, 0x0242
    5e78:	90 91 43 02 	lds	r25, 0x0243
    5e7c:	a0 91 44 02 	lds	r26, 0x0244
    5e80:	b0 91 45 02 	lds	r27, 0x0245
    5e84:	bc 01       	movw	r22, r24
    5e86:	cd 01       	movw	r24, r26
    5e88:	20 e0       	ldi	r18, 0x00	; 0
    5e8a:	30 e0       	ldi	r19, 0x00	; 0
    5e8c:	40 e0       	ldi	r20, 0x00	; 0
    5e8e:	50 e0       	ldi	r21, 0x00	; 0
    5e90:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5e94:	dc 01       	movw	r26, r24
    5e96:	cb 01       	movw	r24, r22
    5e98:	bc 01       	movw	r22, r24
    5e9a:	cd 01       	movw	r24, r26
    5e9c:	29 81       	ldd	r18, Y+1	; 0x01
    5e9e:	3a 81       	ldd	r19, Y+2	; 0x02
    5ea0:	4b 81       	ldd	r20, Y+3	; 0x03
    5ea2:	5c 81       	ldd	r21, Y+4	; 0x04
    5ea4:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    5ea8:	18 16       	cp	r1, r24
    5eaa:	44 f5       	brge	.+80     	; 0x5efc <Heater_enuSetState+0x21a>
    5eac:	69 81       	ldd	r22, Y+1	; 0x01
    5eae:	7a 81       	ldd	r23, Y+2	; 0x02
    5eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    5eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    5eb4:	20 e0       	ldi	r18, 0x00	; 0
    5eb6:	30 e0       	ldi	r19, 0x00	; 0
    5eb8:	40 ea       	ldi	r20, 0xA0	; 160
    5eba:	52 e4       	ldi	r21, 0x42	; 66
    5ebc:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    5ec0:	88 23       	and	r24, r24
    5ec2:	e1 f0       	breq	.+56     	; 0x5efc <Heater_enuSetState+0x21a>
    5ec4:	20 91 42 02 	lds	r18, 0x0242
    5ec8:	30 91 43 02 	lds	r19, 0x0243
    5ecc:	40 91 44 02 	lds	r20, 0x0244
    5ed0:	50 91 45 02 	lds	r21, 0x0245
    5ed4:	69 81       	ldd	r22, Y+1	; 0x01
    5ed6:	7a 81       	ldd	r23, Y+2	; 0x02
    5ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    5eda:	9c 81       	ldd	r25, Y+4	; 0x04
    5edc:	0e 94 b5 04 	call	0x96a	; 0x96a <__lesf2>
    5ee0:	18 16       	cp	r1, r24
    5ee2:	64 f4       	brge	.+24     	; 0x5efc <Heater_enuSetState+0x21a>
    5ee4:	69 81       	ldd	r22, Y+1	; 0x01
    5ee6:	7a 81       	ldd	r23, Y+2	; 0x02
    5ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    5eea:	9c 81       	ldd	r25, Y+4	; 0x04
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	30 e0       	ldi	r19, 0x00	; 0
    5ef0:	40 e0       	ldi	r20, 0x00	; 0
    5ef2:	50 e0       	ldi	r21, 0x00	; 0
    5ef4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    5ef8:	88 23       	and	r24, r24
    5efa:	b1 f4       	brne	.+44     	; 0x5f28 <Heater_enuSetState+0x246>
		( DutyCycle <= ( PrevDutyCycle - HTR_DUTY_CYC_TOL ) )	|| ( DutyCycle == 0.0F ) )
	{
		PrevDutyCycle = DutyCycle ;
    5efc:	89 81       	ldd	r24, Y+1	; 0x01
    5efe:	9a 81       	ldd	r25, Y+2	; 0x02
    5f00:	ab 81       	ldd	r26, Y+3	; 0x03
    5f02:	bc 81       	ldd	r27, Y+4	; 0x04
    5f04:	80 93 42 02 	sts	0x0242, r24
    5f08:	90 93 43 02 	sts	0x0243, r25
    5f0c:	a0 93 44 02 	sts	0x0244, r26
    5f10:	b0 93 45 02 	sts	0x0245, r27
		Local_enuErrorState = PWM_enuSetDutyCycle( HEATER_PWM , DutyCycle );
    5f14:	29 81       	ldd	r18, Y+1	; 0x01
    5f16:	3a 81       	ldd	r19, Y+2	; 0x02
    5f18:	4b 81       	ldd	r20, Y+3	; 0x03
    5f1a:	5c 81       	ldd	r21, Y+4	; 0x04
    5f1c:	8a ec       	ldi	r24, 0xCA	; 202
    5f1e:	ba 01       	movw	r22, r20
    5f20:	a9 01       	movw	r20, r18
    5f22:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <PWM_enuSetDutyCycle>
    5f26:	8d 83       	std	Y+5, r24	; 0x05
	}


	PrevTempError = Copy_s8TempError ;
    5f28:	8e 81       	ldd	r24, Y+6	; 0x06
    5f2a:	80 93 46 02 	sts	0x0246, r24

	return Local_enuErrorState ;
    5f2e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5f30:	26 96       	adiw	r28, 0x06	; 6
    5f32:	0f b6       	in	r0, 0x3f	; 63
    5f34:	f8 94       	cli
    5f36:	de bf       	out	0x3e, r29	; 62
    5f38:	0f be       	out	0x3f, r0	; 63
    5f3a:	cd bf       	out	0x3d, r28	; 61
    5f3c:	cf 91       	pop	r28
    5f3e:	df 91       	pop	r29
    5f40:	1f 91       	pop	r17
    5f42:	0f 91       	pop	r16
    5f44:	ff 90       	pop	r15
    5f46:	ef 90       	pop	r14
    5f48:	08 95       	ret

00005f4a <INT0_ISR>:

void INT0_ISR( void)
{
    5f4a:	df 93       	push	r29
    5f4c:	cf 93       	push	r28
    5f4e:	cd b7       	in	r28, 0x3d	; 61
    5f50:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0x0000 ;
    5f52:	ec e4       	ldi	r30, 0x4C	; 76
    5f54:	f0 e0       	ldi	r31, 0x00	; 0
    5f56:	11 82       	std	Z+1, r1	; 0x01
    5f58:	10 82       	st	Z, r1
//	CounterReset = TRUE ;
}
    5f5a:	cf 91       	pop	r28
    5f5c:	df 91       	pop	r29
    5f5e:	08 95       	ret

00005f60 <LM35_enuInit>:
/*	Temperature accuracy of (+/- 1 Degree Celsius ) along the range from 20 - 100 Degrees	*/
/********************************************************************************************/


ES_t LM35_enuInit(void)
{
    5f60:	df 93       	push	r29
    5f62:	cf 93       	push	r28
    5f64:	00 d0       	rcall	.+0      	; 0x5f66 <LM35_enuInit+0x6>
    5f66:	0f 92       	push	r0
    5f68:	cd b7       	in	r28, 0x3d	; 61
    5f6a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    5f6c:	81 e0       	ldi	r24, 0x01	; 1
    5f6e:	89 83       	std	Y+1, r24	; 0x01

	Local_AenuErrorState[0] = DIO_enuSetPinDirection( TEMP_VALUE_GRP , TEMP_VALUE_PIN , DIO_u8INPUT );
    5f70:	8c e0       	ldi	r24, 0x0C	; 12
    5f72:	60 e0       	ldi	r22, 0x00	; 0
    5f74:	40 e0       	ldi	r20, 0x00	; 0
    5f76:	0e 94 4a 24 	call	0x4894	; 0x4894 <DIO_enuSetPinDirection>
    5f7a:	8a 83       	std	Y+2, r24	; 0x02
	Local_AenuErrorState[1] = DIO_enuSetPinValue( TEMP_VALUE_GRP , TEMP_VALUE_PIN , TEMP_VALUE_STATE );
    5f7c:	8c e0       	ldi	r24, 0x0C	; 12
    5f7e:	60 e0       	ldi	r22, 0x00	; 0
    5f80:	40 e0       	ldi	r20, 0x00	; 0
    5f82:	0e 94 19 25 	call	0x4a32	; 0x4a32 <DIO_enuSetPinValue>
    5f86:	8b 83       	std	Y+3, r24	; 0x03

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    5f88:	8a 81       	ldd	r24, Y+2	; 0x02
    5f8a:	88 23       	and	r24, r24
    5f8c:	51 f4       	brne	.+20     	; 0x5fa2 <LM35_enuInit+0x42>
    5f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    5f90:	88 23       	and	r24, r24
    5f92:	39 f4       	brne	.+14     	; 0x5fa2 <LM35_enuInit+0x42>
	{
		Local_AenuErrorState[0] = ADC_enuInit();
    5f94:	0e 94 18 27 	call	0x4e30	; 0x4e30 <ADC_enuInit>
    5f98:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = ADC_enuSelectChannel( TEMP_ADC_CH );
    5f9a:	85 e8       	ldi	r24, 0x85	; 133
    5f9c:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <ADC_enuSelectChannel>
    5fa0:	8b 83       	std	Y+3, r24	; 0x03
 	}
	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    5fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa4:	88 23       	and	r24, r24
    5fa6:	59 f4       	brne	.+22     	; 0x5fbe <LM35_enuInit+0x5e>
    5fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    5faa:	88 23       	and	r24, r24
    5fac:	41 f4       	brne	.+16     	; 0x5fbe <LM35_enuInit+0x5e>
	{

		Local_AenuErrorState[0] = ADC_enuCallBack( ADC_vidISR );
    5fae:	85 e3       	ldi	r24, 0x35	; 53
    5fb0:	90 e3       	ldi	r25, 0x30	; 48
    5fb2:	0e 94 1c 29 	call	0x5238	; 0x5238 <ADC_enuCallBack>
    5fb6:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = ADC_enuStartConversion();
    5fb8:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <ADC_enuStartConversion>
    5fbc:	8b 83       	std	Y+3, r24	; 0x03
	}
	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    5fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    5fc0:	88 23       	and	r24, r24
    5fc2:	21 f4       	brne	.+8      	; 0x5fcc <LM35_enuInit+0x6c>
    5fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    5fc6:	88 23       	and	r24, r24
    5fc8:	09 f4       	brne	.+2      	; 0x5fcc <LM35_enuInit+0x6c>
		Local_enuErrorState = ES_OK ;
    5fca:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    5fcc:	89 81       	ldd	r24, Y+1	; 0x01
}
    5fce:	0f 90       	pop	r0
    5fd0:	0f 90       	pop	r0
    5fd2:	0f 90       	pop	r0
    5fd4:	cf 91       	pop	r28
    5fd6:	df 91       	pop	r29
    5fd8:	08 95       	ret

00005fda <LM35_enuReadTemp>:

ES_t LM35_enuReadTemp( u8 *Copy_u8TempValue )
{
    5fda:	df 93       	push	r29
    5fdc:	cf 93       	push	r28
    5fde:	00 d0       	rcall	.+0      	; 0x5fe0 <LM35_enuReadTemp+0x6>
    5fe0:	00 d0       	rcall	.+0      	; 0x5fe2 <LM35_enuReadTemp+0x8>
    5fe2:	0f 92       	push	r0
    5fe4:	cd b7       	in	r28, 0x3d	; 61
    5fe6:	de b7       	in	r29, 0x3e	; 62
    5fe8:	9d 83       	std	Y+5, r25	; 0x05
    5fea:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
    5fec:	81 e0       	ldi	r24, 0x01	; 1
    5fee:	89 83       	std	Y+1, r24	; 0x01
	u16 Local_u16TempValue;

	if( Global_blConverted == TRUE )
    5ff0:	80 91 47 02 	lds	r24, 0x0247
    5ff4:	81 30       	cpi	r24, 0x01	; 1
    5ff6:	81 f5       	brne	.+96     	; 0x6058 <LM35_enuReadTemp+0x7e>
	{
		Global_blConverted = FALSE ;
    5ff8:	10 92 47 02 	sts	0x0247, r1
		Local_enuErrorState = ADC_enuRead( &Local_u16TempValue );
    5ffc:	ce 01       	movw	r24, r28
    5ffe:	02 96       	adiw	r24, 0x02	; 2
    6000:	0e 94 26 28 	call	0x504c	; 0x504c <ADC_enuRead>
    6004:	89 83       	std	Y+1, r24	; 0x01
		*Copy_u8TempValue = (u8)( ( (f64)Local_u16TempValue * TEMP_CONVERSION_FACTOR ) + TEMP_OFFSET );
    6006:	8a 81       	ldd	r24, Y+2	; 0x02
    6008:	9b 81       	ldd	r25, Y+3	; 0x03
    600a:	cc 01       	movw	r24, r24
    600c:	a0 e0       	ldi	r26, 0x00	; 0
    600e:	b0 e0       	ldi	r27, 0x00	; 0
    6010:	bc 01       	movw	r22, r24
    6012:	cd 01       	movw	r24, r26
    6014:	0e 94 97 05 	call	0xb2e	; 0xb2e <__floatunsisf>
    6018:	dc 01       	movw	r26, r24
    601a:	cb 01       	movw	r24, r22
    601c:	bc 01       	movw	r22, r24
    601e:	cd 01       	movw	r24, r26
    6020:	20 e0       	ldi	r18, 0x00	; 0
    6022:	30 e0       	ldi	r19, 0x00	; 0
    6024:	40 e8       	ldi	r20, 0x80	; 128
    6026:	5e e3       	ldi	r21, 0x3E	; 62
    6028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    602c:	dc 01       	movw	r26, r24
    602e:	cb 01       	movw	r24, r22
    6030:	bc 01       	movw	r22, r24
    6032:	cd 01       	movw	r24, r26
    6034:	20 e0       	ldi	r18, 0x00	; 0
    6036:	30 e0       	ldi	r19, 0x00	; 0
    6038:	40 e0       	ldi	r20, 0x00	; 0
    603a:	50 e0       	ldi	r21, 0x00	; 0
    603c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    6040:	dc 01       	movw	r26, r24
    6042:	cb 01       	movw	r24, r22
    6044:	bc 01       	movw	r22, r24
    6046:	cd 01       	movw	r24, r26
    6048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    604c:	dc 01       	movw	r26, r24
    604e:	cb 01       	movw	r24, r22
    6050:	ec 81       	ldd	r30, Y+4	; 0x04
    6052:	fd 81       	ldd	r31, Y+5	; 0x05
    6054:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK ;
    6056:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState ;
    6058:	89 81       	ldd	r24, Y+1	; 0x01
}
    605a:	0f 90       	pop	r0
    605c:	0f 90       	pop	r0
    605e:	0f 90       	pop	r0
    6060:	0f 90       	pop	r0
    6062:	0f 90       	pop	r0
    6064:	cf 91       	pop	r28
    6066:	df 91       	pop	r29
    6068:	08 95       	ret

0000606a <ADC_vidISR>:

void ADC_vidISR(void)
{
    606a:	df 93       	push	r29
    606c:	cf 93       	push	r28
    606e:	cd b7       	in	r28, 0x3d	; 61
    6070:	de b7       	in	r29, 0x3e	; 62
	Global_blConverted = TRUE;
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	80 93 47 02 	sts	0x0247, r24
}
    6078:	cf 91       	pop	r28
    607a:	df 91       	pop	r29
    607c:	08 95       	ret

0000607e <main>:
u8 Global_u8TempValue = 30;						//	is a variable saving Actual Temperature Value
s8 Global_s8TempError ;							//	is a variable saving Difference between Set Temperature and Actual Temperature

int
main(void)
{
    607e:	ef 92       	push	r14
    6080:	0f 93       	push	r16
    6082:	1f 93       	push	r17
    6084:	df 93       	push	r29
    6086:	cf 93       	push	r28
    6088:	0f 92       	push	r0
    608a:	cd b7       	in	r28, 0x3d	; 61
    608c:	de b7       	in	r29, 0x3e	; 62

	u8 SSeg_u8ActiveModule = TEMP_UNITS ;
    608e:	8c e0       	ldi	r24, 0x0C	; 12
    6090:	89 83       	std	Y+1, r24	; 0x01

	Heater_enuInit();
    6092:	0e 94 e4 2d 	call	0x5bc8	; 0x5bc8 <Heater_enuInit>
	Coolent_enuInit();
    6096:	0e 94 18 2c 	call	0x5830	; 0x5830 <Coolent_enuInit>
	LD_enuInit();
    609a:	0e 94 87 2b 	call	0x570e	; 0x570e <LD_enuInit>
	Switch_enuInit();
    609e:	0e 94 92 29 	call	0x5324	; 0x5324 <Switch_enuInit>
	SevSeg_enuInit();
    60a2:	0e 94 3f 2a 	call	0x547e	; 0x547e <SevSeg_enuInit>
	LM35_enuInit();
    60a6:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <LM35_enuInit>
	TMU_vidInit();
    60aa:	0e 94 05 08 	call	0x100a	; 0x100a <TMU_vidInit>
	//		u8 Copy_u8State ,					->	Initial State of the task ( READY / PAUSED ), we have a third state KILLED
	//		u16 Copy_u16Periodicity,			->	The number of Tick counts after which the task executes again.
	//		u8 Copy_u8Offset					->	The number of Tick counts task is delayed after reaching its Periodic Tick before executing.
	//							);
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				TMU_vidCreateTask(EEPROM_Access			, &EEPROM_SetTempAddress, 8 , READY	 , 3  , 0  );
    60ae:	83 e2       	ldi	r24, 0x23	; 35
    60b0:	94 e3       	ldi	r25, 0x34	; 52
    60b2:	21 ec       	ldi	r18, 0xC1	; 193
    60b4:	31 e0       	ldi	r19, 0x01	; 1
    60b6:	b9 01       	movw	r22, r18
    60b8:	48 e0       	ldi	r20, 0x08	; 8
    60ba:	27 e1       	ldi	r18, 0x17	; 23
    60bc:	03 e0       	ldi	r16, 0x03	; 3
    60be:	10 e0       	ldi	r17, 0x00	; 0
    60c0:	ee 24       	eor	r14, r14
    60c2:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>
				TMU_vidCreateTask(DisplayTemperature	, &SSeg_u8ActiveModule	, 7 , PAUSED , 1  , 0  );
    60c6:	82 ed       	ldi	r24, 0xD2	; 210
    60c8:	90 e3       	ldi	r25, 0x30	; 48
    60ca:	9e 01       	movw	r18, r28
    60cc:	2f 5f       	subi	r18, 0xFF	; 255
    60ce:	3f 4f       	sbci	r19, 0xFF	; 255
    60d0:	b9 01       	movw	r22, r18
    60d2:	47 e0       	ldi	r20, 0x07	; 7
    60d4:	28 e3       	ldi	r18, 0x38	; 56
    60d6:	01 e0       	ldi	r16, 0x01	; 1
    60d8:	10 e0       	ldi	r17, 0x00	; 0
    60da:	ee 24       	eor	r14, r14
    60dc:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>
				TMU_vidCreateTask(CheckTemperatureStatus, NULL					, 6 , PAUSED , 10 , 0  );
    60e0:	83 e5       	ldi	r24, 0x53	; 83
    60e2:	91 e3       	ldi	r25, 0x31	; 49
    60e4:	60 e0       	ldi	r22, 0x00	; 0
    60e6:	70 e0       	ldi	r23, 0x00	; 0
    60e8:	46 e0       	ldi	r20, 0x06	; 6
    60ea:	28 e3       	ldi	r18, 0x38	; 56
    60ec:	0a e0       	ldi	r16, 0x0A	; 10
    60ee:	10 e0       	ldi	r17, 0x00	; 0
    60f0:	ee 24       	eor	r14, r14
    60f2:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>
				TMU_vidCreateTask(AdjustHeaterStatus	, NULL					, 5 , PAUSED , 100, 11 );
    60f6:	87 ed       	ldi	r24, 0xD7	; 215
    60f8:	93 e3       	ldi	r25, 0x33	; 51
    60fa:	60 e0       	ldi	r22, 0x00	; 0
    60fc:	70 e0       	ldi	r23, 0x00	; 0
    60fe:	45 e0       	ldi	r20, 0x05	; 5
    6100:	28 e3       	ldi	r18, 0x38	; 56
    6102:	04 e6       	ldi	r16, 0x64	; 100
    6104:	10 e0       	ldi	r17, 0x00	; 0
    6106:	0f 2e       	mov	r0, r31
    6108:	fb e0       	ldi	r31, 0x0B	; 11
    610a:	ef 2e       	mov	r14, r31
    610c:	f0 2d       	mov	r31, r0
    610e:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>
				TMU_vidCreateTask(AdjustCoolentStatus	, NULL					, 4 , PAUSED , 100, 13 );
    6112:	8d ef       	ldi	r24, 0xFD	; 253
    6114:	93 e3       	ldi	r25, 0x33	; 51
    6116:	60 e0       	ldi	r22, 0x00	; 0
    6118:	70 e0       	ldi	r23, 0x00	; 0
    611a:	44 e0       	ldi	r20, 0x04	; 4
    611c:	28 e3       	ldi	r18, 0x38	; 56
    611e:	04 e6       	ldi	r16, 0x64	; 100
    6120:	10 e0       	ldi	r17, 0x00	; 0
    6122:	0f 2e       	mov	r0, r31
    6124:	fd e0       	ldi	r31, 0x0D	; 13
    6126:	ef 2e       	mov	r14, r31
    6128:	f0 2d       	mov	r31, r0
    612a:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>
				TMU_vidCreateTask(AdjustRedLampStatus	, NULL					, 3 , PAUSED , 50 , 17 );
    612e:	81 e9       	ldi	r24, 0x91	; 145
    6130:	93 e3       	ldi	r25, 0x33	; 51
    6132:	60 e0       	ldi	r22, 0x00	; 0
    6134:	70 e0       	ldi	r23, 0x00	; 0
    6136:	43 e0       	ldi	r20, 0x03	; 3
    6138:	28 e3       	ldi	r18, 0x38	; 56
    613a:	02 e3       	ldi	r16, 0x32	; 50
    613c:	10 e0       	ldi	r17, 0x00	; 0
    613e:	0f 2e       	mov	r0, r31
    6140:	f1 e1       	ldi	r31, 0x11	; 17
    6142:	ef 2e       	mov	r14, r31
    6144:	f0 2d       	mov	r31, r0
    6146:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>
				TMU_vidCreateTask(CheckIncrementSwitch	, NULL					, 2 , PAUSED , 2  , 0  );
    614a:	8e ef       	ldi	r24, 0xFE	; 254
    614c:	91 e3       	ldi	r25, 0x31	; 49
    614e:	60 e0       	ldi	r22, 0x00	; 0
    6150:	70 e0       	ldi	r23, 0x00	; 0
    6152:	42 e0       	ldi	r20, 0x02	; 2
    6154:	28 e3       	ldi	r18, 0x38	; 56
    6156:	02 e0       	ldi	r16, 0x02	; 2
    6158:	10 e0       	ldi	r17, 0x00	; 0
    615a:	ee 24       	eor	r14, r14
    615c:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>
				TMU_vidCreateTask(CheckDecrementSwitch	, NULL					, 1 , PAUSED , 2  , 1  );
    6160:	8c e8       	ldi	r24, 0x8C	; 140
    6162:	92 e3       	ldi	r25, 0x32	; 50
    6164:	60 e0       	ldi	r22, 0x00	; 0
    6166:	70 e0       	ldi	r23, 0x00	; 0
    6168:	41 e0       	ldi	r20, 0x01	; 1
    616a:	28 e3       	ldi	r18, 0x38	; 56
    616c:	02 e0       	ldi	r16, 0x02	; 2
    616e:	10 e0       	ldi	r17, 0x00	; 0
    6170:	ee 24       	eor	r14, r14
    6172:	e3 94       	inc	r14
    6174:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>
				TMU_vidCreateTask(CheckPowerSwitch		, NULL					, 0 , READY  , 2  , 0  );
    6178:	84 e1       	ldi	r24, 0x14	; 20
    617a:	93 e3       	ldi	r25, 0x33	; 51
    617c:	60 e0       	ldi	r22, 0x00	; 0
    617e:	70 e0       	ldi	r23, 0x00	; 0
    6180:	40 e0       	ldi	r20, 0x00	; 0
    6182:	27 e1       	ldi	r18, 0x17	; 23
    6184:	02 e0       	ldi	r16, 0x02	; 2
    6186:	10 e0       	ldi	r17, 0x00	; 0
    6188:	ee 24       	eor	r14, r14
    618a:	0e 94 2f 08 	call	0x105e	; 0x105e <TMU_vidCreateTask>

	// Starting Scheduler for Time Management Unit
				TMU_vidStartScheduler();
    618e:	0e 94 a8 08 	call	0x1150	; 0x1150 <TMU_vidStartScheduler>
    6192:	80 e0       	ldi	r24, 0x00	; 0
    6194:	90 e0       	ldi	r25, 0x00	; 0
}
    6196:	0f 90       	pop	r0
    6198:	cf 91       	pop	r28
    619a:	df 91       	pop	r29
    619c:	1f 91       	pop	r17
    619e:	0f 91       	pop	r16
    61a0:	ef 90       	pop	r14
    61a2:	08 95       	ret

000061a4 <DisplayTemperature>:

void DisplayTemperature(void *Copy_pu8ActiveModule)		//	TASK( 7 )
{
    61a4:	df 93       	push	r29
    61a6:	cf 93       	push	r28
    61a8:	00 d0       	rcall	.+0      	; 0x61aa <DisplayTemperature+0x6>
    61aa:	00 d0       	rcall	.+0      	; 0x61ac <DisplayTemperature+0x8>
    61ac:	00 d0       	rcall	.+0      	; 0x61ae <DisplayTemperature+0xa>
    61ae:	cd b7       	in	r28, 0x3d	; 61
    61b0:	de b7       	in	r29, 0x3e	; 62
    61b2:	9d 83       	std	Y+5, r25	; 0x05
    61b4:	8c 83       	std	Y+4, r24	; 0x04
	u8 *Local_u8ActiveModule = (u8*)Copy_pu8ActiveModule ;
    61b6:	8c 81       	ldd	r24, Y+4	; 0x04
    61b8:	9d 81       	ldd	r25, Y+5	; 0x05
    61ba:	9b 83       	std	Y+3, r25	; 0x03
    61bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DisplayValue;
	static u8 BlinkDelay = BLINK_COUNTS ;
	static bool BlinkStatus = FALSE ;

	if( PowerStatus == ON)
    61be:	80 91 bd 01 	lds	r24, 0x01BD
    61c2:	88 23       	and	r24, r24
    61c4:	09 f0       	breq	.+2      	; 0x61c8 <DisplayTemperature+0x24>
    61c6:	59 c0       	rjmp	.+178    	; 0x627a <DisplayTemperature+0xd6>
	{
		if( Global_u8DisplayMode == NORMAL )			// NORMAL Operation Mode
    61c8:	80 91 c0 01 	lds	r24, 0x01C0
    61cc:	85 30       	cpi	r24, 0x05	; 5
    61ce:	51 f4       	brne	.+20     	; 0x61e4 <DisplayTemperature+0x40>
		{
			Local_u8DisplayValue = Global_u8TempValue ;
    61d0:	80 91 c4 01 	lds	r24, 0x01C4
    61d4:	89 83       	std	Y+1, r24	; 0x01
			if( BlinkStatus == TRUE ) BlinkStatus = FALSE ;
    61d6:	80 91 4b 02 	lds	r24, 0x024B
    61da:	81 30       	cpi	r24, 0x01	; 1
    61dc:	e1 f4       	brne	.+56     	; 0x6216 <DisplayTemperature+0x72>
    61de:	10 92 4b 02 	sts	0x024B, r1
    61e2:	19 c0       	rjmp	.+50     	; 0x6216 <DisplayTemperature+0x72>
		}
		else											// SETUP Mode
		{
			Local_u8DisplayValue = Global_u8TempSetValue ;
    61e4:	80 91 55 02 	lds	r24, 0x0255
    61e8:	89 83       	std	Y+1, r24	; 0x01
			BlinkDelay--;
    61ea:	80 91 c5 01 	lds	r24, 0x01C5
    61ee:	81 50       	subi	r24, 0x01	; 1
    61f0:	80 93 c5 01 	sts	0x01C5, r24
			if(!BlinkDelay)
    61f4:	80 91 c5 01 	lds	r24, 0x01C5
    61f8:	88 23       	and	r24, r24
    61fa:	69 f4       	brne	.+26     	; 0x6216 <DisplayTemperature+0x72>
			{
				BlinkDelay = BLINK_COUNTS;
    61fc:	85 e0       	ldi	r24, 0x05	; 5
    61fe:	80 93 c5 01 	sts	0x01C5, r24
				BlinkStatus = ( ( BlinkStatus == TRUE )? FALSE : TRUE ) ;
    6202:	80 91 4b 02 	lds	r24, 0x024B
    6206:	1e 82       	std	Y+6, r1	; 0x06
    6208:	81 30       	cpi	r24, 0x01	; 1
    620a:	11 f0       	breq	.+4      	; 0x6210 <DisplayTemperature+0x6c>
    620c:	81 e0       	ldi	r24, 0x01	; 1
    620e:	8e 83       	std	Y+6, r24	; 0x06
    6210:	8e 81       	ldd	r24, Y+6	; 0x06
    6212:	80 93 4b 02 	sts	0x024B, r24
			}
		}

		if( *Local_u8ActiveModule == TEMP_UNITS )
    6216:	ea 81       	ldd	r30, Y+2	; 0x02
    6218:	fb 81       	ldd	r31, Y+3	; 0x03
    621a:	80 81       	ld	r24, Z
    621c:	8c 30       	cpi	r24, 0x0C	; 12
    621e:	b9 f4       	brne	.+46     	; 0x624e <DisplayTemperature+0xaa>
		{
			SevSeg_enuModuleDisable( TEMP_TENS );
    6220:	8b e0       	ldi	r24, 0x0B	; 11
    6222:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <SevSeg_enuModuleDisable>
			SevSeg_enuSetDigitValue( Local_u8DisplayValue % 10 );
    6226:	89 81       	ldd	r24, Y+1	; 0x01
    6228:	9a e0       	ldi	r25, 0x0A	; 10
    622a:	69 2f       	mov	r22, r25
    622c:	0e 94 8b 34 	call	0x6916	; 0x6916 <__udivmodqi4>
    6230:	89 2f       	mov	r24, r25
    6232:	0e 94 cc 2a 	call	0x5598	; 0x5598 <SevSeg_enuSetDigitValue>
			if( BlinkStatus == FALSE )	SevSeg_enuModuleEnable( TEMP_UNITS );
    6236:	80 91 4b 02 	lds	r24, 0x024B
    623a:	88 23       	and	r24, r24
    623c:	19 f4       	brne	.+6      	; 0x6244 <DisplayTemperature+0xa0>
    623e:	8c e0       	ldi	r24, 0x0C	; 12
    6240:	0e 94 33 2b 	call	0x5666	; 0x5666 <SevSeg_enuModuleEnable>
			*Local_u8ActiveModule = TEMP_TENS ;
    6244:	ea 81       	ldd	r30, Y+2	; 0x02
    6246:	fb 81       	ldd	r31, Y+3	; 0x03
    6248:	8b e0       	ldi	r24, 0x0B	; 11
    624a:	80 83       	st	Z, r24
    624c:	23 c0       	rjmp	.+70     	; 0x6294 <DisplayTemperature+0xf0>
		}
		else
		{
			SevSeg_enuModuleDisable( TEMP_UNITS );
    624e:	8c e0       	ldi	r24, 0x0C	; 12
    6250:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <SevSeg_enuModuleDisable>
			SevSeg_enuSetDigitValue( Local_u8DisplayValue / 10 );
    6254:	89 81       	ldd	r24, Y+1	; 0x01
    6256:	9a e0       	ldi	r25, 0x0A	; 10
    6258:	69 2f       	mov	r22, r25
    625a:	0e 94 8b 34 	call	0x6916	; 0x6916 <__udivmodqi4>
    625e:	0e 94 cc 2a 	call	0x5598	; 0x5598 <SevSeg_enuSetDigitValue>
			if( BlinkStatus == FALSE )SevSeg_enuModuleEnable( TEMP_TENS );
    6262:	80 91 4b 02 	lds	r24, 0x024B
    6266:	88 23       	and	r24, r24
    6268:	19 f4       	brne	.+6      	; 0x6270 <DisplayTemperature+0xcc>
    626a:	8b e0       	ldi	r24, 0x0B	; 11
    626c:	0e 94 33 2b 	call	0x5666	; 0x5666 <SevSeg_enuModuleEnable>
			*Local_u8ActiveModule = TEMP_UNITS ;
    6270:	ea 81       	ldd	r30, Y+2	; 0x02
    6272:	fb 81       	ldd	r31, Y+3	; 0x03
    6274:	8c e0       	ldi	r24, 0x0C	; 12
    6276:	80 83       	st	Z, r24
    6278:	0d c0       	rjmp	.+26     	; 0x6294 <DisplayTemperature+0xf0>
		}
	}
	else
	{
		SevSeg_enuModuleDisable( TEMP_UNITS );
    627a:	8c e0       	ldi	r24, 0x0C	; 12
    627c:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <SevSeg_enuModuleDisable>
		SevSeg_enuModuleDisable( TEMP_TENS );
    6280:	8b e0       	ldi	r24, 0x0B	; 11
    6282:	0e 94 5d 2b 	call	0x56ba	; 0x56ba <SevSeg_enuModuleDisable>
		*Local_u8ActiveModule = TEMP_UNITS;
    6286:	ea 81       	ldd	r30, Y+2	; 0x02
    6288:	fb 81       	ldd	r31, Y+3	; 0x03
    628a:	8c e0       	ldi	r24, 0x0C	; 12
    628c:	80 83       	st	Z, r24
		TMU_vidPauseTask( 7 );
    628e:	87 e0       	ldi	r24, 0x07	; 7
    6290:	0e 94 87 09 	call	0x130e	; 0x130e <TMU_vidPauseTask>
	}
}
    6294:	26 96       	adiw	r28, 0x06	; 6
    6296:	0f b6       	in	r0, 0x3f	; 63
    6298:	f8 94       	cli
    629a:	de bf       	out	0x3e, r29	; 62
    629c:	0f be       	out	0x3f, r0	; 63
    629e:	cd bf       	out	0x3d, r28	; 61
    62a0:	cf 91       	pop	r28
    62a2:	df 91       	pop	r29
    62a4:	08 95       	ret

000062a6 <CheckTemperatureStatus>:

void CheckTemperatureStatus(void *pNULL)		//	TASK( 6 )
{
    62a6:	df 93       	push	r29
    62a8:	cf 93       	push	r28
    62aa:	00 d0       	rcall	.+0      	; 0x62ac <CheckTemperatureStatus+0x6>
    62ac:	0f 92       	push	r0
    62ae:	cd b7       	in	r28, 0x3d	; 61
    62b0:	de b7       	in	r29, 0x3e	; 62
    62b2:	9b 83       	std	Y+3, r25	; 0x03
    62b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8TempValue ;
	static u16 Local_u16TempAccValue = 0 ;
	static u8 Local_u8PrevTempValue = 0 ;
	static u8 Local_u8TempReadCounter = (u8)TEMP_AVG_READINGS ;

	if( Global_u8DisplayMode == NORMAL && PowerStatus == ON )
    62b6:	80 91 c0 01 	lds	r24, 0x01C0
    62ba:	85 30       	cpi	r24, 0x05	; 5
    62bc:	09 f0       	breq	.+2      	; 0x62c0 <CheckTemperatureStatus+0x1a>
    62be:	8d c0       	rjmp	.+282    	; 0x63da <CheckTemperatureStatus+0x134>
    62c0:	80 91 bd 01 	lds	r24, 0x01BD
    62c4:	88 23       	and	r24, r24
    62c6:	09 f0       	breq	.+2      	; 0x62ca <CheckTemperatureStatus+0x24>
    62c8:	88 c0       	rjmp	.+272    	; 0x63da <CheckTemperatureStatus+0x134>
	{
		if( ES_OK == LM35_enuReadTemp( &Local_u8TempValue ) )
    62ca:	ce 01       	movw	r24, r28
    62cc:	01 96       	adiw	r24, 0x01	; 1
    62ce:	0e 94 ed 2f 	call	0x5fda	; 0x5fda <LM35_enuReadTemp>
    62d2:	88 23       	and	r24, r24
    62d4:	b1 f4       	brne	.+44     	; 0x6302 <CheckTemperatureStatus+0x5c>
		{
			Local_u16TempAccValue += Local_u8TempValue ;
    62d6:	89 81       	ldd	r24, Y+1	; 0x01
    62d8:	28 2f       	mov	r18, r24
    62da:	30 e0       	ldi	r19, 0x00	; 0
    62dc:	80 91 4d 02 	lds	r24, 0x024D
    62e0:	90 91 4e 02 	lds	r25, 0x024E
    62e4:	82 0f       	add	r24, r18
    62e6:	93 1f       	adc	r25, r19
    62e8:	90 93 4e 02 	sts	0x024E, r25
    62ec:	80 93 4d 02 	sts	0x024D, r24
			if( ES_OK == ADC_enuStartConversion() )
    62f0:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <ADC_enuStartConversion>
    62f4:	88 23       	and	r24, r24
    62f6:	29 f4       	brne	.+10     	; 0x6302 <CheckTemperatureStatus+0x5c>
				Local_u8TempReadCounter--;
    62f8:	80 91 c6 01 	lds	r24, 0x01C6
    62fc:	81 50       	subi	r24, 0x01	; 1
    62fe:	80 93 c6 01 	sts	0x01C6, r24
		}
		if( !Local_u8TempReadCounter )
    6302:	80 91 c6 01 	lds	r24, 0x01C6
    6306:	88 23       	and	r24, r24
    6308:	09 f0       	breq	.+2      	; 0x630c <CheckTemperatureStatus+0x66>
    630a:	72 c0       	rjmp	.+228    	; 0x63f0 <CheckTemperatureStatus+0x14a>
		{
			Global_u8TempValue = ( Local_u16TempAccValue / TEMP_AVG_READINGS );
    630c:	80 91 4d 02 	lds	r24, 0x024D
    6310:	90 91 4e 02 	lds	r25, 0x024E
    6314:	2a e0       	ldi	r18, 0x0A	; 10
    6316:	30 e0       	ldi	r19, 0x00	; 0
    6318:	b9 01       	movw	r22, r18
    631a:	0e 94 97 34 	call	0x692e	; 0x692e <__udivmodhi4>
    631e:	cb 01       	movw	r24, r22
    6320:	80 93 c4 01 	sts	0x01C4, r24
			Global_s8TempError = Global_u8TempValue - Global_u8TempSetValue ;
    6324:	90 91 c4 01 	lds	r25, 0x01C4
    6328:	80 91 55 02 	lds	r24, 0x0255
    632c:	29 2f       	mov	r18, r25
    632e:	28 1b       	sub	r18, r24
    6330:	82 2f       	mov	r24, r18
    6332:	80 93 56 02 	sts	0x0256, r24
			Local_u8PrevTempValue = Global_u8TempValue ;
    6336:	80 91 c4 01 	lds	r24, 0x01C4
    633a:	80 93 4c 02 	sts	0x024C, r24
			Local_u16TempAccValue = 0 ;
    633e:	10 92 4e 02 	sts	0x024E, r1
    6342:	10 92 4d 02 	sts	0x024D, r1
			Local_u8TempReadCounter = (u8)TEMP_AVG_READINGS;
    6346:	8a e0       	ldi	r24, 0x0A	; 10
    6348:	80 93 c6 01 	sts	0x01C6, r24

			if( Global_s8TempError < HTR_TEMP_TOLERANCE && HeaterStatus == OFF && CoolentStatus == OFF )
    634c:	80 91 56 02 	lds	r24, 0x0256
    6350:	85 30       	cpi	r24, 0x05	; 5
    6352:	b4 f4       	brge	.+44     	; 0x6380 <CheckTemperatureStatus+0xda>
    6354:	80 91 be 01 	lds	r24, 0x01BE
    6358:	81 30       	cpi	r24, 0x01	; 1
    635a:	91 f4       	brne	.+36     	; 0x6380 <CheckTemperatureStatus+0xda>
    635c:	80 91 bf 01 	lds	r24, 0x01BF
    6360:	81 30       	cpi	r24, 0x01	; 1
    6362:	71 f4       	brne	.+28     	; 0x6380 <CheckTemperatureStatus+0xda>
			{
				ProcessStatus = HEATING ;
    6364:	10 92 48 02 	sts	0x0248, r1
				HeaterStatus = ON ;
    6368:	10 92 be 01 	sts	0x01BE, r1
				CoolentStatus = OFF ;
    636c:	81 e0       	ldi	r24, 0x01	; 1
    636e:	80 93 bf 01 	sts	0x01BF, r24
				LedStatus = LD_BLINK ;
    6372:	83 e1       	ldi	r24, 0x13	; 19
    6374:	80 93 49 02 	sts	0x0249, r24
				TMU_vidResumeTask( 5 );
    6378:	85 e0       	ldi	r24, 0x05	; 5
    637a:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
    637e:	38 c0       	rjmp	.+112    	; 0x63f0 <CheckTemperatureStatus+0x14a>
			}
			else if( Global_s8TempError >= HTR_TEMP_TOLERANCE && ProcessStatus == HEATING )
    6380:	80 91 56 02 	lds	r24, 0x0256
    6384:	85 30       	cpi	r24, 0x05	; 5
    6386:	9c f0       	brlt	.+38     	; 0x63ae <CheckTemperatureStatus+0x108>
    6388:	80 91 48 02 	lds	r24, 0x0248
    638c:	88 23       	and	r24, r24
    638e:	79 f4       	brne	.+30     	; 0x63ae <CheckTemperatureStatus+0x108>
			{
				ProcessStatus = COOLING ;
    6390:	81 e0       	ldi	r24, 0x01	; 1
    6392:	80 93 48 02 	sts	0x0248, r24
				HeaterStatus = OFF ;
    6396:	81 e0       	ldi	r24, 0x01	; 1
    6398:	80 93 be 01 	sts	0x01BE, r24
				CoolentStatus = ON ;
    639c:	10 92 bf 01 	sts	0x01BF, r1
				LedStatus = LD_ON ;
    63a0:	81 e0       	ldi	r24, 0x01	; 1
    63a2:	80 93 49 02 	sts	0x0249, r24
				TMU_vidResumeTask( 4 );
    63a6:	84 e0       	ldi	r24, 0x04	; 4
    63a8:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
    63ac:	21 c0       	rjmp	.+66     	; 0x63f0 <CheckTemperatureStatus+0x14a>
			}
			else if( Global_s8TempError <= -COOLENT_TEMP_TOLERANCE && ProcessStatus == COOLING )
    63ae:	80 91 56 02 	lds	r24, 0x0256
    63b2:	8c 3f       	cpi	r24, 0xFC	; 252
    63b4:	ec f4       	brge	.+58     	; 0x63f0 <CheckTemperatureStatus+0x14a>
    63b6:	80 91 48 02 	lds	r24, 0x0248
    63ba:	81 30       	cpi	r24, 0x01	; 1
    63bc:	c9 f4       	brne	.+50     	; 0x63f0 <CheckTemperatureStatus+0x14a>
			{
				ProcessStatus = HEATING ;
    63be:	10 92 48 02 	sts	0x0248, r1
				HeaterStatus = ON ;
    63c2:	10 92 be 01 	sts	0x01BE, r1
				CoolentStatus = OFF ;
    63c6:	81 e0       	ldi	r24, 0x01	; 1
    63c8:	80 93 bf 01 	sts	0x01BF, r24
				LedStatus = LD_BLINK ;
    63cc:	83 e1       	ldi	r24, 0x13	; 19
    63ce:	80 93 49 02 	sts	0x0249, r24
				TMU_vidResumeTask( 5 );
    63d2:	85 e0       	ldi	r24, 0x05	; 5
    63d4:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
    63d8:	0b c0       	rjmp	.+22     	; 0x63f0 <CheckTemperatureStatus+0x14a>
			}
		}
	}
	else
	{
		LedStatus = LD_OFF ;
    63da:	10 92 49 02 	sts	0x0249, r1
		HeaterStatus = OFF ;
    63de:	81 e0       	ldi	r24, 0x01	; 1
    63e0:	80 93 be 01 	sts	0x01BE, r24
		CoolentStatus = OFF ;
    63e4:	81 e0       	ldi	r24, 0x01	; 1
    63e6:	80 93 bf 01 	sts	0x01BF, r24
		TMU_vidPauseTask( 6 );
    63ea:	86 e0       	ldi	r24, 0x06	; 6
    63ec:	0e 94 87 09 	call	0x130e	; 0x130e <TMU_vidPauseTask>
	}
}
    63f0:	0f 90       	pop	r0
    63f2:	0f 90       	pop	r0
    63f4:	0f 90       	pop	r0
    63f6:	cf 91       	pop	r28
    63f8:	df 91       	pop	r29
    63fa:	08 95       	ret

000063fc <CheckIncrementSwitch>:

void CheckIncrementSwitch(void *pNULL)		//	TASK( 2 )
{
    63fc:	df 93       	push	r29
    63fe:	cf 93       	push	r28
    6400:	00 d0       	rcall	.+0      	; 0x6402 <CheckIncrementSwitch+0x6>
    6402:	0f 92       	push	r0
    6404:	cd b7       	in	r28, 0x3d	; 61
    6406:	de b7       	in	r29, 0x3e	; 62
    6408:	9b 83       	std	Y+3, r25	; 0x03
    640a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;


		if( ES_OK == Switch_enuGetPressed( INC_SW , &Local_u8SwitchValue ) )
    640c:	8a ec       	ldi	r24, 0xCA	; 202
    640e:	9e 01       	movw	r18, r28
    6410:	2f 5f       	subi	r18, 0xFF	; 255
    6412:	3f 4f       	sbci	r19, 0xFF	; 255
    6414:	b9 01       	movw	r22, r18
    6416:	0e 94 01 2a 	call	0x5402	; 0x5402 <Switch_enuGetPressed>
    641a:	88 23       	and	r24, r24
    641c:	09 f0       	breq	.+2      	; 0x6420 <CheckIncrementSwitch+0x24>
    641e:	76 c0       	rjmp	.+236    	; 0x650c <CheckIncrementSwitch+0x110>
		{
			static u8 press = 0 , BounceDelay = BOUNCE_COUNTS ;
			static u16 SetupDelay = SETUP_COUNTS ;
			if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 )  // First press
    6420:	89 81       	ldd	r24, Y+1	; 0x01
    6422:	81 30       	cpi	r24, 0x01	; 1
    6424:	69 f5       	brne	.+90     	; 0x6480 <CheckIncrementSwitch+0x84>
    6426:	80 91 4f 02 	lds	r24, 0x024F
    642a:	88 23       	and	r24, r24
    642c:	49 f5       	brne	.+82     	; 0x6480 <CheckIncrementSwitch+0x84>
			{
				if( Global_u8DisplayMode == NORMAL )
    642e:	80 91 c0 01 	lds	r24, 0x01C0
    6432:	85 30       	cpi	r24, 0x05	; 5
    6434:	81 f4       	brne	.+32     	; 0x6456 <CheckIncrementSwitch+0x5a>
				{
					Global_u8DisplayMode = SETUP ;
    6436:	89 e0       	ldi	r24, 0x09	; 9
    6438:	80 93 c0 01 	sts	0x01C0, r24
					Global_u8SetupSw = INC_SW ;
    643c:	8a ec       	ldi	r24, 0xCA	; 202
    643e:	80 93 57 02 	sts	0x0257, r24
					SetupDelay = SETUP_COUNTS;
    6442:	82 e3       	ldi	r24, 0x32	; 50
    6444:	90 e0       	ldi	r25, 0x00	; 0
    6446:	90 93 c8 01 	sts	0x01C8, r25
    644a:	80 93 c7 01 	sts	0x01C7, r24
					press = 1 ;
    644e:	81 e0       	ldi	r24, 0x01	; 1
    6450:	80 93 4f 02 	sts	0x024F, r24
    6454:	5b c0       	rjmp	.+182    	; 0x650c <CheckIncrementSwitch+0x110>
				}
				else
				{
					if( Global_u8SetupSw != INC_SW )
    6456:	80 91 57 02 	lds	r24, 0x0257
    645a:	8a 3c       	cpi	r24, 0xCA	; 202
    645c:	19 f0       	breq	.+6      	; 0x6464 <CheckIncrementSwitch+0x68>
						Global_u8SetupSw = INC_SW ;
    645e:	8a ec       	ldi	r24, 0xCA	; 202
    6460:	80 93 57 02 	sts	0x0257, r24
					if( Global_u8TempSetValue < TEMP_MAX_LIMIT )
    6464:	80 91 55 02 	lds	r24, 0x0255
    6468:	8b 34       	cpi	r24, 0x4B	; 75
    646a:	08 f0       	brcs	.+2      	; 0x646e <CheckIncrementSwitch+0x72>
    646c:	4f c0       	rjmp	.+158    	; 0x650c <CheckIncrementSwitch+0x110>
					{
						Global_u8TempSetValue += SETUP_STEP;
    646e:	80 91 55 02 	lds	r24, 0x0255
    6472:	8b 5f       	subi	r24, 0xFB	; 251
    6474:	80 93 55 02 	sts	0x0255, r24
						press = 1 ;
    6478:	81 e0       	ldi	r24, 0x01	; 1
    647a:	80 93 4f 02 	sts	0x024F, r24
    647e:	46 c0       	rjmp	.+140    	; 0x650c <CheckIncrementSwitch+0x110>
					}
				}
			}
			else if ( (Local_u8SwitchValue == DIO_u8LOW ) && press == 1 ) // Removed first press
    6480:	89 81       	ldd	r24, Y+1	; 0x01
    6482:	88 23       	and	r24, r24
    6484:	c9 f4       	brne	.+50     	; 0x64b8 <CheckIncrementSwitch+0xbc>
    6486:	80 91 4f 02 	lds	r24, 0x024F
    648a:	81 30       	cpi	r24, 0x01	; 1
    648c:	a9 f4       	brne	.+42     	; 0x64b8 <CheckIncrementSwitch+0xbc>
			{
				BounceDelay--;
    648e:	80 91 c9 01 	lds	r24, 0x01C9
    6492:	81 50       	subi	r24, 0x01	; 1
    6494:	80 93 c9 01 	sts	0x01C9, r24
				if( !BounceDelay )
    6498:	80 91 c9 01 	lds	r24, 0x01C9
    649c:	88 23       	and	r24, r24
    649e:	b1 f5       	brne	.+108    	; 0x650c <CheckIncrementSwitch+0x110>
				{
					press = 0 ;
    64a0:	10 92 4f 02 	sts	0x024F, r1
					BounceDelay = BOUNCE_COUNTS ;
    64a4:	82 e0       	ldi	r24, 0x02	; 2
    64a6:	80 93 c9 01 	sts	0x01C9, r24
					SetupDelay = SETUP_COUNTS ;
    64aa:	82 e3       	ldi	r24, 0x32	; 50
    64ac:	90 e0       	ldi	r25, 0x00	; 0
    64ae:	90 93 c8 01 	sts	0x01C8, r25
    64b2:	80 93 c7 01 	sts	0x01C7, r24
    64b6:	2a c0       	rjmp	.+84     	; 0x650c <CheckIncrementSwitch+0x110>
				}
			}
			else if (	( Global_u8DisplayMode == SETUP )	&&  ( Global_u8SetupSw == INC_SW ) &&
    64b8:	80 91 c0 01 	lds	r24, 0x01C0
    64bc:	89 30       	cpi	r24, 0x09	; 9
    64be:	31 f5       	brne	.+76     	; 0x650c <CheckIncrementSwitch+0x110>
    64c0:	80 91 57 02 	lds	r24, 0x0257
    64c4:	8a 3c       	cpi	r24, 0xCA	; 202
    64c6:	11 f5       	brne	.+68     	; 0x650c <CheckIncrementSwitch+0x110>
    64c8:	89 81       	ldd	r24, Y+1	; 0x01
    64ca:	88 23       	and	r24, r24
    64cc:	f9 f4       	brne	.+62     	; 0x650c <CheckIncrementSwitch+0x110>
    64ce:	80 91 4f 02 	lds	r24, 0x024F
    64d2:	88 23       	and	r24, r24
    64d4:	d9 f4       	brne	.+54     	; 0x650c <CheckIncrementSwitch+0x110>
						(Local_u8SwitchValue == DIO_u8LOW ) &&	press == 0 ) // Unpress delay in Setup mode
			{
				SetupDelay--;
    64d6:	80 91 c7 01 	lds	r24, 0x01C7
    64da:	90 91 c8 01 	lds	r25, 0x01C8
    64de:	01 97       	sbiw	r24, 0x01	; 1
    64e0:	90 93 c8 01 	sts	0x01C8, r25
    64e4:	80 93 c7 01 	sts	0x01C7, r24
				if( !SetupDelay )
    64e8:	80 91 c7 01 	lds	r24, 0x01C7
    64ec:	90 91 c8 01 	lds	r25, 0x01C8
    64f0:	00 97       	sbiw	r24, 0x00	; 0
    64f2:	61 f4       	brne	.+24     	; 0x650c <CheckIncrementSwitch+0x110>
				{
					SetTempUpdate = TRUE ;
    64f4:	81 e0       	ldi	r24, 0x01	; 1
    64f6:	80 93 4a 02 	sts	0x024A, r24
					TMU_vidResumeTask( 6 );
    64fa:	86 e0       	ldi	r24, 0x06	; 6
    64fc:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
					TMU_vidResumeTask( 8 );
    6500:	88 e0       	ldi	r24, 0x08	; 8
    6502:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
					Global_u8DisplayMode = NORMAL ;
    6506:	85 e0       	ldi	r24, 0x05	; 5
    6508:	80 93 c0 01 	sts	0x01C0, r24
				}
			}

		}
}
    650c:	0f 90       	pop	r0
    650e:	0f 90       	pop	r0
    6510:	0f 90       	pop	r0
    6512:	cf 91       	pop	r28
    6514:	df 91       	pop	r29
    6516:	08 95       	ret

00006518 <CheckDecrementSwitch>:
void CheckDecrementSwitch(void *pNULL )		//	TASK( 1 )
{
    6518:	df 93       	push	r29
    651a:	cf 93       	push	r28
    651c:	00 d0       	rcall	.+0      	; 0x651e <CheckDecrementSwitch+0x6>
    651e:	0f 92       	push	r0
    6520:	cd b7       	in	r28, 0x3d	; 61
    6522:	de b7       	in	r29, 0x3e	; 62
    6524:	9b 83       	std	Y+3, r25	; 0x03
    6526:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;

	if( ES_OK == Switch_enuGetPressed( DEC_SW , &Local_u8SwitchValue ) )
    6528:	8b ec       	ldi	r24, 0xCB	; 203
    652a:	9e 01       	movw	r18, r28
    652c:	2f 5f       	subi	r18, 0xFF	; 255
    652e:	3f 4f       	sbci	r19, 0xFF	; 255
    6530:	b9 01       	movw	r22, r18
    6532:	0e 94 01 2a 	call	0x5402	; 0x5402 <Switch_enuGetPressed>
    6536:	88 23       	and	r24, r24
    6538:	09 f0       	breq	.+2      	; 0x653c <CheckDecrementSwitch+0x24>
    653a:	70 c0       	rjmp	.+224    	; 0x661c <CheckDecrementSwitch+0x104>
	{
		static u8 press = 0 , BounceDelay = BOUNCE_COUNTS ;
		static u16 SetupDelay = SETUP_COUNTS ;
		if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 )  //First press
    653c:	89 81       	ldd	r24, Y+1	; 0x01
    653e:	81 30       	cpi	r24, 0x01	; 1
    6540:	39 f5       	brne	.+78     	; 0x6590 <CheckDecrementSwitch+0x78>
    6542:	80 91 50 02 	lds	r24, 0x0250
    6546:	88 23       	and	r24, r24
    6548:	19 f5       	brne	.+70     	; 0x6590 <CheckDecrementSwitch+0x78>
		{
			if( Global_u8DisplayMode == NORMAL )
    654a:	80 91 c0 01 	lds	r24, 0x01C0
    654e:	85 30       	cpi	r24, 0x05	; 5
    6550:	51 f4       	brne	.+20     	; 0x6566 <CheckDecrementSwitch+0x4e>
			{
				Global_u8DisplayMode = SETUP ;
    6552:	89 e0       	ldi	r24, 0x09	; 9
    6554:	80 93 c0 01 	sts	0x01C0, r24
				Global_u8SetupSw = DEC_SW ;
    6558:	8b ec       	ldi	r24, 0xCB	; 203
    655a:	80 93 57 02 	sts	0x0257, r24
				press = 1 ;
    655e:	81 e0       	ldi	r24, 0x01	; 1
    6560:	80 93 50 02 	sts	0x0250, r24
    6564:	5b c0       	rjmp	.+182    	; 0x661c <CheckDecrementSwitch+0x104>
			}
			else
			{
				if( Global_u8SetupSw != DEC_SW )
    6566:	80 91 57 02 	lds	r24, 0x0257
    656a:	8b 3c       	cpi	r24, 0xCB	; 203
    656c:	19 f0       	breq	.+6      	; 0x6574 <CheckDecrementSwitch+0x5c>
					Global_u8SetupSw = DEC_SW ;
    656e:	8b ec       	ldi	r24, 0xCB	; 203
    6570:	80 93 57 02 	sts	0x0257, r24
				if( Global_u8TempSetValue > TEMP_MIN_LIMIT )
    6574:	80 91 55 02 	lds	r24, 0x0255
    6578:	84 32       	cpi	r24, 0x24	; 36
    657a:	08 f4       	brcc	.+2      	; 0x657e <CheckDecrementSwitch+0x66>
    657c:	4f c0       	rjmp	.+158    	; 0x661c <CheckDecrementSwitch+0x104>
				{
					Global_u8TempSetValue -= SETUP_STEP;
    657e:	80 91 55 02 	lds	r24, 0x0255
    6582:	85 50       	subi	r24, 0x05	; 5
    6584:	80 93 55 02 	sts	0x0255, r24
					press = 1 ;
    6588:	81 e0       	ldi	r24, 0x01	; 1
    658a:	80 93 50 02 	sts	0x0250, r24
    658e:	46 c0       	rjmp	.+140    	; 0x661c <CheckDecrementSwitch+0x104>
				}
			}
		}
		else if ( (Local_u8SwitchValue== DIO_u8LOW ) && press == 1 ) // removed first press
    6590:	89 81       	ldd	r24, Y+1	; 0x01
    6592:	88 23       	and	r24, r24
    6594:	c9 f4       	brne	.+50     	; 0x65c8 <CheckDecrementSwitch+0xb0>
    6596:	80 91 50 02 	lds	r24, 0x0250
    659a:	81 30       	cpi	r24, 0x01	; 1
    659c:	a9 f4       	brne	.+42     	; 0x65c8 <CheckDecrementSwitch+0xb0>
		{
			BounceDelay--;
    659e:	80 91 cc 01 	lds	r24, 0x01CC
    65a2:	81 50       	subi	r24, 0x01	; 1
    65a4:	80 93 cc 01 	sts	0x01CC, r24
			if( !BounceDelay )
    65a8:	80 91 cc 01 	lds	r24, 0x01CC
    65ac:	88 23       	and	r24, r24
    65ae:	b1 f5       	brne	.+108    	; 0x661c <CheckDecrementSwitch+0x104>
			{
				press = 0 ;
    65b0:	10 92 50 02 	sts	0x0250, r1
				BounceDelay = BOUNCE_COUNTS ;
    65b4:	82 e0       	ldi	r24, 0x02	; 2
    65b6:	80 93 cc 01 	sts	0x01CC, r24
				SetupDelay = SETUP_COUNTS;
    65ba:	82 e3       	ldi	r24, 0x32	; 50
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	90 93 cb 01 	sts	0x01CB, r25
    65c2:	80 93 ca 01 	sts	0x01CA, r24
    65c6:	2a c0       	rjmp	.+84     	; 0x661c <CheckDecrementSwitch+0x104>
			}
		}
		else if (	( Global_u8DisplayMode == SETUP )	&&  ( Global_u8SetupSw == DEC_SW ) &&
    65c8:	80 91 c0 01 	lds	r24, 0x01C0
    65cc:	89 30       	cpi	r24, 0x09	; 9
    65ce:	31 f5       	brne	.+76     	; 0x661c <CheckDecrementSwitch+0x104>
    65d0:	80 91 57 02 	lds	r24, 0x0257
    65d4:	8b 3c       	cpi	r24, 0xCB	; 203
    65d6:	11 f5       	brne	.+68     	; 0x661c <CheckDecrementSwitch+0x104>
    65d8:	89 81       	ldd	r24, Y+1	; 0x01
    65da:	88 23       	and	r24, r24
    65dc:	f9 f4       	brne	.+62     	; 0x661c <CheckDecrementSwitch+0x104>
    65de:	80 91 50 02 	lds	r24, 0x0250
    65e2:	88 23       	and	r24, r24
    65e4:	d9 f4       	brne	.+54     	; 0x661c <CheckDecrementSwitch+0x104>
					(Local_u8SwitchValue == DIO_u8LOW ) &&	press == 0 	 ) // Unpress delay in Setup mode
		{
			SetupDelay--;
    65e6:	80 91 ca 01 	lds	r24, 0x01CA
    65ea:	90 91 cb 01 	lds	r25, 0x01CB
    65ee:	01 97       	sbiw	r24, 0x01	; 1
    65f0:	90 93 cb 01 	sts	0x01CB, r25
    65f4:	80 93 ca 01 	sts	0x01CA, r24
			if( !SetupDelay )
    65f8:	80 91 ca 01 	lds	r24, 0x01CA
    65fc:	90 91 cb 01 	lds	r25, 0x01CB
    6600:	00 97       	sbiw	r24, 0x00	; 0
    6602:	61 f4       	brne	.+24     	; 0x661c <CheckDecrementSwitch+0x104>
			{
				SetTempUpdate = TRUE ;
    6604:	81 e0       	ldi	r24, 0x01	; 1
    6606:	80 93 4a 02 	sts	0x024A, r24
				TMU_vidResumeTask( 6 );
    660a:	86 e0       	ldi	r24, 0x06	; 6
    660c:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
				TMU_vidResumeTask( 8 );
    6610:	88 e0       	ldi	r24, 0x08	; 8
    6612:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
				Global_u8DisplayMode = NORMAL ;
    6616:	85 e0       	ldi	r24, 0x05	; 5
    6618:	80 93 c0 01 	sts	0x01C0, r24
			}
		}

	}
}
    661c:	0f 90       	pop	r0
    661e:	0f 90       	pop	r0
    6620:	0f 90       	pop	r0
    6622:	cf 91       	pop	r28
    6624:	df 91       	pop	r29
    6626:	08 95       	ret

00006628 <CheckPowerSwitch>:

void CheckPowerSwitch(void *pNULL )		//	TASK( 0 )
{
    6628:	df 93       	push	r29
    662a:	cf 93       	push	r28
    662c:	00 d0       	rcall	.+0      	; 0x662e <CheckPowerSwitch+0x6>
    662e:	0f 92       	push	r0
    6630:	cd b7       	in	r28, 0x3d	; 61
    6632:	de b7       	in	r29, 0x3e	; 62
    6634:	9b 83       	std	Y+3, r25	; 0x03
    6636:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;

	if( ES_OK == Switch_enuGetPressed( PWR_SW , &Local_u8SwitchValue ) )
    6638:	89 ec       	ldi	r24, 0xC9	; 201
    663a:	9e 01       	movw	r18, r28
    663c:	2f 5f       	subi	r18, 0xFF	; 255
    663e:	3f 4f       	sbci	r19, 0xFF	; 255
    6640:	b9 01       	movw	r22, r18
    6642:	0e 94 01 2a 	call	0x5402	; 0x5402 <Switch_enuGetPressed>
    6646:	88 23       	and	r24, r24
    6648:	09 f0       	breq	.+2      	; 0x664c <CheckPowerSwitch+0x24>
    664a:	65 c0       	rjmp	.+202    	; 0x6716 <CheckPowerSwitch+0xee>
	{
		static u8 press = 0, hold = 0 , BounceDelay = BOUNCE_COUNTS ;

		if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 && hold == 0 )  //First press
    664c:	89 81       	ldd	r24, Y+1	; 0x01
    664e:	81 30       	cpi	r24, 0x01	; 1
    6650:	c1 f5       	brne	.+112    	; 0x66c2 <CheckPowerSwitch+0x9a>
    6652:	80 91 52 02 	lds	r24, 0x0252
    6656:	88 23       	and	r24, r24
    6658:	a1 f5       	brne	.+104    	; 0x66c2 <CheckPowerSwitch+0x9a>
    665a:	80 91 51 02 	lds	r24, 0x0251
    665e:	88 23       	and	r24, r24
    6660:	81 f5       	brne	.+96     	; 0x66c2 <CheckPowerSwitch+0x9a>
		{
			press = 1 ;
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	80 93 52 02 	sts	0x0252, r24
			if( PowerStatus == OFF )
    6668:	80 91 bd 01 	lds	r24, 0x01BD
    666c:	81 30       	cpi	r24, 0x01	; 1
    666e:	d9 f4       	brne	.+54     	; 0x66a6 <CheckPowerSwitch+0x7e>
			{
				PowerStatus = ON ;
    6670:	10 92 bd 01 	sts	0x01BD, r1
				Global_u8DisplayMode = NORMAL ;
    6674:	85 e0       	ldi	r24, 0x05	; 5
    6676:	80 93 c0 01 	sts	0x01C0, r24
				TMU_vidResumeTask( 7 );
    667a:	87 e0       	ldi	r24, 0x07	; 7
    667c:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
				TMU_vidResumeTask( 6 );
    6680:	86 e0       	ldi	r24, 0x06	; 6
    6682:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
				TMU_vidResumeTask( 5 );
    6686:	85 e0       	ldi	r24, 0x05	; 5
    6688:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
				TMU_vidResumeTask( 4 );
    668c:	84 e0       	ldi	r24, 0x04	; 4
    668e:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
				TMU_vidResumeTask( 3 );
    6692:	83 e0       	ldi	r24, 0x03	; 3
    6694:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
				TMU_vidResumeTask( 2 );
    6698:	82 e0       	ldi	r24, 0x02	; 2
    669a:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
				TMU_vidResumeTask( 1 );
    669e:	81 e0       	ldi	r24, 0x01	; 1
    66a0:	0e 94 a2 09 	call	0x1344	; 0x1344 <TMU_vidResumeTask>
    66a4:	38 c0       	rjmp	.+112    	; 0x6716 <CheckPowerSwitch+0xee>

			}
			else if( PowerStatus == ON )
    66a6:	80 91 bd 01 	lds	r24, 0x01BD
    66aa:	88 23       	and	r24, r24
    66ac:	a1 f5       	brne	.+104    	; 0x6716 <CheckPowerSwitch+0xee>
			{
				PowerStatus = OFF ;
    66ae:	81 e0       	ldi	r24, 0x01	; 1
    66b0:	80 93 bd 01 	sts	0x01BD, r24
				TMU_vidPauseTask( 2 );
    66b4:	82 e0       	ldi	r24, 0x02	; 2
    66b6:	0e 94 87 09 	call	0x130e	; 0x130e <TMU_vidPauseTask>
				TMU_vidPauseTask( 1 );
    66ba:	81 e0       	ldi	r24, 0x01	; 1
    66bc:	0e 94 87 09 	call	0x130e	; 0x130e <TMU_vidPauseTask>
    66c0:	2a c0       	rjmp	.+84     	; 0x6716 <CheckPowerSwitch+0xee>
			}
		}
		else if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 1 && hold == 0 ) //continued first press
    66c2:	89 81       	ldd	r24, Y+1	; 0x01
    66c4:	81 30       	cpi	r24, 0x01	; 1
    66c6:	61 f4       	brne	.+24     	; 0x66e0 <CheckPowerSwitch+0xb8>
    66c8:	80 91 52 02 	lds	r24, 0x0252
    66cc:	81 30       	cpi	r24, 0x01	; 1
    66ce:	41 f4       	brne	.+16     	; 0x66e0 <CheckPowerSwitch+0xb8>
    66d0:	80 91 51 02 	lds	r24, 0x0251
    66d4:	88 23       	and	r24, r24
    66d6:	21 f4       	brne	.+8      	; 0x66e0 <CheckPowerSwitch+0xb8>
		{
			hold = 1;
    66d8:	81 e0       	ldi	r24, 0x01	; 1
    66da:	80 93 51 02 	sts	0x0251, r24
    66de:	1b c0       	rjmp	.+54     	; 0x6716 <CheckPowerSwitch+0xee>
		}
		else if ( (Local_u8SwitchValue== DIO_u8LOW ) && press == 1 && hold == 1 ) // removed first press
    66e0:	89 81       	ldd	r24, Y+1	; 0x01
    66e2:	88 23       	and	r24, r24
    66e4:	c1 f4       	brne	.+48     	; 0x6716 <CheckPowerSwitch+0xee>
    66e6:	80 91 52 02 	lds	r24, 0x0252
    66ea:	81 30       	cpi	r24, 0x01	; 1
    66ec:	a1 f4       	brne	.+40     	; 0x6716 <CheckPowerSwitch+0xee>
    66ee:	80 91 51 02 	lds	r24, 0x0251
    66f2:	81 30       	cpi	r24, 0x01	; 1
    66f4:	81 f4       	brne	.+32     	; 0x6716 <CheckPowerSwitch+0xee>
		{
			BounceDelay--;
    66f6:	80 91 cd 01 	lds	r24, 0x01CD
    66fa:	81 50       	subi	r24, 0x01	; 1
    66fc:	80 93 cd 01 	sts	0x01CD, r24
			if( !BounceDelay )
    6700:	80 91 cd 01 	lds	r24, 0x01CD
    6704:	88 23       	and	r24, r24
    6706:	39 f4       	brne	.+14     	; 0x6716 <CheckPowerSwitch+0xee>
			{
				press = 0 ;
    6708:	10 92 52 02 	sts	0x0252, r1
				hold = 0 ;
    670c:	10 92 51 02 	sts	0x0251, r1
				BounceDelay = BOUNCE_COUNTS ;
    6710:	82 e0       	ldi	r24, 0x02	; 2
    6712:	80 93 cd 01 	sts	0x01CD, r24
			}
		}
	}
}
    6716:	0f 90       	pop	r0
    6718:	0f 90       	pop	r0
    671a:	0f 90       	pop	r0
    671c:	cf 91       	pop	r28
    671e:	df 91       	pop	r29
    6720:	08 95       	ret

00006722 <AdjustRedLampStatus>:

void AdjustRedLampStatus(void *pNULL )		//	TASK( 3 )
{
    6722:	df 93       	push	r29
    6724:	cf 93       	push	r28
    6726:	00 d0       	rcall	.+0      	; 0x6728 <AdjustRedLampStatus+0x6>
    6728:	00 d0       	rcall	.+0      	; 0x672a <AdjustRedLampStatus+0x8>
    672a:	cd b7       	in	r28, 0x3d	; 61
    672c:	de b7       	in	r29, 0x3e	; 62
    672e:	9a 83       	std	Y+2, r25	; 0x02
    6730:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8PrevStatus = LD_OFF ;

	if( LedStatus == LD_BLINK )
    6732:	80 91 49 02 	lds	r24, 0x0249
    6736:	83 31       	cpi	r24, 0x13	; 19
    6738:	e1 f4       	brne	.+56     	; 0x6772 <AdjustRedLampStatus+0x50>
	{
		switch( Local_u8PrevStatus )
    673a:	80 91 53 02 	lds	r24, 0x0253
    673e:	28 2f       	mov	r18, r24
    6740:	30 e0       	ldi	r19, 0x00	; 0
    6742:	3c 83       	std	Y+4, r19	; 0x04
    6744:	2b 83       	std	Y+3, r18	; 0x03
    6746:	8b 81       	ldd	r24, Y+3	; 0x03
    6748:	9c 81       	ldd	r25, Y+4	; 0x04
    674a:	00 97       	sbiw	r24, 0x00	; 0
    674c:	41 f0       	breq	.+16     	; 0x675e <AdjustRedLampStatus+0x3c>
    674e:	2b 81       	ldd	r18, Y+3	; 0x03
    6750:	3c 81       	ldd	r19, Y+4	; 0x04
    6752:	21 30       	cpi	r18, 0x01	; 1
    6754:	31 05       	cpc	r19, r1
    6756:	31 f4       	brne	.+12     	; 0x6764 <AdjustRedLampStatus+0x42>
		{
			case LD_ON	:  Local_u8PrevStatus = LD_OFF ;
    6758:	10 92 53 02 	sts	0x0253, r1
    675c:	03 c0       	rjmp	.+6      	; 0x6764 <AdjustRedLampStatus+0x42>
			break;
			case LD_OFF	:  Local_u8PrevStatus = LD_ON ;
    675e:	81 e0       	ldi	r24, 0x01	; 1
    6760:	80 93 53 02 	sts	0x0253, r24
			break;
		}
		LD_enuSetState( RED_LD , Local_u8PrevStatus );
    6764:	90 91 53 02 	lds	r25, 0x0253
    6768:	8e e1       	ldi	r24, 0x1E	; 30
    676a:	69 2f       	mov	r22, r25
    676c:	0e 94 de 2b 	call	0x57bc	; 0x57bc <LD_enuSetState>
    6770:	17 c0       	rjmp	.+46     	; 0x67a0 <AdjustRedLampStatus+0x7e>
	}
	else if( LedStatus != Local_u8PrevStatus)
    6772:	90 91 49 02 	lds	r25, 0x0249
    6776:	80 91 53 02 	lds	r24, 0x0253
    677a:	98 17       	cp	r25, r24
    677c:	89 f0       	breq	.+34     	; 0x67a0 <AdjustRedLampStatus+0x7e>
	{

		Local_u8PrevStatus = LedStatus ;
    677e:	80 91 49 02 	lds	r24, 0x0249
    6782:	80 93 53 02 	sts	0x0253, r24
		LD_enuSetState( RED_LD , Local_u8PrevStatus );
    6786:	90 91 53 02 	lds	r25, 0x0253
    678a:	8e e1       	ldi	r24, 0x1E	; 30
    678c:	69 2f       	mov	r22, r25
    678e:	0e 94 de 2b 	call	0x57bc	; 0x57bc <LD_enuSetState>
		if( PowerStatus == OFF )
    6792:	80 91 bd 01 	lds	r24, 0x01BD
    6796:	81 30       	cpi	r24, 0x01	; 1
    6798:	19 f4       	brne	.+6      	; 0x67a0 <AdjustRedLampStatus+0x7e>
		{
			TMU_vidPauseTask( 3 );
    679a:	83 e0       	ldi	r24, 0x03	; 3
    679c:	0e 94 87 09 	call	0x130e	; 0x130e <TMU_vidPauseTask>
		}
	}
}
    67a0:	0f 90       	pop	r0
    67a2:	0f 90       	pop	r0
    67a4:	0f 90       	pop	r0
    67a6:	0f 90       	pop	r0
    67a8:	cf 91       	pop	r28
    67aa:	df 91       	pop	r29
    67ac:	08 95       	ret

000067ae <AdjustHeaterStatus>:

void AdjustHeaterStatus( void *pNULL)		//	TASK( 5 )
{
    67ae:	df 93       	push	r29
    67b0:	cf 93       	push	r28
    67b2:	00 d0       	rcall	.+0      	; 0x67b4 <AdjustHeaterStatus+0x6>
    67b4:	cd b7       	in	r28, 0x3d	; 61
    67b6:	de b7       	in	r29, 0x3e	; 62
    67b8:	9a 83       	std	Y+2, r25	; 0x02
    67ba:	89 83       	std	Y+1, r24	; 0x01
	static OnOff_t PrevStatus = OFF ;

	Heater_enuSetState( Global_s8TempError );
    67bc:	80 91 56 02 	lds	r24, 0x0256
    67c0:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <Heater_enuSetState>

	if( HeaterStatus != PrevStatus)
    67c4:	90 91 be 01 	lds	r25, 0x01BE
    67c8:	80 91 ce 01 	lds	r24, 0x01CE
    67cc:	98 17       	cp	r25, r24
    67ce:	81 f0       	breq	.+32     	; 0x67f0 <AdjustHeaterStatus+0x42>
	{
		if( HeaterStatus == OFF )
    67d0:	80 91 be 01 	lds	r24, 0x01BE
    67d4:	81 30       	cpi	r24, 0x01	; 1
    67d6:	31 f4       	brne	.+12     	; 0x67e4 <AdjustHeaterStatus+0x36>
		{
			Heater_enuDisable();
    67d8:	0e 94 68 2e 	call	0x5cd0	; 0x5cd0 <Heater_enuDisable>
			TMU_vidPauseTask( 5 );
    67dc:	85 e0       	ldi	r24, 0x05	; 5
    67de:	0e 94 87 09 	call	0x130e	; 0x130e <TMU_vidPauseTask>
    67e2:	02 c0       	rjmp	.+4      	; 0x67e8 <AdjustHeaterStatus+0x3a>
		}
		else
		{
			Heater_enuEnable();
    67e4:	0e 94 5f 2e 	call	0x5cbe	; 0x5cbe <Heater_enuEnable>
		}
		PrevStatus = HeaterStatus ;
    67e8:	80 91 be 01 	lds	r24, 0x01BE
    67ec:	80 93 ce 01 	sts	0x01CE, r24
	}
}
    67f0:	0f 90       	pop	r0
    67f2:	0f 90       	pop	r0
    67f4:	cf 91       	pop	r28
    67f6:	df 91       	pop	r29
    67f8:	08 95       	ret

000067fa <AdjustCoolentStatus>:

void AdjustCoolentStatus( void *pNULL)		//	TASK( 4 )
{
    67fa:	df 93       	push	r29
    67fc:	cf 93       	push	r28
    67fe:	00 d0       	rcall	.+0      	; 0x6800 <AdjustCoolentStatus+0x6>
    6800:	cd b7       	in	r28, 0x3d	; 61
    6802:	de b7       	in	r29, 0x3e	; 62
    6804:	9a 83       	std	Y+2, r25	; 0x02
    6806:	89 83       	std	Y+1, r24	; 0x01
	static OnOff_t PrevStatus = OFF ;

	Coolent_enuSetState( Global_s8TempError );
    6808:	80 91 56 02 	lds	r24, 0x0256
    680c:	0e 94 a5 2c 	call	0x594a	; 0x594a <Coolent_enuSetState>

	if( CoolentStatus != PrevStatus)
    6810:	90 91 bf 01 	lds	r25, 0x01BF
    6814:	80 91 cf 01 	lds	r24, 0x01CF
    6818:	98 17       	cp	r25, r24
    681a:	81 f0       	breq	.+32     	; 0x683c <AdjustCoolentStatus+0x42>
	{
		if( CoolentStatus == OFF )
    681c:	80 91 bf 01 	lds	r24, 0x01BF
    6820:	81 30       	cpi	r24, 0x01	; 1
    6822:	31 f4       	brne	.+12     	; 0x6830 <AdjustCoolentStatus+0x36>
		{
			Coolent_enuDisable();
    6824:	0e 94 9c 2c 	call	0x5938	; 0x5938 <Coolent_enuDisable>
			TMU_vidPauseTask( 4 );
    6828:	84 e0       	ldi	r24, 0x04	; 4
    682a:	0e 94 87 09 	call	0x130e	; 0x130e <TMU_vidPauseTask>
    682e:	02 c0       	rjmp	.+4      	; 0x6834 <AdjustCoolentStatus+0x3a>
		}
		else
		{
			Coolent_enuEnable();
    6830:	0e 94 93 2c 	call	0x5926	; 0x5926 <Coolent_enuEnable>
		}
		PrevStatus = CoolentStatus ;
    6834:	80 91 bf 01 	lds	r24, 0x01BF
    6838:	80 93 cf 01 	sts	0x01CF, r24
	}

}
    683c:	0f 90       	pop	r0
    683e:	0f 90       	pop	r0
    6840:	cf 91       	pop	r28
    6842:	df 91       	pop	r29
    6844:	08 95       	ret

00006846 <EEPROM_Access>:

void EEPROM_Access( void *Copy_u16SetTempAddress )		//	TASK( 8 )
{
    6846:	df 93       	push	r29
    6848:	cf 93       	push	r28
    684a:	00 d0       	rcall	.+0      	; 0x684c <EEPROM_Access+0x6>
    684c:	00 d0       	rcall	.+0      	; 0x684e <EEPROM_Access+0x8>
    684e:	cd b7       	in	r28, 0x3d	; 61
    6850:	de b7       	in	r29, 0x3e	; 62
    6852:	9c 83       	std	Y+4, r25	; 0x04
    6854:	8b 83       	std	Y+3, r24	; 0x03
	u16 *Local_u16TempAddress = (u16*)Copy_u16SetTempAddress ;
    6856:	8b 81       	ldd	r24, Y+3	; 0x03
    6858:	9c 81       	ldd	r25, Y+4	; 0x04
    685a:	9a 83       	std	Y+2, r25	; 0x02
    685c:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8StoredSetTemp = INIT_SET_TEMP ;
	static u8 Local_u8SetTempSaveID;

	if( Local_u8StoredSetTemp != Global_u8TempSetValue)
    685e:	90 91 d0 01 	lds	r25, 0x01D0
    6862:	80 91 55 02 	lds	r24, 0x0255
    6866:	98 17       	cp	r25, r24
    6868:	09 f4       	brne	.+2      	; 0x686c <EEPROM_Access+0x26>
    686a:	4b c0       	rjmp	.+150    	; 0x6902 <EEPROM_Access+0xbc>
	{
		if( ES_OK == EEPROM_enuReadByte( *Local_u16TempAddress , &Local_u8SetTempSaveID ) )
    686c:	e9 81       	ldd	r30, Y+1	; 0x01
    686e:	fa 81       	ldd	r31, Y+2	; 0x02
    6870:	80 81       	ld	r24, Z
    6872:	91 81       	ldd	r25, Z+1	; 0x01
    6874:	24 e5       	ldi	r18, 0x54	; 84
    6876:	32 e0       	ldi	r19, 0x02	; 2
    6878:	b9 01       	movw	r22, r18
    687a:	0e 94 08 24 	call	0x4810	; 0x4810 <EEPROM_enuReadByte>
    687e:	88 23       	and	r24, r24
    6880:	e1 f5       	brne	.+120    	; 0x68fa <EEPROM_Access+0xb4>
		{
			if( Local_u8SetTempSaveID != SetTempSaveID )
    6882:	90 91 54 02 	lds	r25, 0x0254
    6886:	80 91 c3 01 	lds	r24, 0x01C3
    688a:	98 17       	cp	r25, r24
    688c:	c9 f0       	breq	.+50     	; 0x68c0 <EEPROM_Access+0x7a>
			{
				Global_u8TempSetValue = INIT_SET_TEMP ;
    688e:	8c e3       	ldi	r24, 0x3C	; 60
    6890:	80 93 55 02 	sts	0x0255, r24
				if( ES_OK == EEPROM_enuWriteByte( (*( Local_u16TempAddress ) + 1 ) , Global_u8TempSetValue ) )
    6894:	e9 81       	ldd	r30, Y+1	; 0x01
    6896:	fa 81       	ldd	r31, Y+2	; 0x02
    6898:	80 81       	ld	r24, Z
    689a:	91 81       	ldd	r25, Z+1	; 0x01
    689c:	01 96       	adiw	r24, 0x01	; 1
    689e:	20 91 55 02 	lds	r18, 0x0255
    68a2:	62 2f       	mov	r22, r18
    68a4:	0e 94 ca 23 	call	0x4794	; 0x4794 <EEPROM_enuWriteByte>
    68a8:	88 23       	and	r24, r24
    68aa:	39 f5       	brne	.+78     	; 0x68fa <EEPROM_Access+0xb4>
				EEPROM_enuWriteByte( *Local_u16TempAddress , SetTempSaveID );
    68ac:	e9 81       	ldd	r30, Y+1	; 0x01
    68ae:	fa 81       	ldd	r31, Y+2	; 0x02
    68b0:	80 81       	ld	r24, Z
    68b2:	91 81       	ldd	r25, Z+1	; 0x01
    68b4:	20 91 c3 01 	lds	r18, 0x01C3
    68b8:	62 2f       	mov	r22, r18
    68ba:	0e 94 ca 23 	call	0x4794	; 0x4794 <EEPROM_enuWriteByte>
    68be:	1d c0       	rjmp	.+58     	; 0x68fa <EEPROM_Access+0xb4>
			}
			else
			{
				if( SetTempUpdate == TRUE )
    68c0:	80 91 4a 02 	lds	r24, 0x024A
    68c4:	81 30       	cpi	r24, 0x01	; 1
    68c6:	79 f4       	brne	.+30     	; 0x68e6 <EEPROM_Access+0xa0>
				{
					if( ES_OK == EEPROM_enuWriteByte( (*( Local_u16TempAddress ) + 1 ) , Global_u8TempSetValue ) )
    68c8:	e9 81       	ldd	r30, Y+1	; 0x01
    68ca:	fa 81       	ldd	r31, Y+2	; 0x02
    68cc:	80 81       	ld	r24, Z
    68ce:	91 81       	ldd	r25, Z+1	; 0x01
    68d0:	01 96       	adiw	r24, 0x01	; 1
    68d2:	20 91 55 02 	lds	r18, 0x0255
    68d6:	62 2f       	mov	r22, r18
    68d8:	0e 94 ca 23 	call	0x4794	; 0x4794 <EEPROM_enuWriteByte>
    68dc:	88 23       	and	r24, r24
    68de:	69 f4       	brne	.+26     	; 0x68fa <EEPROM_Access+0xb4>
						SetTempUpdate = FALSE ;
    68e0:	10 92 4a 02 	sts	0x024A, r1
    68e4:	0a c0       	rjmp	.+20     	; 0x68fa <EEPROM_Access+0xb4>
				}
				else
				{
					EEPROM_enuReadByte( (*( Local_u16TempAddress ) + 1 ) , &Global_u8TempSetValue );
    68e6:	e9 81       	ldd	r30, Y+1	; 0x01
    68e8:	fa 81       	ldd	r31, Y+2	; 0x02
    68ea:	80 81       	ld	r24, Z
    68ec:	91 81       	ldd	r25, Z+1	; 0x01
    68ee:	01 96       	adiw	r24, 0x01	; 1
    68f0:	25 e5       	ldi	r18, 0x55	; 85
    68f2:	32 e0       	ldi	r19, 0x02	; 2
    68f4:	b9 01       	movw	r22, r18
    68f6:	0e 94 08 24 	call	0x4810	; 0x4810 <EEPROM_enuReadByte>
				}
			}
		}
		Local_u8StoredSetTemp = Global_u8TempSetValue ;
    68fa:	80 91 55 02 	lds	r24, 0x0255
    68fe:	80 93 d0 01 	sts	0x01D0, r24
	}
	TMU_vidPauseTask( 8 );
    6902:	88 e0       	ldi	r24, 0x08	; 8
    6904:	0e 94 87 09 	call	0x130e	; 0x130e <TMU_vidPauseTask>
}
    6908:	0f 90       	pop	r0
    690a:	0f 90       	pop	r0
    690c:	0f 90       	pop	r0
    690e:	0f 90       	pop	r0
    6910:	cf 91       	pop	r28
    6912:	df 91       	pop	r29
    6914:	08 95       	ret

00006916 <__udivmodqi4>:
    6916:	99 1b       	sub	r25, r25
    6918:	79 e0       	ldi	r23, 0x09	; 9
    691a:	04 c0       	rjmp	.+8      	; 0x6924 <__udivmodqi4_ep>

0000691c <__udivmodqi4_loop>:
    691c:	99 1f       	adc	r25, r25
    691e:	96 17       	cp	r25, r22
    6920:	08 f0       	brcs	.+2      	; 0x6924 <__udivmodqi4_ep>
    6922:	96 1b       	sub	r25, r22

00006924 <__udivmodqi4_ep>:
    6924:	88 1f       	adc	r24, r24
    6926:	7a 95       	dec	r23
    6928:	c9 f7       	brne	.-14     	; 0x691c <__udivmodqi4_loop>
    692a:	80 95       	com	r24
    692c:	08 95       	ret

0000692e <__udivmodhi4>:
    692e:	aa 1b       	sub	r26, r26
    6930:	bb 1b       	sub	r27, r27
    6932:	51 e1       	ldi	r21, 0x11	; 17
    6934:	07 c0       	rjmp	.+14     	; 0x6944 <__udivmodhi4_ep>

00006936 <__udivmodhi4_loop>:
    6936:	aa 1f       	adc	r26, r26
    6938:	bb 1f       	adc	r27, r27
    693a:	a6 17       	cp	r26, r22
    693c:	b7 07       	cpc	r27, r23
    693e:	10 f0       	brcs	.+4      	; 0x6944 <__udivmodhi4_ep>
    6940:	a6 1b       	sub	r26, r22
    6942:	b7 0b       	sbc	r27, r23

00006944 <__udivmodhi4_ep>:
    6944:	88 1f       	adc	r24, r24
    6946:	99 1f       	adc	r25, r25
    6948:	5a 95       	dec	r21
    694a:	a9 f7       	brne	.-22     	; 0x6936 <__udivmodhi4_loop>
    694c:	80 95       	com	r24
    694e:	90 95       	com	r25
    6950:	bc 01       	movw	r22, r24
    6952:	cd 01       	movw	r24, r26
    6954:	08 95       	ret

00006956 <__divmodhi4>:
    6956:	97 fb       	bst	r25, 7
    6958:	09 2e       	mov	r0, r25
    695a:	07 26       	eor	r0, r23
    695c:	0a d0       	rcall	.+20     	; 0x6972 <__divmodhi4_neg1>
    695e:	77 fd       	sbrc	r23, 7
    6960:	04 d0       	rcall	.+8      	; 0x696a <__divmodhi4_neg2>
    6962:	e5 df       	rcall	.-54     	; 0x692e <__udivmodhi4>
    6964:	06 d0       	rcall	.+12     	; 0x6972 <__divmodhi4_neg1>
    6966:	00 20       	and	r0, r0
    6968:	1a f4       	brpl	.+6      	; 0x6970 <__divmodhi4_exit>

0000696a <__divmodhi4_neg2>:
    696a:	70 95       	com	r23
    696c:	61 95       	neg	r22
    696e:	7f 4f       	sbci	r23, 0xFF	; 255

00006970 <__divmodhi4_exit>:
    6970:	08 95       	ret

00006972 <__divmodhi4_neg1>:
    6972:	f6 f7       	brtc	.-4      	; 0x6970 <__divmodhi4_exit>
    6974:	90 95       	com	r25
    6976:	81 95       	neg	r24
    6978:	9f 4f       	sbci	r25, 0xFF	; 255
    697a:	08 95       	ret

0000697c <__udivmodsi4>:
    697c:	a1 e2       	ldi	r26, 0x21	; 33
    697e:	1a 2e       	mov	r1, r26
    6980:	aa 1b       	sub	r26, r26
    6982:	bb 1b       	sub	r27, r27
    6984:	fd 01       	movw	r30, r26
    6986:	0d c0       	rjmp	.+26     	; 0x69a2 <__udivmodsi4_ep>

00006988 <__udivmodsi4_loop>:
    6988:	aa 1f       	adc	r26, r26
    698a:	bb 1f       	adc	r27, r27
    698c:	ee 1f       	adc	r30, r30
    698e:	ff 1f       	adc	r31, r31
    6990:	a2 17       	cp	r26, r18
    6992:	b3 07       	cpc	r27, r19
    6994:	e4 07       	cpc	r30, r20
    6996:	f5 07       	cpc	r31, r21
    6998:	20 f0       	brcs	.+8      	; 0x69a2 <__udivmodsi4_ep>
    699a:	a2 1b       	sub	r26, r18
    699c:	b3 0b       	sbc	r27, r19
    699e:	e4 0b       	sbc	r30, r20
    69a0:	f5 0b       	sbc	r31, r21

000069a2 <__udivmodsi4_ep>:
    69a2:	66 1f       	adc	r22, r22
    69a4:	77 1f       	adc	r23, r23
    69a6:	88 1f       	adc	r24, r24
    69a8:	99 1f       	adc	r25, r25
    69aa:	1a 94       	dec	r1
    69ac:	69 f7       	brne	.-38     	; 0x6988 <__udivmodsi4_loop>
    69ae:	60 95       	com	r22
    69b0:	70 95       	com	r23
    69b2:	80 95       	com	r24
    69b4:	90 95       	com	r25
    69b6:	9b 01       	movw	r18, r22
    69b8:	ac 01       	movw	r20, r24
    69ba:	bd 01       	movw	r22, r26
    69bc:	cf 01       	movw	r24, r30
    69be:	08 95       	ret

000069c0 <__prologue_saves__>:
    69c0:	2f 92       	push	r2
    69c2:	3f 92       	push	r3
    69c4:	4f 92       	push	r4
    69c6:	5f 92       	push	r5
    69c8:	6f 92       	push	r6
    69ca:	7f 92       	push	r7
    69cc:	8f 92       	push	r8
    69ce:	9f 92       	push	r9
    69d0:	af 92       	push	r10
    69d2:	bf 92       	push	r11
    69d4:	cf 92       	push	r12
    69d6:	df 92       	push	r13
    69d8:	ef 92       	push	r14
    69da:	ff 92       	push	r15
    69dc:	0f 93       	push	r16
    69de:	1f 93       	push	r17
    69e0:	cf 93       	push	r28
    69e2:	df 93       	push	r29
    69e4:	cd b7       	in	r28, 0x3d	; 61
    69e6:	de b7       	in	r29, 0x3e	; 62
    69e8:	ca 1b       	sub	r28, r26
    69ea:	db 0b       	sbc	r29, r27
    69ec:	0f b6       	in	r0, 0x3f	; 63
    69ee:	f8 94       	cli
    69f0:	de bf       	out	0x3e, r29	; 62
    69f2:	0f be       	out	0x3f, r0	; 63
    69f4:	cd bf       	out	0x3d, r28	; 61
    69f6:	09 94       	ijmp

000069f8 <__epilogue_restores__>:
    69f8:	2a 88       	ldd	r2, Y+18	; 0x12
    69fa:	39 88       	ldd	r3, Y+17	; 0x11
    69fc:	48 88       	ldd	r4, Y+16	; 0x10
    69fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    6a00:	6e 84       	ldd	r6, Y+14	; 0x0e
    6a02:	7d 84       	ldd	r7, Y+13	; 0x0d
    6a04:	8c 84       	ldd	r8, Y+12	; 0x0c
    6a06:	9b 84       	ldd	r9, Y+11	; 0x0b
    6a08:	aa 84       	ldd	r10, Y+10	; 0x0a
    6a0a:	b9 84       	ldd	r11, Y+9	; 0x09
    6a0c:	c8 84       	ldd	r12, Y+8	; 0x08
    6a0e:	df 80       	ldd	r13, Y+7	; 0x07
    6a10:	ee 80       	ldd	r14, Y+6	; 0x06
    6a12:	fd 80       	ldd	r15, Y+5	; 0x05
    6a14:	0c 81       	ldd	r16, Y+4	; 0x04
    6a16:	1b 81       	ldd	r17, Y+3	; 0x03
    6a18:	aa 81       	ldd	r26, Y+2	; 0x02
    6a1a:	b9 81       	ldd	r27, Y+1	; 0x01
    6a1c:	ce 0f       	add	r28, r30
    6a1e:	d1 1d       	adc	r29, r1
    6a20:	0f b6       	in	r0, 0x3f	; 63
    6a22:	f8 94       	cli
    6a24:	de bf       	out	0x3e, r29	; 62
    6a26:	0f be       	out	0x3f, r0	; 63
    6a28:	cd bf       	out	0x3d, r28	; 61
    6a2a:	ed 01       	movw	r28, r26
    6a2c:	08 95       	ret

00006a2e <_exit>:
    6a2e:	f8 94       	cli

00006a30 <__stop_program>:
    6a30:	ff cf       	rjmp	.-2      	; 0x6a30 <__stop_program>
