
Electric_Water_Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000060ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016e  00800060  000060ac  00006140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006f  008001ce  008001ce  000062ae  2**0
                  ALLOC
  3 .stab         000067b0  00000000  00000000  000062b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029fb  00000000  00000000  0000ca60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000f45b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f6  00000000  00000000  0000f5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002393  00000000  00000000  0000f7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001374  00000000  00000000  00011b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001238  00000000  00000000  00012ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00014130  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ff  00000000  00000000  000142f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009de  00000000  00000000  000145ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014fcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__vector_4>
      14:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__vector_7>
      20:	0c 94 14 1f 	jmp	0x3e28	; 0x3e28 <__vector_8>
      24:	0c 94 47 1f 	jmp	0x3e8e	; 0x3e8e <__vector_9>
      28:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__vector_10>
      2c:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b4 25 	jmp	0x4b68	; 0x4b68 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f0 e6       	ldi	r31, 0x60	; 96
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3c       	cpi	r26, 0xCE	; 206
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ec       	ldi	r26, 0xCE	; 206
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <main>
      8a:	0c 94 54 30 	jmp	0x60a8	; 0x60a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 83 04 	call	0x906	; 0x906 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1d 30 	jmp	0x603a	; 0x603a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 39 30 	jmp	0x6072	; 0x6072 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 45 30 	jmp	0x608a	; 0x608a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 45 30 	jmp	0x608a	; 0x608a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1d 30 	jmp	0x603a	; 0x603a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 39 30 	jmp	0x6072	; 0x6072 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 30 	jmp	0x604a	; 0x604a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 41 30 	jmp	0x6082	; 0x6082 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 45 30 	jmp	0x608a	; 0x608a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 45 30 	jmp	0x608a	; 0x608a <__epilogue_restores__+0x18>

0000084a <__floatsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 26 30 	jmp	0x604c	; 0x604c <__prologue_saves__+0x12>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	89 83       	std	Y+1, r24	; 0x01
     85e:	da 01       	movw	r26, r20
     860:	c9 01       	movw	r24, r18
     862:	88 27       	eor	r24, r24
     864:	b7 fd       	sbrc	r27, 7
     866:	83 95       	inc	r24
     868:	99 27       	eor	r25, r25
     86a:	aa 27       	eor	r26, r26
     86c:	bb 27       	eor	r27, r27
     86e:	b8 2e       	mov	r11, r24
     870:	21 15       	cp	r18, r1
     872:	31 05       	cpc	r19, r1
     874:	41 05       	cpc	r20, r1
     876:	51 05       	cpc	r21, r1
     878:	19 f4       	brne	.+6      	; 0x880 <__stack+0x21>
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	3a c0       	rjmp	.+116    	; 0x8f4 <__stack+0x95>
     880:	88 23       	and	r24, r24
     882:	a9 f0       	breq	.+42     	; 0x8ae <__stack+0x4f>
     884:	20 30       	cpi	r18, 0x00	; 0
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	38 07       	cpc	r19, r24
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	48 07       	cpc	r20, r24
     88e:	80 e8       	ldi	r24, 0x80	; 128
     890:	58 07       	cpc	r21, r24
     892:	29 f4       	brne	.+10     	; 0x89e <__stack+0x3f>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	9f ec       	ldi	r25, 0xCF	; 207
     89c:	30 c0       	rjmp	.+96     	; 0x8fe <__stack+0x9f>
     89e:	ee 24       	eor	r14, r14
     8a0:	ff 24       	eor	r15, r15
     8a2:	87 01       	movw	r16, r14
     8a4:	e2 1a       	sub	r14, r18
     8a6:	f3 0a       	sbc	r15, r19
     8a8:	04 0b       	sbc	r16, r20
     8aa:	15 0b       	sbc	r17, r21
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__stack+0x53>
     8ae:	79 01       	movw	r14, r18
     8b0:	8a 01       	movw	r16, r20
     8b2:	8e e1       	ldi	r24, 0x1E	; 30
     8b4:	c8 2e       	mov	r12, r24
     8b6:	d1 2c       	mov	r13, r1
     8b8:	dc 82       	std	Y+4, r13	; 0x04
     8ba:	cb 82       	std	Y+3, r12	; 0x03
     8bc:	ed 82       	std	Y+5, r14	; 0x05
     8be:	fe 82       	std	Y+6, r15	; 0x06
     8c0:	0f 83       	std	Y+7, r16	; 0x07
     8c2:	18 87       	std	Y+8, r17	; 0x08
     8c4:	c8 01       	movw	r24, r16
     8c6:	b7 01       	movw	r22, r14
     8c8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	18 16       	cp	r1, r24
     8d0:	19 06       	cpc	r1, r25
     8d2:	84 f4       	brge	.+32     	; 0x8f4 <__stack+0x95>
     8d4:	08 2e       	mov	r0, r24
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	ee 0c       	add	r14, r14
     8da:	ff 1c       	adc	r15, r15
     8dc:	00 1f       	adc	r16, r16
     8de:	11 1f       	adc	r17, r17
     8e0:	0a 94       	dec	r0
     8e2:	d2 f7       	brpl	.-12     	; 0x8d8 <__stack+0x79>
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 1a       	sub	r12, r24
     8ee:	d9 0a       	sbc	r13, r25
     8f0:	dc 82       	std	Y+4, r13	; 0x04
     8f2:	cb 82       	std	Y+3, r12	; 0x03
     8f4:	ba 82       	std	Y+2, r11	; 0x02
     8f6:	ce 01       	movw	r24, r28
     8f8:	01 96       	adiw	r24, 0x01	; 1
     8fa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     8fe:	28 96       	adiw	r28, 0x08	; 8
     900:	e9 e0       	ldi	r30, 0x09	; 9
     902:	0c 94 42 30 	jmp	0x6084	; 0x6084 <__epilogue_restores__+0x12>

00000906 <__fixsfsi>:
     906:	ac e0       	ldi	r26, 0x0C	; 12
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 2d 30 	jmp	0x605a	; 0x605a <__prologue_saves__+0x20>
     912:	69 83       	std	Y+1, r22	; 0x01
     914:	7a 83       	std	Y+2, r23	; 0x02
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	9c 83       	std	Y+4, r25	; 0x04
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	be 01       	movw	r22, r28
     920:	6b 5f       	subi	r22, 0xFB	; 251
     922:	7f 4f       	sbci	r23, 0xFF	; 255
     924:	0e 94 74 06 	call	0xce8	; 0xce8 <__unpack_f>
     928:	8d 81       	ldd	r24, Y+5	; 0x05
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	61 f1       	breq	.+88     	; 0x986 <__fixsfsi+0x80>
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	50 f1       	brcs	.+84     	; 0x986 <__fixsfsi+0x80>
     932:	84 30       	cpi	r24, 0x04	; 4
     934:	21 f4       	brne	.+8      	; 0x93e <__fixsfsi+0x38>
     936:	8e 81       	ldd	r24, Y+6	; 0x06
     938:	88 23       	and	r24, r24
     93a:	51 f1       	breq	.+84     	; 0x990 <__fixsfsi+0x8a>
     93c:	2e c0       	rjmp	.+92     	; 0x99a <__fixsfsi+0x94>
     93e:	2f 81       	ldd	r18, Y+7	; 0x07
     940:	38 85       	ldd	r19, Y+8	; 0x08
     942:	37 fd       	sbrc	r19, 7
     944:	20 c0       	rjmp	.+64     	; 0x986 <__fixsfsi+0x80>
     946:	6e 81       	ldd	r22, Y+6	; 0x06
     948:	2f 31       	cpi	r18, 0x1F	; 31
     94a:	31 05       	cpc	r19, r1
     94c:	1c f0       	brlt	.+6      	; 0x954 <__fixsfsi+0x4e>
     94e:	66 23       	and	r22, r22
     950:	f9 f0       	breq	.+62     	; 0x990 <__fixsfsi+0x8a>
     952:	23 c0       	rjmp	.+70     	; 0x99a <__fixsfsi+0x94>
     954:	8e e1       	ldi	r24, 0x1E	; 30
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	82 1b       	sub	r24, r18
     95a:	93 0b       	sbc	r25, r19
     95c:	29 85       	ldd	r18, Y+9	; 0x09
     95e:	3a 85       	ldd	r19, Y+10	; 0x0a
     960:	4b 85       	ldd	r20, Y+11	; 0x0b
     962:	5c 85       	ldd	r21, Y+12	; 0x0c
     964:	04 c0       	rjmp	.+8      	; 0x96e <__fixsfsi+0x68>
     966:	56 95       	lsr	r21
     968:	47 95       	ror	r20
     96a:	37 95       	ror	r19
     96c:	27 95       	ror	r18
     96e:	8a 95       	dec	r24
     970:	d2 f7       	brpl	.-12     	; 0x966 <__fixsfsi+0x60>
     972:	66 23       	and	r22, r22
     974:	b1 f0       	breq	.+44     	; 0x9a2 <__fixsfsi+0x9c>
     976:	50 95       	com	r21
     978:	40 95       	com	r20
     97a:	30 95       	com	r19
     97c:	21 95       	neg	r18
     97e:	3f 4f       	sbci	r19, 0xFF	; 255
     980:	4f 4f       	sbci	r20, 0xFF	; 255
     982:	5f 4f       	sbci	r21, 0xFF	; 255
     984:	0e c0       	rjmp	.+28     	; 0x9a2 <__fixsfsi+0x9c>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__fixsfsi+0x9c>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	4f ef       	ldi	r20, 0xFF	; 255
     996:	5f e7       	ldi	r21, 0x7F	; 127
     998:	04 c0       	rjmp	.+8      	; 0x9a2 <__fixsfsi+0x9c>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e8       	ldi	r21, 0x80	; 128
     9a2:	b9 01       	movw	r22, r18
     9a4:	ca 01       	movw	r24, r20
     9a6:	2c 96       	adiw	r28, 0x0c	; 12
     9a8:	e2 e0       	ldi	r30, 0x02	; 2
     9aa:	0c 94 49 30 	jmp	0x6092	; 0x6092 <__epilogue_restores__+0x20>

000009ae <__floatunsisf>:
     9ae:	a8 e0       	ldi	r26, 0x08	; 8
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	ed ed       	ldi	r30, 0xDD	; 221
     9b4:	f4 e0       	ldi	r31, 0x04	; 4
     9b6:	0c 94 25 30 	jmp	0x604a	; 0x604a <__prologue_saves__+0x10>
     9ba:	7b 01       	movw	r14, r22
     9bc:	8c 01       	movw	r16, r24
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	81 05       	cpc	r24, r1
     9c4:	91 05       	cpc	r25, r1
     9c6:	19 f4       	brne	.+6      	; 0x9ce <__floatunsisf+0x20>
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	60 c0       	rjmp	.+192    	; 0xa8e <__floatunsisf+0xe0>
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	89 83       	std	Y+1, r24	; 0x01
     9d2:	8e e1       	ldi	r24, 0x1E	; 30
     9d4:	c8 2e       	mov	r12, r24
     9d6:	d1 2c       	mov	r13, r1
     9d8:	dc 82       	std	Y+4, r13	; 0x04
     9da:	cb 82       	std	Y+3, r12	; 0x03
     9dc:	ed 82       	std	Y+5, r14	; 0x05
     9de:	fe 82       	std	Y+6, r15	; 0x06
     9e0:	0f 83       	std	Y+7, r16	; 0x07
     9e2:	18 87       	std	Y+8, r17	; 0x08
     9e4:	c8 01       	movw	r24, r16
     9e6:	b7 01       	movw	r22, r14
     9e8:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__clzsi2>
     9ec:	fc 01       	movw	r30, r24
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	f7 ff       	sbrs	r31, 7
     9f2:	3b c0       	rjmp	.+118    	; 0xa6a <__floatunsisf+0xbc>
     9f4:	22 27       	eor	r18, r18
     9f6:	33 27       	eor	r19, r19
     9f8:	2e 1b       	sub	r18, r30
     9fa:	3f 0b       	sbc	r19, r31
     9fc:	57 01       	movw	r10, r14
     9fe:	68 01       	movw	r12, r16
     a00:	02 2e       	mov	r0, r18
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__floatunsisf+0x5e>
     a04:	d6 94       	lsr	r13
     a06:	c7 94       	ror	r12
     a08:	b7 94       	ror	r11
     a0a:	a7 94       	ror	r10
     a0c:	0a 94       	dec	r0
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__floatunsisf+0x56>
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 e0       	ldi	r26, 0x00	; 0
     a1e:	b0 e0       	ldi	r27, 0x00	; 0
     a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatunsisf+0x7c>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	aa 1f       	adc	r26, r26
     a28:	bb 1f       	adc	r27, r27
     a2a:	2a 95       	dec	r18
     a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatunsisf+0x74>
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8e 21       	and	r24, r14
     a36:	9f 21       	and	r25, r15
     a38:	a0 23       	and	r26, r16
     a3a:	b1 23       	and	r27, r17
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	a1 05       	cpc	r26, r1
     a40:	b1 05       	cpc	r27, r1
     a42:	21 f0       	breq	.+8      	; 0xa4c <__floatunsisf+0x9e>
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	4a 29       	or	r20, r10
     a4e:	5b 29       	or	r21, r11
     a50:	6c 29       	or	r22, r12
     a52:	7d 29       	or	r23, r13
     a54:	4d 83       	std	Y+5, r20	; 0x05
     a56:	5e 83       	std	Y+6, r21	; 0x06
     a58:	6f 83       	std	Y+7, r22	; 0x07
     a5a:	78 87       	std	Y+8, r23	; 0x08
     a5c:	8e e1       	ldi	r24, 0x1E	; 30
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	8e 1b       	sub	r24, r30
     a62:	9f 0b       	sbc	r25, r31
     a64:	9c 83       	std	Y+4, r25	; 0x04
     a66:	8b 83       	std	Y+3, r24	; 0x03
     a68:	12 c0       	rjmp	.+36     	; 0xa8e <__floatunsisf+0xe0>
     a6a:	30 97       	sbiw	r30, 0x00	; 0
     a6c:	81 f0       	breq	.+32     	; 0xa8e <__floatunsisf+0xe0>
     a6e:	0e 2e       	mov	r0, r30
     a70:	04 c0       	rjmp	.+8      	; 0xa7a <__floatunsisf+0xcc>
     a72:	ee 0c       	add	r14, r14
     a74:	ff 1c       	adc	r15, r15
     a76:	00 1f       	adc	r16, r16
     a78:	11 1f       	adc	r17, r17
     a7a:	0a 94       	dec	r0
     a7c:	d2 f7       	brpl	.-12     	; 0xa72 <__floatunsisf+0xc4>
     a7e:	ed 82       	std	Y+5, r14	; 0x05
     a80:	fe 82       	std	Y+6, r15	; 0x06
     a82:	0f 83       	std	Y+7, r16	; 0x07
     a84:	18 87       	std	Y+8, r17	; 0x08
     a86:	ce 1a       	sub	r12, r30
     a88:	df 0a       	sbc	r13, r31
     a8a:	dc 82       	std	Y+4, r13	; 0x04
     a8c:	cb 82       	std	Y+3, r12	; 0x03
     a8e:	1a 82       	std	Y+2, r1	; 0x02
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__pack_f>
     a98:	28 96       	adiw	r28, 0x08	; 8
     a9a:	ea e0       	ldi	r30, 0x0A	; 10
     a9c:	0c 94 41 30 	jmp	0x6082	; 0x6082 <__epilogue_restores__+0x10>

00000aa0 <__clzsi2>:
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	7b 01       	movw	r14, r22
     aaa:	8c 01       	movw	r16, r24
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	e8 16       	cp	r14, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	f8 06       	cpc	r15, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	08 07       	cpc	r16, r24
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	18 07       	cpc	r17, r24
     abc:	88 f4       	brcc	.+34     	; 0xae0 <__clzsi2+0x40>
     abe:	8f ef       	ldi	r24, 0xFF	; 255
     ac0:	e8 16       	cp	r14, r24
     ac2:	f1 04       	cpc	r15, r1
     ac4:	01 05       	cpc	r16, r1
     ac6:	11 05       	cpc	r17, r1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <__clzsi2+0x36>
     aca:	28 f0       	brcs	.+10     	; 0xad6 <__clzsi2+0x36>
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a0 e0       	ldi	r26, 0x00	; 0
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	17 c0       	rjmp	.+46     	; 0xb04 <__clzsi2+0x64>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	12 c0       	rjmp	.+36     	; 0xb04 <__clzsi2+0x64>
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	e8 16       	cp	r14, r24
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	f8 06       	cpc	r15, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	08 07       	cpc	r16, r24
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	18 07       	cpc	r17, r24
     af0:	28 f0       	brcs	.+10     	; 0xafc <__clzsi2+0x5c>
     af2:	88 e1       	ldi	r24, 0x18	; 24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a0 e0       	ldi	r26, 0x00	; 0
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	04 c0       	rjmp	.+8      	; 0xb04 <__clzsi2+0x64>
     afc:	80 e1       	ldi	r24, 0x10	; 16
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	20 e2       	ldi	r18, 0x20	; 32
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	28 1b       	sub	r18, r24
     b0e:	39 0b       	sbc	r19, r25
     b10:	4a 0b       	sbc	r20, r26
     b12:	5b 0b       	sbc	r21, r27
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__clzsi2+0x7e>
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__clzsi2+0x76>
     b22:	f7 01       	movw	r30, r14
     b24:	e8 59       	subi	r30, 0x98	; 152
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	80 81       	ld	r24, Z
     b2a:	28 1b       	sub	r18, r24
     b2c:	31 09       	sbc	r19, r1
     b2e:	41 09       	sbc	r20, r1
     b30:	51 09       	sbc	r21, r1
     b32:	c9 01       	movw	r24, r18
     b34:	1f 91       	pop	r17
     b36:	0f 91       	pop	r16
     b38:	ff 90       	pop	r15
     b3a:	ef 90       	pop	r14
     b3c:	08 95       	ret

00000b3e <__pack_f>:
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	fc 01       	movw	r30, r24
     b4a:	e4 80       	ldd	r14, Z+4	; 0x04
     b4c:	f5 80       	ldd	r15, Z+5	; 0x05
     b4e:	06 81       	ldd	r16, Z+6	; 0x06
     b50:	17 81       	ldd	r17, Z+7	; 0x07
     b52:	d1 80       	ldd	r13, Z+1	; 0x01
     b54:	80 81       	ld	r24, Z
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	48 f4       	brcc	.+18     	; 0xb6c <__pack_f+0x2e>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	a0 e1       	ldi	r26, 0x10	; 16
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e8 2a       	or	r14, r24
     b64:	f9 2a       	or	r15, r25
     b66:	0a 2b       	or	r16, r26
     b68:	1b 2b       	or	r17, r27
     b6a:	a5 c0       	rjmp	.+330    	; 0xcb6 <__pack_f+0x178>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	09 f4       	brne	.+2      	; 0xb72 <__pack_f+0x34>
     b70:	9f c0       	rjmp	.+318    	; 0xcb0 <__pack_f+0x172>
     b72:	82 30       	cpi	r24, 0x02	; 2
     b74:	21 f4       	brne	.+8      	; 0xb7e <__pack_f+0x40>
     b76:	ee 24       	eor	r14, r14
     b78:	ff 24       	eor	r15, r15
     b7a:	87 01       	movw	r16, r14
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <__pack_f+0x4a>
     b7e:	e1 14       	cp	r14, r1
     b80:	f1 04       	cpc	r15, r1
     b82:	01 05       	cpc	r16, r1
     b84:	11 05       	cpc	r17, r1
     b86:	19 f4       	brne	.+6      	; 0xb8e <__pack_f+0x50>
     b88:	e0 e0       	ldi	r30, 0x00	; 0
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	96 c0       	rjmp	.+300    	; 0xcba <__pack_f+0x17c>
     b8e:	62 81       	ldd	r22, Z+2	; 0x02
     b90:	73 81       	ldd	r23, Z+3	; 0x03
     b92:	9f ef       	ldi	r25, 0xFF	; 255
     b94:	62 38       	cpi	r22, 0x82	; 130
     b96:	79 07       	cpc	r23, r25
     b98:	0c f0       	brlt	.+2      	; 0xb9c <__pack_f+0x5e>
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <__pack_f+0x114>
     b9c:	22 e8       	ldi	r18, 0x82	; 130
     b9e:	3f ef       	ldi	r19, 0xFF	; 255
     ba0:	26 1b       	sub	r18, r22
     ba2:	37 0b       	sbc	r19, r23
     ba4:	2a 31       	cpi	r18, 0x1A	; 26
     ba6:	31 05       	cpc	r19, r1
     ba8:	2c f0       	brlt	.+10     	; 0xbb4 <__pack_f+0x76>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	2a c0       	rjmp	.+84     	; 0xc08 <__pack_f+0xca>
     bb4:	b8 01       	movw	r22, r16
     bb6:	a7 01       	movw	r20, r14
     bb8:	02 2e       	mov	r0, r18
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__pack_f+0x86>
     bbc:	76 95       	lsr	r23
     bbe:	67 95       	ror	r22
     bc0:	57 95       	ror	r21
     bc2:	47 95       	ror	r20
     bc4:	0a 94       	dec	r0
     bc6:	d2 f7       	brpl	.-12     	; 0xbbc <__pack_f+0x7e>
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__pack_f+0x9c>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	2a 95       	dec	r18
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <__pack_f+0x94>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	8e 21       	and	r24, r14
     be6:	9f 21       	and	r25, r15
     be8:	a0 23       	and	r26, r16
     bea:	b1 23       	and	r27, r17
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__pack_f+0xbe>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a0 e0       	ldi	r26, 0x00	; 0
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	9a 01       	movw	r18, r20
     bfe:	ab 01       	movw	r20, r22
     c00:	28 2b       	or	r18, r24
     c02:	39 2b       	or	r19, r25
     c04:	4a 2b       	or	r20, r26
     c06:	5b 2b       	or	r21, r27
     c08:	da 01       	movw	r26, r20
     c0a:	c9 01       	movw	r24, r18
     c0c:	8f 77       	andi	r24, 0x7F	; 127
     c0e:	90 70       	andi	r25, 0x00	; 0
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	80 34       	cpi	r24, 0x40	; 64
     c16:	91 05       	cpc	r25, r1
     c18:	a1 05       	cpc	r26, r1
     c1a:	b1 05       	cpc	r27, r1
     c1c:	39 f4       	brne	.+14     	; 0xc2c <__pack_f+0xee>
     c1e:	27 ff       	sbrs	r18, 7
     c20:	09 c0       	rjmp	.+18     	; 0xc34 <__pack_f+0xf6>
     c22:	20 5c       	subi	r18, 0xC0	; 192
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	4f 4f       	sbci	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__pack_f+0xf6>
     c2c:	21 5c       	subi	r18, 0xC1	; 193
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	4f 4f       	sbci	r20, 0xFF	; 255
     c32:	5f 4f       	sbci	r21, 0xFF	; 255
     c34:	e0 e0       	ldi	r30, 0x00	; 0
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	20 30       	cpi	r18, 0x00	; 0
     c3a:	a0 e0       	ldi	r26, 0x00	; 0
     c3c:	3a 07       	cpc	r19, r26
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	4a 07       	cpc	r20, r26
     c42:	a0 e4       	ldi	r26, 0x40	; 64
     c44:	5a 07       	cpc	r21, r26
     c46:	10 f0       	brcs	.+4      	; 0xc4c <__pack_f+0x10e>
     c48:	e1 e0       	ldi	r30, 0x01	; 1
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	79 01       	movw	r14, r18
     c4e:	8a 01       	movw	r16, r20
     c50:	27 c0       	rjmp	.+78     	; 0xca0 <__pack_f+0x162>
     c52:	60 38       	cpi	r22, 0x80	; 128
     c54:	71 05       	cpc	r23, r1
     c56:	64 f5       	brge	.+88     	; 0xcb0 <__pack_f+0x172>
     c58:	fb 01       	movw	r30, r22
     c5a:	e1 58       	subi	r30, 0x81	; 129
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	d8 01       	movw	r26, r16
     c60:	c7 01       	movw	r24, r14
     c62:	8f 77       	andi	r24, 0x7F	; 127
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	a0 70       	andi	r26, 0x00	; 0
     c68:	b0 70       	andi	r27, 0x00	; 0
     c6a:	80 34       	cpi	r24, 0x40	; 64
     c6c:	91 05       	cpc	r25, r1
     c6e:	a1 05       	cpc	r26, r1
     c70:	b1 05       	cpc	r27, r1
     c72:	39 f4       	brne	.+14     	; 0xc82 <__pack_f+0x144>
     c74:	e7 fe       	sbrs	r14, 7
     c76:	0d c0       	rjmp	.+26     	; 0xc92 <__pack_f+0x154>
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__pack_f+0x14c>
     c82:	8f e3       	ldi	r24, 0x3F	; 63
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	e8 0e       	add	r14, r24
     c8c:	f9 1e       	adc	r15, r25
     c8e:	0a 1f       	adc	r16, r26
     c90:	1b 1f       	adc	r17, r27
     c92:	17 ff       	sbrs	r17, 7
     c94:	05 c0       	rjmp	.+10     	; 0xca0 <__pack_f+0x162>
     c96:	16 95       	lsr	r17
     c98:	07 95       	ror	r16
     c9a:	f7 94       	ror	r15
     c9c:	e7 94       	ror	r14
     c9e:	31 96       	adiw	r30, 0x01	; 1
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	16 95       	lsr	r17
     ca4:	07 95       	ror	r16
     ca6:	f7 94       	ror	r15
     ca8:	e7 94       	ror	r14
     caa:	8a 95       	dec	r24
     cac:	d1 f7       	brne	.-12     	; 0xca2 <__pack_f+0x164>
     cae:	05 c0       	rjmp	.+10     	; 0xcba <__pack_f+0x17c>
     cb0:	ee 24       	eor	r14, r14
     cb2:	ff 24       	eor	r15, r15
     cb4:	87 01       	movw	r16, r14
     cb6:	ef ef       	ldi	r30, 0xFF	; 255
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	6e 2f       	mov	r22, r30
     cbc:	67 95       	ror	r22
     cbe:	66 27       	eor	r22, r22
     cc0:	67 95       	ror	r22
     cc2:	90 2f       	mov	r25, r16
     cc4:	9f 77       	andi	r25, 0x7F	; 127
     cc6:	d7 94       	ror	r13
     cc8:	dd 24       	eor	r13, r13
     cca:	d7 94       	ror	r13
     ccc:	8e 2f       	mov	r24, r30
     cce:	86 95       	lsr	r24
     cd0:	49 2f       	mov	r20, r25
     cd2:	46 2b       	or	r20, r22
     cd4:	58 2f       	mov	r21, r24
     cd6:	5d 29       	or	r21, r13
     cd8:	b7 01       	movw	r22, r14
     cda:	ca 01       	movw	r24, r20
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	df 90       	pop	r13
     ce6:	08 95       	ret

00000ce8 <__unpack_f>:
     ce8:	fc 01       	movw	r30, r24
     cea:	db 01       	movw	r26, r22
     cec:	40 81       	ld	r20, Z
     cee:	51 81       	ldd	r21, Z+1	; 0x01
     cf0:	22 81       	ldd	r18, Z+2	; 0x02
     cf2:	62 2f       	mov	r22, r18
     cf4:	6f 77       	andi	r22, 0x7F	; 127
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	22 1f       	adc	r18, r18
     cfa:	22 27       	eor	r18, r18
     cfc:	22 1f       	adc	r18, r18
     cfe:	93 81       	ldd	r25, Z+3	; 0x03
     d00:	89 2f       	mov	r24, r25
     d02:	88 0f       	add	r24, r24
     d04:	82 2b       	or	r24, r18
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	99 1f       	adc	r25, r25
     d0c:	99 27       	eor	r25, r25
     d0e:	99 1f       	adc	r25, r25
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	9c 93       	st	X, r25
     d14:	11 97       	sbiw	r26, 0x01	; 1
     d16:	21 15       	cp	r18, r1
     d18:	31 05       	cpc	r19, r1
     d1a:	a9 f5       	brne	.+106    	; 0xd86 <__unpack_f+0x9e>
     d1c:	41 15       	cp	r20, r1
     d1e:	51 05       	cpc	r21, r1
     d20:	61 05       	cpc	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	11 f4       	brne	.+4      	; 0xd2a <__unpack_f+0x42>
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	37 c0       	rjmp	.+110    	; 0xd98 <__unpack_f+0xb0>
     d2a:	82 e8       	ldi	r24, 0x82	; 130
     d2c:	9f ef       	ldi	r25, 0xFF	; 255
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 97       	sbiw	r26, 0x02	; 2
     d36:	9a 01       	movw	r18, r20
     d38:	ab 01       	movw	r20, r22
     d3a:	67 e0       	ldi	r22, 0x07	; 7
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	6a 95       	dec	r22
     d46:	d1 f7       	brne	.-12     	; 0xd3c <__unpack_f+0x54>
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	8c 93       	st	X, r24
     d4c:	0d c0       	rjmp	.+26     	; 0xd68 <__unpack_f+0x80>
     d4e:	22 0f       	add	r18, r18
     d50:	33 1f       	adc	r19, r19
     d52:	44 1f       	adc	r20, r20
     d54:	55 1f       	adc	r21, r21
     d56:	12 96       	adiw	r26, 0x02	; 2
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	13 96       	adiw	r26, 0x03	; 3
     d62:	9c 93       	st	X, r25
     d64:	8e 93       	st	-X, r24
     d66:	12 97       	sbiw	r26, 0x02	; 2
     d68:	20 30       	cpi	r18, 0x00	; 0
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	38 07       	cpc	r19, r24
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	48 07       	cpc	r20, r24
     d72:	80 e4       	ldi	r24, 0x40	; 64
     d74:	58 07       	cpc	r21, r24
     d76:	58 f3       	brcs	.-42     	; 0xd4e <__unpack_f+0x66>
     d78:	14 96       	adiw	r26, 0x04	; 4
     d7a:	2d 93       	st	X+, r18
     d7c:	3d 93       	st	X+, r19
     d7e:	4d 93       	st	X+, r20
     d80:	5c 93       	st	X, r21
     d82:	17 97       	sbiw	r26, 0x07	; 7
     d84:	08 95       	ret
     d86:	2f 3f       	cpi	r18, 0xFF	; 255
     d88:	31 05       	cpc	r19, r1
     d8a:	79 f4       	brne	.+30     	; 0xdaa <__unpack_f+0xc2>
     d8c:	41 15       	cp	r20, r1
     d8e:	51 05       	cpc	r21, r1
     d90:	61 05       	cpc	r22, r1
     d92:	71 05       	cpc	r23, r1
     d94:	19 f4       	brne	.+6      	; 0xd9c <__unpack_f+0xb4>
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	8c 93       	st	X, r24
     d9a:	08 95       	ret
     d9c:	64 ff       	sbrs	r22, 4
     d9e:	03 c0       	rjmp	.+6      	; 0xda6 <__unpack_f+0xbe>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	8c 93       	st	X, r24
     da4:	12 c0       	rjmp	.+36     	; 0xdca <__unpack_f+0xe2>
     da6:	1c 92       	st	X, r1
     da8:	10 c0       	rjmp	.+32     	; 0xdca <__unpack_f+0xe2>
     daa:	2f 57       	subi	r18, 0x7F	; 127
     dac:	30 40       	sbci	r19, 0x00	; 0
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	3c 93       	st	X, r19
     db2:	2e 93       	st	-X, r18
     db4:	12 97       	sbiw	r26, 0x02	; 2
     db6:	83 e0       	ldi	r24, 0x03	; 3
     db8:	8c 93       	st	X, r24
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	44 0f       	add	r20, r20
     dbe:	55 1f       	adc	r21, r21
     dc0:	66 1f       	adc	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	8a 95       	dec	r24
     dc6:	d1 f7       	brne	.-12     	; 0xdbc <__unpack_f+0xd4>
     dc8:	70 64       	ori	r23, 0x40	; 64
     dca:	14 96       	adiw	r26, 0x04	; 4
     dcc:	4d 93       	st	X+, r20
     dce:	5d 93       	st	X+, r21
     dd0:	6d 93       	st	X+, r22
     dd2:	7c 93       	st	X, r23
     dd4:	17 97       	sbiw	r26, 0x07	; 7
     dd6:	08 95       	ret

00000dd8 <__fpcmp_parts_f>:
     dd8:	1f 93       	push	r17
     dda:	dc 01       	movw	r26, r24
     ddc:	fb 01       	movw	r30, r22
     dde:	9c 91       	ld	r25, X
     de0:	92 30       	cpi	r25, 0x02	; 2
     de2:	08 f4       	brcc	.+2      	; 0xde6 <__fpcmp_parts_f+0xe>
     de4:	47 c0       	rjmp	.+142    	; 0xe74 <__fpcmp_parts_f+0x9c>
     de6:	80 81       	ld	r24, Z
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	08 f4       	brcc	.+2      	; 0xdee <__fpcmp_parts_f+0x16>
     dec:	43 c0       	rjmp	.+134    	; 0xe74 <__fpcmp_parts_f+0x9c>
     dee:	94 30       	cpi	r25, 0x04	; 4
     df0:	51 f4       	brne	.+20     	; 0xe06 <__fpcmp_parts_f+0x2e>
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	1c 91       	ld	r17, X
     df6:	84 30       	cpi	r24, 0x04	; 4
     df8:	99 f5       	brne	.+102    	; 0xe60 <__fpcmp_parts_f+0x88>
     dfa:	81 81       	ldd	r24, Z+1	; 0x01
     dfc:	68 2f       	mov	r22, r24
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	61 1b       	sub	r22, r17
     e02:	71 09       	sbc	r23, r1
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <__fpcmp_parts_f+0xac>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	21 f0       	breq	.+8      	; 0xe12 <__fpcmp_parts_f+0x3a>
     e0a:	92 30       	cpi	r25, 0x02	; 2
     e0c:	31 f4       	brne	.+12     	; 0xe1a <__fpcmp_parts_f+0x42>
     e0e:	82 30       	cpi	r24, 0x02	; 2
     e10:	b9 f1       	breq	.+110    	; 0xe80 <__fpcmp_parts_f+0xa8>
     e12:	81 81       	ldd	r24, Z+1	; 0x01
     e14:	88 23       	and	r24, r24
     e16:	89 f1       	breq	.+98     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e18:	2d c0       	rjmp	.+90     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	1c 91       	ld	r17, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	f1 f0       	breq	.+60     	; 0xe60 <__fpcmp_parts_f+0x88>
     e24:	81 81       	ldd	r24, Z+1	; 0x01
     e26:	18 17       	cp	r17, r24
     e28:	d9 f4       	brne	.+54     	; 0xe60 <__fpcmp_parts_f+0x88>
     e2a:	12 96       	adiw	r26, 0x02	; 2
     e2c:	2d 91       	ld	r18, X+
     e2e:	3c 91       	ld	r19, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	82 17       	cp	r24, r18
     e38:	93 07       	cpc	r25, r19
     e3a:	94 f0       	brlt	.+36     	; 0xe60 <__fpcmp_parts_f+0x88>
     e3c:	28 17       	cp	r18, r24
     e3e:	39 07       	cpc	r19, r25
     e40:	bc f0       	brlt	.+46     	; 0xe70 <__fpcmp_parts_f+0x98>
     e42:	14 96       	adiw	r26, 0x04	; 4
     e44:	8d 91       	ld	r24, X+
     e46:	9d 91       	ld	r25, X+
     e48:	0d 90       	ld	r0, X+
     e4a:	bc 91       	ld	r27, X
     e4c:	a0 2d       	mov	r26, r0
     e4e:	24 81       	ldd	r18, Z+4	; 0x04
     e50:	35 81       	ldd	r19, Z+5	; 0x05
     e52:	46 81       	ldd	r20, Z+6	; 0x06
     e54:	57 81       	ldd	r21, Z+7	; 0x07
     e56:	28 17       	cp	r18, r24
     e58:	39 07       	cpc	r19, r25
     e5a:	4a 07       	cpc	r20, r26
     e5c:	5b 07       	cpc	r21, r27
     e5e:	18 f4       	brcc	.+6      	; 0xe66 <__fpcmp_parts_f+0x8e>
     e60:	11 23       	and	r17, r17
     e62:	41 f0       	breq	.+16     	; 0xe74 <__fpcmp_parts_f+0x9c>
     e64:	0a c0       	rjmp	.+20     	; 0xe7a <__fpcmp_parts_f+0xa2>
     e66:	82 17       	cp	r24, r18
     e68:	93 07       	cpc	r25, r19
     e6a:	a4 07       	cpc	r26, r20
     e6c:	b5 07       	cpc	r27, r21
     e6e:	40 f4       	brcc	.+16     	; 0xe80 <__fpcmp_parts_f+0xa8>
     e70:	11 23       	and	r17, r17
     e72:	19 f0       	breq	.+6      	; 0xe7a <__fpcmp_parts_f+0xa2>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	05 c0       	rjmp	.+10     	; 0xe84 <__fpcmp_parts_f+0xac>
     e7a:	6f ef       	ldi	r22, 0xFF	; 255
     e7c:	7f ef       	ldi	r23, 0xFF	; 255
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <__fpcmp_parts_f+0xac>
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	cb 01       	movw	r24, r22
     e86:	1f 91       	pop	r17
     e88:	08 95       	ret

00000e8a <TMU_vidInit>:

static TCB_t All_Tasks[MAX_TASKS];
static u32 TMU_u32OsTicks;

void TMU_vidInit(void)
{
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	Timer_enuInit();
     e92:	0e 94 50 09 	call	0x12a0	; 0x12a0 <Timer_enuInit>

#if TIMER_CHANNEL == TIMER0
	Timer_enuSetClkPrescaler( TIMER0 , PRES_1024 );
     e96:	88 ec       	ldi	r24, 0xC8	; 200
     e98:	61 e1       	ldi	r22, 0x11	; 17
     e9a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <Timer_enuSetClkPrescaler>
	Timer_enuSetOCn_Mode( TIMER0 , COMP_NORMAL );
     e9e:	88 ec       	ldi	r24, 0xC8	; 200
     ea0:	64 e1       	ldi	r22, 0x14	; 20
     ea2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <Timer_enuSetOCn_Mode>
	#if (OS_TICK > 0 ) && ( OS_TICK <= 16 )
		if( ES_OK == Timer_enuSetOCRnValue( TIMER0 , (u8)((OS_TICK * CPU_FREQ_KHZ)/1024ul)) )
     ea6:	88 ec       	ldi	r24, 0xC8	; 200
     ea8:	6c e9       	ldi	r22, 0x9C	; 156
     eaa:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <Timer_enuSetOCRnValue>
     eae:	88 23       	and	r24, r24
     eb0:	99 f4       	brne	.+38     	; 0xed8 <TMU_vidInit+0x4e>
		{
			Timer_enuSetTimer_Mode( TIMER0 , WGM_CTC_MODE );
     eb2:	88 ec       	ldi	r24, 0xC8	; 200
     eb4:	60 e2       	ldi	r22, 0x20	; 32
     eb6:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <Timer_enuSetTimer_Mode>
			TMU_u8ISRNum = 1;
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	80 93 ce 01 	sts	0x01CE, r24
			TMU_u8ISRCount = 1;
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	80 93 cf 01 	sts	0x01CF, r24
			Timer_enuInterruptEnable( OCIE0 );
     ec6:	8d e3       	ldi	r24, 0x3D	; 61
     ec8:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <Timer_enuInterruptEnable>
			Timer_enuCallBack( OCIE0 , TMU_vid_OCIE0_ISR );
     ecc:	2d ef       	ldi	r18, 0xFD	; 253
     ece:	38 e0       	ldi	r19, 0x08	; 8
     ed0:	8d e3       	ldi	r24, 0x3D	; 61
     ed2:	b9 01       	movw	r22, r18
     ed4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <Timer_enuCallBack>
	#error os tick value is invalid
	#endif
#else
#error Timer channel configuration is invalid
#endif
}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <TMU_vidCreateTask>:

void TMU_vidCreateTask( void( *Copy_pFunAppFun )( void* ) , void *Copy_pvidParameter, u8 Copy_u8Priority, u8 Copy_u8State ,u16 Copy_u16Periodicity  , u8 Copy_u8Offset)
{
     ede:	ef 92       	push	r14
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	29 97       	sbiw	r28, 0x09	; 9
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	7c 83       	std	Y+4, r23	; 0x04
     efe:	6b 83       	std	Y+3, r22	; 0x03
     f00:	4d 83       	std	Y+5, r20	; 0x05
     f02:	2e 83       	std	Y+6, r18	; 0x06
     f04:	18 87       	std	Y+8, r17	; 0x08
     f06:	0f 83       	std	Y+7, r16	; 0x07
     f08:	e9 86       	std	Y+9, r14	; 0x09
	if (Copy_pFunAppFun != NULL && Copy_u8Priority < MAX_TASKS)
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	09 f4       	brne	.+2      	; 0xf14 <TMU_vidCreateTask+0x36>
     f12:	52 c0       	rjmp	.+164    	; 0xfb8 <TMU_vidCreateTask+0xda>
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	88 30       	cpi	r24, 0x08	; 8
     f18:	08 f0       	brcs	.+2      	; 0xf1c <TMU_vidCreateTask+0x3e>
     f1a:	4e c0       	rjmp	.+156    	; 0xfb8 <TMU_vidCreateTask+0xda>
	{
		All_Tasks[ Copy_u8Priority ].pFun = Copy_pFunAppFun;
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	88 2f       	mov	r24, r24
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	fc 01       	movw	r30, r24
     f30:	ef 52       	subi	r30, 0x2F	; 47
     f32:	fe 4f       	sbci	r31, 0xFE	; 254
     f34:	89 81       	ldd	r24, Y+1	; 0x01
     f36:	9a 81       	ldd	r25, Y+2	; 0x02
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].parameter = Copy_pvidParameter;
     f3c:	8d 81       	ldd	r24, Y+5	; 0x05
     f3e:	88 2f       	mov	r24, r24
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	fc 01       	movw	r30, r24
     f52:	ef 52       	subi	r30, 0x2F	; 47
     f54:	fe 4f       	sbci	r31, 0xFE	; 254
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].Periodicity = Copy_u16Periodicity;
     f5e:	8d 81       	ldd	r24, Y+5	; 0x05
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	fc 01       	movw	r30, r24
     f74:	ef 52       	subi	r30, 0x2F	; 47
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	8f 81       	ldd	r24, Y+7	; 0x07
     f7a:	98 85       	ldd	r25, Y+8	; 0x08
     f7c:	91 83       	std	Z+1, r25	; 0x01
     f7e:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].state = Copy_u8State;
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	fc 01       	movw	r30, r24
     f94:	e9 52       	subi	r30, 0x29	; 41
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	8e 81       	ldd	r24, Y+6	; 0x06
     f9a:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].offset = Copy_u8Offset;
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	88 2f       	mov	r24, r24
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	fc 01       	movw	r30, r24
     fb0:	e8 52       	subi	r30, 0x28	; 40
     fb2:	fe 4f       	sbci	r31, 0xFE	; 254
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	80 83       	st	Z, r24
	}
}
     fb8:	29 96       	adiw	r28, 0x09	; 9
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	1f 91       	pop	r17
     fca:	0f 91       	pop	r16
     fcc:	ef 90       	pop	r14
     fce:	08 95       	ret

00000fd0 <TMU_vidStartScheduler>:

void TMU_vidStartScheduler(void)
{
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	00 d0       	rcall	.+0      	; 0xfde <TMU_vidStartScheduler+0xe>
     fde:	00 d0       	rcall	.+0      	; 0xfe0 <TMU_vidStartScheduler+0x10>
     fe0:	0f 92       	push	r0
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32PrevTick = 0;
     fe6:	1a 82       	std	Y+2, r1	; 0x02
     fe8:	1b 82       	std	Y+3, r1	; 0x03
     fea:	1c 82       	std	Y+4, r1	; 0x04
     fec:	1d 82       	std	Y+5, r1	; 0x05
	_SEI_;
     fee:	78 94       	sei
	while(1)
	{
		if (TMU_u32OsTicks > Local_u32PrevTick )
     ff0:	20 91 11 02 	lds	r18, 0x0211
     ff4:	30 91 12 02 	lds	r19, 0x0212
     ff8:	40 91 13 02 	lds	r20, 0x0213
     ffc:	50 91 14 02 	lds	r21, 0x0214
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	9b 81       	ldd	r25, Y+3	; 0x03
    1004:	ac 81       	ldd	r26, Y+4	; 0x04
    1006:	bd 81       	ldd	r27, Y+5	; 0x05
    1008:	82 17       	cp	r24, r18
    100a:	93 07       	cpc	r25, r19
    100c:	a4 07       	cpc	r26, r20
    100e:	b5 07       	cpc	r27, r21
    1010:	78 f7       	brcc	.-34     	; 0xff0 <TMU_vidStartScheduler+0x20>
		{
			Local_u32PrevTick = TMU_u32OsTicks;
    1012:	80 91 11 02 	lds	r24, 0x0211
    1016:	90 91 12 02 	lds	r25, 0x0212
    101a:	a0 91 13 02 	lds	r26, 0x0213
    101e:	b0 91 14 02 	lds	r27, 0x0214
    1022:	8a 83       	std	Y+2, r24	; 0x02
    1024:	9b 83       	std	Y+3, r25	; 0x03
    1026:	ac 83       	std	Y+4, r26	; 0x04
    1028:	bd 83       	std	Y+5, r27	; 0x05
			for(s8 i = MAX_TASKS-1 ; i>=0 ; i--)
    102a:	87 e0       	ldi	r24, 0x07	; 7
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	81 c0       	rjmp	.+258    	; 0x1132 <TMU_vidStartScheduler+0x162>
			{
				if (All_Tasks[i].pFun  != NULL	&&
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	99 27       	eor	r25, r25
    1034:	87 fd       	sbrc	r24, 7
    1036:	90 95       	com	r25
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	fc 01       	movw	r30, r24
    1046:	ef 52       	subi	r30, 0x2F	; 47
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	80 81       	ld	r24, Z
    104c:	91 81       	ldd	r25, Z+1	; 0x01
    104e:	00 97       	sbiw	r24, 0x00	; 0
    1050:	09 f4       	brne	.+2      	; 0x1054 <TMU_vidStartScheduler+0x84>
    1052:	6c c0       	rjmp	.+216    	; 0x112c <TMU_vidStartScheduler+0x15c>
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	99 27       	eor	r25, r25
    1058:	87 fd       	sbrc	r24, 7
    105a:	90 95       	com	r25
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	fc 01       	movw	r30, r24
    106a:	e9 52       	subi	r30, 0x29	; 41
    106c:	fe 4f       	sbci	r31, 0xFE	; 254
    106e:	80 81       	ld	r24, Z
    1070:	87 31       	cpi	r24, 0x17	; 23
    1072:	09 f0       	breq	.+2      	; 0x1076 <TMU_vidStartScheduler+0xa6>
    1074:	5b c0       	rjmp	.+182    	; 0x112c <TMU_vidStartScheduler+0x15c>
    1076:	e0 90 11 02 	lds	r14, 0x0211
    107a:	f0 90 12 02 	lds	r15, 0x0212
    107e:	00 91 13 02 	lds	r16, 0x0213
    1082:	10 91 14 02 	lds	r17, 0x0214
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	99 27       	eor	r25, r25
    108a:	87 fd       	sbrc	r24, 7
    108c:	90 95       	com	r25
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	fc 01       	movw	r30, r24
    109e:	ef 52       	subi	r30, 0x2F	; 47
    10a0:	fe 4f       	sbci	r31, 0xFE	; 254
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	9c 01       	movw	r18, r24
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	c8 01       	movw	r24, r16
    10ae:	b7 01       	movw	r22, r14
    10b0:	0e 94 fb 2f 	call	0x5ff6	; 0x5ff6 <__udivmodsi4>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9c 01       	movw	r18, r24
    10ba:	ad 01       	movw	r20, r26
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	99 27       	eor	r25, r25
    10c0:	87 fd       	sbrc	r24, 7
    10c2:	90 95       	com	r25
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	fc 01       	movw	r30, r24
    10d2:	e8 52       	subi	r30, 0x28	; 40
    10d4:	fe 4f       	sbci	r31, 0xFE	; 254
    10d6:	80 81       	ld	r24, Z
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a0 e0       	ldi	r26, 0x00	; 0
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	4a 07       	cpc	r20, r26
    10e6:	5b 07       	cpc	r21, r27
    10e8:	09 f5       	brne	.+66     	; 0x112c <TMU_vidStartScheduler+0x15c>
					All_Tasks[i].state == READY &&
					TMU_u32OsTicks % All_Tasks[i].Periodicity == All_Tasks[i].offset )
				{
					All_Tasks[i].pFun (All_Tasks[i].parameter);
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	99 27       	eor	r25, r25
    10ee:	87 fd       	sbrc	r24, 7
    10f0:	90 95       	com	r25
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	fc 01       	movw	r30, r24
    1100:	ef 52       	subi	r30, 0x2F	; 47
    1102:	fe 4f       	sbci	r31, 0xFE	; 254
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	99 27       	eor	r25, r25
    110c:	87 fd       	sbrc	r24, 7
    110e:	90 95       	com	r25
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	88 0f       	add	r24, r24
    1116:	99 1f       	adc	r25, r25
    1118:	01 96       	adiw	r24, 0x01	; 1
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	fc 01       	movw	r30, r24
    1120:	ef 52       	subi	r30, 0x2F	; 47
    1122:	fe 4f       	sbci	r31, 0xFE	; 254
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	f9 01       	movw	r30, r18
    112a:	09 95       	icall
	while(1)
	{
		if (TMU_u32OsTicks > Local_u32PrevTick )
		{
			Local_u32PrevTick = TMU_u32OsTicks;
			for(s8 i = MAX_TASKS-1 ; i>=0 ; i--)
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	81 50       	subi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	88 23       	and	r24, r24
    1136:	0c f0       	brlt	.+2      	; 0x113a <TMU_vidStartScheduler+0x16a>
    1138:	7b cf       	rjmp	.-266    	; 0x1030 <TMU_vidStartScheduler+0x60>
    113a:	5a cf       	rjmp	.-332    	; 0xff0 <TMU_vidStartScheduler+0x20>

0000113c <TMU_vidDeleteTask>:
	}
}


void TMU_vidDeleteTask(u8 Copy_u8Priority)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	88 30       	cpi	r24, 0x08	; 8
    114c:	e0 f4       	brcc	.+56     	; 0x1186 <TMU_vidDeleteTask+0x4a>
	{
		All_Tasks[Copy_u8Priority].pFun = NULL;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	fc 01       	movw	r30, r24
    1162:	ef 52       	subi	r30, 0x2F	; 47
    1164:	fe 4f       	sbci	r31, 0xFE	; 254
    1166:	11 82       	std	Z+1, r1	; 0x01
    1168:	10 82       	st	Z, r1
		All_Tasks[ Copy_u8Priority].state = KILLED;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	fc 01       	movw	r30, r24
    117e:	e9 52       	subi	r30, 0x29	; 41
    1180:	fe 4f       	sbci	r31, 0xFE	; 254
    1182:	81 e1       	ldi	r24, 0x11	; 17
    1184:	80 83       	st	Z, r24
	}
}
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <TMU_vidPauseTask>:

void TMU_vidPauseTask(u8 Copy_u8Priority)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	0f 92       	push	r0
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	88 30       	cpi	r24, 0x08	; 8
    119e:	70 f4       	brcc	.+28     	; 0x11bc <TMU_vidPauseTask+0x2e>
	{
		All_Tasks[Copy_u8Priority].state = PAUSED;
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	fc 01       	movw	r30, r24
    11b4:	e9 52       	subi	r30, 0x29	; 41
    11b6:	fe 4f       	sbci	r31, 0xFE	; 254
    11b8:	88 e3       	ldi	r24, 0x38	; 56
    11ba:	80 83       	st	Z, r24
	}
}
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <TMU_vidResumeTask>:

void TMU_vidResumeTask(u8 Copy_u8Priority)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	88 30       	cpi	r24, 0x08	; 8
    11d4:	70 f4       	brcc	.+28     	; 0x11f2 <TMU_vidResumeTask+0x2e>
	{
		All_Tasks[Copy_u8Priority].state = READY;
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	fc 01       	movw	r30, r24
    11ea:	e9 52       	subi	r30, 0x29	; 41
    11ec:	fe 4f       	sbci	r31, 0xFE	; 254
    11ee:	87 e1       	ldi	r24, 0x17	; 23
    11f0:	80 83       	st	Z, r24
	}
}
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <TMU_vid_OCIE0_ISR>:

#if TIMER_CHANNEL == TIMER0

void TMU_vid_OCIE0_ISR (void)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	cd b7       	in	r28, 0x3d	; 61
    1200:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
    1202:	80 91 cf 01 	lds	r24, 0x01CF
    1206:	81 50       	subi	r24, 0x01	; 1
    1208:	80 93 cf 01 	sts	0x01CF, r24
	if ( ! TMU_u8ISRCount)
    120c:	80 91 cf 01 	lds	r24, 0x01CF
    1210:	88 23       	and	r24, r24
    1212:	b9 f4       	brne	.+46     	; 0x1242 <TMU_vid_OCIE0_ISR+0x48>
	{
		TMU_u32OsTicks++;
    1214:	80 91 11 02 	lds	r24, 0x0211
    1218:	90 91 12 02 	lds	r25, 0x0212
    121c:	a0 91 13 02 	lds	r26, 0x0213
    1220:	b0 91 14 02 	lds	r27, 0x0214
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	a1 1d       	adc	r26, r1
    1228:	b1 1d       	adc	r27, r1
    122a:	80 93 11 02 	sts	0x0211, r24
    122e:	90 93 12 02 	sts	0x0212, r25
    1232:	a0 93 13 02 	sts	0x0213, r26
    1236:	b0 93 14 02 	sts	0x0214, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
    123a:	80 91 ce 01 	lds	r24, 0x01CE
    123e:	80 93 cf 01 	sts	0x01CF, r24
	}
}
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <TMU_vid_TOIE0_ISR>:

void TMU_vid_TOIE0_ISR(void)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
    1250:	80 91 cf 01 	lds	r24, 0x01CF
    1254:	81 50       	subi	r24, 0x01	; 1
    1256:	80 93 cf 01 	sts	0x01CF, r24
	if ( ! TMU_u8ISRCount)
    125a:	80 91 cf 01 	lds	r24, 0x01CF
    125e:	88 23       	and	r24, r24
    1260:	e1 f4       	brne	.+56     	; 0x129a <TMU_vid_TOIE0_ISR+0x52>
	{
		TCNT0 = TMU_u8Preload;
    1262:	e2 e5       	ldi	r30, 0x52	; 82
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 91 d0 01 	lds	r24, 0x01D0
    126a:	80 83       	st	Z, r24

		TMU_u32OsTicks++;
    126c:	80 91 11 02 	lds	r24, 0x0211
    1270:	90 91 12 02 	lds	r25, 0x0212
    1274:	a0 91 13 02 	lds	r26, 0x0213
    1278:	b0 91 14 02 	lds	r27, 0x0214
    127c:	01 96       	adiw	r24, 0x01	; 1
    127e:	a1 1d       	adc	r26, r1
    1280:	b1 1d       	adc	r27, r1
    1282:	80 93 11 02 	sts	0x0211, r24
    1286:	90 93 12 02 	sts	0x0212, r25
    128a:	a0 93 13 02 	sts	0x0213, r26
    128e:	b0 93 14 02 	sts	0x0214, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
    1292:	80 91 ce 01 	lds	r24, 0x01CE
    1296:	80 93 cf 01 	sts	0x01CF, r24
	}
}
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <Timer_enuInit>:
																		{ OCIE2 ,	NULL},
																	};


ES_t Timer_enuInit( void )
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	28 97       	sbiw	r28, 0x08	; 8
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8ClkSelect ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    12b8:	19 82       	std	Y+1, r1	; 0x01
    12ba:	b8 c1       	rjmp	.+880    	; 0x162c <Timer_enuInit+0x38c>
	{
		if( Timers[Local_u8Iter].TimerNum == TIMER0)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	c9 01       	movw	r24, r18
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	82 0f       	add	r24, r18
    12ce:	93 1f       	adc	r25, r19
    12d0:	fc 01       	movw	r30, r24
    12d2:	e5 59       	subi	r30, 0x95	; 149
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	80 81       	ld	r24, Z
    12d8:	88 3c       	cpi	r24, 0xC8	; 200
    12da:	09 f0       	breq	.+2      	; 0x12de <Timer_enuInit+0x3e>
    12dc:	c8 c0       	rjmp	.+400    	; 0x146e <Timer_enuInit+0x1ce>
		{
			TIMSK &= ~( TC0_INT_EN_MASK ) ;			// Disable All Interrupts before setting all conditions
    12de:	a9 e5       	ldi	r26, 0x59	; 89
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e9 e5       	ldi	r30, 0x59	; 89
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	8c 7f       	andi	r24, 0xFC	; 252
    12ea:	8c 93       	st	X, r24
			TCCR0 = 0x00 ;							// Masks all bits in TCCR0
    12ec:	e3 e5       	ldi	r30, 0x53	; 83
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	10 82       	st	Z, r1
			OCR0  = 0x00 ;							// Clears Output Compare Register
    12f2:	ec e5       	ldi	r30, 0x5C	; 92
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	10 82       	st	Z, r1
			/*	Set Clock Selection	*/
			Global_u32Timer0_Clk = Timer_u32TimerClock( TIMER0 , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	c9 01       	movw	r24, r18
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	82 0f       	add	r24, r18
    130a:	93 1f       	adc	r25, r19
    130c:	fc 01       	movw	r30, r24
    130e:	e4 59       	subi	r30, 0x94	; 148
    1310:	fe 4f       	sbci	r31, 0xFE	; 254
    1312:	90 81       	ld	r25, Z
    1314:	9e 01       	movw	r18, r28
    1316:	2d 5f       	subi	r18, 0xFD	; 253
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	88 ec       	ldi	r24, 0xC8	; 200
    131c:	69 2f       	mov	r22, r25
    131e:	a9 01       	movw	r20, r18
    1320:	0e 94 2d 0b 	call	0x165a	; 0x165a <Timer_u32TimerClock>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	80 93 17 02 	sts	0x0217, r24
    132c:	90 93 18 02 	sts	0x0218, r25
    1330:	a0 93 19 02 	sts	0x0219, r26
    1334:	b0 93 1a 02 	sts	0x021A, r27
			TCCR0 |= ( Local_u8ClkSelect  << CLK0_SEL_BITS );
    1338:	a3 e5       	ldi	r26, 0x53	; 83
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e3 e5       	ldi	r30, 0x53	; 83
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	90 81       	ld	r25, Z
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	89 2b       	or	r24, r25
    1346:	8c 93       	st	X, r24
			/*	Set Compare Output Mode	*/
			TCCR0 |= ( ( Timers[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COMP0_MAT_OUT_MODE_BITS );
    1348:	a3 e5       	ldi	r26, 0x53	; 83
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e3 e5       	ldi	r30, 0x53	; 83
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	c9 01       	movw	r24, r18
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	82 0f       	add	r24, r18
    1366:	93 1f       	adc	r25, r19
    1368:	fc 01       	movw	r30, r24
    136a:	e3 59       	subi	r30, 0x93	; 147
    136c:	fe 4f       	sbci	r31, 0xFE	; 254
    136e:	80 81       	ld	r24, Z
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	44 97       	sbiw	r24, 0x14	; 20
    1376:	82 95       	swap	r24
    1378:	92 95       	swap	r25
    137a:	90 7f       	andi	r25, 0xF0	; 240
    137c:	98 27       	eor	r25, r24
    137e:	80 7f       	andi	r24, 0xF0	; 240
    1380:	98 27       	eor	r25, r24
    1382:	84 2b       	or	r24, r20
    1384:	8c 93       	st	X, r24
			/*	Set Waveform Generation Mode	*/
			if( Timers[Local_u8Iter].WaveGenMode == WGM_NORMAL_MODE	||
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	c9 01       	movw	r24, r18
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	82 0f       	add	r24, r18
    1398:	93 1f       	adc	r25, r19
    139a:	fc 01       	movw	r30, r24
    139c:	e2 59       	subi	r30, 0x92	; 146
    139e:	fe 4f       	sbci	r31, 0xFE	; 254
    13a0:	80 81       	ld	r24, Z
    13a2:	8e 31       	cpi	r24, 0x1E	; 30
    13a4:	81 f0       	breq	.+32     	; 0x13c6 <Timer_enuInit+0x126>
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	c9 01       	movw	r24, r18
    13ae:	88 0f       	add	r24, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	82 0f       	add	r24, r18
    13b8:	93 1f       	adc	r25, r19
    13ba:	fc 01       	movw	r30, r24
    13bc:	e2 59       	subi	r30, 0x92	; 146
    13be:	fe 4f       	sbci	r31, 0xFE	; 254
    13c0:	80 81       	ld	r24, Z
    13c2:	80 32       	cpi	r24, 0x20	; 32
    13c4:	11 f5       	brne	.+68     	; 0x140a <Timer_enuInit+0x16a>
				Timers[Local_u8Iter].WaveGenMode == WGM_CTC_MODE	)
			{
				TCCR0 |= ( ( ( Timers[Local_u8Iter].WaveGenMode - WGM_NORMAL_MODE ) >> BIT0_MASK ) << WGM01_BIT );
    13c6:	a3 e5       	ldi	r26, 0x53	; 83
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e3 e5       	ldi	r30, 0x53	; 83
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	c9 01       	movw	r24, r18
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	82 0f       	add	r24, r18
    13e4:	93 1f       	adc	r25, r19
    13e6:	fc 01       	movw	r30, r24
    13e8:	e2 59       	subi	r30, 0x92	; 146
    13ea:	fe 4f       	sbci	r31, 0xFE	; 254
    13ec:	80 81       	ld	r24, Z
    13ee:	88 2f       	mov	r24, r24
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	4e 97       	sbiw	r24, 0x1e	; 30
    13f4:	95 95       	asr	r25
    13f6:	87 95       	ror	r24
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	84 2b       	or	r24, r20
    1406:	8c 93       	st	X, r24
    1408:	02 c0       	rjmp	.+4      	; 0x140e <Timer_enuInit+0x16e>
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    140a:	82 e0       	ldi	r24, 0x02	; 2
    140c:	8a 83       	std	Y+2, r24	; 0x02
				#warning "Timer_Init(): Non Supported Waveform Gen mode for Timer0. Timer0 WGM is set to WGM_NORMAL_MODE"
			}
			/*	Set Interrupt Mode	*/
			switch( Timers[Local_u8Iter].InterruptMode )
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	c9 01       	movw	r24, r18
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	fc 01       	movw	r30, r24
    1424:	e1 59       	subi	r30, 0x91	; 145
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	80 81       	ld	r24, Z
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	38 87       	std	Y+8, r19	; 0x08
    1430:	2f 83       	std	Y+7, r18	; 0x07
    1432:	8f 81       	ldd	r24, Y+7	; 0x07
    1434:	98 85       	ldd	r25, Y+8	; 0x08
    1436:	89 32       	cpi	r24, 0x29	; 41
    1438:	91 05       	cpc	r25, r1
    143a:	31 f0       	breq	.+12     	; 0x1448 <Timer_enuInit+0x1a8>
    143c:	2f 81       	ldd	r18, Y+7	; 0x07
    143e:	38 85       	ldd	r19, Y+8	; 0x08
    1440:	2a 32       	cpi	r18, 0x2A	; 42
    1442:	31 05       	cpc	r19, r1
    1444:	49 f0       	breq	.+18     	; 0x1458 <Timer_enuInit+0x1b8>
    1446:	10 c0       	rjmp	.+32     	; 0x1468 <Timer_enuInit+0x1c8>
			{
				case TC_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE0_BIT );	/*	Enable TOIE0 Interrupt */
    1448:	a9 e5       	ldi	r26, 0x59	; 89
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e9 e5       	ldi	r30, 0x59	; 89
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	8c 93       	st	X, r24
    1456:	e7 c0       	rjmp	.+462    	; 0x1626 <Timer_enuInit+0x386>
											break;
				case TC_OUT_COMP_INT	:	SET_BIT( TIMSK , OCIE0_BIT );	/*	Enable OCIE0 Interrupt */
    1458:	a9 e5       	ldi	r26, 0x59	; 89
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e9 e5       	ldi	r30, 0x59	; 89
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	82 60       	ori	r24, 0x02	; 2
    1464:	8c 93       	st	X, r24
    1466:	df c0       	rjmp	.+446    	; 0x1626 <Timer_enuInit+0x386>
											break;

				default :	Local_enuErrorState = ES_OUT_RANGE ;
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	8a 83       	std	Y+2, r24	; 0x02
    146c:	dc c0       	rjmp	.+440    	; 0x1626 <Timer_enuInit+0x386>
							#warning " Timer_Init(): Non Supported Interrupt mode for Timer0. Timer0 Interrupts are Disabled"
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else if( Timers[Local_u8Iter].TimerNum == TIMER2)
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	c9 01       	movw	r24, r18
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	fc 01       	movw	r30, r24
    1484:	e5 59       	subi	r30, 0x95	; 149
    1486:	fe 4f       	sbci	r31, 0xFE	; 254
    1488:	80 81       	ld	r24, Z
    148a:	8b 3c       	cpi	r24, 0xCB	; 203
    148c:	09 f0       	breq	.+2      	; 0x1490 <Timer_enuInit+0x1f0>
    148e:	c8 c0       	rjmp	.+400    	; 0x1620 <Timer_enuInit+0x380>
		{
			TIMSK &= ~( TC2_INT_EN_MASK ) ;			// Disable All Interrupts before setting all conditions
    1490:	a9 e5       	ldi	r26, 0x59	; 89
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e9 e5       	ldi	r30, 0x59	; 89
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8f 73       	andi	r24, 0x3F	; 63
    149c:	8c 93       	st	X, r24
			TCCR2 = 0x00 ;							// Masks all bits in TCCR2
    149e:	e5 e4       	ldi	r30, 0x45	; 69
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	10 82       	st	Z, r1
			OCR2  = 0x00 ;							// Clears Output Compare Register
    14a4:	e3 e4       	ldi	r30, 0x43	; 67
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	10 82       	st	Z, r1

			/*	Set Clock Selection	*/
			Global_u32Timer2_Clk = Timer_u32TimerClock( TIMER2 , Timers[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	c9 01       	movw	r24, r18
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	fc 01       	movw	r30, r24
    14c0:	e4 59       	subi	r30, 0x94	; 148
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	90 81       	ld	r25, Z
    14c6:	9e 01       	movw	r18, r28
    14c8:	2d 5f       	subi	r18, 0xFD	; 253
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	8b ec       	ldi	r24, 0xCB	; 203
    14ce:	69 2f       	mov	r22, r25
    14d0:	a9 01       	movw	r20, r18
    14d2:	0e 94 2d 0b 	call	0x165a	; 0x165a <Timer_u32TimerClock>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	80 93 1b 02 	sts	0x021B, r24
    14de:	90 93 1c 02 	sts	0x021C, r25
    14e2:	a0 93 1d 02 	sts	0x021D, r26
    14e6:	b0 93 1e 02 	sts	0x021E, r27
			TCCR2 |= ( Local_u8ClkSelect << CLK2_SEL_BITS );
    14ea:	a5 e4       	ldi	r26, 0x45	; 69
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e4       	ldi	r30, 0x45	; 69
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	90 81       	ld	r25, Z
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	89 2b       	or	r24, r25
    14f8:	8c 93       	st	X, r24
			/*	Set Compare Output Mode	*/
			TCCR2 |= ( ( Timers[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COMP2_MAT_OUT_MODE_BITS );
    14fa:	a5 e4       	ldi	r26, 0x45	; 69
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e5 e4       	ldi	r30, 0x45	; 69
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	c9 01       	movw	r24, r18
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	82 0f       	add	r24, r18
    1518:	93 1f       	adc	r25, r19
    151a:	fc 01       	movw	r30, r24
    151c:	e3 59       	subi	r30, 0x93	; 147
    151e:	fe 4f       	sbci	r31, 0xFE	; 254
    1520:	80 81       	ld	r24, Z
    1522:	88 2f       	mov	r24, r24
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	44 97       	sbiw	r24, 0x14	; 20
    1528:	82 95       	swap	r24
    152a:	92 95       	swap	r25
    152c:	90 7f       	andi	r25, 0xF0	; 240
    152e:	98 27       	eor	r25, r24
    1530:	80 7f       	andi	r24, 0xF0	; 240
    1532:	98 27       	eor	r25, r24
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
			/*	Set Waveform Generation Mode	*/
			if( Timers[Local_u8Iter].WaveGenMode == WGM_NORMAL_MODE ||
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	c9 01       	movw	r24, r18
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	82 0f       	add	r24, r18
    154a:	93 1f       	adc	r25, r19
    154c:	fc 01       	movw	r30, r24
    154e:	e2 59       	subi	r30, 0x92	; 146
    1550:	fe 4f       	sbci	r31, 0xFE	; 254
    1552:	80 81       	ld	r24, Z
    1554:	8e 31       	cpi	r24, 0x1E	; 30
    1556:	81 f0       	breq	.+32     	; 0x1578 <Timer_enuInit+0x2d8>
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	c9 01       	movw	r24, r18
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	82 0f       	add	r24, r18
    156a:	93 1f       	adc	r25, r19
    156c:	fc 01       	movw	r30, r24
    156e:	e2 59       	subi	r30, 0x92	; 146
    1570:	fe 4f       	sbci	r31, 0xFE	; 254
    1572:	80 81       	ld	r24, Z
    1574:	80 32       	cpi	r24, 0x20	; 32
    1576:	11 f5       	brne	.+68     	; 0x15bc <Timer_enuInit+0x31c>
				Timers[Local_u8Iter].WaveGenMode == WGM_CTC_MODE	 )
			{
				TCCR2 |= ( ( ( Timers[Local_u8Iter].WaveGenMode - WGM_NORMAL_MODE ) >> BIT0_MASK ) << WGM21_BIT );
    1578:	a5 e4       	ldi	r26, 0x45	; 69
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e4       	ldi	r30, 0x45	; 69
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	c9 01       	movw	r24, r18
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	82 0f       	add	r24, r18
    1596:	93 1f       	adc	r25, r19
    1598:	fc 01       	movw	r30, r24
    159a:	e2 59       	subi	r30, 0x92	; 146
    159c:	fe 4f       	sbci	r31, 0xFE	; 254
    159e:	80 81       	ld	r24, Z
    15a0:	88 2f       	mov	r24, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	4e 97       	sbiw	r24, 0x1e	; 30
    15a6:	95 95       	asr	r25
    15a8:	87 95       	ror	r24
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	84 2b       	or	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <Timer_enuInit+0x320>
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	8a 83       	std	Y+2, r24	; 0x02
				#warning "Timer_Init(): Non Supported Waveform Gen mode for Timer2. Timer2 WGM is set to WGM_NORMAL_MODE"
			}
			/*	Set Interrupt Mode	*/
			switch( Timers[Local_u8Iter].InterruptMode )
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	c9 01       	movw	r24, r18
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	82 0f       	add	r24, r18
    15d2:	93 1f       	adc	r25, r19
    15d4:	fc 01       	movw	r30, r24
    15d6:	e1 59       	subi	r30, 0x91	; 145
    15d8:	fe 4f       	sbci	r31, 0xFE	; 254
    15da:	80 81       	ld	r24, Z
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	3e 83       	std	Y+6, r19	; 0x06
    15e2:	2d 83       	std	Y+5, r18	; 0x05
    15e4:	8d 81       	ldd	r24, Y+5	; 0x05
    15e6:	9e 81       	ldd	r25, Y+6	; 0x06
    15e8:	89 32       	cpi	r24, 0x29	; 41
    15ea:	91 05       	cpc	r25, r1
    15ec:	31 f0       	breq	.+12     	; 0x15fa <Timer_enuInit+0x35a>
    15ee:	2d 81       	ldd	r18, Y+5	; 0x05
    15f0:	3e 81       	ldd	r19, Y+6	; 0x06
    15f2:	2a 32       	cpi	r18, 0x2A	; 42
    15f4:	31 05       	cpc	r19, r1
    15f6:	49 f0       	breq	.+18     	; 0x160a <Timer_enuInit+0x36a>
    15f8:	10 c0       	rjmp	.+32     	; 0x161a <Timer_enuInit+0x37a>
			{
				case TC_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE2_BIT );	/*	Enable TOIE2 Interrupt */
    15fa:	a9 e5       	ldi	r26, 0x59	; 89
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e9 e5       	ldi	r30, 0x59	; 89
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	80 64       	ori	r24, 0x40	; 64
    1606:	8c 93       	st	X, r24
    1608:	0e c0       	rjmp	.+28     	; 0x1626 <Timer_enuInit+0x386>
											break;
				case TC_OUT_COMP_INT	:	SET_BIT( TIMSK , OCIE2_BIT );	/*	Enable OCIE2 Interrupt */
    160a:	a9 e5       	ldi	r26, 0x59	; 89
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e9 e5       	ldi	r30, 0x59	; 89
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	80 68       	ori	r24, 0x80	; 128
    1616:	8c 93       	st	X, r24
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <Timer_enuInit+0x386>
											break;

				default :	Local_enuErrorState = ES_OUT_RANGE ;
    161a:	82 e0       	ldi	r24, 0x02	; 2
    161c:	8a 83       	std	Y+2, r24	; 0x02
    161e:	03 c0       	rjmp	.+6      	; 0x1626 <Timer_enuInit+0x386>
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE ;
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	8a 83       	std	Y+2, r24	; 0x02
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <Timer_enuInit+0x398>
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < Timers_u8MaxNum ; Local_u8Iter++ )
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	90 91 68 01 	lds	r25, 0x0168
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	89 17       	cp	r24, r25
    1634:	08 f4       	brcc	.+2      	; 0x1638 <Timer_enuInit+0x398>
    1636:	42 ce       	rjmp	.-892    	; 0x12bc <Timer_enuInit+0x1c>
			#warning " Timer_Init(): Non Supported Timer Number , Initialization is terminated."
			break;
		}
	}

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	19 f0       	breq	.+6      	; 0x1644 <Timer_enuInit+0x3a4>
    163e:	3a 81       	ldd	r19, Y+2	; 0x02
    1640:	3c 83       	std	Y+4, r19	; 0x04
    1642:	01 c0       	rjmp	.+2      	; 0x1646 <Timer_enuInit+0x3a6>
    1644:	1c 82       	std	Y+4, r1	; 0x04
    1646:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1648:	28 96       	adiw	r28, 0x08	; 8
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	de bf       	out	0x3e, r29	; 62
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	cd bf       	out	0x3d, r28	; 61
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <Timer_u32TimerClock>:

static u32 Timer_u32TimerClock( u8 Copy_u8TimerNum ,u8 Copy_u8ClkSelectNum ,u8 *Copy_pu8ClkSelectPrescalar )
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	2a 97       	sbiw	r28, 0x0a	; 10
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	6e 83       	std	Y+6, r22	; 0x06
    1672:	58 87       	std	Y+8, r21	; 0x08
    1674:	4f 83       	std	Y+7, r20	; 0x07
	u32 Copy_u32TimerClk = CPU_CLOCK;
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	94 e2       	ldi	r25, 0x24	; 36
    167a:	a4 ef       	ldi	r26, 0xF4	; 244
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	89 83       	std	Y+1, r24	; 0x01
    1680:	9a 83       	std	Y+2, r25	; 0x02
    1682:	ab 83       	std	Y+3, r26	; 0x03
    1684:	bc 83       	std	Y+4, r27	; 0x04


	switch( Copy_u8ClkSelectNum )
    1686:	8e 81       	ldd	r24, Y+6	; 0x06
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3a 87       	std	Y+10, r19	; 0x0a
    168e:	29 87       	std	Y+9, r18	; 0x09
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	8e 30       	cpi	r24, 0x0E	; 14
    1696:	91 05       	cpc	r25, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <Timer_u32TimerClock+0x42>
    169a:	81 c0       	rjmp	.+258    	; 0x179e <Timer_u32TimerClock+0x144>
    169c:	29 85       	ldd	r18, Y+9	; 0x09
    169e:	3a 85       	ldd	r19, Y+10	; 0x0a
    16a0:	2f 30       	cpi	r18, 0x0F	; 15
    16a2:	31 05       	cpc	r19, r1
    16a4:	ec f4       	brge	.+58     	; 0x16e0 <Timer_u32TimerClock+0x86>
    16a6:	89 85       	ldd	r24, Y+9	; 0x09
    16a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16aa:	8b 30       	cpi	r24, 0x0B	; 11
    16ac:	91 05       	cpc	r25, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <Timer_u32TimerClock+0x58>
    16b0:	44 c0       	rjmp	.+136    	; 0x173a <Timer_u32TimerClock+0xe0>
    16b2:	29 85       	ldd	r18, Y+9	; 0x09
    16b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b6:	2c 30       	cpi	r18, 0x0C	; 12
    16b8:	31 05       	cpc	r19, r1
    16ba:	34 f4       	brge	.+12     	; 0x16c8 <Timer_u32TimerClock+0x6e>
    16bc:	89 85       	ldd	r24, Y+9	; 0x09
    16be:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c0:	8a 30       	cpi	r24, 0x0A	; 10
    16c2:	91 05       	cpc	r25, r1
    16c4:	91 f1       	breq	.+100    	; 0x172a <Timer_u32TimerClock+0xd0>
    16c6:	f7 c0       	rjmp	.+494    	; 0x18b6 <Timer_u32TimerClock+0x25c>
    16c8:	29 85       	ldd	r18, Y+9	; 0x09
    16ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    16cc:	2c 30       	cpi	r18, 0x0C	; 12
    16ce:	31 05       	cpc	r19, r1
    16d0:	c9 f1       	breq	.+114    	; 0x1744 <Timer_u32TimerClock+0xea>
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	8d 30       	cpi	r24, 0x0D	; 13
    16d8:	91 05       	cpc	r25, r1
    16da:	09 f4       	brne	.+2      	; 0x16de <Timer_u32TimerClock+0x84>
    16dc:	48 c0       	rjmp	.+144    	; 0x176e <Timer_u32TimerClock+0x114>
    16de:	eb c0       	rjmp	.+470    	; 0x18b6 <Timer_u32TimerClock+0x25c>
    16e0:	29 85       	ldd	r18, Y+9	; 0x09
    16e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    16e4:	21 31       	cpi	r18, 0x11	; 17
    16e6:	31 05       	cpc	r19, r1
    16e8:	09 f4       	brne	.+2      	; 0x16ec <Timer_u32TimerClock+0x92>
    16ea:	a7 c0       	rjmp	.+334    	; 0x183a <Timer_u32TimerClock+0x1e0>
    16ec:	89 85       	ldd	r24, Y+9	; 0x09
    16ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f0:	82 31       	cpi	r24, 0x12	; 18
    16f2:	91 05       	cpc	r25, r1
    16f4:	6c f4       	brge	.+26     	; 0x1710 <Timer_u32TimerClock+0xb6>
    16f6:	29 85       	ldd	r18, Y+9	; 0x09
    16f8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16fa:	2f 30       	cpi	r18, 0x0F	; 15
    16fc:	31 05       	cpc	r19, r1
    16fe:	09 f4       	brne	.+2      	; 0x1702 <Timer_u32TimerClock+0xa8>
    1700:	6b c0       	rjmp	.+214    	; 0x17d8 <Timer_u32TimerClock+0x17e>
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	80 31       	cpi	r24, 0x10	; 16
    1708:	91 05       	cpc	r25, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <Timer_u32TimerClock+0xb4>
    170c:	7d c0       	rjmp	.+250    	; 0x1808 <Timer_u32TimerClock+0x1ae>
    170e:	d3 c0       	rjmp	.+422    	; 0x18b6 <Timer_u32TimerClock+0x25c>
    1710:	29 85       	ldd	r18, Y+9	; 0x09
    1712:	3a 85       	ldd	r19, Y+10	; 0x0a
    1714:	22 31       	cpi	r18, 0x12	; 18
    1716:	31 05       	cpc	r19, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <Timer_u32TimerClock+0xc2>
    171a:	ad c0       	rjmp	.+346    	; 0x1876 <Timer_u32TimerClock+0x21c>
    171c:	89 85       	ldd	r24, Y+9	; 0x09
    171e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1720:	83 31       	cpi	r24, 0x13	; 19
    1722:	91 05       	cpc	r25, r1
    1724:	09 f4       	brne	.+2      	; 0x1728 <Timer_u32TimerClock+0xce>
    1726:	b7 c0       	rjmp	.+366    	; 0x1896 <Timer_u32TimerClock+0x23c>
    1728:	c6 c0       	rjmp	.+396    	; 0x18b6 <Timer_u32TimerClock+0x25c>
	{
		case NO_CLK		:	*Copy_pu8ClkSelectPrescalar = 0;
    172a:	ef 81       	ldd	r30, Y+7	; 0x07
    172c:	f8 85       	ldd	r31, Y+8	; 0x08
    172e:	10 82       	st	Z, r1
							Copy_u32TimerClk = 0 ;
    1730:	19 82       	std	Y+1, r1	; 0x01
    1732:	1a 82       	std	Y+2, r1	; 0x02
    1734:	1b 82       	std	Y+3, r1	; 0x03
    1736:	1c 82       	std	Y+4, r1	; 0x04
    1738:	c2 c0       	rjmp	.+388    	; 0x18be <Timer_u32TimerClock+0x264>
							break;
		case PRES_1		:	*Copy_pu8ClkSelectPrescalar = 1;
    173a:	ef 81       	ldd	r30, Y+7	; 0x07
    173c:	f8 85       	ldd	r31, Y+8	; 0x08
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	80 83       	st	Z, r24
    1742:	bd c0       	rjmp	.+378    	; 0x18be <Timer_u32TimerClock+0x264>
						break;
		case PRES_8 	:	*Copy_pu8ClkSelectPrescalar = 2;
    1744:	ef 81       	ldd	r30, Y+7	; 0x07
    1746:	f8 85       	ldd	r31, Y+8	; 0x08
    1748:	82 e0       	ldi	r24, 0x02	; 2
    174a:	80 83       	st	Z, r24
							Copy_u32TimerClk >>= 3 ;
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	ab 81       	ldd	r26, Y+3	; 0x03
    1752:	bc 81       	ldd	r27, Y+4	; 0x04
    1754:	68 94       	set
    1756:	12 f8       	bld	r1, 2
    1758:	b6 95       	lsr	r27
    175a:	a7 95       	ror	r26
    175c:	97 95       	ror	r25
    175e:	87 95       	ror	r24
    1760:	16 94       	lsr	r1
    1762:	d1 f7       	brne	.-12     	; 0x1758 <Timer_u32TimerClock+0xfe>
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	9a 83       	std	Y+2, r25	; 0x02
    1768:	ab 83       	std	Y+3, r26	; 0x03
    176a:	bc 83       	std	Y+4, r27	; 0x04
    176c:	a8 c0       	rjmp	.+336    	; 0x18be <Timer_u32TimerClock+0x264>
						break;
		case PRES_32 	:	if( Copy_u8TimerNum == TIMER2 )
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	8b 3c       	cpi	r24, 0xCB	; 203
    1772:	a9 f4       	brne	.+42     	; 0x179e <Timer_u32TimerClock+0x144>
							{
								*Copy_pu8ClkSelectPrescalar = 3;
    1774:	ef 81       	ldd	r30, Y+7	; 0x07
    1776:	f8 85       	ldd	r31, Y+8	; 0x08
    1778:	83 e0       	ldi	r24, 0x03	; 3
    177a:	80 83       	st	Z, r24
								Copy_u32TimerClk >>= 5 ;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	9a 81       	ldd	r25, Y+2	; 0x02
    1780:	ab 81       	ldd	r26, Y+3	; 0x03
    1782:	bc 81       	ldd	r27, Y+4	; 0x04
    1784:	68 94       	set
    1786:	14 f8       	bld	r1, 4
    1788:	b6 95       	lsr	r27
    178a:	a7 95       	ror	r26
    178c:	97 95       	ror	r25
    178e:	87 95       	ror	r24
    1790:	16 94       	lsr	r1
    1792:	d1 f7       	brne	.-12     	; 0x1788 <Timer_u32TimerClock+0x12e>
    1794:	89 83       	std	Y+1, r24	; 0x01
    1796:	9a 83       	std	Y+2, r25	; 0x02
    1798:	ab 83       	std	Y+3, r26	; 0x03
    179a:	bc 83       	std	Y+4, r27	; 0x04
    179c:	90 c0       	rjmp	.+288    	; 0x18be <Timer_u32TimerClock+0x264>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_64"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
		case PRES_64 	:	Copy_u32TimerClk >>= 6 ;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	9a 81       	ldd	r25, Y+2	; 0x02
    17a2:	ab 81       	ldd	r26, Y+3	; 0x03
    17a4:	bc 81       	ldd	r27, Y+4	; 0x04
    17a6:	68 94       	set
    17a8:	15 f8       	bld	r1, 5
    17aa:	b6 95       	lsr	r27
    17ac:	a7 95       	ror	r26
    17ae:	97 95       	ror	r25
    17b0:	87 95       	ror	r24
    17b2:	16 94       	lsr	r1
    17b4:	d1 f7       	brne	.-12     	; 0x17aa <Timer_u32TimerClock+0x150>
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	9a 83       	std	Y+2, r25	; 0x02
    17ba:	ab 83       	std	Y+3, r26	; 0x03
    17bc:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 4;
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	8b 3c       	cpi	r24, 0xCB	; 203
    17c2:	29 f4       	brne	.+10     	; 0x17ce <Timer_u32TimerClock+0x174>
    17c4:	ef 81       	ldd	r30, Y+7	; 0x07
    17c6:	f8 85       	ldd	r31, Y+8	; 0x08
    17c8:	84 e0       	ldi	r24, 0x04	; 4
    17ca:	80 83       	st	Z, r24
    17cc:	78 c0       	rjmp	.+240    	; 0x18be <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 3;
    17ce:	ef 81       	ldd	r30, Y+7	; 0x07
    17d0:	f8 85       	ldd	r31, Y+8	; 0x08
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	80 83       	st	Z, r24
    17d6:	73 c0       	rjmp	.+230    	; 0x18be <Timer_u32TimerClock+0x264>
						break;
		case PRES_128 	:	if( Copy_u8TimerNum == TIMER2 )
    17d8:	8d 81       	ldd	r24, Y+5	; 0x05
    17da:	8b 3c       	cpi	r24, 0xCB	; 203
    17dc:	a9 f4       	brne	.+42     	; 0x1808 <Timer_u32TimerClock+0x1ae>
							{
								*Copy_pu8ClkSelectPrescalar = 5;
    17de:	ef 81       	ldd	r30, Y+7	; 0x07
    17e0:	f8 85       	ldd	r31, Y+8	; 0x08
    17e2:	85 e0       	ldi	r24, 0x05	; 5
    17e4:	80 83       	st	Z, r24
								Copy_u32TimerClk >>= 7 ;
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	ab 81       	ldd	r26, Y+3	; 0x03
    17ec:	bc 81       	ldd	r27, Y+4	; 0x04
    17ee:	68 94       	set
    17f0:	16 f8       	bld	r1, 6
    17f2:	b6 95       	lsr	r27
    17f4:	a7 95       	ror	r26
    17f6:	97 95       	ror	r25
    17f8:	87 95       	ror	r24
    17fa:	16 94       	lsr	r1
    17fc:	d1 f7       	brne	.-12     	; 0x17f2 <Timer_u32TimerClock+0x198>
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	9a 83       	std	Y+2, r25	; 0x02
    1802:	ab 83       	std	Y+3, r26	; 0x03
    1804:	bc 83       	std	Y+4, r27	; 0x04
    1806:	5b c0       	rjmp	.+182    	; 0x18be <Timer_u32TimerClock+0x264>
								break;
							}
							#warning "Clock Select Number selected is not supported in Timer0/Timer1 , shifted to PRES_256"
							/*	NO BREAK IN CASE OF NOT TIMER2	*/
		case PRES_256	 :	Copy_u32TimerClk >>= 8 ;
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	9a 81       	ldd	r25, Y+2	; 0x02
    180c:	ab 81       	ldd	r26, Y+3	; 0x03
    180e:	bc 81       	ldd	r27, Y+4	; 0x04
    1810:	89 2f       	mov	r24, r25
    1812:	9a 2f       	mov	r25, r26
    1814:	ab 2f       	mov	r26, r27
    1816:	bb 27       	eor	r27, r27
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	9a 83       	std	Y+2, r25	; 0x02
    181c:	ab 83       	std	Y+3, r26	; 0x03
    181e:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 6;
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	8b 3c       	cpi	r24, 0xCB	; 203
    1824:	29 f4       	brne	.+10     	; 0x1830 <Timer_u32TimerClock+0x1d6>
    1826:	ef 81       	ldd	r30, Y+7	; 0x07
    1828:	f8 85       	ldd	r31, Y+8	; 0x08
    182a:	86 e0       	ldi	r24, 0x06	; 6
    182c:	80 83       	st	Z, r24
    182e:	47 c0       	rjmp	.+142    	; 0x18be <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 4;
    1830:	ef 81       	ldd	r30, Y+7	; 0x07
    1832:	f8 85       	ldd	r31, Y+8	; 0x08
    1834:	84 e0       	ldi	r24, 0x04	; 4
    1836:	80 83       	st	Z, r24
    1838:	42 c0       	rjmp	.+132    	; 0x18be <Timer_u32TimerClock+0x264>
						break;
		case PRES_1024 :	Copy_u32TimerClk >>= 10 ;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	ab 81       	ldd	r26, Y+3	; 0x03
    1840:	bc 81       	ldd	r27, Y+4	; 0x04
    1842:	07 2e       	mov	r0, r23
    1844:	7a e0       	ldi	r23, 0x0A	; 10
    1846:	b6 95       	lsr	r27
    1848:	a7 95       	ror	r26
    184a:	97 95       	ror	r25
    184c:	87 95       	ror	r24
    184e:	7a 95       	dec	r23
    1850:	d1 f7       	brne	.-12     	; 0x1846 <Timer_u32TimerClock+0x1ec>
    1852:	70 2d       	mov	r23, r0
    1854:	89 83       	std	Y+1, r24	; 0x01
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	ab 83       	std	Y+3, r26	; 0x03
    185a:	bc 83       	std	Y+4, r27	; 0x04
							if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 7;
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	8b 3c       	cpi	r24, 0xCB	; 203
    1860:	29 f4       	brne	.+10     	; 0x186c <Timer_u32TimerClock+0x212>
    1862:	ef 81       	ldd	r30, Y+7	; 0x07
    1864:	f8 85       	ldd	r31, Y+8	; 0x08
    1866:	87 e0       	ldi	r24, 0x07	; 7
    1868:	80 83       	st	Z, r24
    186a:	29 c0       	rjmp	.+82     	; 0x18be <Timer_u32TimerClock+0x264>
							else *Copy_pu8ClkSelectPrescalar = 5;
    186c:	ef 81       	ldd	r30, Y+7	; 0x07
    186e:	f8 85       	ldd	r31, Y+8	; 0x08
    1870:	85 e0       	ldi	r24, 0x05	; 5
    1872:	80 83       	st	Z, r24
    1874:	24 c0       	rjmp	.+72     	; 0x18be <Timer_u32TimerClock+0x264>
						break;
		case EXT_CLK_FALL	 :		Copy_u32TimerClk = EXT_CLOCK ;
    1876:	8f ef       	ldi	r24, 0xFF	; 255
    1878:	9f ef       	ldi	r25, 0xFF	; 255
    187a:	af ef       	ldi	r26, 0xFF	; 255
    187c:	bf ef       	ldi	r27, 0xFF	; 255
    187e:	89 83       	std	Y+1, r24	; 0x01
    1880:	9a 83       	std	Y+2, r25	; 0x02
    1882:	ab 83       	std	Y+3, r26	; 0x03
    1884:	bc 83       	std	Y+4, r27	; 0x04
									if( Copy_u8TimerNum == TIMER0 )
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	88 3c       	cpi	r24, 0xC8	; 200
    188a:	c9 f4       	brne	.+50     	; 0x18be <Timer_u32TimerClock+0x264>
									{
										*Copy_pu8ClkSelectPrescalar = 6;
    188c:	ef 81       	ldd	r30, Y+7	; 0x07
    188e:	f8 85       	ldd	r31, Y+8	; 0x08
    1890:	86 e0       	ldi	r24, 0x06	; 6
    1892:	80 83       	st	Z, r24
    1894:	14 c0       	rjmp	.+40     	; 0x18be <Timer_u32TimerClock+0x264>
										break;
									}
									#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		case EXT_CLK_RISE	 :		Copy_u32TimerClk = EXT_CLOCK ;
    1896:	8f ef       	ldi	r24, 0xFF	; 255
    1898:	9f ef       	ldi	r25, 0xFF	; 255
    189a:	af ef       	ldi	r26, 0xFF	; 255
    189c:	bf ef       	ldi	r27, 0xFF	; 255
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	ab 83       	std	Y+3, r26	; 0x03
    18a4:	bc 83       	std	Y+4, r27	; 0x04
									if( Copy_u8TimerNum == TIMER0 )
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	88 3c       	cpi	r24, 0xC8	; 200
    18aa:	49 f4       	brne	.+18     	; 0x18be <Timer_u32TimerClock+0x264>
									{
										*Copy_pu8ClkSelectPrescalar = 7;
    18ac:	ef 81       	ldd	r30, Y+7	; 0x07
    18ae:	f8 85       	ldd	r31, Y+8	; 0x08
    18b0:	87 e0       	ldi	r24, 0x07	; 7
    18b2:	80 83       	st	Z, r24
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <Timer_u32TimerClock+0x264>
										break;
									}
									#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		default:	Copy_u32TimerClk = 0;
    18b6:	19 82       	std	Y+1, r1	; 0x01
    18b8:	1a 82       	std	Y+2, r1	; 0x02
    18ba:	1b 82       	std	Y+3, r1	; 0x03
    18bc:	1c 82       	std	Y+4, r1	; 0x04
					#warning "Unsupported Clock mode is selected , Timer is disabled"
	}

	return Copy_u32TimerClk ;
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	9a 81       	ldd	r25, Y+2	; 0x02
    18c2:	ab 81       	ldd	r26, Y+3	; 0x03
    18c4:	bc 81       	ldd	r27, Y+4	; 0x04

}
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	2a 96       	adiw	r28, 0x0a	; 10
    18cc:	0f b6       	in	r0, 0x3f	; 63
    18ce:	f8 94       	cli
    18d0:	de bf       	out	0x3e, r29	; 62
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	cd bf       	out	0x3d, r28	; 61
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <Timer_enuSetClkPrescaler>:
	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif

ES_t Timer_enuSetClkPrescaler( u8 Copy_u8TimerNum , u8 Copy_u8PrescalerValue )
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	2a 97       	sbiw	r28, 0x0a	; 10
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	88 87       	std	Y+8, r24	; 0x08
    18f2:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8ClkSelectPrescaler = NO_CLK ;
    18f8:	8a e0       	ldi	r24, 0x0A	; 10
    18fa:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    18fc:	e9 e5       	ldi	r30, 0x59	; 89
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32TimerClk = Timer_u32TimerClock( Copy_u8TimerNum , Copy_u8PrescalerValue , &Local_u8ClkSelectPrescaler ) ;
    1904:	9e 01       	movw	r18, r28
    1906:	29 5f       	subi	r18, 0xF9	; 249
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	88 85       	ldd	r24, Y+8	; 0x08
    190c:	69 85       	ldd	r22, Y+9	; 0x09
    190e:	a9 01       	movw	r20, r18
    1910:	0e 94 2d 0b 	call	0x165a	; 0x165a <Timer_u32TimerClock>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	ab 83       	std	Y+3, r26	; 0x03
    191e:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u8TimerNum == TIMER0 )
    1920:	88 85       	ldd	r24, Y+8	; 0x08
    1922:	88 3c       	cpi	r24, 0xC8	; 200
    1924:	19 f5       	brne	.+70     	; 0x196c <Timer_enuSetClkPrescaler+0x90>
	{
		TIMSK &= ~( TC0_INT_EN_MASK ) ;								// Disable Timer0 Interrupts
    1926:	a9 e5       	ldi	r26, 0x59	; 89
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e9 e5       	ldi	r30, 0x59	; 89
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	8c 7f       	andi	r24, 0xFC	; 252
    1932:	8c 93       	st	X, r24
		TCCR0 &= ~( CLK0_SEL_BITS_MASK ) ;							// Masking Clock Select bits
    1934:	a3 e5       	ldi	r26, 0x53	; 83
    1936:	b0 e0       	ldi	r27, 0x00	; 0
    1938:	e3 e5       	ldi	r30, 0x53	; 83
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	80 81       	ld	r24, Z
    193e:	88 7f       	andi	r24, 0xF8	; 248
    1940:	8c 93       	st	X, r24
		TCCR0 |= ( Local_u8ClkSelectPrescaler  << CLK0_SEL_BITS ) ;	// Setting New Prescaler
    1942:	a3 e5       	ldi	r26, 0x53	; 83
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	e3 e5       	ldi	r30, 0x53	; 83
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	90 81       	ld	r25, Z
    194c:	8f 81       	ldd	r24, Y+7	; 0x07
    194e:	89 2b       	or	r24, r25
    1950:	8c 93       	st	X, r24
		Global_u32Timer0_Clk = Local_u32TimerClk ;					// Saving New Actual Timer0 Clock
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	9a 81       	ldd	r25, Y+2	; 0x02
    1956:	ab 81       	ldd	r26, Y+3	; 0x03
    1958:	bc 81       	ldd	r27, Y+4	; 0x04
    195a:	80 93 17 02 	sts	0x0217, r24
    195e:	90 93 18 02 	sts	0x0218, r25
    1962:	a0 93 19 02 	sts	0x0219, r26
    1966:	b0 93 1a 02 	sts	0x021A, r27
    196a:	28 c0       	rjmp	.+80     	; 0x19bc <Timer_enuSetClkPrescaler+0xe0>
#if Mask
		Timers[ TIMER0 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else if( Copy_u8TimerNum == TIMER2 )
    196c:	88 85       	ldd	r24, Y+8	; 0x08
    196e:	8b 3c       	cpi	r24, 0xCB	; 203
    1970:	19 f5       	brne	.+70     	; 0x19b8 <Timer_enuSetClkPrescaler+0xdc>
	{
		TIMSK &= ~( TC2_INT_EN_MASK ) ;								// Disable Timer2 Interrupts
    1972:	a9 e5       	ldi	r26, 0x59	; 89
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e9 e5       	ldi	r30, 0x59	; 89
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	8f 73       	andi	r24, 0x3F	; 63
    197e:	8c 93       	st	X, r24
		TCCR2 &= ~( CLK2_SEL_BITS_MASK );							// Masking Clock Select bits
    1980:	a5 e4       	ldi	r26, 0x45	; 69
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e5 e4       	ldi	r30, 0x45	; 69
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	88 7f       	andi	r24, 0xF8	; 248
    198c:	8c 93       	st	X, r24
		TCCR2 |= ( Local_u8ClkSelectPrescaler  << CLK2_SEL_BITS );	// Setting New Prescaler
    198e:	a5 e4       	ldi	r26, 0x45	; 69
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e5 e4       	ldi	r30, 0x45	; 69
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	90 81       	ld	r25, Z
    1998:	8f 81       	ldd	r24, Y+7	; 0x07
    199a:	89 2b       	or	r24, r25
    199c:	8c 93       	st	X, r24
		Global_u32Timer2_Clk = Local_u32TimerClk ;					// Saving New Actual Timer2 Clock
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	ab 81       	ldd	r26, Y+3	; 0x03
    19a4:	bc 81       	ldd	r27, Y+4	; 0x04
    19a6:	80 93 1b 02 	sts	0x021B, r24
    19aa:	90 93 1c 02 	sts	0x021C, r25
    19ae:	a0 93 1d 02 	sts	0x021D, r26
    19b2:	b0 93 1e 02 	sts	0x021E, r27
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <Timer_enuSetClkPrescaler+0xe0>
#if Mask
		Timers[ TIMER2 - TIMER0 ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	8e 83       	std	Y+6, r24	; 0x06

	TIMSK = Local_u8CopyTIMSK ;										// Re-setting Timer Interrupt Mask Register to its Status
    19bc:	e9 e5       	ldi	r30, 0x59	; 89
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    19c4:	8e 81       	ldd	r24, Y+6	; 0x06
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <Timer_enuSetClkPrescaler+0xf4>
    19ca:	8e 81       	ldd	r24, Y+6	; 0x06
    19cc:	8a 87       	std	Y+10, r24	; 0x0a
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <Timer_enuSetClkPrescaler+0xf6>
    19d0:	1a 86       	std	Y+10, r1	; 0x0a
    19d2:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    19d4:	2a 96       	adiw	r28, 0x0a	; 10
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <Timer_enuSetOCn_Mode>:
	}
	return Local_enuErrorState ;
}
#endif
ES_t Timer_enuSetOCn_Mode( u8 Copy_u8TimerNum , u8 Copy_u8COM_Mode )
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <Timer_enuSetOCn_Mode+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <Timer_enuSetOCn_Mode+0x8>
    19ee:	0f 92       	push	r0
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	8b 83       	std	Y+3, r24	; 0x03
    19f6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    19fc:	e9 e5       	ldi	r30, 0x59	; 89
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 )
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	88 3c       	cpi	r24, 0xC8	; 200
    1a08:	09 f5       	brne	.+66     	; 0x1a4c <Timer_enuSetOCn_Mode+0x66>
	{
		TIMSK &= ~( TC0_INT_EN_MASK ) ;													// Disable Timer0 Interrupts
    1a0a:	a9 e5       	ldi	r26, 0x59	; 89
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e9 e5       	ldi	r30, 0x59	; 89
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8c 7f       	andi	r24, 0xFC	; 252
    1a16:	8c 93       	st	X, r24
		TCCR0 &= ~( COMP0_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
    1a18:	a3 e5       	ldi	r26, 0x53	; 83
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e3 e5       	ldi	r30, 0x53	; 83
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	8f 7c       	andi	r24, 0xCF	; 207
    1a24:	8c 93       	st	X, r24
		TCCR0 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP0_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
    1a26:	a3 e5       	ldi	r26, 0x53	; 83
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e3 e5       	ldi	r30, 0x53	; 83
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	28 2f       	mov	r18, r24
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	44 97       	sbiw	r24, 0x14	; 20
    1a3a:	82 95       	swap	r24
    1a3c:	92 95       	swap	r25
    1a3e:	90 7f       	andi	r25, 0xF0	; 240
    1a40:	98 27       	eor	r25, r24
    1a42:	80 7f       	andi	r24, 0xF0	; 240
    1a44:	98 27       	eor	r25, r24
    1a46:	82 2b       	or	r24, r18
    1a48:	8c 93       	st	X, r24
    1a4a:	26 c0       	rjmp	.+76     	; 0x1a98 <Timer_enuSetOCn_Mode+0xb2>
#if Mask
		Timers[ TIMER0 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
#endif
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	8b 3c       	cpi	r24, 0xCB	; 203
    1a50:	09 f5       	brne	.+66     	; 0x1a94 <Timer_enuSetOCn_Mode+0xae>
	{
		TIMSK &= ~( TC2_INT_EN_MASK ) ;													// Disable Timer2 Interrupts
    1a52:	a9 e5       	ldi	r26, 0x59	; 89
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e9 e5       	ldi	r30, 0x59	; 89
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 73       	andi	r24, 0x3F	; 63
    1a5e:	8c 93       	st	X, r24
		TCCR2 &= ~( COMP2_MAT_OUT_MODE_BITS_MASK ) ;									// Masking COM Select bits
    1a60:	a5 e4       	ldi	r26, 0x45	; 69
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e5 e4       	ldi	r30, 0x45	; 69
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	8f 7c       	andi	r24, 0xCF	; 207
    1a6c:	8c 93       	st	X, r24
		TCCR2 |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COMP2_MAT_OUT_MODE_BITS ) ;		// Setting New Compare Output Mode
    1a6e:	a5 e4       	ldi	r26, 0x45	; 69
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e5 e4       	ldi	r30, 0x45	; 69
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	28 2f       	mov	r18, r24
    1a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7c:	88 2f       	mov	r24, r24
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	44 97       	sbiw	r24, 0x14	; 20
    1a82:	82 95       	swap	r24
    1a84:	92 95       	swap	r25
    1a86:	90 7f       	andi	r25, 0xF0	; 240
    1a88:	98 27       	eor	r25, r24
    1a8a:	80 7f       	andi	r24, 0xF0	; 240
    1a8c:	98 27       	eor	r25, r24
    1a8e:	82 2b       	or	r24, r18
    1a90:	8c 93       	st	X, r24
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <Timer_enuSetOCn_Mode+0xb2>
#if Mask
		Timers[ TIMER2 - TIMER0 ].CompOutMode = Copy_u8COM_Mode ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	8a 83       	std	Y+2, r24	; 0x02

	TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    1a98:	e9 e5       	ldi	r30, 0x59	; 89
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	89 81       	ldd	r24, Y+1	; 0x01
    1a9e:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	19 f0       	breq	.+6      	; 0x1aac <Timer_enuSetOCn_Mode+0xc6>
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <Timer_enuSetOCn_Mode+0xc8>
    1aac:	1d 82       	std	Y+5, r1	; 0x05
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <Timer_enuSetTimer_Mode>:
	return Local_enuErrorState ;
}
#endif

ES_t Timer_enuSetTimer_Mode( u8 Copy_u8TimerNum , u8 Copy_u8WGM_Mode )
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <Timer_enuSetTimer_Mode+0x6>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <Timer_enuSetTimer_Mode+0x8>
    1ac8:	0f 92       	push	r0
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	8b 83       	std	Y+3, r24	; 0x03
    1ad0:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	8a 83       	std	Y+2, r24	; 0x02


	if( Copy_u8WGM_Mode == WGM_NORMAL_MODE || Copy_u8WGM_Mode == WGM_CTC_MODE )
    1ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad8:	8e 31       	cpi	r24, 0x1E	; 30
    1ada:	21 f0       	breq	.+8      	; 0x1ae4 <Timer_enuSetTimer_Mode+0x24>
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	80 32       	cpi	r24, 0x20	; 32
    1ae0:	09 f0       	breq	.+2      	; 0x1ae4 <Timer_enuSetTimer_Mode+0x24>
    1ae2:	57 c0       	rjmp	.+174    	; 0x1b92 <Timer_enuSetTimer_Mode+0xd2>
	{
		u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    1ae4:	e9 e5       	ldi	r30, 0x59	; 89
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	89 83       	std	Y+1, r24	; 0x01

		if( Copy_u8TimerNum == TIMER0 )
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	88 3c       	cpi	r24, 0xC8	; 200
    1af0:	19 f5       	brne	.+70     	; 0x1b38 <Timer_enuSetTimer_Mode+0x78>
		{
			TIMSK &= ~( TC0_INT_EN_MASK ) ;													// Disable Timer0 Interrupts
    1af2:	a9 e5       	ldi	r26, 0x59	; 89
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e9 e5       	ldi	r30, 0x59	; 89
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8c 7f       	andi	r24, 0xFC	; 252
    1afe:	8c 93       	st	X, r24
			CLR_BIT( TCCR0 , WGM01_BIT ) ;													// Masking WGM01 Select bit
    1b00:	a3 e5       	ldi	r26, 0x53	; 83
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e3 e5       	ldi	r30, 0x53	; 83
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	87 7f       	andi	r24, 0xF7	; 247
    1b0c:	8c 93       	st	X, r24
			TCCR0 |= ((( Copy_u8WGM_Mode - WGM_NORMAL_MODE ) >> _BIT_MASK_ ) << WGM01_BIT );	// Setting New Waveform Generation Mode
    1b0e:	a3 e5       	ldi	r26, 0x53	; 83
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e3 e5       	ldi	r30, 0x53	; 83
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	28 2f       	mov	r18, r24
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	88 2f       	mov	r24, r24
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	4e 97       	sbiw	r24, 0x1e	; 30
    1b22:	95 95       	asr	r25
    1b24:	87 95       	ror	r24
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	82 2b       	or	r24, r18
    1b34:	8c 93       	st	X, r24
    1b36:	28 c0       	rjmp	.+80     	; 0x1b88 <Timer_enuSetTimer_Mode+0xc8>
#if Mask
			Timers[ TIMER0 - TIMER0 ].WaveGenMode = Copy_u8WGM_Mode ;
#endif
		}
		else if( Copy_u8TimerNum == TIMER2 )
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	8b 3c       	cpi	r24, 0xCB	; 203
    1b3c:	19 f5       	brne	.+70     	; 0x1b84 <Timer_enuSetTimer_Mode+0xc4>
		{
			TIMSK &= ~( TC2_INT_EN_MASK ) ;													// Disable Timer2 Interrupts
    1b3e:	a9 e5       	ldi	r26, 0x59	; 89
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e9 e5       	ldi	r30, 0x59	; 89
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 73       	andi	r24, 0x3F	; 63
    1b4a:	8c 93       	st	X, r24
			CLR_BIT( TCCR2 , WGM21_BIT );													// Masking WGM21 Select bit
    1b4c:	a5 e4       	ldi	r26, 0x45	; 69
    1b4e:	b0 e0       	ldi	r27, 0x00	; 0
    1b50:	e5 e4       	ldi	r30, 0x45	; 69
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	87 7f       	andi	r24, 0xF7	; 247
    1b58:	8c 93       	st	X, r24
			TCCR2 |= ((( Copy_u8WGM_Mode - WGM_NORMAL_MODE ) >> _BIT_MASK_ ) << WGM21_BIT  );// Setting New Waveform Generation Mode
    1b5a:	a5 e4       	ldi	r26, 0x45	; 69
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	e5 e4       	ldi	r30, 0x45	; 69
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	28 2f       	mov	r18, r24
    1b66:	8c 81       	ldd	r24, Y+4	; 0x04
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	4e 97       	sbiw	r24, 0x1e	; 30
    1b6e:	95 95       	asr	r25
    1b70:	87 95       	ror	r24
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	82 2b       	or	r24, r18
    1b80:	8c 93       	st	X, r24
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <Timer_enuSetTimer_Mode+0xc8>
#if Mask
			Timers[ TIMER2 - TIMER0 ].WaveGenMode = Copy_u8WGM_Mode ;
#endif
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	8a 83       	std	Y+2, r24	; 0x02

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    1b88:	e9 e5       	ldi	r30, 0x59	; 89
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	80 83       	st	Z, r24
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <Timer_enuSetTimer_Mode+0xd6>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1b92:	82 e0       	ldi	r24, 0x02	; 2
    1b94:	8a 83       	std	Y+2, r24	; 0x02

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	19 f0       	breq	.+6      	; 0x1ba2 <Timer_enuSetTimer_Mode+0xe2>
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <Timer_enuSetTimer_Mode+0xe4>
    1ba2:	1d 82       	std	Y+5, r1	; 0x05
    1ba4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	0f 90       	pop	r0
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	08 95       	ret

00001bb6 <Timer_enuReset>:
	}
	return Local_enuErrorState ;
}
#endif
ES_t Timer_enuReset( u8 Copy_u8TimerNum )
{
    1bb6:	df 93       	push	r29
    1bb8:	cf 93       	push	r28
    1bba:	00 d0       	rcall	.+0      	; 0x1bbc <Timer_enuReset+0x6>
    1bbc:	00 d0       	rcall	.+0      	; 0x1bbe <Timer_enuReset+0x8>
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Temp = SREG ;									// Saving a Copy of AVR Status Register
    1bc8:	ef e5       	ldi	r30, 0x5F	; 95
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;														// Disable All Interrupts while writing to Counter Register
    1bd0:	f8 94       	cli

	if( Copy_u8TimerNum == TIMER0 )
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	88 3c       	cpi	r24, 0xC8	; 200
    1bd6:	21 f4       	brne	.+8      	; 0x1be0 <Timer_enuReset+0x2a>
	{
		TCNT0 = 0x00 ;
    1bd8:	e2 e5       	ldi	r30, 0x52	; 82
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	10 82       	st	Z, r1
    1bde:	09 c0       	rjmp	.+18     	; 0x1bf2 <Timer_enuReset+0x3c>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	8b 3c       	cpi	r24, 0xCB	; 203
    1be4:	21 f4       	brne	.+8      	; 0x1bee <Timer_enuReset+0x38>
	{
		TCNT2 = 0x00 ;
    1be6:	e4 e4       	ldi	r30, 0x44	; 68
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	10 82       	st	Z, r1
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <Timer_enuReset+0x3c>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1bee:	82 e0       	ldi	r24, 0x02	; 2
    1bf0:	8a 83       	std	Y+2, r24	; 0x02

	SREG = Local_u8Temp;										// Re-setting AVR Status Register to its Status
    1bf2:	ef e5       	ldi	r30, 0x5F	; 95
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <Timer_enuReset+0x50>
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	8c 83       	std	Y+4, r24	; 0x04
    1c04:	01 c0       	rjmp	.+2      	; 0x1c08 <Timer_enuReset+0x52>
    1c06:	1c 82       	std	Y+4, r1	; 0x04
    1c08:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1c0a:	0f 90       	pop	r0
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	0f 90       	pop	r0
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <Timer_enuPreLoad>:

ES_t Timer_enuPreLoad( u8 Copy_u8TimerNum , u8 Copy_u8PreLoad)
{
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	00 d0       	rcall	.+0      	; 0x1c1e <Timer_enuPreLoad+0x6>
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <Timer_enuPreLoad+0x8>
    1c20:	0f 92       	push	r0
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	8b 83       	std	Y+3, r24	; 0x03
    1c28:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Temp = SREG ;									// Saving a Copy of AVR Status Register
    1c2e:	ef e5       	ldi	r30, 0x5F	; 95
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;														// Disable All Interrupts while writing to Counter Register
    1c36:	f8 94       	cli

	if( Copy_u8TimerNum == TIMER0 )
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	88 3c       	cpi	r24, 0xC8	; 200
    1c3c:	29 f4       	brne	.+10     	; 0x1c48 <Timer_enuPreLoad+0x30>
	{
		TCNT0 = (u8)Copy_u8PreLoad ;
    1c3e:	e2 e5       	ldi	r30, 0x52	; 82
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	8c 81       	ldd	r24, Y+4	; 0x04
    1c44:	80 83       	st	Z, r24
    1c46:	0a c0       	rjmp	.+20     	; 0x1c5c <Timer_enuPreLoad+0x44>
	}
	else if( Copy_u8TimerNum == TIMER2 )
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	8b 3c       	cpi	r24, 0xCB	; 203
    1c4c:	29 f4       	brne	.+10     	; 0x1c58 <Timer_enuPreLoad+0x40>
	{
		TCNT2 = (u8)Copy_u8PreLoad ;
    1c4e:	e4 e4       	ldi	r30, 0x44	; 68
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	8c 81       	ldd	r24, Y+4	; 0x04
    1c54:	80 83       	st	Z, r24
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <Timer_enuPreLoad+0x44>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	8a 83       	std	Y+2, r24	; 0x02

	SREG = Local_u8Temp;										// Re-setting AVR Status Register to its Status
    1c5c:	ef e5       	ldi	r30, 0x5F	; 95
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	19 f0       	breq	.+6      	; 0x1c70 <Timer_enuPreLoad+0x58>
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <Timer_enuPreLoad+0x5a>
    1c70:	1d 82       	std	Y+5, r1	; 0x05
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <Timer_enuReadCounterValue>:

ES_t Timer_enuReadCounterValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <Timer_enuReadCounterValue+0x6>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <Timer_enuReadCounterValue+0x8>
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	8a 83       	std	Y+2, r24	; 0x02
    1c94:	7c 83       	std	Y+4, r23	; 0x04
    1c96:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pCounterValue != NULL )
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	b9 f0       	breq	.+46     	; 0x1cd2 <Timer_enuReadCounterValue+0x4e>
	{
		if( Copy_u8TimerNum == TIMER0 )
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	88 3c       	cpi	r24, 0xC8	; 200
    1ca8:	39 f4       	brne	.+14     	; 0x1cb8 <Timer_enuReadCounterValue+0x34>
		{
			*( (u8 *)Copy_pCounterValue ) = TCNT0 ;
    1caa:	eb 81       	ldd	r30, Y+3	; 0x03
    1cac:	fc 81       	ldd	r31, Y+4	; 0x04
    1cae:	a2 e5       	ldi	r26, 0x52	; 82
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	8c 91       	ld	r24, X
    1cb4:	80 83       	st	Z, r24
    1cb6:	0f c0       	rjmp	.+30     	; 0x1cd6 <Timer_enuReadCounterValue+0x52>
		}
		else if( Copy_u8TimerNum == TIMER2 )
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	8b 3c       	cpi	r24, 0xCB	; 203
    1cbc:	39 f4       	brne	.+14     	; 0x1ccc <Timer_enuReadCounterValue+0x48>
		{
			*( (u8 *)Copy_pCounterValue ) = TCNT2 ;
    1cbe:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc0:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc2:	a4 e4       	ldi	r26, 0x44	; 68
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	8c 91       	ld	r24, X
    1cc8:	80 83       	st	Z, r24
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <Timer_enuReadCounterValue+0x52>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    1ccc:	82 e0       	ldi	r24, 0x02	; 2
    1cce:	89 83       	std	Y+1, r24	; 0x01
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <Timer_enuReadCounterValue+0x52>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	19 f0       	breq	.+6      	; 0x1ce2 <Timer_enuReadCounterValue+0x5e>
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	8d 83       	std	Y+5, r24	; 0x05
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <Timer_enuReadCounterValue+0x60>
    1ce2:	1d 82       	std	Y+5, r1	; 0x05
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <Timer_enuSetOCRnValue>:

ES_t Timer_enuSetOCRnValue( u8 Copy_u8TimerNum , u8 Copy_u8OCRnValue )
{
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <Timer_enuSetOCRnValue+0x6>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <Timer_enuSetOCRnValue+0x8>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	8a 83       	std	Y+2, r24	; 0x02
    1d04:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8TimerNum == TIMER0 && Copy_u8OCRnValue <= Timer0Max )
    1d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0c:	88 3c       	cpi	r24, 0xC8	; 200
    1d0e:	79 f4       	brne	.+30     	; 0x1d2e <Timer_enuSetOCRnValue+0x38>
    1d10:	90 91 69 01 	lds	r25, 0x0169
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	98 17       	cp	r25, r24
    1d18:	50 f0       	brcs	.+20     	; 0x1d2e <Timer_enuSetOCRnValue+0x38>
	{
		OCR0 = Copy_u8OCRnValue ;
    1d1a:	ec e5       	ldi	r30, 0x5C	; 92
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	80 83       	st	Z, r24
		Global_u8OCR0_Value = OCR0 ;
    1d22:	ec e5       	ldi	r30, 0x5C	; 92
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	80 93 15 02 	sts	0x0215, r24
    1d2c:	14 c0       	rjmp	.+40     	; 0x1d56 <Timer_enuSetOCRnValue+0x60>
	}
	else if( Copy_u8TimerNum == TIMER2 && Copy_u8OCRnValue <= Timer2Max )
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	8b 3c       	cpi	r24, 0xCB	; 203
    1d32:	79 f4       	brne	.+30     	; 0x1d52 <Timer_enuSetOCRnValue+0x5c>
    1d34:	90 91 6a 01 	lds	r25, 0x016A
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	98 17       	cp	r25, r24
    1d3c:	50 f0       	brcs	.+20     	; 0x1d52 <Timer_enuSetOCRnValue+0x5c>
	{
		OCR2 = Copy_u8OCRnValue ;
    1d3e:	e3 e4       	ldi	r30, 0x43	; 67
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	80 83       	st	Z, r24
		Global_u8OCR2_Value = OCR2 ;
    1d46:	e3 e4       	ldi	r30, 0x43	; 67
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 93 16 02 	sts	0x0216, r24
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <Timer_enuSetOCRnValue+0x60>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    1d52:	82 e0       	ldi	r24, 0x02	; 2
    1d54:	89 83       	std	Y+1, r24	; 0x01

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	19 f0       	breq	.+6      	; 0x1d62 <Timer_enuSetOCRnValue+0x6c>
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	8c 83       	std	Y+4, r24	; 0x04
    1d60:	01 c0       	rjmp	.+2      	; 0x1d64 <Timer_enuSetOCRnValue+0x6e>
    1d62:	1c 82       	std	Y+4, r1	; 0x04
    1d64:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <Timer_enuReadOCRnValue>:

ES_t Timer_enuReadOCRnValue( u8 Copy_u8TimerNum , void *Copy_pCounterValue )
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <Timer_enuReadOCRnValue+0x6>
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <Timer_enuReadOCRnValue+0x8>
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	8a 83       	std	Y+2, r24	; 0x02
    1d84:	7c 83       	std	Y+4, r23	; 0x04
    1d86:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK ;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	89 83       	std	Y+1, r24	; 0x01

		if( Copy_u8TimerNum == TIMER0 )
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	88 3c       	cpi	r24, 0xC8	; 200
    1d90:	31 f4       	brne	.+12     	; 0x1d9e <Timer_enuReadOCRnValue+0x2a>
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR0_Value ;
    1d92:	eb 81       	ldd	r30, Y+3	; 0x03
    1d94:	fc 81       	ldd	r31, Y+4	; 0x04
    1d96:	80 91 15 02 	lds	r24, 0x0215
    1d9a:	80 83       	st	Z, r24
    1d9c:	0b c0       	rjmp	.+22     	; 0x1db4 <Timer_enuReadOCRnValue+0x40>
		}
		else if( Copy_u8TimerNum == TIMER2 )
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	8b 3c       	cpi	r24, 0xCB	; 203
    1da2:	31 f4       	brne	.+12     	; 0x1db0 <Timer_enuReadOCRnValue+0x3c>
		{
			*( (u8 *)Copy_pCounterValue ) = Global_u8OCR2_Value ;
    1da4:	eb 81       	ldd	r30, Y+3	; 0x03
    1da6:	fc 81       	ldd	r31, Y+4	; 0x04
    1da8:	80 91 16 02 	lds	r24, 0x0216
    1dac:	80 83       	st	Z, r24
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <Timer_enuReadOCRnValue+0x40>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	89 83       	std	Y+1, r24	; 0x01

		return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	19 f0       	breq	.+6      	; 0x1dc0 <Timer_enuReadOCRnValue+0x4c>
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	01 c0       	rjmp	.+2      	; 0x1dc2 <Timer_enuReadOCRnValue+0x4e>
    1dc0:	1d 82       	std	Y+5, r1	; 0x05
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05

}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <Timer_enuInterruptEnable>:

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif
ES_t Timer_enuInterruptEnable( u8 Copy_u8TimerIntName)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <Timer_enuInterruptEnable+0x6>
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <Timer_enuInterruptEnable+0x8>
    1ddc:	0f 92       	push	r0
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	89 83       	std	Y+1, r24	; 0x01

	_CLI_ ;																// Disable ALL Interrupts
    1de8:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	3d 83       	std	Y+5, r19	; 0x05
    1df2:	2c 83       	std	Y+4, r18	; 0x04
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	82 34       	cpi	r24, 0x42	; 66
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	31 f1       	breq	.+76     	; 0x1e4a <Timer_enuInterruptEnable+0x76>
    1dfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1e00:	3d 81       	ldd	r19, Y+5	; 0x05
    1e02:	23 34       	cpi	r18, 0x43	; 67
    1e04:	31 05       	cpc	r19, r1
    1e06:	5c f4       	brge	.+22     	; 0x1e1e <Timer_enuInterruptEnable+0x4a>
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0c:	8c 33       	cpi	r24, 0x3C	; 60
    1e0e:	91 05       	cpc	r25, r1
    1e10:	61 f0       	breq	.+24     	; 0x1e2a <Timer_enuInterruptEnable+0x56>
    1e12:	2c 81       	ldd	r18, Y+4	; 0x04
    1e14:	3d 81       	ldd	r19, Y+5	; 0x05
    1e16:	2d 33       	cpi	r18, 0x3D	; 61
    1e18:	31 05       	cpc	r19, r1
    1e1a:	79 f0       	breq	.+30     	; 0x1e3a <Timer_enuInterruptEnable+0x66>
    1e1c:	26 c0       	rjmp	.+76     	; 0x1e6a <Timer_enuInterruptEnable+0x96>
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	9d 81       	ldd	r25, Y+5	; 0x05
    1e22:	83 34       	cpi	r24, 0x43	; 67
    1e24:	91 05       	cpc	r25, r1
    1e26:	c9 f0       	breq	.+50     	; 0x1e5a <Timer_enuInterruptEnable+0x86>
    1e28:	20 c0       	rjmp	.+64     	; 0x1e6a <Timer_enuInterruptEnable+0x96>
	{
		case TOIE0	:	SET_BIT( TIMSK , TOIE0_BIT);
    1e2a:	a9 e5       	ldi	r26, 0x59	; 89
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e9 e5       	ldi	r30, 0x59	; 89
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	81 60       	ori	r24, 0x01	; 1
    1e36:	8c 93       	st	X, r24
    1e38:	1a c0       	rjmp	.+52     	; 0x1e6e <Timer_enuInterruptEnable+0x9a>
						break;
		case OCIE0	:	SET_BIT( TIMSK , OCIE0_BIT);
    1e3a:	a9 e5       	ldi	r26, 0x59	; 89
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e9 e5       	ldi	r30, 0x59	; 89
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 81       	ld	r24, Z
    1e44:	82 60       	ori	r24, 0x02	; 2
    1e46:	8c 93       	st	X, r24
    1e48:	12 c0       	rjmp	.+36     	; 0x1e6e <Timer_enuInterruptEnable+0x9a>
						break;
		case TOIE2	:	SET_BIT( TIMSK , TOIE2_BIT);
    1e4a:	a9 e5       	ldi	r26, 0x59	; 89
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e9 e5       	ldi	r30, 0x59	; 89
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 81       	ld	r24, Z
    1e54:	80 64       	ori	r24, 0x40	; 64
    1e56:	8c 93       	st	X, r24
    1e58:	0a c0       	rjmp	.+20     	; 0x1e6e <Timer_enuInterruptEnable+0x9a>
						break;
		case OCIE2	:	SET_BIT( TIMSK , OCIE2_BIT);
    1e5a:	a9 e5       	ldi	r26, 0x59	; 89
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e9 e5       	ldi	r30, 0x59	; 89
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	80 68       	ori	r24, 0x80	; 128
    1e66:	8c 93       	st	X, r24
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <Timer_enuInterruptEnable+0x9a>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}
	_SEI_ ;																// Enable Global Interrupts
    1e6e:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1e70:	89 81       	ldd	r24, Y+1	; 0x01
    1e72:	81 30       	cpi	r24, 0x01	; 1
    1e74:	19 f0       	breq	.+6      	; 0x1e7c <Timer_enuInterruptEnable+0xa8>
    1e76:	99 81       	ldd	r25, Y+1	; 0x01
    1e78:	9b 83       	std	Y+3, r25	; 0x03
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <Timer_enuInterruptEnable+0xaa>
    1e7c:	1b 82       	std	Y+3, r1	; 0x03
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <Timer_enuInterruptDisable>:

ES_t Timer_enuInterruptDisable( u8 Copy_u8TimerIntName)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	00 d0       	rcall	.+0      	; 0x1e96 <Timer_enuInterruptDisable+0x6>
    1e96:	00 d0       	rcall	.+0      	; 0x1e98 <Timer_enuInterruptDisable+0x8>
    1e98:	0f 92       	push	r0
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	89 83       	std	Y+1, r24	; 0x01

	_CLI_ ;																// Disable ALL Interrupts
    1ea4:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	3d 83       	std	Y+5, r19	; 0x05
    1eae:	2c 83       	std	Y+4, r18	; 0x04
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb4:	82 34       	cpi	r24, 0x42	; 66
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	31 f1       	breq	.+76     	; 0x1f06 <Timer_enuInterruptDisable+0x76>
    1eba:	2c 81       	ldd	r18, Y+4	; 0x04
    1ebc:	3d 81       	ldd	r19, Y+5	; 0x05
    1ebe:	23 34       	cpi	r18, 0x43	; 67
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	5c f4       	brge	.+22     	; 0x1eda <Timer_enuInterruptDisable+0x4a>
    1ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec8:	8c 33       	cpi	r24, 0x3C	; 60
    1eca:	91 05       	cpc	r25, r1
    1ecc:	61 f0       	breq	.+24     	; 0x1ee6 <Timer_enuInterruptDisable+0x56>
    1ece:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ed2:	2d 33       	cpi	r18, 0x3D	; 61
    1ed4:	31 05       	cpc	r19, r1
    1ed6:	79 f0       	breq	.+30     	; 0x1ef6 <Timer_enuInterruptDisable+0x66>
    1ed8:	26 c0       	rjmp	.+76     	; 0x1f26 <Timer_enuInterruptDisable+0x96>
    1eda:	8c 81       	ldd	r24, Y+4	; 0x04
    1edc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ede:	83 34       	cpi	r24, 0x43	; 67
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	c9 f0       	breq	.+50     	; 0x1f16 <Timer_enuInterruptDisable+0x86>
    1ee4:	20 c0       	rjmp	.+64     	; 0x1f26 <Timer_enuInterruptDisable+0x96>
	{
		case TOIE0	:	CLR_BIT( TIMSK , TOIE0_BIT);
    1ee6:	a9 e5       	ldi	r26, 0x59	; 89
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e9 e5       	ldi	r30, 0x59	; 89
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	8e 7f       	andi	r24, 0xFE	; 254
    1ef2:	8c 93       	st	X, r24
    1ef4:	1a c0       	rjmp	.+52     	; 0x1f2a <Timer_enuInterruptDisable+0x9a>
						break;
		case OCIE0	:	CLR_BIT( TIMSK , OCIE0_BIT);
    1ef6:	a9 e5       	ldi	r26, 0x59	; 89
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e9 e5       	ldi	r30, 0x59	; 89
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	8d 7f       	andi	r24, 0xFD	; 253
    1f02:	8c 93       	st	X, r24
    1f04:	12 c0       	rjmp	.+36     	; 0x1f2a <Timer_enuInterruptDisable+0x9a>
						break;
		case TOIE2	:	CLR_BIT( TIMSK , TOIE2_BIT);
    1f06:	a9 e5       	ldi	r26, 0x59	; 89
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e5       	ldi	r30, 0x59	; 89
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	8f 7b       	andi	r24, 0xBF	; 191
    1f12:	8c 93       	st	X, r24
    1f14:	0a c0       	rjmp	.+20     	; 0x1f2a <Timer_enuInterruptDisable+0x9a>
						break;
		case OCIE2	:	CLR_BIT( TIMSK , OCIE2_BIT);
    1f16:	a9 e5       	ldi	r26, 0x59	; 89
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e9 e5       	ldi	r30, 0x59	; 89
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	8f 77       	andi	r24, 0x7F	; 127
    1f22:	8c 93       	st	X, r24
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <Timer_enuInterruptDisable+0x9a>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    1f26:	82 e0       	ldi	r24, 0x02	; 2
    1f28:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}

	_SEI_ ;																// Re-Enable Global Interrupts
    1f2a:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	19 f0       	breq	.+6      	; 0x1f38 <Timer_enuInterruptDisable+0xa8>
    1f32:	99 81       	ldd	r25, Y+1	; 0x01
    1f34:	9b 83       	std	Y+3, r25	; 0x03
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <Timer_enuInterruptDisable+0xaa>
    1f38:	1b 82       	std	Y+3, r1	; 0x03
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <Timer_enuCallBack>:
	return ( ( Local_u8Status)? TRUE : FALSE ) ;
}
#endif

ES_t Timer_enuCallBack( u8 Copy_u8TimerIntName , void (*Copy_pAppFun)(void) )
{
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <Timer_enuCallBack+0x6>
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <Timer_enuCallBack+0x8>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <Timer_enuCallBack+0xa>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	8c 83       	std	Y+4, r24	; 0x04
    1f5c:	7e 83       	std	Y+6, r23	; 0x06
    1f5e:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	8b 83       	std	Y+3, r24	; 0x03

	u8 found = 0 ;
    1f64:	1a 82       	std	Y+2, r1	; 0x02

	if( Copy_pAppFun != NULL )
    1f66:	8d 81       	ldd	r24, Y+5	; 0x05
    1f68:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	79 f1       	breq	.+94     	; 0x1fcc <Timer_enuCallBack+0x80>
    1f6e:	25 c0       	rjmp	.+74     	; 0x1fba <Timer_enuCallBack+0x6e>
	{
		for( u8 Local_u8Iter; Local_u8Iter < TIMERS_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrTimerPointers[Local_u8Iter].InterruptName == Copy_u8TimerIntName )
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	c9 01       	movw	r24, r18
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	82 0f       	add	r24, r18
    1f7e:	93 1f       	adc	r25, r19
    1f80:	fc 01       	movw	r30, r24
    1f82:	eb 58       	subi	r30, 0x8B	; 139
    1f84:	fe 4f       	sbci	r31, 0xFE	; 254
    1f86:	90 81       	ld	r25, Z
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	98 17       	cp	r25, r24
    1f8c:	99 f4       	brne	.+38     	; 0x1fb4 <Timer_enuCallBack+0x68>
			{
				Global_AstrTimerPointers[Local_u8Iter].ptrFun = Copy_pAppFun;
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	c9 01       	movw	r24, r18
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	82 0f       	add	r24, r18
    1f9c:	93 1f       	adc	r25, r19
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	ea 58       	subi	r30, 0x8A	; 138
    1fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	91 83       	std	Z+1, r25	; 0x01
    1faa:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK ;
    1fac:	1b 82       	std	Y+3, r1	; 0x03
				found = 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
    1fb2:	06 c0       	rjmp	.+12     	; 0x1fc0 <Timer_enuCallBack+0x74>

	u8 found = 0 ;

	if( Copy_pAppFun != NULL )
	{
		for( u8 Local_u8Iter; Local_u8Iter < TIMERS_INTERRUPTS ; Local_u8Iter++ )
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	84 30       	cpi	r24, 0x04	; 4
    1fbe:	c0 f2       	brcs	.-80     	; 0x1f70 <Timer_enuCallBack+0x24>
				Local_enuErrorState = ES_OK ;
				found = 1;
				break;
			}
		}
		if(!found) Local_enuErrorState = ES_OUT_RANGE ;
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	88 23       	and	r24, r24
    1fc4:	29 f4       	brne	.+10     	; 0x1fd0 <Timer_enuCallBack+0x84>
    1fc6:	82 e0       	ldi	r24, 0x02	; 2
    1fc8:	8b 83       	std	Y+3, r24	; 0x03
    1fca:	02 c0       	rjmp	.+4      	; 0x1fd0 <Timer_enuCallBack+0x84>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    1fcc:	83 e0       	ldi	r24, 0x03	; 3
    1fce:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    1fd0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1fd2:	26 96       	adiw	r28, 0x06	; 6
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <__vector_4>:
void __vector_5( void )__attribute__((signal));		/*	Timer2	Overflow Interrupt	ISR			*/
void __vector_10( void )__attribute__((signal));	/*	Timer0	Compare Match Interrupt	ISR		*/
void __vector_11( void )__attribute__((signal));	/*	Timer0	Overflow Interrupt	ISR			*/

void __vector_4( void )/*	OCIE2	*/
{
    1fe4:	1f 92       	push	r1
    1fe6:	0f 92       	push	r0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	0f 92       	push	r0
    1fec:	11 24       	eor	r1, r1
    1fee:	2f 93       	push	r18
    1ff0:	3f 93       	push	r19
    1ff2:	4f 93       	push	r20
    1ff4:	5f 93       	push	r21
    1ff6:	6f 93       	push	r22
    1ff8:	7f 93       	push	r23
    1ffa:	8f 93       	push	r24
    1ffc:	9f 93       	push	r25
    1ffe:	af 93       	push	r26
    2000:	bf 93       	push	r27
    2002:	ef 93       	push	r30
    2004:	ff 93       	push	r31
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[3].ptrFun != NULL )
    200e:	80 91 7f 01 	lds	r24, 0x017F
    2012:	90 91 80 01 	lds	r25, 0x0180
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	29 f0       	breq	.+10     	; 0x2024 <__vector_4+0x40>
	{
		(*Global_AstrTimerPointers[3].ptrFun)( );
    201a:	e0 91 7f 01 	lds	r30, 0x017F
    201e:	f0 91 80 01 	lds	r31, 0x0180
    2022:	09 95       	icall
	}
}
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	ff 91       	pop	r31
    202a:	ef 91       	pop	r30
    202c:	bf 91       	pop	r27
    202e:	af 91       	pop	r26
    2030:	9f 91       	pop	r25
    2032:	8f 91       	pop	r24
    2034:	7f 91       	pop	r23
    2036:	6f 91       	pop	r22
    2038:	5f 91       	pop	r21
    203a:	4f 91       	pop	r20
    203c:	3f 91       	pop	r19
    203e:	2f 91       	pop	r18
    2040:	0f 90       	pop	r0
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	0f 90       	pop	r0
    2046:	1f 90       	pop	r1
    2048:	18 95       	reti

0000204a <__vector_5>:

void __vector_5( void )/*	TOIE2	*/
{
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	11 24       	eor	r1, r1
    2054:	2f 93       	push	r18
    2056:	3f 93       	push	r19
    2058:	4f 93       	push	r20
    205a:	5f 93       	push	r21
    205c:	6f 93       	push	r22
    205e:	7f 93       	push	r23
    2060:	8f 93       	push	r24
    2062:	9f 93       	push	r25
    2064:	af 93       	push	r26
    2066:	bf 93       	push	r27
    2068:	ef 93       	push	r30
    206a:	ff 93       	push	r31
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[2].ptrFun != NULL )
    2074:	80 91 7c 01 	lds	r24, 0x017C
    2078:	90 91 7d 01 	lds	r25, 0x017D
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	29 f0       	breq	.+10     	; 0x208a <__vector_5+0x40>
	{
		(*Global_AstrTimerPointers[2].ptrFun)( );
    2080:	e0 91 7c 01 	lds	r30, 0x017C
    2084:	f0 91 7d 01 	lds	r31, 0x017D
    2088:	09 95       	icall
	}
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	ff 91       	pop	r31
    2090:	ef 91       	pop	r30
    2092:	bf 91       	pop	r27
    2094:	af 91       	pop	r26
    2096:	9f 91       	pop	r25
    2098:	8f 91       	pop	r24
    209a:	7f 91       	pop	r23
    209c:	6f 91       	pop	r22
    209e:	5f 91       	pop	r21
    20a0:	4f 91       	pop	r20
    20a2:	3f 91       	pop	r19
    20a4:	2f 91       	pop	r18
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <__vector_10>:
void __vector_10( void )/*	OCIE0	*/
{
    20b0:	1f 92       	push	r1
    20b2:	0f 92       	push	r0
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	0f 92       	push	r0
    20b8:	11 24       	eor	r1, r1
    20ba:	2f 93       	push	r18
    20bc:	3f 93       	push	r19
    20be:	4f 93       	push	r20
    20c0:	5f 93       	push	r21
    20c2:	6f 93       	push	r22
    20c4:	7f 93       	push	r23
    20c6:	8f 93       	push	r24
    20c8:	9f 93       	push	r25
    20ca:	af 93       	push	r26
    20cc:	bf 93       	push	r27
    20ce:	ef 93       	push	r30
    20d0:	ff 93       	push	r31
    20d2:	df 93       	push	r29
    20d4:	cf 93       	push	r28
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[1].ptrFun != NULL )
    20da:	80 91 79 01 	lds	r24, 0x0179
    20de:	90 91 7a 01 	lds	r25, 0x017A
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	29 f0       	breq	.+10     	; 0x20f0 <__vector_10+0x40>
	{
		(*Global_AstrTimerPointers[1].ptrFun)( );
    20e6:	e0 91 79 01 	lds	r30, 0x0179
    20ea:	f0 91 7a 01 	lds	r31, 0x017A
    20ee:	09 95       	icall
	}
}
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	ff 91       	pop	r31
    20f6:	ef 91       	pop	r30
    20f8:	bf 91       	pop	r27
    20fa:	af 91       	pop	r26
    20fc:	9f 91       	pop	r25
    20fe:	8f 91       	pop	r24
    2100:	7f 91       	pop	r23
    2102:	6f 91       	pop	r22
    2104:	5f 91       	pop	r21
    2106:	4f 91       	pop	r20
    2108:	3f 91       	pop	r19
    210a:	2f 91       	pop	r18
    210c:	0f 90       	pop	r0
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	0f 90       	pop	r0
    2112:	1f 90       	pop	r1
    2114:	18 95       	reti

00002116 <__vector_11>:
void __vector_11( void )/*	TOIE0	*/
{
    2116:	1f 92       	push	r1
    2118:	0f 92       	push	r0
    211a:	0f b6       	in	r0, 0x3f	; 63
    211c:	0f 92       	push	r0
    211e:	11 24       	eor	r1, r1
    2120:	2f 93       	push	r18
    2122:	3f 93       	push	r19
    2124:	4f 93       	push	r20
    2126:	5f 93       	push	r21
    2128:	6f 93       	push	r22
    212a:	7f 93       	push	r23
    212c:	8f 93       	push	r24
    212e:	9f 93       	push	r25
    2130:	af 93       	push	r26
    2132:	bf 93       	push	r27
    2134:	ef 93       	push	r30
    2136:	ff 93       	push	r31
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrTimerPointers[0].ptrFun != NULL )
    2140:	80 91 76 01 	lds	r24, 0x0176
    2144:	90 91 77 01 	lds	r25, 0x0177
    2148:	00 97       	sbiw	r24, 0x00	; 0
    214a:	29 f0       	breq	.+10     	; 0x2156 <__vector_11+0x40>
	{
		(*Global_AstrTimerPointers[0].ptrFun)( );
    214c:	e0 91 76 01 	lds	r30, 0x0176
    2150:	f0 91 77 01 	lds	r31, 0x0177
    2154:	09 95       	icall
	}
}
    2156:	cf 91       	pop	r28
    2158:	df 91       	pop	r29
    215a:	ff 91       	pop	r31
    215c:	ef 91       	pop	r30
    215e:	bf 91       	pop	r27
    2160:	af 91       	pop	r26
    2162:	9f 91       	pop	r25
    2164:	8f 91       	pop	r24
    2166:	7f 91       	pop	r23
    2168:	6f 91       	pop	r22
    216a:	5f 91       	pop	r21
    216c:	4f 91       	pop	r20
    216e:	3f 91       	pop	r19
    2170:	2f 91       	pop	r18
    2172:	0f 90       	pop	r0
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	0f 90       	pop	r0
    2178:	1f 90       	pop	r1
    217a:	18 95       	reti

0000217c <PWM_enuInit>:
																	{ OCIE1A ,	NULL},
																};


ES_t PWM_enuInit( void )
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	29 97       	sbiw	r28, 0x09	; 9
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK ;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	8d 83       	std	Y+5, r24	; 0x05

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;
    2194:	1c 82       	std	Y+4, r1	; 0x04

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2196:	1b 82       	std	Y+3, r1	; 0x03
    2198:	bb c1       	rjmp	.+886    	; 0x2510 <PWM_enuInit+0x394>
	{
		if( PWMs[Local_u8Iter].TimerNum == TIMER1A || PWMs[Local_u8Iter].TimerNum == TIMER1B )
    219a:	8b 81       	ldd	r24, Y+3	; 0x03
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	c9 01       	movw	r24, r18
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	88 0f       	add	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	82 0f       	add	r24, r18
    21ac:	93 1f       	adc	r25, r19
    21ae:	fc 01       	movw	r30, r24
    21b0:	ec 57       	subi	r30, 0x7C	; 124
    21b2:	fe 4f       	sbci	r31, 0xFE	; 254
    21b4:	80 81       	ld	r24, Z
    21b6:	89 3c       	cpi	r24, 0xC9	; 201
    21b8:	89 f0       	breq	.+34     	; 0x21dc <PWM_enuInit+0x60>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	28 2f       	mov	r18, r24
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	c9 01       	movw	r24, r18
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	88 0f       	add	r24, r24
    21c8:	99 1f       	adc	r25, r25
    21ca:	82 0f       	add	r24, r18
    21cc:	93 1f       	adc	r25, r19
    21ce:	fc 01       	movw	r30, r24
    21d0:	ec 57       	subi	r30, 0x7C	; 124
    21d2:	fe 4f       	sbci	r31, 0xFE	; 254
    21d4:	80 81       	ld	r24, Z
    21d6:	8a 3c       	cpi	r24, 0xCA	; 202
    21d8:	09 f0       	breq	.+2      	; 0x21dc <PWM_enuInit+0x60>
    21da:	97 c1       	rjmp	.+814    	; 0x250a <PWM_enuInit+0x38e>
		{
			if( ! Local_u8Flag )
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	88 23       	and	r24, r24
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <PWM_enuInit+0x68>
    21e2:	d2 c0       	rjmp	.+420    	; 0x2388 <PWM_enuInit+0x20c>
			{
				Local_u8Flag = 1 ;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	8c 83       	std	Y+4, r24	; 0x04
				TIMSK &= ~( TC1_INT_EN_MASK ) ;				// Disable All Interrupts before setting all conditions
    21e8:	a9 e5       	ldi	r26, 0x59	; 89
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e9 e5       	ldi	r30, 0x59	; 89
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	83 7c       	andi	r24, 0xC3	; 195
    21f4:	8c 93       	st	X, r24
				TCCR1A = 0x00 ;								// Masks all bits in TCCR1A
    21f6:	ef e4       	ldi	r30, 0x4F	; 79
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	10 82       	st	Z, r1
				TCCR1B = 0x00 ;								// Masks all bits in TCCR1B
    21fc:	ee e4       	ldi	r30, 0x4E	; 78
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	10 82       	st	Z, r1
				u8 Local_u8CopySREG = SREG ;
    2202:	ef e5       	ldi	r30, 0x5F	; 95
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	8a 83       	std	Y+2, r24	; 0x02
				_CLI_;
    220a:	f8 94       	cli
				OCR1AH = 0x00 ;								// Clears 1A HIGH-byte Output Compare Register
    220c:	eb e4       	ldi	r30, 0x4B	; 75
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	10 82       	st	Z, r1
				OCR1AL = 0x00 ;								// Clears 1A LOW-byte Output Compare Register
    2212:	ea e4       	ldi	r30, 0x4A	; 74
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	10 82       	st	Z, r1
				OCR1BH = 0x00 ;								// Clears 1B HIGH-byte Output Compare Register
    2218:	e9 e4       	ldi	r30, 0x49	; 73
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	10 82       	st	Z, r1
				OCR1BL = 0x00 ;								// Clears 1B LOW-byte Output Compare Register
    221e:	e8 e4       	ldi	r30, 0x48	; 72
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	10 82       	st	Z, r1
				SREG = Local_u8CopySREG ;
    2224:	ef e5       	ldi	r30, 0x5F	; 95
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	80 83       	st	Z, r24

				/****************************************/
				/*			Set Clock Selection			*/
				/****************************************/
				Global_u32Timer1_Clk = PWM_u32TimerClock( TIMER1A , PWMs[Local_u8Iter].ClkSelect ,&Local_u8ClkSelect);
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	c9 01       	movw	r24, r18
    2234:	88 0f       	add	r24, r24
    2236:	99 1f       	adc	r25, r25
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	82 0f       	add	r24, r18
    223e:	93 1f       	adc	r25, r19
    2240:	fc 01       	movw	r30, r24
    2242:	eb 57       	subi	r30, 0x7B	; 123
    2244:	fe 4f       	sbci	r31, 0xFE	; 254
    2246:	90 81       	ld	r25, Z
    2248:	9e 01       	movw	r18, r28
    224a:	2a 5f       	subi	r18, 0xFA	; 250
    224c:	3f 4f       	sbci	r19, 0xFF	; 255
    224e:	89 ec       	ldi	r24, 0xC9	; 201
    2250:	69 2f       	mov	r22, r25
    2252:	a9 01       	movw	r20, r18
    2254:	0e 94 9f 12 	call	0x253e	; 0x253e <PWM_u32TimerClock>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	80 93 25 02 	sts	0x0225, r24
    2260:	90 93 26 02 	sts	0x0226, r25
    2264:	a0 93 27 02 	sts	0x0227, r26
    2268:	b0 93 28 02 	sts	0x0228, r27
				TCCR1B |= ( Local_u8ClkSelect << CLK1_SEL_BITS );
    226c:	ae e4       	ldi	r26, 0x4E	; 78
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	ee e4       	ldi	r30, 0x4E	; 78
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	90 81       	ld	r25, Z
    2276:	8e 81       	ldd	r24, Y+6	; 0x06
    2278:	89 2b       	or	r24, r25
    227a:	8c 93       	st	X, r24

				/****************************************/
				/*		Set Waveform Generation Mode	*/
				/****************************************/
				if( PWMs[Local_u8Iter].WaveGenMode > WGM_MODE_00	&& PWMs[Local_u8Iter].WaveGenMode <= WGM_FAST_OCR1A	&&
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	c9 01       	movw	r24, r18
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	82 0f       	add	r24, r18
    228e:	93 1f       	adc	r25, r19
    2290:	fc 01       	movw	r30, r24
    2292:	e9 57       	subi	r30, 0x79	; 121
    2294:	fe 4f       	sbci	r31, 0xFE	; 254
    2296:	80 81       	ld	r24, Z
    2298:	85 36       	cpi	r24, 0x65	; 101
    229a:	08 f4       	brcc	.+2      	; 0x229e <PWM_enuInit+0x122>
    229c:	73 c0       	rjmp	.+230    	; 0x2384 <PWM_enuInit+0x208>
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	c9 01       	movw	r24, r18
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	88 0f       	add	r24, r24
    22ac:	99 1f       	adc	r25, r25
    22ae:	82 0f       	add	r24, r18
    22b0:	93 1f       	adc	r25, r19
    22b2:	fc 01       	movw	r30, r24
    22b4:	e9 57       	subi	r30, 0x79	; 121
    22b6:	fe 4f       	sbci	r31, 0xFE	; 254
    22b8:	80 81       	ld	r24, Z
    22ba:	84 37       	cpi	r24, 0x74	; 116
    22bc:	08 f0       	brcs	.+2      	; 0x22c0 <PWM_enuInit+0x144>
    22be:	62 c0       	rjmp	.+196    	; 0x2384 <PWM_enuInit+0x208>
    22c0:	8b 81       	ldd	r24, Y+3	; 0x03
    22c2:	28 2f       	mov	r18, r24
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	c9 01       	movw	r24, r18
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	82 0f       	add	r24, r18
    22d2:	93 1f       	adc	r25, r19
    22d4:	fc 01       	movw	r30, r24
    22d6:	e9 57       	subi	r30, 0x79	; 121
    22d8:	fe 4f       	sbci	r31, 0xFE	; 254
    22da:	80 81       	ld	r24, Z
    22dc:	88 36       	cpi	r24, 0x68	; 104
    22de:	09 f4       	brne	.+2      	; 0x22e2 <PWM_enuInit+0x166>
    22e0:	51 c0       	rjmp	.+162    	; 0x2384 <PWM_enuInit+0x208>
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	c9 01       	movw	r24, r18
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	82 0f       	add	r24, r18
    22f4:	93 1f       	adc	r25, r19
    22f6:	fc 01       	movw	r30, r24
    22f8:	e9 57       	subi	r30, 0x79	; 121
    22fa:	fe 4f       	sbci	r31, 0xFE	; 254
    22fc:	80 81       	ld	r24, Z
    22fe:	80 37       	cpi	r24, 0x70	; 112
    2300:	09 f4       	brne	.+2      	; 0x2304 <PWM_enuInit+0x188>
    2302:	40 c0       	rjmp	.+128    	; 0x2384 <PWM_enuInit+0x208>
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	28 2f       	mov	r18, r24
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	c9 01       	movw	r24, r18
    230c:	88 0f       	add	r24, r24
    230e:	99 1f       	adc	r25, r25
    2310:	88 0f       	add	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	82 0f       	add	r24, r18
    2316:	93 1f       	adc	r25, r19
    2318:	fc 01       	movw	r30, r24
    231a:	e9 57       	subi	r30, 0x79	; 121
    231c:	fe 4f       	sbci	r31, 0xFE	; 254
    231e:	80 81       	ld	r24, Z
    2320:	81 37       	cpi	r24, 0x71	; 113
    2322:	81 f1       	breq	.+96     	; 0x2384 <PWM_enuInit+0x208>
					PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_04	&& PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_12	&&
					PWMs[Local_u8Iter].WaveGenMode != WGM_MODE_13	)
				{
					u8 Local_u8WGM = PWMs[Local_u8Iter].WaveGenMode - WGM_MODE_00 ;
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	c9 01       	movw	r24, r18
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	88 0f       	add	r24, r24
    2332:	99 1f       	adc	r25, r25
    2334:	82 0f       	add	r24, r18
    2336:	93 1f       	adc	r25, r19
    2338:	fc 01       	movw	r30, r24
    233a:	e9 57       	subi	r30, 0x79	; 121
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	80 81       	ld	r24, Z
    2340:	84 56       	subi	r24, 0x64	; 100
    2342:	89 83       	std	Y+1, r24	; 0x01
					TCCR1A |= ( ( Local_u8WGM & _TWO_BITS_MASK_ ) << WGM1A_SEL_BITS );
    2344:	af e4       	ldi	r26, 0x4F	; 79
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	ef e4       	ldi	r30, 0x4F	; 79
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	98 2f       	mov	r25, r24
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	83 70       	andi	r24, 0x03	; 3
    2354:	89 2b       	or	r24, r25
    2356:	8c 93       	st	X, r24
					TCCR1B |= ( ( ( Local_u8WGM >> BIT1_MASK) & _TWO_BITS_MASK_ ) << WGM1B_SEL_BITS );
    2358:	ae e4       	ldi	r26, 0x4E	; 78
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	ee e4       	ldi	r30, 0x4E	; 78
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	28 2f       	mov	r18, r24
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	86 95       	lsr	r24
    2368:	86 95       	lsr	r24
    236a:	88 2f       	mov	r24, r24
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	83 70       	andi	r24, 0x03	; 3
    2370:	90 70       	andi	r25, 0x00	; 0
    2372:	88 0f       	add	r24, r24
    2374:	99 1f       	adc	r25, r25
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	82 2b       	or	r24, r18
    2380:	8c 93       	st	X, r24
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <PWM_enuInit+0x20c>
				}
				else
				{
					Local_enuErrorState = ES_OUT_RANGE ;
    2384:	82 e0       	ldi	r24, 0x02	; 2
    2386:	8d 83       	std	Y+5, r24	; 0x05
				}
			}
			/****************************************/
			/*		Set Compare Output Mode			*/
			/****************************************/
			if( PWMs[Local_u8Iter].CompOutMode == COMP_NON_INVERTED ||
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	28 2f       	mov	r18, r24
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	c9 01       	movw	r24, r18
    2390:	88 0f       	add	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	88 0f       	add	r24, r24
    2396:	99 1f       	adc	r25, r25
    2398:	82 0f       	add	r24, r18
    239a:	93 1f       	adc	r25, r19
    239c:	fc 01       	movw	r30, r24
    239e:	ea 57       	subi	r30, 0x7A	; 122
    23a0:	fe 4f       	sbci	r31, 0xFE	; 254
    23a2:	80 81       	ld	r24, Z
    23a4:	86 31       	cpi	r24, 0x16	; 22
    23a6:	89 f0       	breq	.+34     	; 0x23ca <PWM_enuInit+0x24e>
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	c9 01       	movw	r24, r18
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	88 0f       	add	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	82 0f       	add	r24, r18
    23ba:	93 1f       	adc	r25, r19
    23bc:	fc 01       	movw	r30, r24
    23be:	ea 57       	subi	r30, 0x7A	; 122
    23c0:	fe 4f       	sbci	r31, 0xFE	; 254
    23c2:	80 81       	ld	r24, Z
    23c4:	87 31       	cpi	r24, 0x17	; 23
    23c6:	09 f0       	breq	.+2      	; 0x23ca <PWM_enuInit+0x24e>
    23c8:	53 c0       	rjmp	.+166    	; 0x2470 <PWM_enuInit+0x2f4>
				PWMs[Local_u8Iter].CompOutMode == COMP_INVERTED		)
			{
				if( PWMs[Local_u8Iter].TimerNum == TIMER1A )
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	c9 01       	movw	r24, r18
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	88 0f       	add	r24, r24
    23d8:	99 1f       	adc	r25, r25
    23da:	82 0f       	add	r24, r18
    23dc:	93 1f       	adc	r25, r19
    23de:	fc 01       	movw	r30, r24
    23e0:	ec 57       	subi	r30, 0x7C	; 124
    23e2:	fe 4f       	sbci	r31, 0xFE	; 254
    23e4:	80 81       	ld	r24, Z
    23e6:	89 3c       	cpi	r24, 0xC9	; 201
    23e8:	19 f5       	brne	.+70     	; 0x2430 <PWM_enuInit+0x2b4>
				{
					/****************************************/
					/*		Set 1A Compare Output Mode		*/
					/****************************************/
					TCCR1A |= ( ( PWMs[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COM1A_SEL_BITS );
    23ea:	af e4       	ldi	r26, 0x4F	; 79
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	ef e4       	ldi	r30, 0x4F	; 79
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	c9 01       	movw	r24, r18
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	82 0f       	add	r24, r18
    2408:	93 1f       	adc	r25, r19
    240a:	fc 01       	movw	r30, r24
    240c:	ea 57       	subi	r30, 0x7A	; 122
    240e:	fe 4f       	sbci	r31, 0xFE	; 254
    2410:	80 81       	ld	r24, Z
    2412:	88 2f       	mov	r24, r24
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	44 97       	sbiw	r24, 0x14	; 20
    2418:	00 24       	eor	r0, r0
    241a:	96 95       	lsr	r25
    241c:	87 95       	ror	r24
    241e:	07 94       	ror	r0
    2420:	96 95       	lsr	r25
    2422:	87 95       	ror	r24
    2424:	07 94       	ror	r0
    2426:	98 2f       	mov	r25, r24
    2428:	80 2d       	mov	r24, r0
    242a:	84 2b       	or	r24, r20
    242c:	8c 93       	st	X, r24
    242e:	22 c0       	rjmp	.+68     	; 0x2474 <PWM_enuInit+0x2f8>
				else
				{
					/****************************************/
					/*		Set 1B Compare Output Mode		*/
					/****************************************/
					TCCR1A |= ( ( PWMs[Local_u8Iter].CompOutMode - COMP_NORMAL ) << COM1B_SEL_BITS );
    2430:	af e4       	ldi	r26, 0x4F	; 79
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	ef e4       	ldi	r30, 0x4F	; 79
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	48 2f       	mov	r20, r24
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	c9 01       	movw	r24, r18
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	88 0f       	add	r24, r24
    244a:	99 1f       	adc	r25, r25
    244c:	82 0f       	add	r24, r18
    244e:	93 1f       	adc	r25, r19
    2450:	fc 01       	movw	r30, r24
    2452:	ea 57       	subi	r30, 0x7A	; 122
    2454:	fe 4f       	sbci	r31, 0xFE	; 254
    2456:	80 81       	ld	r24, Z
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	44 97       	sbiw	r24, 0x14	; 20
    245e:	82 95       	swap	r24
    2460:	92 95       	swap	r25
    2462:	90 7f       	andi	r25, 0xF0	; 240
    2464:	98 27       	eor	r25, r24
    2466:	80 7f       	andi	r24, 0xF0	; 240
    2468:	98 27       	eor	r25, r24
    246a:	84 2b       	or	r24, r20
    246c:	8c 93       	st	X, r24
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <PWM_enuInit+0x2f8>
				}
			}
			else
			{
				Local_enuErrorState = ES_OUT_RANGE ;
    2470:	82 e0       	ldi	r24, 0x02	; 2
    2472:	8d 83       	std	Y+5, r24	; 0x05
			}

			/****************************************/
			/*			Set Interrupt Mode			*/
			/****************************************/
			switch( PWMs[Local_u8Iter].InterruptMode )
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	28 2f       	mov	r18, r24
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	c9 01       	movw	r24, r18
    247c:	88 0f       	add	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	88 0f       	add	r24, r24
    2482:	99 1f       	adc	r25, r25
    2484:	82 0f       	add	r24, r18
    2486:	93 1f       	adc	r25, r19
    2488:	fc 01       	movw	r30, r24
    248a:	e8 57       	subi	r30, 0x78	; 120
    248c:	fe 4f       	sbci	r31, 0xFE	; 254
    248e:	80 81       	ld	r24, Z
    2490:	28 2f       	mov	r18, r24
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	39 87       	std	Y+9, r19	; 0x09
    2496:	28 87       	std	Y+8, r18	; 0x08
    2498:	88 85       	ldd	r24, Y+8	; 0x08
    249a:	99 85       	ldd	r25, Y+9	; 0x09
    249c:	83 33       	cpi	r24, 0x33	; 51
    249e:	91 05       	cpc	r25, r1
    24a0:	31 f0       	breq	.+12     	; 0x24ae <PWM_enuInit+0x332>
    24a2:	28 85       	ldd	r18, Y+8	; 0x08
    24a4:	39 85       	ldd	r19, Y+9	; 0x09
    24a6:	24 33       	cpi	r18, 0x34	; 52
    24a8:	31 05       	cpc	r19, r1
    24aa:	49 f0       	breq	.+18     	; 0x24be <PWM_enuInit+0x342>
    24ac:	28 c0       	rjmp	.+80     	; 0x24fe <PWM_enuInit+0x382>
			{
				case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1_BIT );				/*	Enable TOIE1 Interrupt */
    24ae:	a9 e5       	ldi	r26, 0x59	; 89
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e9 e5       	ldi	r30, 0x59	; 89
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	84 60       	ori	r24, 0x04	; 4
    24ba:	8c 93       	st	X, r24
    24bc:	22 c0       	rjmp	.+68     	; 0x2502 <PWM_enuInit+0x386>
											break;
				case PWM_OUT_COMP_INT	:	if( PWMs[Local_u8Iter].TimerNum == TIMER1B )
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	28 2f       	mov	r18, r24
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	c9 01       	movw	r24, r18
    24c6:	88 0f       	add	r24, r24
    24c8:	99 1f       	adc	r25, r25
    24ca:	88 0f       	add	r24, r24
    24cc:	99 1f       	adc	r25, r25
    24ce:	82 0f       	add	r24, r18
    24d0:	93 1f       	adc	r25, r19
    24d2:	fc 01       	movw	r30, r24
    24d4:	ec 57       	subi	r30, 0x7C	; 124
    24d6:	fe 4f       	sbci	r31, 0xFE	; 254
    24d8:	80 81       	ld	r24, Z
    24da:	8a 3c       	cpi	r24, 0xCA	; 202
    24dc:	41 f4       	brne	.+16     	; 0x24ee <PWM_enuInit+0x372>
											{
												SET_BIT( TIMSK , OCIE1B_BIT );			/*	Enable OCIE1B Interrupt */
    24de:	a9 e5       	ldi	r26, 0x59	; 89
    24e0:	b0 e0       	ldi	r27, 0x00	; 0
    24e2:	e9 e5       	ldi	r30, 0x59	; 89
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	80 81       	ld	r24, Z
    24e8:	88 60       	ori	r24, 0x08	; 8
    24ea:	8c 93       	st	X, r24
    24ec:	0a c0       	rjmp	.+20     	; 0x2502 <PWM_enuInit+0x386>
											}
											else
											{
												SET_BIT( TIMSK , OCIE1A_BIT );			/*	Enable OCIE1A Interrupt */
    24ee:	a9 e5       	ldi	r26, 0x59	; 89
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e9 e5       	ldi	r30, 0x59	; 89
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	80 61       	ori	r24, 0x10	; 16
    24fa:	8c 93       	st	X, r24
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <PWM_enuInit+0x386>
											}
											break;
				default :	Local_enuErrorState = ES_OUT_RANGE ;
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	8d 83       	std	Y+5, r24	; 0x05
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	8b 83       	std	Y+3, r24	; 0x03
    2508:	03 c0       	rjmp	.+6      	; 0x2510 <PWM_enuInit+0x394>
							/*Timer Interrupts are already disabled at beginning of setting value, no extra action is needed*/
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE ;
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	8d 83       	std	Y+5, r24	; 0x05
    250e:	06 c0       	rjmp	.+12     	; 0x251c <PWM_enuInit+0x3a0>
{
	ES_t Local_enuErrorState = ES_NOK ;

	u8 Local_u8ClkSelect , Local_u8Flag = 0 ;

	for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2510:	90 91 81 01 	lds	r25, 0x0181
    2514:	8b 81       	ldd	r24, Y+3	; 0x03
    2516:	89 17       	cp	r24, r25
    2518:	08 f4       	brcc	.+2      	; 0x251c <PWM_enuInit+0x3a0>
    251a:	3f ce       	rjmp	.-898    	; 0x219a <PWM_enuInit+0x1e>
			#warning " PWM_Init(): Non Supported Timer Number , Initialization is terminated."
			break;
		}
	}

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    251c:	8d 81       	ldd	r24, Y+5	; 0x05
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	19 f0       	breq	.+6      	; 0x2528 <PWM_enuInit+0x3ac>
    2522:	3d 81       	ldd	r19, Y+5	; 0x05
    2524:	3f 83       	std	Y+7, r19	; 0x07
    2526:	01 c0       	rjmp	.+2      	; 0x252a <PWM_enuInit+0x3ae>
    2528:	1f 82       	std	Y+7, r1	; 0x07
    252a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    252c:	29 96       	adiw	r28, 0x09	; 9
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	cf 91       	pop	r28
    253a:	df 91       	pop	r29
    253c:	08 95       	ret

0000253e <PWM_u32TimerClock>:

static u32 PWM_u32TimerClock( u8 Copy_u8TimerNum ,u8 Copy_u8ClkSelectNum ,u8 *Copy_pu8ClkSelectPrescalar )
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	2a 97       	sbiw	r28, 0x0a	; 10
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	8d 83       	std	Y+5, r24	; 0x05
    2554:	6e 83       	std	Y+6, r22	; 0x06
    2556:	58 87       	std	Y+8, r21	; 0x08
    2558:	4f 83       	std	Y+7, r20	; 0x07
	u32 Copy_u32TimerClk = CPU_CLOCK;
    255a:	80 e0       	ldi	r24, 0x00	; 0
    255c:	94 e2       	ldi	r25, 0x24	; 36
    255e:	a4 ef       	ldi	r26, 0xF4	; 244
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	9a 83       	std	Y+2, r25	; 0x02
    2566:	ab 83       	std	Y+3, r26	; 0x03
    2568:	bc 83       	std	Y+4, r27	; 0x04


	switch( Copy_u8ClkSelectNum )
    256a:	8e 81       	ldd	r24, Y+6	; 0x06
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	3a 87       	std	Y+10, r19	; 0x0a
    2572:	29 87       	std	Y+9, r18	; 0x09
    2574:	89 85       	ldd	r24, Y+9	; 0x09
    2576:	9a 85       	ldd	r25, Y+10	; 0x0a
    2578:	8e 30       	cpi	r24, 0x0E	; 14
    257a:	91 05       	cpc	r25, r1
    257c:	09 f4       	brne	.+2      	; 0x2580 <PWM_u32TimerClock+0x42>
    257e:	56 c0       	rjmp	.+172    	; 0x262c <PWM_u32TimerClock+0xee>
    2580:	29 85       	ldd	r18, Y+9	; 0x09
    2582:	3a 85       	ldd	r19, Y+10	; 0x0a
    2584:	2f 30       	cpi	r18, 0x0F	; 15
    2586:	31 05       	cpc	r19, r1
    2588:	84 f4       	brge	.+32     	; 0x25aa <PWM_u32TimerClock+0x6c>
    258a:	89 85       	ldd	r24, Y+9	; 0x09
    258c:	9a 85       	ldd	r25, Y+10	; 0x0a
    258e:	8b 30       	cpi	r24, 0x0B	; 11
    2590:	91 05       	cpc	r25, r1
    2592:	91 f1       	breq	.+100    	; 0x25f8 <PWM_u32TimerClock+0xba>
    2594:	29 85       	ldd	r18, Y+9	; 0x09
    2596:	3a 85       	ldd	r19, Y+10	; 0x0a
    2598:	2c 30       	cpi	r18, 0x0C	; 12
    259a:	31 05       	cpc	r19, r1
    259c:	91 f1       	breq	.+100    	; 0x2602 <PWM_u32TimerClock+0xc4>
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	8a 30       	cpi	r24, 0x0A	; 10
    25a4:	91 05       	cpc	r25, r1
    25a6:	01 f1       	breq	.+64     	; 0x25e8 <PWM_u32TimerClock+0xaa>
    25a8:	97 c0       	rjmp	.+302    	; 0x26d8 <PWM_u32TimerClock+0x19a>
    25aa:	29 85       	ldd	r18, Y+9	; 0x09
    25ac:	3a 85       	ldd	r19, Y+10	; 0x0a
    25ae:	21 31       	cpi	r18, 0x11	; 17
    25b0:	31 05       	cpc	r19, r1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <PWM_u32TimerClock+0x78>
    25b4:	61 c0       	rjmp	.+194    	; 0x2678 <PWM_u32TimerClock+0x13a>
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	82 31       	cpi	r24, 0x12	; 18
    25bc:	91 05       	cpc	r25, r1
    25be:	3c f4       	brge	.+14     	; 0x25ce <PWM_u32TimerClock+0x90>
    25c0:	29 85       	ldd	r18, Y+9	; 0x09
    25c2:	3a 85       	ldd	r19, Y+10	; 0x0a
    25c4:	20 31       	cpi	r18, 0x10	; 16
    25c6:	31 05       	cpc	r19, r1
    25c8:	09 f4       	brne	.+2      	; 0x25cc <PWM_u32TimerClock+0x8e>
    25ca:	45 c0       	rjmp	.+138    	; 0x2656 <PWM_u32TimerClock+0x118>
    25cc:	85 c0       	rjmp	.+266    	; 0x26d8 <PWM_u32TimerClock+0x19a>
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	82 31       	cpi	r24, 0x12	; 18
    25d4:	91 05       	cpc	r25, r1
    25d6:	09 f4       	brne	.+2      	; 0x25da <PWM_u32TimerClock+0x9c>
    25d8:	65 c0       	rjmp	.+202    	; 0x26a4 <PWM_u32TimerClock+0x166>
    25da:	29 85       	ldd	r18, Y+9	; 0x09
    25dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    25de:	23 31       	cpi	r18, 0x13	; 19
    25e0:	31 05       	cpc	r19, r1
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <PWM_u32TimerClock+0xa8>
    25e4:	6c c0       	rjmp	.+216    	; 0x26be <PWM_u32TimerClock+0x180>
    25e6:	78 c0       	rjmp	.+240    	; 0x26d8 <PWM_u32TimerClock+0x19a>
	{
		case PWM_NO_CLK		:	*Copy_pu8ClkSelectPrescalar = 0;
    25e8:	ef 81       	ldd	r30, Y+7	; 0x07
    25ea:	f8 85       	ldd	r31, Y+8	; 0x08
    25ec:	10 82       	st	Z, r1
							Copy_u32TimerClk = 0 ;
    25ee:	19 82       	std	Y+1, r1	; 0x01
    25f0:	1a 82       	std	Y+2, r1	; 0x02
    25f2:	1b 82       	std	Y+3, r1	; 0x03
    25f4:	1c 82       	std	Y+4, r1	; 0x04
    25f6:	74 c0       	rjmp	.+232    	; 0x26e0 <PWM_u32TimerClock+0x1a2>
							break;
		case PWM_PRES_1		:	*Copy_pu8ClkSelectPrescalar = 1;
    25f8:	ef 81       	ldd	r30, Y+7	; 0x07
    25fa:	f8 85       	ldd	r31, Y+8	; 0x08
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
    2600:	6f c0       	rjmp	.+222    	; 0x26e0 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_8 	:	*Copy_pu8ClkSelectPrescalar = 2;
    2602:	ef 81       	ldd	r30, Y+7	; 0x07
    2604:	f8 85       	ldd	r31, Y+8	; 0x08
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	80 83       	st	Z, r24
							Copy_u32TimerClk >>= 3 ;
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	ab 81       	ldd	r26, Y+3	; 0x03
    2610:	bc 81       	ldd	r27, Y+4	; 0x04
    2612:	68 94       	set
    2614:	12 f8       	bld	r1, 2
    2616:	b6 95       	lsr	r27
    2618:	a7 95       	ror	r26
    261a:	97 95       	ror	r25
    261c:	87 95       	ror	r24
    261e:	16 94       	lsr	r1
    2620:	d1 f7       	brne	.-12     	; 0x2616 <PWM_u32TimerClock+0xd8>
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	ab 83       	std	Y+3, r26	; 0x03
    2628:	bc 83       	std	Y+4, r27	; 0x04
    262a:	5a c0       	rjmp	.+180    	; 0x26e0 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_64 	:	Copy_u32TimerClk >>= 6 ;
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	ab 81       	ldd	r26, Y+3	; 0x03
    2632:	bc 81       	ldd	r27, Y+4	; 0x04
    2634:	68 94       	set
    2636:	15 f8       	bld	r1, 5
    2638:	b6 95       	lsr	r27
    263a:	a7 95       	ror	r26
    263c:	97 95       	ror	r25
    263e:	87 95       	ror	r24
    2640:	16 94       	lsr	r1
    2642:	d1 f7       	brne	.-12     	; 0x2638 <PWM_u32TimerClock+0xfa>
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	9a 83       	std	Y+2, r25	; 0x02
    2648:	ab 83       	std	Y+3, r26	; 0x03
    264a:	bc 83       	std	Y+4, r27	; 0x04
							*Copy_pu8ClkSelectPrescalar = 3;
    264c:	ef 81       	ldd	r30, Y+7	; 0x07
    264e:	f8 85       	ldd	r31, Y+8	; 0x08
    2650:	83 e0       	ldi	r24, 0x03	; 3
    2652:	80 83       	st	Z, r24
    2654:	45 c0       	rjmp	.+138    	; 0x26e0 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_256	 :	Copy_u32TimerClk >>= 8 ;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	ab 81       	ldd	r26, Y+3	; 0x03
    265c:	bc 81       	ldd	r27, Y+4	; 0x04
    265e:	89 2f       	mov	r24, r25
    2660:	9a 2f       	mov	r25, r26
    2662:	ab 2f       	mov	r26, r27
    2664:	bb 27       	eor	r27, r27
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	ab 83       	std	Y+3, r26	; 0x03
    266c:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 6;
							//else
							*Copy_pu8ClkSelectPrescalar = 4;
    266e:	ef 81       	ldd	r30, Y+7	; 0x07
    2670:	f8 85       	ldd	r31, Y+8	; 0x08
    2672:	84 e0       	ldi	r24, 0x04	; 4
    2674:	80 83       	st	Z, r24
    2676:	34 c0       	rjmp	.+104    	; 0x26e0 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_PRES_1024 :	Copy_u32TimerClk >>= 10 ;
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	9a 81       	ldd	r25, Y+2	; 0x02
    267c:	ab 81       	ldd	r26, Y+3	; 0x03
    267e:	bc 81       	ldd	r27, Y+4	; 0x04
    2680:	07 2e       	mov	r0, r23
    2682:	7a e0       	ldi	r23, 0x0A	; 10
    2684:	b6 95       	lsr	r27
    2686:	a7 95       	ror	r26
    2688:	97 95       	ror	r25
    268a:	87 95       	ror	r24
    268c:	7a 95       	dec	r23
    268e:	d1 f7       	brne	.-12     	; 0x2684 <PWM_u32TimerClock+0x146>
    2690:	70 2d       	mov	r23, r0
    2692:	89 83       	std	Y+1, r24	; 0x01
    2694:	9a 83       	std	Y+2, r25	; 0x02
    2696:	ab 83       	std	Y+3, r26	; 0x03
    2698:	bc 83       	std	Y+4, r27	; 0x04
							//if( Copy_u8TimerNum == TIMER2 )	*Copy_pu8ClkSelectPrescalar = 7;
							//else
							*Copy_pu8ClkSelectPrescalar = 5;
    269a:	ef 81       	ldd	r30, Y+7	; 0x07
    269c:	f8 85       	ldd	r31, Y+8	; 0x08
    269e:	85 e0       	ldi	r24, 0x05	; 5
    26a0:	80 83       	st	Z, r24
    26a2:	1e c0       	rjmp	.+60     	; 0x26e0 <PWM_u32TimerClock+0x1a2>
						break;
		case PWM_EXT_CLK_FALL	 :		Copy_u32TimerClk = EXT_CLOCK ;
    26a4:	8f ef       	ldi	r24, 0xFF	; 255
    26a6:	9f ef       	ldi	r25, 0xFF	; 255
    26a8:	af ef       	ldi	r26, 0xFF	; 255
    26aa:	bf ef       	ldi	r27, 0xFF	; 255
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	9a 83       	std	Y+2, r25	; 0x02
    26b0:	ab 83       	std	Y+3, r26	; 0x03
    26b2:	bc 83       	std	Y+4, r27	; 0x04
									//if( Copy_u8TimerNum == TIMER0 || Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B || Copy_u8TimerNum == TIMER1 )
									//{
										*Copy_pu8ClkSelectPrescalar = 6;
    26b4:	ef 81       	ldd	r30, Y+7	; 0x07
    26b6:	f8 85       	ldd	r31, Y+8	; 0x08
    26b8:	86 e0       	ldi	r24, 0x06	; 6
    26ba:	80 83       	st	Z, r24
    26bc:	11 c0       	rjmp	.+34     	; 0x26e0 <PWM_u32TimerClock+0x1a2>
										//break;
									//}
									//#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		case PWM_EXT_CLK_RISE	 :		Copy_u32TimerClk = EXT_CLOCK ;
    26be:	8f ef       	ldi	r24, 0xFF	; 255
    26c0:	9f ef       	ldi	r25, 0xFF	; 255
    26c2:	af ef       	ldi	r26, 0xFF	; 255
    26c4:	bf ef       	ldi	r27, 0xFF	; 255
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	9a 83       	std	Y+2, r25	; 0x02
    26ca:	ab 83       	std	Y+3, r26	; 0x03
    26cc:	bc 83       	std	Y+4, r27	; 0x04
									//if( Copy_u8TimerNum == TIMER0 || Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B || Copy_u8TimerNum == TIMER1 )
									//{
										*Copy_pu8ClkSelectPrescalar = 7;
    26ce:	ef 81       	ldd	r30, Y+7	; 0x07
    26d0:	f8 85       	ldd	r31, Y+8	; 0x08
    26d2:	87 e0       	ldi	r24, 0x07	; 7
    26d4:	80 83       	st	Z, r24
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <PWM_u32TimerClock+0x1a2>
									//	break;
									//}
									//#warning "External Clock is not supported in Timer2 , NO Clock mode is selected"
						break;
		default:	Copy_u32TimerClk = 0;
    26d8:	19 82       	std	Y+1, r1	; 0x01
    26da:	1a 82       	std	Y+2, r1	; 0x02
    26dc:	1b 82       	std	Y+3, r1	; 0x03
    26de:	1c 82       	std	Y+4, r1	; 0x04
					#warning "Unsupported Clock mode is selected , Timer is disabled"
	}

	return Copy_u32TimerClk ;
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	ab 81       	ldd	r26, Y+3	; 0x03
    26e6:	bc 81       	ldd	r27, Y+4	; 0x04

}
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	2a 96       	adiw	r28, 0x0a	; 10
    26ee:	0f b6       	in	r0, 0x3f	; 63
    26f0:	f8 94       	cli
    26f2:	de bf       	out	0x3e, r29	; 62
    26f4:	0f be       	out	0x3f, r0	; 63
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <PWM_enuSetClkPrescaler>:
	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif

ES_t PWM_enuSetClkPrescaler( u8 Copy_u8TimerNum , u8 Copy_u8PrescalerValue )
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
    2706:	2a 97       	sbiw	r28, 0x0a	; 10
    2708:	0f b6       	in	r0, 0x3f	; 63
    270a:	f8 94       	cli
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0f be       	out	0x3f, r0	; 63
    2710:	cd bf       	out	0x3d, r28	; 61
    2712:	88 87       	std	Y+8, r24	; 0x08
    2714:	69 87       	std	Y+9, r22	; 0x09
	ES_t Local_enuErrorState = ES_NOK;
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	8e 83       	std	Y+6, r24	; 0x06

	u8 Local_u8ClkSelectPrescaler = PWM_NO_CLK ;
    271a:	8a e0       	ldi	r24, 0x0A	; 10
    271c:	8f 83       	std	Y+7, r24	; 0x07
	u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    271e:	e9 e5       	ldi	r30, 0x59	; 89
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32TimerClk = PWM_u32TimerClock( Copy_u8TimerNum , Copy_u8PrescalerValue , &Local_u8ClkSelectPrescaler ) ;
    2726:	9e 01       	movw	r18, r28
    2728:	29 5f       	subi	r18, 0xF9	; 249
    272a:	3f 4f       	sbci	r19, 0xFF	; 255
    272c:	88 85       	ldd	r24, Y+8	; 0x08
    272e:	69 85       	ldd	r22, Y+9	; 0x09
    2730:	a9 01       	movw	r20, r18
    2732:	0e 94 9f 12 	call	0x253e	; 0x253e <PWM_u32TimerClock>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	89 83       	std	Y+1, r24	; 0x01
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	ab 83       	std	Y+3, r26	; 0x03
    2740:	bc 83       	std	Y+4, r27	; 0x04

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    2742:	88 85       	ldd	r24, Y+8	; 0x08
    2744:	89 3c       	cpi	r24, 0xC9	; 201
    2746:	19 f0       	breq	.+6      	; 0x274e <PWM_enuSetClkPrescaler+0x50>
    2748:	88 85       	ldd	r24, Y+8	; 0x08
    274a:	8a 3c       	cpi	r24, 0xCA	; 202
    274c:	19 f5       	brne	.+70     	; 0x2794 <PWM_enuSetClkPrescaler+0x96>
	{
		TIMSK &= ~( TC1_INT_EN_MASK ) ;								// Disable Timer1 Interrupts
    274e:	a9 e5       	ldi	r26, 0x59	; 89
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e9 e5       	ldi	r30, 0x59	; 89
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	83 7c       	andi	r24, 0xC3	; 195
    275a:	8c 93       	st	X, r24
		TCCR1B &= ~( CLK1_SEL_BITS_MASK );							// Masking Clock Select bits
    275c:	ae e4       	ldi	r26, 0x4E	; 78
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	ee e4       	ldi	r30, 0x4E	; 78
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	88 7f       	andi	r24, 0xF8	; 248
    2768:	8c 93       	st	X, r24
		TCCR1B |= ( Local_u8ClkSelectPrescaler  << CLK1_SEL_BITS );	// Setting New Prescaler
    276a:	ae e4       	ldi	r26, 0x4E	; 78
    276c:	b0 e0       	ldi	r27, 0x00	; 0
    276e:	ee e4       	ldi	r30, 0x4E	; 78
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	90 81       	ld	r25, Z
    2774:	8f 81       	ldd	r24, Y+7	; 0x07
    2776:	89 2b       	or	r24, r25
    2778:	8c 93       	st	X, r24
		Global_u32Timer1_Clk = Local_u32TimerClk ;					// Saving New Actual Timer1 Clock
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	ab 81       	ldd	r26, Y+3	; 0x03
    2780:	bc 81       	ldd	r27, Y+4	; 0x04
    2782:	80 93 25 02 	sts	0x0225, r24
    2786:	90 93 26 02 	sts	0x0226, r25
    278a:	a0 93 27 02 	sts	0x0227, r26
    278e:	b0 93 28 02 	sts	0x0228, r27
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <PWM_enuSetClkPrescaler+0x9a>
#ifndef PWM
		PWMs[ TIMER1A - TIMER1A ].ClkSelect = Copy_u8PrescalerValue ;
		PWMs[ TIMER1B - TIMER1A ].ClkSelect = Copy_u8PrescalerValue ;
#endif
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2794:	82 e0       	ldi	r24, 0x02	; 2
    2796:	8e 83       	std	Y+6, r24	; 0x06

	TIMSK = Local_u8CopyTIMSK ;										// Re-setting Timer Interrupt Mask Register to its initial Status
    2798:	e9 e5       	ldi	r30, 0x59	; 89
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	80 83       	st	Z, r24

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    27a0:	8e 81       	ldd	r24, Y+6	; 0x06
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	19 f0       	breq	.+6      	; 0x27ac <PWM_enuSetClkPrescaler+0xae>
    27a6:	8e 81       	ldd	r24, Y+6	; 0x06
    27a8:	8a 87       	std	Y+10, r24	; 0x0a
    27aa:	01 c0       	rjmp	.+2      	; 0x27ae <PWM_enuSetClkPrescaler+0xb0>
    27ac:	1a 86       	std	Y+10, r1	; 0x0a
    27ae:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    27b0:	2a 96       	adiw	r28, 0x0a	; 10
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	f8 94       	cli
    27b6:	de bf       	out	0x3e, r29	; 62
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	cd bf       	out	0x3d, r28	; 61
    27bc:	cf 91       	pop	r28
    27be:	df 91       	pop	r29
    27c0:	08 95       	ret

000027c2 <PWM_enuSetCOM_Mode>:

	return Local_enuErrorState ;
}
#endif
ES_t PWM_enuSetCOM_Mode( u8 Copy_u8TimerNum , u8 Copy_u8COM_Mode )
{
    27c2:	df 93       	push	r29
    27c4:	cf 93       	push	r28
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <PWM_enuSetCOM_Mode+0x6>
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <PWM_enuSetCOM_Mode+0x8>
    27ca:	0f 92       	push	r0
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	8b 83       	std	Y+3, r24	; 0x03
    27d2:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8CopyTIMSK = TIMSK ;														// Saving a Copy of Timer Interrupt Mask Register
    27d8:	e9 e5       	ldi	r30, 0x59	; 89
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8COM_Mode == COMP_NON_INVERTED ||	Copy_u8COM_Mode == COMP_INVERTED )
    27e0:	8c 81       	ldd	r24, Y+4	; 0x04
    27e2:	86 31       	cpi	r24, 0x16	; 22
    27e4:	21 f0       	breq	.+8      	; 0x27ee <PWM_enuSetCOM_Mode+0x2c>
    27e6:	8c 81       	ldd	r24, Y+4	; 0x04
    27e8:	87 31       	cpi	r24, 0x17	; 23
    27ea:	09 f0       	breq	.+2      	; 0x27ee <PWM_enuSetCOM_Mode+0x2c>
    27ec:	52 c0       	rjmp	.+164    	; 0x2892 <PWM_enuSetCOM_Mode+0xd0>
	{
		if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	89 3c       	cpi	r24, 0xC9	; 201
    27f2:	21 f0       	breq	.+8      	; 0x27fc <PWM_enuSetCOM_Mode+0x3a>
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	8a 3c       	cpi	r24, 0xCA	; 202
    27f8:	09 f0       	breq	.+2      	; 0x27fc <PWM_enuSetCOM_Mode+0x3a>
    27fa:	44 c0       	rjmp	.+136    	; 0x2884 <PWM_enuSetCOM_Mode+0xc2>
		{
			TIMSK &= ~( TC1_INT_EN_MASK ) ;													// Disable Timer1 Interrupts
    27fc:	a9 e5       	ldi	r26, 0x59	; 89
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e9 e5       	ldi	r30, 0x59	; 89
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	83 7c       	andi	r24, 0xC3	; 195
    2808:	8c 93       	st	X, r24
			if( Copy_u8TimerNum == TIMER1A )
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	89 3c       	cpi	r24, 0xC9	; 201
    280e:	e9 f4       	brne	.+58     	; 0x284a <PWM_enuSetCOM_Mode+0x88>
			{
				TCCR1A &= ~( COM1A_SEL_BITS_MASK ) ;										// Masking COM Select bits
    2810:	af e4       	ldi	r26, 0x4F	; 79
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	ef e4       	ldi	r30, 0x4F	; 79
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 73       	andi	r24, 0x3F	; 63
    281c:	8c 93       	st	X, r24
				TCCR1A |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COM1A_SEL_BITS ) ;			// Setting New Compare Output Mode
    281e:	af e4       	ldi	r26, 0x4F	; 79
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	ef e4       	ldi	r30, 0x4F	; 79
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	28 2f       	mov	r18, r24
    282a:	8c 81       	ldd	r24, Y+4	; 0x04
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	44 97       	sbiw	r24, 0x14	; 20
    2832:	00 24       	eor	r0, r0
    2834:	96 95       	lsr	r25
    2836:	87 95       	ror	r24
    2838:	07 94       	ror	r0
    283a:	96 95       	lsr	r25
    283c:	87 95       	ror	r24
    283e:	07 94       	ror	r0
    2840:	98 2f       	mov	r25, r24
    2842:	80 2d       	mov	r24, r0
    2844:	82 2b       	or	r24, r18
    2846:	8c 93       	st	X, r24
    2848:	1f c0       	rjmp	.+62     	; 0x2888 <PWM_enuSetCOM_Mode+0xc6>
#ifndef PWM
				PWMs[ TIMER1A - TIMER1A ].CompOutMode = Copy_u8COM_Mode ;
#endif
			}
			else if( Copy_u8TimerNum == TIMER1B )
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	8a 3c       	cpi	r24, 0xCA	; 202
    284e:	e1 f4       	brne	.+56     	; 0x2888 <PWM_enuSetCOM_Mode+0xc6>
			{
				TCCR1B &= ~( COM1B_SEL_BITS_MASK ) ;										// Masking COM Select bits
    2850:	ae e4       	ldi	r26, 0x4E	; 78
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	ee e4       	ldi	r30, 0x4E	; 78
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	8f 7c       	andi	r24, 0xCF	; 207
    285c:	8c 93       	st	X, r24
				TCCR1B |= ( ( Copy_u8COM_Mode - COMP_NORMAL) << COM1B_SEL_BITS ) ;			// Setting New Compare Output Mode
    285e:	ae e4       	ldi	r26, 0x4E	; 78
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	ee e4       	ldi	r30, 0x4E	; 78
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	28 2f       	mov	r18, r24
    286a:	8c 81       	ldd	r24, Y+4	; 0x04
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	44 97       	sbiw	r24, 0x14	; 20
    2872:	82 95       	swap	r24
    2874:	92 95       	swap	r25
    2876:	90 7f       	andi	r25, 0xF0	; 240
    2878:	98 27       	eor	r25, r24
    287a:	80 7f       	andi	r24, 0xF0	; 240
    287c:	98 27       	eor	r25, r24
    287e:	82 2b       	or	r24, r18
    2880:	8c 93       	st	X, r24
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <PWM_enuSetCOM_Mode+0xc6>
			else
			{
				#warning "Timer_enuSetCOM_Mode() : For setting COM mode please Specify TIMER1A / TIMER1B , TIMER1 choice is not allowed. No Action Taken. "
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    2884:	82 e0       	ldi	r24, 0x02	; 2
    2886:	8a 83       	std	Y+2, r24	; 0x02

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    2888:	e9 e5       	ldi	r30, 0x59	; 89
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	80 83       	st	Z, r24
    2890:	02 c0       	rjmp	.+4      	; 0x2896 <PWM_enuSetCOM_Mode+0xd4>

	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE ;
    2892:	82 e0       	ldi	r24, 0x02	; 2
    2894:	8a 83       	std	Y+2, r24	; 0x02
		#warning "PWM_enuSetCOM_Mode(): Non Supported Compare Output mode, No Action Taken ."
	}


	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	19 f0       	breq	.+6      	; 0x28a2 <PWM_enuSetCOM_Mode+0xe0>
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	8d 83       	std	Y+5, r24	; 0x05
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <PWM_enuSetCOM_Mode+0xe2>
    28a2:	1d 82       	std	Y+5, r1	; 0x05
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <PWM_enuSetWGM_Mode>:
	return Local_enuErrorState ;
}
#endif

ES_t PWM_enuSetWGM_Mode( u8 Copy_u8TimerNum , u8 Copy_u8WGM_Mode )
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <PWM_enuSetWGM_Mode+0x6>
    28bc:	00 d0       	rcall	.+0      	; 0x28be <PWM_enuSetWGM_Mode+0x8>
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <PWM_enuSetWGM_Mode+0xa>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	8c 83       	std	Y+4, r24	; 0x04
    28c6:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	8b 83       	std	Y+3, r24	; 0x03


	if( Copy_u8WGM_Mode > WGM_MODE_00	&& Copy_u8WGM_Mode <= WGM_FAST_OCR1A &&
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	85 36       	cpi	r24, 0x65	; 101
    28d0:	08 f4       	brcc	.+2      	; 0x28d4 <PWM_enuSetWGM_Mode+0x1e>
    28d2:	6a c0       	rjmp	.+212    	; 0x29a8 <PWM_enuSetWGM_Mode+0xf2>
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	84 37       	cpi	r24, 0x74	; 116
    28d8:	08 f0       	brcs	.+2      	; 0x28dc <PWM_enuSetWGM_Mode+0x26>
    28da:	66 c0       	rjmp	.+204    	; 0x29a8 <PWM_enuSetWGM_Mode+0xf2>
    28dc:	8d 81       	ldd	r24, Y+5	; 0x05
    28de:	88 36       	cpi	r24, 0x68	; 104
    28e0:	09 f4       	brne	.+2      	; 0x28e4 <PWM_enuSetWGM_Mode+0x2e>
    28e2:	62 c0       	rjmp	.+196    	; 0x29a8 <PWM_enuSetWGM_Mode+0xf2>
    28e4:	8d 81       	ldd	r24, Y+5	; 0x05
    28e6:	80 37       	cpi	r24, 0x70	; 112
    28e8:	09 f4       	brne	.+2      	; 0x28ec <PWM_enuSetWGM_Mode+0x36>
    28ea:	5e c0       	rjmp	.+188    	; 0x29a8 <PWM_enuSetWGM_Mode+0xf2>
    28ec:	8d 81       	ldd	r24, Y+5	; 0x05
    28ee:	81 37       	cpi	r24, 0x71	; 113
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <PWM_enuSetWGM_Mode+0x3e>
    28f2:	5a c0       	rjmp	.+180    	; 0x29a8 <PWM_enuSetWGM_Mode+0xf2>
		Copy_u8WGM_Mode != WGM_MODE_04	&& Copy_u8WGM_Mode != WGM_MODE_12 && Copy_u8WGM_Mode != WGM_MODE_13 )
	{

		u8 Local_u8CopyTIMSK = TIMSK ;									// Saving a Copy of Timer Interrupt Mask Register
    28f4:	e9 e5       	ldi	r30, 0x59	; 89
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	8a 83       	std	Y+2, r24	; 0x02

		if( ( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B ) &&
    28fc:	8c 81       	ldd	r24, Y+4	; 0x04
    28fe:	89 3c       	cpi	r24, 0xC9	; 201
    2900:	21 f0       	breq	.+8      	; 0x290a <PWM_enuSetWGM_Mode+0x54>
    2902:	8c 81       	ldd	r24, Y+4	; 0x04
    2904:	8a 3c       	cpi	r24, 0xCA	; 202
    2906:	09 f0       	breq	.+2      	; 0x290a <PWM_enuSetWGM_Mode+0x54>
    2908:	48 c0       	rjmp	.+144    	; 0x299a <PWM_enuSetWGM_Mode+0xe4>
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	85 36       	cpi	r24, 0x65	; 101
    290e:	08 f4       	brcc	.+2      	; 0x2912 <PWM_enuSetWGM_Mode+0x5c>
    2910:	44 c0       	rjmp	.+136    	; 0x299a <PWM_enuSetWGM_Mode+0xe4>
    2912:	8d 81       	ldd	r24, Y+5	; 0x05
    2914:	84 37       	cpi	r24, 0x74	; 116
    2916:	08 f0       	brcs	.+2      	; 0x291a <PWM_enuSetWGM_Mode+0x64>
    2918:	40 c0       	rjmp	.+128    	; 0x299a <PWM_enuSetWGM_Mode+0xe4>
    291a:	8d 81       	ldd	r24, Y+5	; 0x05
    291c:	88 36       	cpi	r24, 0x68	; 104
    291e:	e9 f1       	breq	.+122    	; 0x299a <PWM_enuSetWGM_Mode+0xe4>
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	80 37       	cpi	r24, 0x70	; 112
    2924:	d1 f1       	breq	.+116    	; 0x299a <PWM_enuSetWGM_Mode+0xe4>
    2926:	8d 81       	ldd	r24, Y+5	; 0x05
    2928:	81 37       	cpi	r24, 0x71	; 113
    292a:	b9 f1       	breq	.+110    	; 0x299a <PWM_enuSetWGM_Mode+0xe4>
			Copy_u8WGM_Mode > WGM_MODE_00	&& Copy_u8WGM_Mode <= WGM_FAST_OCR1A &&
			Copy_u8WGM_Mode != WGM_MODE_04	&& Copy_u8WGM_Mode != WGM_MODE_12 && Copy_u8WGM_Mode != WGM_MODE_13 )
		{
			u8 Local_u8WGM = Copy_u8WGM_Mode - WGM_MODE_00 ;
    292c:	8d 81       	ldd	r24, Y+5	; 0x05
    292e:	84 56       	subi	r24, 0x64	; 100
    2930:	89 83       	std	Y+1, r24	; 0x01
			TIMSK &= ~( TC1_INT_EN_MASK ) ;													// Disable Timer1 Interrupts
    2932:	a9 e5       	ldi	r26, 0x59	; 89
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e9 e5       	ldi	r30, 0x59	; 89
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	83 7c       	andi	r24, 0xC3	; 195
    293e:	8c 93       	st	X, r24
			TCCR1B &= ~( WGM1B_SEL_BITS_MASK );												// Masking WGM1B Select bits
    2940:	ae e4       	ldi	r26, 0x4E	; 78
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	ee e4       	ldi	r30, 0x4E	; 78
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	87 7e       	andi	r24, 0xE7	; 231
    294c:	8c 93       	st	X, r24
			TCCR1A |= ( ( Local_u8WGM & _TWO_BITS_MASK_ ) << WGM1A_SEL_BITS );				// Setting WGM10 & WGM11 Select bits
    294e:	af e4       	ldi	r26, 0x4F	; 79
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	ef e4       	ldi	r30, 0x4F	; 79
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	98 2f       	mov	r25, r24
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	83 70       	andi	r24, 0x03	; 3
    295e:	89 2b       	or	r24, r25
    2960:	8c 93       	st	X, r24
			TCCR1B |= ( ( ( Local_u8WGM >> BIT1_MASK) & _TWO_BITS_MASK_ ) << WGM1B_SEL_BITS );// Setting WGM12 & WGM13 Select bits
    2962:	ae e4       	ldi	r26, 0x4E	; 78
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	ee e4       	ldi	r30, 0x4E	; 78
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	28 2f       	mov	r18, r24
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	86 95       	lsr	r24
    2972:	86 95       	lsr	r24
    2974:	88 2f       	mov	r24, r24
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	83 70       	andi	r24, 0x03	; 3
    297a:	90 70       	andi	r25, 0x00	; 0
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	82 2b       	or	r24, r18
    298a:	8c 93       	st	X, r24
			PWMs[ TIMER1A - TIMER1A ].WaveGenMode = Copy_u8WGM_Mode ;
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	80 93 87 01 	sts	0x0187, r24
			PWMs[ TIMER1B - TIMER1A ].WaveGenMode = Copy_u8WGM_Mode ;
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	80 93 8c 01 	sts	0x018C, r24
    2998:	02 c0       	rjmp	.+4      	; 0x299e <PWM_enuSetWGM_Mode+0xe8>
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	8b 83       	std	Y+3, r24	; 0x03

		TIMSK = Local_u8CopyTIMSK ;															// Re-setting Timer Interrupt Mask Register to its Status
    299e:	e9 e5       	ldi	r30, 0x59	; 89
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	80 83       	st	Z, r24
    29a6:	02 c0       	rjmp	.+4      	; 0x29ac <PWM_enuSetWGM_Mode+0xf6>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    29a8:	82 e0       	ldi	r24, 0x02	; 2
    29aa:	8b 83       	std	Y+3, r24	; 0x03

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	81 30       	cpi	r24, 0x01	; 1
    29b0:	19 f0       	breq	.+6      	; 0x29b8 <PWM_enuSetWGM_Mode+0x102>
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	8e 83       	std	Y+6, r24	; 0x06
    29b6:	01 c0       	rjmp	.+2      	; 0x29ba <PWM_enuSetWGM_Mode+0x104>
    29b8:	1e 82       	std	Y+6, r1	; 0x06
    29ba:	8e 81       	ldd	r24, Y+6	; 0x06
}
    29bc:	26 96       	adiw	r28, 0x06	; 6
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <PWM_enuSetOCRnValue>:
	}
	return Local_enuErrorState ;
}
#endif
ES_t PWM_enuSetOCRnValue( u8 Copy_u8TimerNum , u16 Copy_u16OCRnValue )
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	27 97       	sbiw	r28, 0x07	; 7
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	8c 83       	std	Y+4, r24	; 0x04
    29e4:	7e 83       	std	Y+6, r23	; 0x06
    29e6:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	8b 83       	std	Y+3, r24	; 0x03

	if( Copy_u8TimerNum == TIMER1A && Copy_u16OCRnValue <= Timer1Max )
    29ec:	8c 81       	ldd	r24, Y+4	; 0x04
    29ee:	89 3c       	cpi	r24, 0xC9	; 201
    29f0:	21 f5       	brne	.+72     	; 0x2a3a <PWM_enuSetOCRnValue+0x6c>
    29f2:	20 91 82 01 	lds	r18, 0x0182
    29f6:	30 91 83 01 	lds	r19, 0x0183
    29fa:	8d 81       	ldd	r24, Y+5	; 0x05
    29fc:	9e 81       	ldd	r25, Y+6	; 0x06
    29fe:	28 17       	cp	r18, r24
    2a00:	39 07       	cpc	r19, r25
    2a02:	d8 f0       	brcs	.+54     	; 0x2a3a <PWM_enuSetOCRnValue+0x6c>
	{
		u8 Local_u8Temp = SREG ;
    2a04:	ef e5       	ldi	r30, 0x5F	; 95
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	80 81       	ld	r24, Z
    2a0a:	8a 83       	std	Y+2, r24	; 0x02
		_CLI_;
    2a0c:	f8 94       	cli
		OCR1AH  = Copy_u16OCRnValue >> 8 ;
    2a0e:	eb e4       	ldi	r30, 0x4B	; 75
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	8d 81       	ldd	r24, Y+5	; 0x05
    2a14:	9e 81       	ldd	r25, Y+6	; 0x06
    2a16:	89 2f       	mov	r24, r25
    2a18:	99 27       	eor	r25, r25
    2a1a:	80 83       	st	Z, r24
		OCR1AL 	= Copy_u16OCRnValue ;
    2a1c:	ea e4       	ldi	r30, 0x4A	; 74
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	80 83       	st	Z, r24
		SREG = Local_u8Temp;
    2a24:	ef e5       	ldi	r30, 0x5F	; 95
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	80 83       	st	Z, r24
		Global_u16OCR1A_Value = Copy_u16OCRnValue ;
    2a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a30:	90 93 20 02 	sts	0x0220, r25
    2a34:	80 93 1f 02 	sts	0x021F, r24
    2a38:	29 c0       	rjmp	.+82     	; 0x2a8c <PWM_enuSetOCRnValue+0xbe>
	}
	else if( Copy_u8TimerNum == TIMER1B && Copy_u16OCRnValue <= Timer1Max )
    2a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3c:	8a 3c       	cpi	r24, 0xCA	; 202
    2a3e:	21 f5       	brne	.+72     	; 0x2a88 <PWM_enuSetOCRnValue+0xba>
    2a40:	20 91 82 01 	lds	r18, 0x0182
    2a44:	30 91 83 01 	lds	r19, 0x0183
    2a48:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4c:	28 17       	cp	r18, r24
    2a4e:	39 07       	cpc	r19, r25
    2a50:	d8 f0       	brcs	.+54     	; 0x2a88 <PWM_enuSetOCRnValue+0xba>
	{
		u8 Local_u8Temp = SREG ;
    2a52:	ef e5       	ldi	r30, 0x5F	; 95
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	89 83       	std	Y+1, r24	; 0x01
		_CLI_;
    2a5a:	f8 94       	cli
		OCR1BH  = Copy_u16OCRnValue >> 8 ;
    2a5c:	e9 e4       	ldi	r30, 0x49	; 73
    2a5e:	f0 e0       	ldi	r31, 0x00	; 0
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	89 2f       	mov	r24, r25
    2a66:	99 27       	eor	r25, r25
    2a68:	80 83       	st	Z, r24
		OCR1BL 	= Copy_u16OCRnValue ;
    2a6a:	e8 e4       	ldi	r30, 0x48	; 72
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a70:	80 83       	st	Z, r24
		SREG = Local_u8Temp;
    2a72:	ef e5       	ldi	r30, 0x5F	; 95
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	80 83       	st	Z, r24
		Global_u16OCR1B_Value = Copy_u16OCRnValue ;
    2a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7e:	90 93 22 02 	sts	0x0222, r25
    2a82:	80 93 21 02 	sts	0x0221, r24
    2a86:	02 c0       	rjmp	.+4      	; 0x2a8c <PWM_enuSetOCRnValue+0xbe>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	8b 83       	std	Y+3, r24	; 0x03

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    2a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8e:	81 30       	cpi	r24, 0x01	; 1
    2a90:	19 f0       	breq	.+6      	; 0x2a98 <PWM_enuSetOCRnValue+0xca>
    2a92:	8b 81       	ldd	r24, Y+3	; 0x03
    2a94:	8f 83       	std	Y+7, r24	; 0x07
    2a96:	01 c0       	rjmp	.+2      	; 0x2a9a <PWM_enuSetOCRnValue+0xcc>
    2a98:	1f 82       	std	Y+7, r1	; 0x07
    2a9a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2a9c:	27 96       	adiw	r28, 0x07	; 7
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <PWM_enuSetICR1Value>:

		return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
}
#endif
ES_t PWM_enuSetICR1Value( u16 Copy_u16ICR1Value )
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <PWM_enuSetICR1Value+0x6>
    2ab4:	0f 92       	push	r0
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	9b 83       	std	Y+3, r25	; 0x03
    2abc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Temp = SREG ;
    2abe:	ef e5       	ldi	r30, 0x5F	; 95
    2ac0:	f0 e0       	ldi	r31, 0x00	; 0
    2ac2:	80 81       	ld	r24, Z
    2ac4:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;
    2ac6:	f8 94       	cli
	ICR1H = Copy_u16ICR1Value >> 8 ;
    2ac8:	e7 e4       	ldi	r30, 0x47	; 71
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	89 2f       	mov	r24, r25
    2ad2:	99 27       	eor	r25, r25
    2ad4:	80 83       	st	Z, r24
	ICR1L = Copy_u16ICR1Value ;
    2ad6:	e6 e4       	ldi	r30, 0x46	; 70
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	8a 81       	ldd	r24, Y+2	; 0x02
    2adc:	80 83       	st	Z, r24
	SREG = Local_u8Temp;
    2ade:	ef e5       	ldi	r30, 0x5F	; 95
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	80 83       	st	Z, r24
	Global_u16ICR1_Value = Copy_u16ICR1Value ;
    2ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aea:	90 93 24 02 	sts	0x0224, r25
    2aee:	80 93 23 02 	sts	0x0223, r24
	return ES_OK;
    2af2:	80 e0       	ldi	r24, 0x00	; 0
}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	cf 91       	pop	r28
    2afc:	df 91       	pop	r29
    2afe:	08 95       	ret

00002b00 <PWM_enuSetInterruptMode>:

ES_t PWM_enuSetInterruptMode( u8 Copy_u8TimerNum , u8 Copy_u8TimerInterruptMode )
{
    2b00:	df 93       	push	r29
    2b02:	cf 93       	push	r28
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	27 97       	sbiw	r28, 0x07	; 7
    2b0a:	0f b6       	in	r0, 0x3f	; 63
    2b0c:	f8 94       	cli
    2b0e:	de bf       	out	0x3e, r29	; 62
    2b10:	0f be       	out	0x3f, r0	; 63
    2b12:	cd bf       	out	0x3d, r28	; 61
    2b14:	8c 83       	std	Y+4, r24	; 0x04
    2b16:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK ;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	8b 83       	std	Y+3, r24	; 0x03

	if( ( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B ) &&
    2b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1e:	89 3c       	cpi	r24, 0xC9	; 201
    2b20:	21 f0       	breq	.+8      	; 0x2b2a <PWM_enuSetInterruptMode+0x2a>
    2b22:	8c 81       	ldd	r24, Y+4	; 0x04
    2b24:	8a 3c       	cpi	r24, 0xCA	; 202
    2b26:	09 f0       	breq	.+2      	; 0x2b2a <PWM_enuSetInterruptMode+0x2a>
    2b28:	79 c0       	rjmp	.+242    	; 0x2c1c <PWM_enuSetInterruptMode+0x11c>
    2b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b2c:	83 33       	cpi	r24, 0x33	; 51
    2b2e:	21 f0       	breq	.+8      	; 0x2b38 <PWM_enuSetInterruptMode+0x38>
    2b30:	8d 81       	ldd	r24, Y+5	; 0x05
    2b32:	84 33       	cpi	r24, 0x34	; 52
    2b34:	09 f0       	breq	.+2      	; 0x2b38 <PWM_enuSetInterruptMode+0x38>
    2b36:	72 c0       	rjmp	.+228    	; 0x2c1c <PWM_enuSetInterruptMode+0x11c>
		( Copy_u8TimerInterruptMode == PWM_OVERFLOW_INT || Copy_u8TimerInterruptMode == PWM_OUT_COMP_INT ) )
	{
		u8 Local_u8Iter = 0 , Local_u8Updated = 0 ;
    2b38:	1a 82       	std	Y+2, r1	; 0x02
    2b3a:	19 82       	std	Y+1, r1	; 0x01

		switch( Copy_u8TimerInterruptMode )
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	3f 83       	std	Y+7, r19	; 0x07
    2b44:	2e 83       	std	Y+6, r18	; 0x06
    2b46:	8e 81       	ldd	r24, Y+6	; 0x06
    2b48:	9f 81       	ldd	r25, Y+7	; 0x07
    2b4a:	83 33       	cpi	r24, 0x33	; 51
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	31 f0       	breq	.+12     	; 0x2b5c <PWM_enuSetInterruptMode+0x5c>
    2b50:	2e 81       	ldd	r18, Y+6	; 0x06
    2b52:	3f 81       	ldd	r19, Y+7	; 0x07
    2b54:	24 33       	cpi	r18, 0x34	; 52
    2b56:	31 05       	cpc	r19, r1
    2b58:	19 f1       	breq	.+70     	; 0x2ba0 <PWM_enuSetInterruptMode+0xa0>
    2b5a:	32 c0       	rjmp	.+100    	; 0x2bc0 <PWM_enuSetInterruptMode+0xc0>
		{
			case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1 );					/*	Enable TOIE1 Interrupt */
    2b5c:	e9 e5       	ldi	r30, 0x59	; 89
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	a9 e5       	ldi	r26, 0x59	; 89
    2b62:	b0 e0       	ldi	r27, 0x00	; 0
    2b64:	8c 91       	ld	r24, X
    2b66:	80 83       	st	Z, r24
										for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2b68:	1a 82       	std	Y+2, r1	; 0x02
    2b6a:	12 c0       	rjmp	.+36     	; 0x2b90 <PWM_enuSetInterruptMode+0x90>
										{
											PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
    2b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6e:	28 2f       	mov	r18, r24
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	c9 01       	movw	r24, r18
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	82 0f       	add	r24, r18
    2b7e:	93 1f       	adc	r25, r19
    2b80:	fc 01       	movw	r30, r24
    2b82:	e8 57       	subi	r30, 0x78	; 120
    2b84:	fe 4f       	sbci	r31, 0xFE	; 254
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	80 83       	st	Z, r24
		u8 Local_u8Iter = 0 , Local_u8Updated = 0 ;

		switch( Copy_u8TimerInterruptMode )
		{
			case PWM_OVERFLOW_INT	:	SET_BIT( TIMSK , TOIE1 );					/*	Enable TOIE1 Interrupt */
										for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	8f 5f       	subi	r24, 0xFF	; 255
    2b8e:	8a 83       	std	Y+2, r24	; 0x02
    2b90:	90 91 81 01 	lds	r25, 0x0181
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	89 17       	cp	r24, r25
    2b98:	48 f3       	brcs	.-46     	; 0x2b6c <PWM_enuSetInterruptMode+0x6c>
										{
											PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
										}
										Local_u8Updated = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	89 83       	std	Y+1, r24	; 0x01
    2b9e:	10 c0       	rjmp	.+32     	; 0x2bc0 <PWM_enuSetInterruptMode+0xc0>
										break;
			case PWM_OUT_COMP_INT	:	if( Copy_u8TimerNum == TIMER1B )
    2ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ba2:	8a 3c       	cpi	r24, 0xCA	; 202
    2ba4:	39 f4       	brne	.+14     	; 0x2bb4 <PWM_enuSetInterruptMode+0xb4>
										{
											SET_BIT( TIMSK , OCIE1B );				/*	Enable OCIE1B Interrupt */
    2ba6:	e9 e5       	ldi	r30, 0x59	; 89
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	a9 e5       	ldi	r26, 0x59	; 89
    2bac:	b0 e0       	ldi	r27, 0x00	; 0
    2bae:	8c 91       	ld	r24, X
    2bb0:	80 83       	st	Z, r24
    2bb2:	06 c0       	rjmp	.+12     	; 0x2bc0 <PWM_enuSetInterruptMode+0xc0>
										}
										else
										{
											SET_BIT( TIMSK , OCIE1A );				/*	Enable OCIE1A Interrupt */
    2bb4:	e9 e5       	ldi	r30, 0x59	; 89
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	a9 e5       	ldi	r26, 0x59	; 89
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	8c 91       	ld	r24, X
    2bbe:	80 83       	st	Z, r24
										}
										break;
		}
		if( !Local_u8Updated )
    2bc0:	89 81       	ldd	r24, Y+1	; 0x01
    2bc2:	88 23       	and	r24, r24
    2bc4:	69 f5       	brne	.+90     	; 0x2c20 <PWM_enuSetInterruptMode+0x120>
		{
			for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2bc6:	1a 82       	std	Y+2, r1	; 0x02
    2bc8:	23 c0       	rjmp	.+70     	; 0x2c10 <PWM_enuSetInterruptMode+0x110>
			{
				if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	28 2f       	mov	r18, r24
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	88 0f       	add	r24, r24
    2bd8:	99 1f       	adc	r25, r25
    2bda:	82 0f       	add	r24, r18
    2bdc:	93 1f       	adc	r25, r19
    2bde:	fc 01       	movw	r30, r24
    2be0:	ec 57       	subi	r30, 0x7C	; 124
    2be2:	fe 4f       	sbci	r31, 0xFE	; 254
    2be4:	90 81       	ld	r25, Z
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	98 17       	cp	r25, r24
    2bea:	79 f4       	brne	.+30     	; 0x2c0a <PWM_enuSetInterruptMode+0x10a>
				{
					PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	82 0f       	add	r24, r18
    2bfe:	93 1f       	adc	r25, r19
    2c00:	fc 01       	movw	r30, r24
    2c02:	e8 57       	subi	r30, 0x78	; 120
    2c04:	fe 4f       	sbci	r31, 0xFE	; 254
    2c06:	8d 81       	ldd	r24, Y+5	; 0x05
    2c08:	80 83       	st	Z, r24
										}
										break;
		}
		if( !Local_u8Updated )
		{
			for( Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	8f 5f       	subi	r24, 0xFF	; 255
    2c0e:	8a 83       	std	Y+2, r24	; 0x02
    2c10:	90 91 81 01 	lds	r25, 0x0181
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	89 17       	cp	r24, r25
    2c18:	c0 f2       	brcs	.-80     	; 0x2bca <PWM_enuSetInterruptMode+0xca>
    2c1a:	02 c0       	rjmp	.+4      	; 0x2c20 <PWM_enuSetInterruptMode+0x120>
					PWMs[Local_u8Iter].InterruptMode = Copy_u8TimerInterruptMode ;
				}
			}
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    2c1c:	82 e0       	ldi	r24, 0x02	; 2
    2c1e:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c22:	27 96       	adiw	r28, 0x07	; 7
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <PWM_enuGetInterruptMode>:

ES_t PWM_enuGetInterruptMode( u8 Copy_u8TimerNum , u8 *Copy_pu8TimerInterruptMode )
{
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <PWM_enuGetInterruptMode+0x6>
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <PWM_enuGetInterruptMode+0x8>
    2c3c:	0f 92       	push	r0
    2c3e:	cd b7       	in	r28, 0x3d	; 61
    2c40:	de b7       	in	r29, 0x3e	; 62
    2c42:	8b 83       	std	Y+3, r24	; 0x03
    2c44:	7d 83       	std	Y+5, r23	; 0x05
    2c46:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	8a 83       	std	Y+2, r24	; 0x02

	if( Copy_pu8TimerInterruptMode != NULL )
    2c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c50:	00 97       	sbiw	r24, 0x00	; 0
    2c52:	b1 f1       	breq	.+108    	; 0x2cc0 <PWM_enuGetInterruptMode+0x8c>
	{
		if( Copy_u8TimerNum == TIMER1A	|| Copy_u8TimerNum == TIMER1A )
    2c54:	8b 81       	ldd	r24, Y+3	; 0x03
    2c56:	89 3c       	cpi	r24, 0xC9	; 201
    2c58:	19 f0       	breq	.+6      	; 0x2c60 <PWM_enuGetInterruptMode+0x2c>
    2c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5c:	89 3c       	cpi	r24, 0xC9	; 201
    2c5e:	69 f5       	brne	.+90     	; 0x2cba <PWM_enuGetInterruptMode+0x86>
		{
			for( u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2c60:	19 82       	std	Y+1, r1	; 0x01
    2c62:	25 c0       	rjmp	.+74     	; 0x2cae <PWM_enuGetInterruptMode+0x7a>
			{
				if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2c64:	89 81       	ldd	r24, Y+1	; 0x01
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	c9 01       	movw	r24, r18
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	82 0f       	add	r24, r18
    2c76:	93 1f       	adc	r25, r19
    2c78:	fc 01       	movw	r30, r24
    2c7a:	ec 57       	subi	r30, 0x7C	; 124
    2c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7e:	90 81       	ld	r25, Z
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	98 17       	cp	r25, r24
    2c84:	89 f4       	brne	.+34     	; 0x2ca8 <PWM_enuGetInterruptMode+0x74>
				{
					*Copy_pu8TimerInterruptMode = PWMs[Local_u8Iter].InterruptMode ;
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	c9 01       	movw	r24, r18
    2c8e:	88 0f       	add	r24, r24
    2c90:	99 1f       	adc	r25, r25
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	82 0f       	add	r24, r18
    2c98:	93 1f       	adc	r25, r19
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	e8 57       	subi	r30, 0x78	; 120
    2c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca0:	80 81       	ld	r24, Z
    2ca2:	ec 81       	ldd	r30, Y+4	; 0x04
    2ca4:	fd 81       	ldd	r31, Y+5	; 0x05
    2ca6:	80 83       	st	Z, r24

	if( Copy_pu8TimerInterruptMode != NULL )
	{
		if( Copy_u8TimerNum == TIMER1A	|| Copy_u8TimerNum == TIMER1A )
		{
			for( u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++  )
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	8f 5f       	subi	r24, 0xFF	; 255
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	90 91 81 01 	lds	r25, 0x0181
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	89 17       	cp	r24, r25
    2cb6:	b0 f2       	brcs	.-84     	; 0x2c64 <PWM_enuGetInterruptMode+0x30>
    2cb8:	05 c0       	rjmp	.+10     	; 0x2cc4 <PWM_enuGetInterruptMode+0x90>
				{
					*Copy_pu8TimerInterruptMode = PWMs[Local_u8Iter].InterruptMode ;
				}
			}
		}
		else Local_enuErrorState = ES_OUT_RANGE ;
    2cba:	82 e0       	ldi	r24, 0x02	; 2
    2cbc:	8a 83       	std	Y+2, r24	; 0x02
    2cbe:	02 c0       	rjmp	.+4      	; 0x2cc4 <PWM_enuGetInterruptMode+0x90>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    2cc0:	83 e0       	ldi	r24, 0x03	; 3
    2cc2:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState;
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	cf 91       	pop	r28
    2cd2:	df 91       	pop	r29
    2cd4:	08 95       	ret

00002cd6 <PWM_enuSetDutyCycle>:

ES_t PWM_enuSetDutyCycle( u8 Copy_u8TimerNum , f32 Copy_f32DutyCycle )
{
    2cd6:	ef 92       	push	r14
    2cd8:	ff 92       	push	r15
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	6d 97       	sbiw	r28, 0x1d	; 29
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	8c 87       	std	Y+12, r24	; 0x0c
    2cf4:	4d 87       	std	Y+13, r20	; 0x0d
    2cf6:	5e 87       	std	Y+14, r21	; 0x0e
    2cf8:	6f 87       	std	Y+15, r22	; 0x0f
    2cfa:	78 8b       	std	Y+16, r23	; 0x10
	ES_t Local_enuErrorState = ES_NOK;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	8b 87       	std	Y+11, r24	; 0x0b

	u8 Local_u8TimerWGM_Mode , Local_u8TimerCOM_Mode , Local_u8Flag = 0 ;
    2d00:	18 86       	std	Y+8, r1	; 0x08
	u16 Local_u16TimerTop , Local_u16OCRValue ;

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
    2d02:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d04:	89 3c       	cpi	r24, 0xC9	; 201
    2d06:	21 f0       	breq	.+8      	; 0x2d10 <PWM_enuSetDutyCycle+0x3a>
    2d08:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d0a:	8a 3c       	cpi	r24, 0xCA	; 202
    2d0c:	09 f0       	breq	.+2      	; 0x2d10 <PWM_enuSetDutyCycle+0x3a>
    2d0e:	62 c7       	rjmp	.+3780   	; 0x3bd4 <PWM_enuSetDutyCycle+0xefe>
	{
		for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2d10:	1b 82       	std	Y+3, r1	; 0x03
    2d12:	32 c0       	rjmp	.+100    	; 0x2d78 <PWM_enuSetDutyCycle+0xa2>
		{
			if( PWMs[Local_u8Iter].TimerNum == Copy_u8TimerNum )
    2d14:	8b 81       	ldd	r24, Y+3	; 0x03
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	c9 01       	movw	r24, r18
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	82 0f       	add	r24, r18
    2d26:	93 1f       	adc	r25, r19
    2d28:	fc 01       	movw	r30, r24
    2d2a:	ec 57       	subi	r30, 0x7C	; 124
    2d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2e:	90 81       	ld	r25, Z
    2d30:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d32:	98 17       	cp	r25, r24
    2d34:	f1 f4       	brne	.+60     	; 0x2d72 <PWM_enuSetDutyCycle+0x9c>
			{
				Local_u8TimerWGM_Mode = PWMs[Local_u8Iter].WaveGenMode ;
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	28 2f       	mov	r18, r24
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	c9 01       	movw	r24, r18
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	82 0f       	add	r24, r18
    2d48:	93 1f       	adc	r25, r19
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	e9 57       	subi	r30, 0x79	; 121
    2d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d50:	80 81       	ld	r24, Z
    2d52:	8a 87       	std	Y+10, r24	; 0x0a
				Local_u8TimerCOM_Mode = PWMs[Local_u8Iter].CompOutMode ;
    2d54:	8b 81       	ldd	r24, Y+3	; 0x03
    2d56:	28 2f       	mov	r18, r24
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	c9 01       	movw	r24, r18
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	88 0f       	add	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	82 0f       	add	r24, r18
    2d66:	93 1f       	adc	r25, r19
    2d68:	fc 01       	movw	r30, r24
    2d6a:	ea 57       	subi	r30, 0x7A	; 122
    2d6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6e:	80 81       	ld	r24, Z
    2d70:	89 87       	std	Y+9, r24	; 0x09
	u8 Local_u8TimerWGM_Mode , Local_u8TimerCOM_Mode , Local_u8Flag = 0 ;
	u16 Local_u16TimerTop , Local_u16OCRValue ;

	if( Copy_u8TimerNum == TIMER1A || Copy_u8TimerNum == TIMER1B )
	{
		for(u8 Local_u8Iter = 0 ; Local_u8Iter < PWM_u8MaxNum ; Local_u8Iter++ )
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	8f 5f       	subi	r24, 0xFF	; 255
    2d76:	8b 83       	std	Y+3, r24	; 0x03
    2d78:	90 91 81 01 	lds	r25, 0x0181
    2d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7e:	89 17       	cp	r24, r25
    2d80:	48 f2       	brcs	.-110    	; 0x2d14 <PWM_enuSetDutyCycle+0x3e>
			{
				Local_u8TimerWGM_Mode = PWMs[Local_u8Iter].WaveGenMode ;
				Local_u8TimerCOM_Mode = PWMs[Local_u8Iter].CompOutMode ;
			}
		}
		switch( Local_u8TimerWGM_Mode )
    2d82:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	3d 8f       	std	Y+29, r19	; 0x1d
    2d8a:	2c 8f       	std	Y+28, r18	; 0x1c
    2d8c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d8e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2d90:	8b 36       	cpi	r24, 0x6B	; 107
    2d92:	91 05       	cpc	r25, r1
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <PWM_enuSetDutyCycle+0xc2>
    2d96:	03 c3       	rjmp	.+1542   	; 0x339e <PWM_enuSetDutyCycle+0x6c8>
    2d98:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2d9a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2d9c:	2c 36       	cpi	r18, 0x6C	; 108
    2d9e:	31 05       	cpc	r19, r1
    2da0:	2c f5       	brge	.+74     	; 0x2dec <PWM_enuSetDutyCycle+0x116>
    2da2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2da4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2da6:	87 36       	cpi	r24, 0x67	; 103
    2da8:	91 05       	cpc	r25, r1
    2daa:	09 f4       	brne	.+2      	; 0x2dae <PWM_enuSetDutyCycle+0xd8>
    2dac:	8a c2       	rjmp	.+1300   	; 0x32c2 <PWM_enuSetDutyCycle+0x5ec>
    2dae:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2db0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2db2:	28 36       	cpi	r18, 0x68	; 104
    2db4:	31 05       	cpc	r19, r1
    2db6:	6c f4       	brge	.+26     	; 0x2dd2 <PWM_enuSetDutyCycle+0xfc>
    2db8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dba:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dbc:	85 36       	cpi	r24, 0x65	; 101
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	09 f4       	brne	.+2      	; 0x2dc4 <PWM_enuSetDutyCycle+0xee>
    2dc2:	3f c0       	rjmp	.+126    	; 0x2e42 <PWM_enuSetDutyCycle+0x16c>
    2dc4:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2dc6:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2dc8:	26 36       	cpi	r18, 0x66	; 102
    2dca:	31 05       	cpc	r19, r1
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <PWM_enuSetDutyCycle+0xfa>
    2dce:	59 c1       	rjmp	.+690    	; 0x3082 <PWM_enuSetDutyCycle+0x3ac>
    2dd0:	be c6       	rjmp	.+3452   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    2dd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dd4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dd6:	89 36       	cpi	r24, 0x69	; 105
    2dd8:	91 05       	cpc	r25, r1
    2dda:	09 f4       	brne	.+2      	; 0x2dde <PWM_enuSetDutyCycle+0x108>
    2ddc:	a0 c0       	rjmp	.+320    	; 0x2f1e <PWM_enuSetDutyCycle+0x248>
    2dde:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2de0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2de2:	2a 36       	cpi	r18, 0x6A	; 106
    2de4:	31 05       	cpc	r19, r1
    2de6:	09 f4       	brne	.+2      	; 0x2dea <PWM_enuSetDutyCycle+0x114>
    2de8:	ba c1       	rjmp	.+884    	; 0x315e <PWM_enuSetDutyCycle+0x488>
    2dea:	b1 c6       	rjmp	.+3426   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    2dec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2df0:	8e 36       	cpi	r24, 0x6E	; 110
    2df2:	91 05       	cpc	r25, r1
    2df4:	09 f4       	brne	.+2      	; 0x2df8 <PWM_enuSetDutyCycle+0x122>
    2df6:	f5 c3       	rjmp	.+2026   	; 0x35e2 <PWM_enuSetDutyCycle+0x90c>
    2df8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2dfa:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2dfc:	2f 36       	cpi	r18, 0x6F	; 111
    2dfe:	31 05       	cpc	r19, r1
    2e00:	6c f4       	brge	.+26     	; 0x2e1c <PWM_enuSetDutyCycle+0x146>
    2e02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e06:	8c 36       	cpi	r24, 0x6C	; 108
    2e08:	91 05       	cpc	r25, r1
    2e0a:	09 f4       	brne	.+2      	; 0x2e0e <PWM_enuSetDutyCycle+0x138>
    2e0c:	7a c3       	rjmp	.+1780   	; 0x3502 <PWM_enuSetDutyCycle+0x82c>
    2e0e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2e10:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e12:	2d 36       	cpi	r18, 0x6D	; 109
    2e14:	31 05       	cpc	r19, r1
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <PWM_enuSetDutyCycle+0x144>
    2e18:	08 c5       	rjmp	.+2576   	; 0x382a <PWM_enuSetDutyCycle+0xb54>
    2e1a:	99 c6       	rjmp	.+3378   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    2e1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e20:	82 37       	cpi	r24, 0x72	; 114
    2e22:	91 05       	cpc	r25, r1
    2e24:	09 f4       	brne	.+2      	; 0x2e28 <PWM_enuSetDutyCycle+0x152>
    2e26:	4d c4       	rjmp	.+2202   	; 0x36c2 <PWM_enuSetDutyCycle+0x9ec>
    2e28:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2e2a:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2e2c:	23 37       	cpi	r18, 0x73	; 115
    2e2e:	31 05       	cpc	r19, r1
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <PWM_enuSetDutyCycle+0x15e>
    2e32:	db c5       	rjmp	.+2998   	; 0x39ea <PWM_enuSetDutyCycle+0xd14>
    2e34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e36:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e38:	8f 36       	cpi	r24, 0x6F	; 111
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	09 f4       	brne	.+2      	; 0x2e40 <PWM_enuSetDutyCycle+0x16a>
    2e3e:	65 c5       	rjmp	.+2762   	; 0x390a <PWM_enuSetDutyCycle+0xc34>
    2e40:	86 c6       	rjmp	.+3340   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
		{
			case WGM_PC_8_bit	:	Local_u16TimerTop = EIGHT_BIT_TOP ;
    2e42:	8f ef       	ldi	r24, 0xFF	; 255
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	9f 83       	std	Y+7, r25	; 0x07
    2e48:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    2e4a:	89 85       	ldd	r24, Y+9	; 0x09
    2e4c:	86 31       	cpi	r24, 0x16	; 22
    2e4e:	41 f5       	brne	.+80     	; 0x2ea0 <PWM_enuSetDutyCycle+0x1ca>
    2e50:	8e 81       	ldd	r24, Y+6	; 0x06
    2e52:	9f 81       	ldd	r25, Y+7	; 0x07
    2e54:	cc 01       	movw	r24, r24
    2e56:	a0 e0       	ldi	r26, 0x00	; 0
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	bc 01       	movw	r22, r24
    2e68:	cd 01       	movw	r24, r26
    2e6a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2e6c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2e6e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2e70:	58 89       	ldd	r21, Y+16	; 0x10
    2e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	48 ec       	ldi	r20, 0xC8	; 200
    2e84:	52 e4       	ldi	r21, 0x42	; 66
    2e86:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	bc 01       	movw	r22, r24
    2e90:	cd 01       	movw	r24, r26
    2e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	9d 83       	std	Y+5, r25	; 0x05
    2e9c:	8c 83       	std	Y+4, r24	; 0x04
    2e9e:	57 c6       	rjmp	.+3246   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    2ea0:	89 85       	ldd	r24, Y+9	; 0x09
    2ea2:	87 31       	cpi	r24, 0x17	; 23
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <PWM_enuSetDutyCycle+0x1d2>
    2ea6:	53 c6       	rjmp	.+3238   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    2ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    2eaa:	9f 81       	ldd	r25, Y+7	; 0x07
    2eac:	cc 01       	movw	r24, r24
    2eae:	a0 e0       	ldi	r26, 0x00	; 0
    2eb0:	b0 e0       	ldi	r27, 0x00	; 0
    2eb2:	bc 01       	movw	r22, r24
    2eb4:	cd 01       	movw	r24, r26
    2eb6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    2eba:	7b 01       	movw	r14, r22
    2ebc:	8c 01       	movw	r16, r24
    2ebe:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ec2:	cc 01       	movw	r24, r24
    2ec4:	a0 e0       	ldi	r26, 0x00	; 0
    2ec6:	b0 e0       	ldi	r27, 0x00	; 0
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	2d 85       	ldd	r18, Y+13	; 0x0d
    2eda:	3e 85       	ldd	r19, Y+14	; 0x0e
    2edc:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ede:	58 89       	ldd	r21, Y+16	; 0x10
    2ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	cb 01       	movw	r24, r22
    2ee8:	bc 01       	movw	r22, r24
    2eea:	cd 01       	movw	r24, r26
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	48 ec       	ldi	r20, 0xC8	; 200
    2ef2:	52 ec       	ldi	r21, 0xC2	; 194
    2ef4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	9c 01       	movw	r18, r24
    2efe:	ad 01       	movw	r20, r26
    2f00:	c8 01       	movw	r24, r16
    2f02:	b7 01       	movw	r22, r14
    2f04:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9d 83       	std	Y+5, r25	; 0x05
    2f1a:	8c 83       	std	Y+4, r24	; 0x04
    2f1c:	18 c6       	rjmp	.+3120   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_8_bit	:	Local_u16TimerTop = EIGHT_BIT_TOP ;
    2f1e:	8f ef       	ldi	r24, 0xFF	; 255
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9f 83       	std	Y+7, r25	; 0x07
    2f24:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    2f26:	89 85       	ldd	r24, Y+9	; 0x09
    2f28:	86 31       	cpi	r24, 0x16	; 22
    2f2a:	b9 f4       	brne	.+46     	; 0x2f5a <PWM_enuSetDutyCycle+0x284>
    2f2c:	1b 8e       	std	Y+27, r1	; 0x1b
    2f2e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f30:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f34:	98 89       	ldd	r25, Y+16	; 0x10
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	40 e0       	ldi	r20, 0x00	; 0
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2f42:	88 23       	and	r24, r24
    2f44:	11 f4       	brne	.+4      	; 0x2f4a <PWM_enuSetDutyCycle+0x274>
    2f46:	91 e0       	ldi	r25, 0x01	; 1
    2f48:	9b 8f       	std	Y+27, r25	; 0x1b
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    2f4e:	82 27       	eor	r24, r18
    2f50:	88 23       	and	r24, r24
    2f52:	19 f4       	brne	.+6      	; 0x2f5a <PWM_enuSetDutyCycle+0x284>
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	88 87       	std	Y+8, r24	; 0x08
    2f58:	fa c5       	rjmp	.+3060   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    2f5a:	89 85       	ldd	r24, Y+9	; 0x09
    2f5c:	87 31       	cpi	r24, 0x17	; 23
    2f5e:	b9 f4       	brne	.+46     	; 0x2f8e <PWM_enuSetDutyCycle+0x2b8>
    2f60:	1a 8e       	std	Y+26, r1	; 0x1a
    2f62:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f64:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f68:	98 89       	ldd	r25, Y+16	; 0x10
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	48 ec       	ldi	r20, 0xC8	; 200
    2f70:	52 e4       	ldi	r21, 0x42	; 66
    2f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2f76:	88 23       	and	r24, r24
    2f78:	11 f4       	brne	.+4      	; 0x2f7e <PWM_enuSetDutyCycle+0x2a8>
    2f7a:	31 e0       	ldi	r19, 0x01	; 1
    2f7c:	3a 8f       	std	Y+26, r19	; 0x1a
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f82:	89 27       	eor	r24, r25
    2f84:	88 23       	and	r24, r24
    2f86:	19 f4       	brne	.+6      	; 0x2f8e <PWM_enuSetDutyCycle+0x2b8>
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	88 87       	std	Y+8, r24	; 0x08
    2f8c:	e0 c5       	rjmp	.+3008   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    2f8e:	89 85       	ldd	r24, Y+9	; 0x09
    2f90:	86 31       	cpi	r24, 0x16	; 22
    2f92:	a9 f5       	brne	.+106    	; 0x2ffe <PWM_enuSetDutyCycle+0x328>
    2f94:	8e 81       	ldd	r24, Y+6	; 0x06
    2f96:	9f 81       	ldd	r25, Y+7	; 0x07
    2f98:	cc 01       	movw	r24, r24
    2f9a:	a0 e0       	ldi	r26, 0x00	; 0
    2f9c:	b0 e0       	ldi	r27, 0x00	; 0
    2f9e:	01 96       	adiw	r24, 0x01	; 1
    2fa0:	a1 1d       	adc	r26, r1
    2fa2:	b1 1d       	adc	r27, r1
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    2fac:	dc 01       	movw	r26, r24
    2fae:	cb 01       	movw	r24, r22
    2fb0:	bc 01       	movw	r22, r24
    2fb2:	cd 01       	movw	r24, r26
    2fb4:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fb6:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fb8:	4f 85       	ldd	r20, Y+15	; 0x0f
    2fba:	58 89       	ldd	r21, Y+16	; 0x10
    2fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	bc 01       	movw	r22, r24
    2fc6:	cd 01       	movw	r24, r26
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	48 ec       	ldi	r20, 0xC8	; 200
    2fce:	52 e4       	ldi	r21, 0x42	; 66
    2fd0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	40 e8       	ldi	r20, 0x80	; 128
    2fe2:	5f e3       	ldi	r21, 0x3F	; 63
    2fe4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	bc 01       	movw	r22, r24
    2fee:	cd 01       	movw	r24, r26
    2ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	9d 83       	std	Y+5, r25	; 0x05
    2ffa:	8c 83       	std	Y+4, r24	; 0x04
    2ffc:	a8 c5       	rjmp	.+2896   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    2ffe:	89 85       	ldd	r24, Y+9	; 0x09
    3000:	87 31       	cpi	r24, 0x17	; 23
    3002:	09 f0       	breq	.+2      	; 0x3006 <PWM_enuSetDutyCycle+0x330>
    3004:	a4 c5       	rjmp	.+2888   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3006:	8e 81       	ldd	r24, Y+6	; 0x06
    3008:	9f 81       	ldd	r25, Y+7	; 0x07
    300a:	cc 01       	movw	r24, r24
    300c:	a0 e0       	ldi	r26, 0x00	; 0
    300e:	b0 e0       	ldi	r27, 0x00	; 0
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3018:	7b 01       	movw	r14, r22
    301a:	8c 01       	movw	r16, r24
    301c:	8e 81       	ldd	r24, Y+6	; 0x06
    301e:	9f 81       	ldd	r25, Y+7	; 0x07
    3020:	cc 01       	movw	r24, r24
    3022:	a0 e0       	ldi	r26, 0x00	; 0
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	a1 1d       	adc	r26, r1
    302a:	b1 1d       	adc	r27, r1
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	bc 01       	movw	r22, r24
    303a:	cd 01       	movw	r24, r26
    303c:	2d 85       	ldd	r18, Y+13	; 0x0d
    303e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3040:	4f 85       	ldd	r20, Y+15	; 0x0f
    3042:	58 89       	ldd	r21, Y+16	; 0x10
    3044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	bc 01       	movw	r22, r24
    304e:	cd 01       	movw	r24, r26
    3050:	20 e0       	ldi	r18, 0x00	; 0
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	48 ec       	ldi	r20, 0xC8	; 200
    3056:	52 ec       	ldi	r21, 0xC2	; 194
    3058:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	9c 01       	movw	r18, r24
    3062:	ad 01       	movw	r20, r26
    3064:	c8 01       	movw	r24, r16
    3066:	b7 01       	movw	r22, r14
    3068:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	bc 01       	movw	r22, r24
    3072:	cd 01       	movw	r24, r26
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3078:	dc 01       	movw	r26, r24
    307a:	cb 01       	movw	r24, r22
    307c:	9d 83       	std	Y+5, r25	; 0x05
    307e:	8c 83       	std	Y+4, r24	; 0x04
    3080:	66 c5       	rjmp	.+2764   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_9_bit	:	Local_u16TimerTop = NINE_BIT_TOP ;
    3082:	8f ef       	ldi	r24, 0xFF	; 255
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	9f 83       	std	Y+7, r25	; 0x07
    3088:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    308a:	89 85       	ldd	r24, Y+9	; 0x09
    308c:	86 31       	cpi	r24, 0x16	; 22
    308e:	41 f5       	brne	.+80     	; 0x30e0 <PWM_enuSetDutyCycle+0x40a>
    3090:	8e 81       	ldd	r24, Y+6	; 0x06
    3092:	9f 81       	ldd	r25, Y+7	; 0x07
    3094:	cc 01       	movw	r24, r24
    3096:	a0 e0       	ldi	r26, 0x00	; 0
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	bc 01       	movw	r22, r24
    30a8:	cd 01       	movw	r24, r26
    30aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    30ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    30ae:	4f 85       	ldd	r20, Y+15	; 0x0f
    30b0:	58 89       	ldd	r21, Y+16	; 0x10
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	48 ec       	ldi	r20, 0xC8	; 200
    30c4:	52 e4       	ldi	r21, 0x42	; 66
    30c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9d 83       	std	Y+5, r25	; 0x05
    30dc:	8c 83       	std	Y+4, r24	; 0x04
    30de:	37 c5       	rjmp	.+2670   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    30e0:	89 85       	ldd	r24, Y+9	; 0x09
    30e2:	87 31       	cpi	r24, 0x17	; 23
    30e4:	09 f0       	breq	.+2      	; 0x30e8 <PWM_enuSetDutyCycle+0x412>
    30e6:	33 c5       	rjmp	.+2662   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    30e8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ea:	9f 81       	ldd	r25, Y+7	; 0x07
    30ec:	cc 01       	movw	r24, r24
    30ee:	a0 e0       	ldi	r26, 0x00	; 0
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	bc 01       	movw	r22, r24
    30f4:	cd 01       	movw	r24, r26
    30f6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    30fa:	7b 01       	movw	r14, r22
    30fc:	8c 01       	movw	r16, r24
    30fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3100:	9f 81       	ldd	r25, Y+7	; 0x07
    3102:	cc 01       	movw	r24, r24
    3104:	a0 e0       	ldi	r26, 0x00	; 0
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	bc 01       	movw	r22, r24
    310a:	cd 01       	movw	r24, r26
    310c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	bc 01       	movw	r22, r24
    3116:	cd 01       	movw	r24, r26
    3118:	2d 85       	ldd	r18, Y+13	; 0x0d
    311a:	3e 85       	ldd	r19, Y+14	; 0x0e
    311c:	4f 85       	ldd	r20, Y+15	; 0x0f
    311e:	58 89       	ldd	r21, Y+16	; 0x10
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	bc 01       	movw	r22, r24
    312a:	cd 01       	movw	r24, r26
    312c:	20 e0       	ldi	r18, 0x00	; 0
    312e:	30 e0       	ldi	r19, 0x00	; 0
    3130:	48 ec       	ldi	r20, 0xC8	; 200
    3132:	52 ec       	ldi	r21, 0xC2	; 194
    3134:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	9c 01       	movw	r18, r24
    313e:	ad 01       	movw	r20, r26
    3140:	c8 01       	movw	r24, r16
    3142:	b7 01       	movw	r22, r14
    3144:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	bc 01       	movw	r22, r24
    314e:	cd 01       	movw	r24, r26
    3150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	9d 83       	std	Y+5, r25	; 0x05
    315a:	8c 83       	std	Y+4, r24	; 0x04
    315c:	f8 c4       	rjmp	.+2544   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_9_bit	:	Local_u16TimerTop = NINE_BIT_TOP ;
    315e:	8f ef       	ldi	r24, 0xFF	; 255
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	9f 83       	std	Y+7, r25	; 0x07
    3164:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	86 31       	cpi	r24, 0x16	; 22
    316a:	b9 f4       	brne	.+46     	; 0x319a <PWM_enuSetDutyCycle+0x4c4>
    316c:	19 8e       	std	Y+25, r1	; 0x19
    316e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3170:	7e 85       	ldd	r23, Y+14	; 0x0e
    3172:	8f 85       	ldd	r24, Y+15	; 0x0f
    3174:	98 89       	ldd	r25, Y+16	; 0x10
    3176:	20 e0       	ldi	r18, 0x00	; 0
    3178:	30 e0       	ldi	r19, 0x00	; 0
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3182:	88 23       	and	r24, r24
    3184:	11 f4       	brne	.+4      	; 0x318a <PWM_enuSetDutyCycle+0x4b4>
    3186:	21 e0       	ldi	r18, 0x01	; 1
    3188:	29 8f       	std	Y+25, r18	; 0x19
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	39 8d       	ldd	r19, Y+25	; 0x19
    318e:	83 27       	eor	r24, r19
    3190:	88 23       	and	r24, r24
    3192:	19 f4       	brne	.+6      	; 0x319a <PWM_enuSetDutyCycle+0x4c4>
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	88 87       	std	Y+8, r24	; 0x08
    3198:	da c4       	rjmp	.+2484   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    319a:	89 85       	ldd	r24, Y+9	; 0x09
    319c:	87 31       	cpi	r24, 0x17	; 23
    319e:	b9 f4       	brne	.+46     	; 0x31ce <PWM_enuSetDutyCycle+0x4f8>
    31a0:	18 8e       	std	Y+24, r1	; 0x18
    31a2:	6d 85       	ldd	r22, Y+13	; 0x0d
    31a4:	7e 85       	ldd	r23, Y+14	; 0x0e
    31a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31a8:	98 89       	ldd	r25, Y+16	; 0x10
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	48 ec       	ldi	r20, 0xC8	; 200
    31b0:	52 e4       	ldi	r21, 0x42	; 66
    31b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    31b6:	88 23       	and	r24, r24
    31b8:	11 f4       	brne	.+4      	; 0x31be <PWM_enuSetDutyCycle+0x4e8>
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	88 8f       	std	Y+24, r24	; 0x18
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	98 8d       	ldd	r25, Y+24	; 0x18
    31c2:	89 27       	eor	r24, r25
    31c4:	88 23       	and	r24, r24
    31c6:	19 f4       	brne	.+6      	; 0x31ce <PWM_enuSetDutyCycle+0x4f8>
    31c8:	81 e0       	ldi	r24, 0x01	; 1
    31ca:	88 87       	std	Y+8, r24	; 0x08
    31cc:	c0 c4       	rjmp	.+2432   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    31ce:	89 85       	ldd	r24, Y+9	; 0x09
    31d0:	86 31       	cpi	r24, 0x16	; 22
    31d2:	a9 f5       	brne	.+106    	; 0x323e <PWM_enuSetDutyCycle+0x568>
    31d4:	8e 81       	ldd	r24, Y+6	; 0x06
    31d6:	9f 81       	ldd	r25, Y+7	; 0x07
    31d8:	cc 01       	movw	r24, r24
    31da:	a0 e0       	ldi	r26, 0x00	; 0
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	a1 1d       	adc	r26, r1
    31e2:	b1 1d       	adc	r27, r1
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	2d 85       	ldd	r18, Y+13	; 0x0d
    31f6:	3e 85       	ldd	r19, Y+14	; 0x0e
    31f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    31fa:	58 89       	ldd	r21, Y+16	; 0x10
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	48 ec       	ldi	r20, 0xC8	; 200
    320e:	52 e4       	ldi	r21, 0x42	; 66
    3210:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9d 83       	std	Y+5, r25	; 0x05
    323a:	8c 83       	std	Y+4, r24	; 0x04
    323c:	88 c4       	rjmp	.+2320   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    323e:	89 85       	ldd	r24, Y+9	; 0x09
    3240:	87 31       	cpi	r24, 0x17	; 23
    3242:	09 f0       	breq	.+2      	; 0x3246 <PWM_enuSetDutyCycle+0x570>
    3244:	84 c4       	rjmp	.+2312   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3246:	8e 81       	ldd	r24, Y+6	; 0x06
    3248:	9f 81       	ldd	r25, Y+7	; 0x07
    324a:	cc 01       	movw	r24, r24
    324c:	a0 e0       	ldi	r26, 0x00	; 0
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	bc 01       	movw	r22, r24
    3252:	cd 01       	movw	r24, r26
    3254:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3258:	7b 01       	movw	r14, r22
    325a:	8c 01       	movw	r16, r24
    325c:	8e 81       	ldd	r24, Y+6	; 0x06
    325e:	9f 81       	ldd	r25, Y+7	; 0x07
    3260:	cc 01       	movw	r24, r24
    3262:	a0 e0       	ldi	r26, 0x00	; 0
    3264:	b0 e0       	ldi	r27, 0x00	; 0
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	a1 1d       	adc	r26, r1
    326a:	b1 1d       	adc	r27, r1
    326c:	bc 01       	movw	r22, r24
    326e:	cd 01       	movw	r24, r26
    3270:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	2d 85       	ldd	r18, Y+13	; 0x0d
    327e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3280:	4f 85       	ldd	r20, Y+15	; 0x0f
    3282:	58 89       	ldd	r21, Y+16	; 0x10
    3284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	bc 01       	movw	r22, r24
    328e:	cd 01       	movw	r24, r26
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	48 ec       	ldi	r20, 0xC8	; 200
    3296:	52 ec       	ldi	r21, 0xC2	; 194
    3298:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    329c:	dc 01       	movw	r26, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	9c 01       	movw	r18, r24
    32a2:	ad 01       	movw	r20, r26
    32a4:	c8 01       	movw	r24, r16
    32a6:	b7 01       	movw	r22, r14
    32a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    32ac:	dc 01       	movw	r26, r24
    32ae:	cb 01       	movw	r24, r22
    32b0:	bc 01       	movw	r22, r24
    32b2:	cd 01       	movw	r24, r26
    32b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22
    32bc:	9d 83       	std	Y+5, r25	; 0x05
    32be:	8c 83       	std	Y+4, r24	; 0x04
    32c0:	46 c4       	rjmp	.+2188   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_10_bit	:	Local_u16TimerTop = TEN_BIT_TOP ;
    32c2:	8f ef       	ldi	r24, 0xFF	; 255
    32c4:	93 e0       	ldi	r25, 0x03	; 3
    32c6:	9f 83       	std	Y+7, r25	; 0x07
    32c8:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    32ca:	89 85       	ldd	r24, Y+9	; 0x09
    32cc:	86 31       	cpi	r24, 0x16	; 22
    32ce:	41 f5       	brne	.+80     	; 0x3320 <PWM_enuSetDutyCycle+0x64a>
    32d0:	8e 81       	ldd	r24, Y+6	; 0x06
    32d2:	9f 81       	ldd	r25, Y+7	; 0x07
    32d4:	cc 01       	movw	r24, r24
    32d6:	a0 e0       	ldi	r26, 0x00	; 0
    32d8:	b0 e0       	ldi	r27, 0x00	; 0
    32da:	bc 01       	movw	r22, r24
    32dc:	cd 01       	movw	r24, r26
    32de:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	bc 01       	movw	r22, r24
    32e8:	cd 01       	movw	r24, r26
    32ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    32ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    32ee:	4f 85       	ldd	r20, Y+15	; 0x0f
    32f0:	58 89       	ldd	r21, Y+16	; 0x10
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	bc 01       	movw	r22, r24
    32fc:	cd 01       	movw	r24, r26
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	48 ec       	ldi	r20, 0xC8	; 200
    3304:	52 e4       	ldi	r21, 0x42	; 66
    3306:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	bc 01       	movw	r22, r24
    3310:	cd 01       	movw	r24, r26
    3312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	9d 83       	std	Y+5, r25	; 0x05
    331c:	8c 83       	std	Y+4, r24	; 0x04
    331e:	17 c4       	rjmp	.+2094   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3320:	89 85       	ldd	r24, Y+9	; 0x09
    3322:	87 31       	cpi	r24, 0x17	; 23
    3324:	09 f0       	breq	.+2      	; 0x3328 <PWM_enuSetDutyCycle+0x652>
    3326:	13 c4       	rjmp	.+2086   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3328:	8e 81       	ldd	r24, Y+6	; 0x06
    332a:	9f 81       	ldd	r25, Y+7	; 0x07
    332c:	cc 01       	movw	r24, r24
    332e:	a0 e0       	ldi	r26, 0x00	; 0
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	bc 01       	movw	r22, r24
    3334:	cd 01       	movw	r24, r26
    3336:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    333a:	7b 01       	movw	r14, r22
    333c:	8c 01       	movw	r16, r24
    333e:	8e 81       	ldd	r24, Y+6	; 0x06
    3340:	9f 81       	ldd	r25, Y+7	; 0x07
    3342:	cc 01       	movw	r24, r24
    3344:	a0 e0       	ldi	r26, 0x00	; 0
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	bc 01       	movw	r22, r24
    334a:	cd 01       	movw	r24, r26
    334c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	2d 85       	ldd	r18, Y+13	; 0x0d
    335a:	3e 85       	ldd	r19, Y+14	; 0x0e
    335c:	4f 85       	ldd	r20, Y+15	; 0x0f
    335e:	58 89       	ldd	r21, Y+16	; 0x10
    3360:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	bc 01       	movw	r22, r24
    336a:	cd 01       	movw	r24, r26
    336c:	20 e0       	ldi	r18, 0x00	; 0
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	48 ec       	ldi	r20, 0xC8	; 200
    3372:	52 ec       	ldi	r21, 0xC2	; 194
    3374:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3378:	dc 01       	movw	r26, r24
    337a:	cb 01       	movw	r24, r22
    337c:	9c 01       	movw	r18, r24
    337e:	ad 01       	movw	r20, r26
    3380:	c8 01       	movw	r24, r16
    3382:	b7 01       	movw	r22, r14
    3384:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	bc 01       	movw	r22, r24
    338e:	cd 01       	movw	r24, r26
    3390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	9d 83       	std	Y+5, r25	; 0x05
    339a:	8c 83       	std	Y+4, r24	; 0x04
    339c:	d8 c3       	rjmp	.+1968   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_10_bit:	Local_u16TimerTop = TEN_BIT_TOP ;
    339e:	8f ef       	ldi	r24, 0xFF	; 255
    33a0:	93 e0       	ldi	r25, 0x03	; 3
    33a2:	9f 83       	std	Y+7, r25	; 0x07
    33a4:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    33a6:	89 85       	ldd	r24, Y+9	; 0x09
    33a8:	86 31       	cpi	r24, 0x16	; 22
    33aa:	b9 f4       	brne	.+46     	; 0x33da <PWM_enuSetDutyCycle+0x704>
    33ac:	1f 8a       	std	Y+23, r1	; 0x17
    33ae:	6d 85       	ldd	r22, Y+13	; 0x0d
    33b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    33b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b4:	98 89       	ldd	r25, Y+16	; 0x10
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	50 e0       	ldi	r21, 0x00	; 0
    33be:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    33c2:	88 23       	and	r24, r24
    33c4:	11 f4       	brne	.+4      	; 0x33ca <PWM_enuSetDutyCycle+0x6f4>
    33c6:	21 e0       	ldi	r18, 0x01	; 1
    33c8:	2f 8b       	std	Y+23, r18	; 0x17
    33ca:	81 e0       	ldi	r24, 0x01	; 1
    33cc:	3f 89       	ldd	r19, Y+23	; 0x17
    33ce:	83 27       	eor	r24, r19
    33d0:	88 23       	and	r24, r24
    33d2:	19 f4       	brne	.+6      	; 0x33da <PWM_enuSetDutyCycle+0x704>
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	88 87       	std	Y+8, r24	; 0x08
    33d8:	ba c3       	rjmp	.+1908   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    33da:	89 85       	ldd	r24, Y+9	; 0x09
    33dc:	87 31       	cpi	r24, 0x17	; 23
    33de:	b9 f4       	brne	.+46     	; 0x340e <PWM_enuSetDutyCycle+0x738>
    33e0:	1e 8a       	std	Y+22, r1	; 0x16
    33e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    33e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    33e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e8:	98 89       	ldd	r25, Y+16	; 0x10
    33ea:	20 e0       	ldi	r18, 0x00	; 0
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	48 ec       	ldi	r20, 0xC8	; 200
    33f0:	52 e4       	ldi	r21, 0x42	; 66
    33f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    33f6:	88 23       	and	r24, r24
    33f8:	11 f4       	brne	.+4      	; 0x33fe <PWM_enuSetDutyCycle+0x728>
    33fa:	81 e0       	ldi	r24, 0x01	; 1
    33fc:	8e 8b       	std	Y+22, r24	; 0x16
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	9e 89       	ldd	r25, Y+22	; 0x16
    3402:	89 27       	eor	r24, r25
    3404:	88 23       	and	r24, r24
    3406:	19 f4       	brne	.+6      	; 0x340e <PWM_enuSetDutyCycle+0x738>
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	88 87       	std	Y+8, r24	; 0x08
    340c:	a0 c3       	rjmp	.+1856   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    340e:	89 85       	ldd	r24, Y+9	; 0x09
    3410:	86 31       	cpi	r24, 0x16	; 22
    3412:	a9 f5       	brne	.+106    	; 0x347e <PWM_enuSetDutyCycle+0x7a8>
    3414:	8e 81       	ldd	r24, Y+6	; 0x06
    3416:	9f 81       	ldd	r25, Y+7	; 0x07
    3418:	cc 01       	movw	r24, r24
    341a:	a0 e0       	ldi	r26, 0x00	; 0
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	01 96       	adiw	r24, 0x01	; 1
    3420:	a1 1d       	adc	r26, r1
    3422:	b1 1d       	adc	r27, r1
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	2d 85       	ldd	r18, Y+13	; 0x0d
    3436:	3e 85       	ldd	r19, Y+14	; 0x0e
    3438:	4f 85       	ldd	r20, Y+15	; 0x0f
    343a:	58 89       	ldd	r21, Y+16	; 0x10
    343c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3440:	dc 01       	movw	r26, r24
    3442:	cb 01       	movw	r24, r22
    3444:	bc 01       	movw	r22, r24
    3446:	cd 01       	movw	r24, r26
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	48 ec       	ldi	r20, 0xC8	; 200
    344e:	52 e4       	ldi	r21, 0x42	; 66
    3450:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	bc 01       	movw	r22, r24
    345a:	cd 01       	movw	r24, r26
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e8       	ldi	r20, 0x80	; 128
    3462:	5f e3       	ldi	r21, 0x3F	; 63
    3464:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	bc 01       	movw	r22, r24
    346e:	cd 01       	movw	r24, r26
    3470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	9d 83       	std	Y+5, r25	; 0x05
    347a:	8c 83       	std	Y+4, r24	; 0x04
    347c:	68 c3       	rjmp	.+1744   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    347e:	89 85       	ldd	r24, Y+9	; 0x09
    3480:	87 31       	cpi	r24, 0x17	; 23
    3482:	09 f0       	breq	.+2      	; 0x3486 <PWM_enuSetDutyCycle+0x7b0>
    3484:	64 c3       	rjmp	.+1736   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3486:	8e 81       	ldd	r24, Y+6	; 0x06
    3488:	9f 81       	ldd	r25, Y+7	; 0x07
    348a:	cc 01       	movw	r24, r24
    348c:	a0 e0       	ldi	r26, 0x00	; 0
    348e:	b0 e0       	ldi	r27, 0x00	; 0
    3490:	bc 01       	movw	r22, r24
    3492:	cd 01       	movw	r24, r26
    3494:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3498:	7b 01       	movw	r14, r22
    349a:	8c 01       	movw	r16, r24
    349c:	8e 81       	ldd	r24, Y+6	; 0x06
    349e:	9f 81       	ldd	r25, Y+7	; 0x07
    34a0:	cc 01       	movw	r24, r24
    34a2:	a0 e0       	ldi	r26, 0x00	; 0
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	01 96       	adiw	r24, 0x01	; 1
    34a8:	a1 1d       	adc	r26, r1
    34aa:	b1 1d       	adc	r27, r1
    34ac:	bc 01       	movw	r22, r24
    34ae:	cd 01       	movw	r24, r26
    34b0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	bc 01       	movw	r22, r24
    34ba:	cd 01       	movw	r24, r26
    34bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    34be:	3e 85       	ldd	r19, Y+14	; 0x0e
    34c0:	4f 85       	ldd	r20, Y+15	; 0x0f
    34c2:	58 89       	ldd	r21, Y+16	; 0x10
    34c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c8:	dc 01       	movw	r26, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	bc 01       	movw	r22, r24
    34ce:	cd 01       	movw	r24, r26
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	48 ec       	ldi	r20, 0xC8	; 200
    34d6:	52 ec       	ldi	r21, 0xC2	; 194
    34d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34dc:	dc 01       	movw	r26, r24
    34de:	cb 01       	movw	r24, r22
    34e0:	9c 01       	movw	r18, r24
    34e2:	ad 01       	movw	r20, r26
    34e4:	c8 01       	movw	r24, r16
    34e6:	b7 01       	movw	r22, r14
    34e8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	bc 01       	movw	r22, r24
    34f2:	cd 01       	movw	r24, r26
    34f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	9d 83       	std	Y+5, r25	; 0x05
    34fe:	8c 83       	std	Y+4, r24	; 0x04
    3500:	26 c3       	rjmp	.+1612   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PFC_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    3502:	80 91 23 02 	lds	r24, 0x0223
    3506:	90 91 24 02 	lds	r25, 0x0224
    350a:	9f 83       	std	Y+7, r25	; 0x07
    350c:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR ;
    350e:	89 85       	ldd	r24, Y+9	; 0x09
    3510:	86 31       	cpi	r24, 0x16	; 22
    3512:	41 f5       	brne	.+80     	; 0x3564 <PWM_enuSetDutyCycle+0x88e>
    3514:	8e 81       	ldd	r24, Y+6	; 0x06
    3516:	9f 81       	ldd	r25, Y+7	; 0x07
    3518:	cc 01       	movw	r24, r24
    351a:	a0 e0       	ldi	r26, 0x00	; 0
    351c:	b0 e0       	ldi	r27, 0x00	; 0
    351e:	bc 01       	movw	r22, r24
    3520:	cd 01       	movw	r24, r26
    3522:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3530:	3e 85       	ldd	r19, Y+14	; 0x0e
    3532:	4f 85       	ldd	r20, Y+15	; 0x0f
    3534:	58 89       	ldd	r21, Y+16	; 0x10
    3536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	bc 01       	movw	r22, r24
    3540:	cd 01       	movw	r24, r26
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	48 ec       	ldi	r20, 0xC8	; 200
    3548:	52 e4       	ldi	r21, 0x42	; 66
    354a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    354e:	dc 01       	movw	r26, r24
    3550:	cb 01       	movw	r24, r22
    3552:	bc 01       	movw	r22, r24
    3554:	cd 01       	movw	r24, r26
    3556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	9d 83       	std	Y+5, r25	; 0x05
    3560:	8c 83       	std	Y+4, r24	; 0x04
    3562:	f5 c2       	rjmp	.+1514   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3564:	89 85       	ldd	r24, Y+9	; 0x09
    3566:	87 31       	cpi	r24, 0x17	; 23
    3568:	09 f0       	breq	.+2      	; 0x356c <PWM_enuSetDutyCycle+0x896>
    356a:	f1 c2       	rjmp	.+1506   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    356c:	8e 81       	ldd	r24, Y+6	; 0x06
    356e:	9f 81       	ldd	r25, Y+7	; 0x07
    3570:	cc 01       	movw	r24, r24
    3572:	a0 e0       	ldi	r26, 0x00	; 0
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    357e:	7b 01       	movw	r14, r22
    3580:	8c 01       	movw	r16, r24
    3582:	8e 81       	ldd	r24, Y+6	; 0x06
    3584:	9f 81       	ldd	r25, Y+7	; 0x07
    3586:	cc 01       	movw	r24, r24
    3588:	a0 e0       	ldi	r26, 0x00	; 0
    358a:	b0 e0       	ldi	r27, 0x00	; 0
    358c:	bc 01       	movw	r22, r24
    358e:	cd 01       	movw	r24, r26
    3590:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	bc 01       	movw	r22, r24
    359a:	cd 01       	movw	r24, r26
    359c:	2d 85       	ldd	r18, Y+13	; 0x0d
    359e:	3e 85       	ldd	r19, Y+14	; 0x0e
    35a0:	4f 85       	ldd	r20, Y+15	; 0x0f
    35a2:	58 89       	ldd	r21, Y+16	; 0x10
    35a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	bc 01       	movw	r22, r24
    35ae:	cd 01       	movw	r24, r26
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	48 ec       	ldi	r20, 0xC8	; 200
    35b6:	52 ec       	ldi	r21, 0xC2	; 194
    35b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9c 01       	movw	r18, r24
    35c2:	ad 01       	movw	r20, r26
    35c4:	c8 01       	movw	r24, r16
    35c6:	b7 01       	movw	r22, r14
    35c8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	bc 01       	movw	r22, r24
    35d2:	cd 01       	movw	r24, r26
    35d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d8:	dc 01       	movw	r26, r24
    35da:	cb 01       	movw	r24, r22
    35dc:	9d 83       	std	Y+5, r25	; 0x05
    35de:	8c 83       	std	Y+4, r24	; 0x04
    35e0:	b6 c2       	rjmp	.+1388   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    35e2:	80 91 23 02 	lds	r24, 0x0223
    35e6:	90 91 24 02 	lds	r25, 0x0224
    35ea:	9f 83       	std	Y+7, r25	; 0x07
    35ec:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    35ee:	89 85       	ldd	r24, Y+9	; 0x09
    35f0:	86 31       	cpi	r24, 0x16	; 22
    35f2:	41 f5       	brne	.+80     	; 0x3644 <PWM_enuSetDutyCycle+0x96e>
    35f4:	8e 81       	ldd	r24, Y+6	; 0x06
    35f6:	9f 81       	ldd	r25, Y+7	; 0x07
    35f8:	cc 01       	movw	r24, r24
    35fa:	a0 e0       	ldi	r26, 0x00	; 0
    35fc:	b0 e0       	ldi	r27, 0x00	; 0
    35fe:	bc 01       	movw	r22, r24
    3600:	cd 01       	movw	r24, r26
    3602:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	bc 01       	movw	r22, r24
    360c:	cd 01       	movw	r24, r26
    360e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3610:	3e 85       	ldd	r19, Y+14	; 0x0e
    3612:	4f 85       	ldd	r20, Y+15	; 0x0f
    3614:	58 89       	ldd	r21, Y+16	; 0x10
    3616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    361a:	dc 01       	movw	r26, r24
    361c:	cb 01       	movw	r24, r22
    361e:	bc 01       	movw	r22, r24
    3620:	cd 01       	movw	r24, r26
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	48 ec       	ldi	r20, 0xC8	; 200
    3628:	52 e4       	ldi	r21, 0x42	; 66
    362a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	bc 01       	movw	r22, r24
    3634:	cd 01       	movw	r24, r26
    3636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	9d 83       	std	Y+5, r25	; 0x05
    3640:	8c 83       	std	Y+4, r24	; 0x04
    3642:	85 c2       	rjmp	.+1290   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3644:	89 85       	ldd	r24, Y+9	; 0x09
    3646:	87 31       	cpi	r24, 0x17	; 23
    3648:	09 f0       	breq	.+2      	; 0x364c <PWM_enuSetDutyCycle+0x976>
    364a:	81 c2       	rjmp	.+1282   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    364c:	8e 81       	ldd	r24, Y+6	; 0x06
    364e:	9f 81       	ldd	r25, Y+7	; 0x07
    3650:	cc 01       	movw	r24, r24
    3652:	a0 e0       	ldi	r26, 0x00	; 0
    3654:	b0 e0       	ldi	r27, 0x00	; 0
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    365e:	7b 01       	movw	r14, r22
    3660:	8c 01       	movw	r16, r24
    3662:	8e 81       	ldd	r24, Y+6	; 0x06
    3664:	9f 81       	ldd	r25, Y+7	; 0x07
    3666:	cc 01       	movw	r24, r24
    3668:	a0 e0       	ldi	r26, 0x00	; 0
    366a:	b0 e0       	ldi	r27, 0x00	; 0
    366c:	bc 01       	movw	r22, r24
    366e:	cd 01       	movw	r24, r26
    3670:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	bc 01       	movw	r22, r24
    367a:	cd 01       	movw	r24, r26
    367c:	2d 85       	ldd	r18, Y+13	; 0x0d
    367e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3680:	4f 85       	ldd	r20, Y+15	; 0x0f
    3682:	58 89       	ldd	r21, Y+16	; 0x10
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	bc 01       	movw	r22, r24
    368e:	cd 01       	movw	r24, r26
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	48 ec       	ldi	r20, 0xC8	; 200
    3696:	52 ec       	ldi	r21, 0xC2	; 194
    3698:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	9c 01       	movw	r18, r24
    36a2:	ad 01       	movw	r20, r26
    36a4:	c8 01       	movw	r24, r16
    36a6:	b7 01       	movw	r22, r14
    36a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    36ac:	dc 01       	movw	r26, r24
    36ae:	cb 01       	movw	r24, r22
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b8:	dc 01       	movw	r26, r24
    36ba:	cb 01       	movw	r24, r22
    36bc:	9d 83       	std	Y+5, r25	; 0x05
    36be:	8c 83       	std	Y+4, r24	; 0x04
    36c0:	46 c2       	rjmp	.+1164   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_ICR1	:	Local_u16TimerTop = Global_u16ICR1_Value ;
    36c2:	80 91 23 02 	lds	r24, 0x0223
    36c6:	90 91 24 02 	lds	r25, 0x0224
    36ca:	9f 83       	std	Y+7, r25	; 0x07
    36cc:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    36ce:	89 85       	ldd	r24, Y+9	; 0x09
    36d0:	86 31       	cpi	r24, 0x16	; 22
    36d2:	b9 f4       	brne	.+46     	; 0x3702 <PWM_enuSetDutyCycle+0xa2c>
    36d4:	1d 8a       	std	Y+21, r1	; 0x15
    36d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    36d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    36da:	8f 85       	ldd	r24, Y+15	; 0x0f
    36dc:	98 89       	ldd	r25, Y+16	; 0x10
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	40 e0       	ldi	r20, 0x00	; 0
    36e4:	50 e0       	ldi	r21, 0x00	; 0
    36e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    36ea:	88 23       	and	r24, r24
    36ec:	11 f4       	brne	.+4      	; 0x36f2 <PWM_enuSetDutyCycle+0xa1c>
    36ee:	21 e0       	ldi	r18, 0x01	; 1
    36f0:	2d 8b       	std	Y+21, r18	; 0x15
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	3d 89       	ldd	r19, Y+21	; 0x15
    36f6:	83 27       	eor	r24, r19
    36f8:	88 23       	and	r24, r24
    36fa:	19 f4       	brne	.+6      	; 0x3702 <PWM_enuSetDutyCycle+0xa2c>
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	88 87       	std	Y+8, r24	; 0x08
    3700:	26 c2       	rjmp	.+1100   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3702:	89 85       	ldd	r24, Y+9	; 0x09
    3704:	87 31       	cpi	r24, 0x17	; 23
    3706:	b9 f4       	brne	.+46     	; 0x3736 <PWM_enuSetDutyCycle+0xa60>
    3708:	1c 8a       	std	Y+20, r1	; 0x14
    370a:	6d 85       	ldd	r22, Y+13	; 0x0d
    370c:	7e 85       	ldd	r23, Y+14	; 0x0e
    370e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3710:	98 89       	ldd	r25, Y+16	; 0x10
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	48 ec       	ldi	r20, 0xC8	; 200
    3718:	52 e4       	ldi	r21, 0x42	; 66
    371a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    371e:	88 23       	and	r24, r24
    3720:	11 f4       	brne	.+4      	; 0x3726 <PWM_enuSetDutyCycle+0xa50>
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	8c 8b       	std	Y+20, r24	; 0x14
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	9c 89       	ldd	r25, Y+20	; 0x14
    372a:	89 27       	eor	r24, r25
    372c:	88 23       	and	r24, r24
    372e:	19 f4       	brne	.+6      	; 0x3736 <PWM_enuSetDutyCycle+0xa60>
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	88 87       	std	Y+8, r24	; 0x08
    3734:	0c c2       	rjmp	.+1048   	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3736:	89 85       	ldd	r24, Y+9	; 0x09
    3738:	86 31       	cpi	r24, 0x16	; 22
    373a:	a9 f5       	brne	.+106    	; 0x37a6 <PWM_enuSetDutyCycle+0xad0>
    373c:	8e 81       	ldd	r24, Y+6	; 0x06
    373e:	9f 81       	ldd	r25, Y+7	; 0x07
    3740:	cc 01       	movw	r24, r24
    3742:	a0 e0       	ldi	r26, 0x00	; 0
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	01 96       	adiw	r24, 0x01	; 1
    3748:	a1 1d       	adc	r26, r1
    374a:	b1 1d       	adc	r27, r1
    374c:	bc 01       	movw	r22, r24
    374e:	cd 01       	movw	r24, r26
    3750:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3754:	dc 01       	movw	r26, r24
    3756:	cb 01       	movw	r24, r22
    3758:	bc 01       	movw	r22, r24
    375a:	cd 01       	movw	r24, r26
    375c:	2d 85       	ldd	r18, Y+13	; 0x0d
    375e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3760:	4f 85       	ldd	r20, Y+15	; 0x0f
    3762:	58 89       	ldd	r21, Y+16	; 0x10
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	48 ec       	ldi	r20, 0xC8	; 200
    3776:	52 e4       	ldi	r21, 0x42	; 66
    3778:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	bc 01       	movw	r22, r24
    3782:	cd 01       	movw	r24, r26
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e8       	ldi	r20, 0x80	; 128
    378a:	5f e3       	ldi	r21, 0x3F	; 63
    378c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3790:	dc 01       	movw	r26, r24
    3792:	cb 01       	movw	r24, r22
    3794:	bc 01       	movw	r22, r24
    3796:	cd 01       	movw	r24, r26
    3798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	9d 83       	std	Y+5, r25	; 0x05
    37a2:	8c 83       	std	Y+4, r24	; 0x04
    37a4:	d4 c1       	rjmp	.+936    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    37a6:	89 85       	ldd	r24, Y+9	; 0x09
    37a8:	87 31       	cpi	r24, 0x17	; 23
    37aa:	09 f0       	breq	.+2      	; 0x37ae <PWM_enuSetDutyCycle+0xad8>
    37ac:	d0 c1       	rjmp	.+928    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    37ae:	8e 81       	ldd	r24, Y+6	; 0x06
    37b0:	9f 81       	ldd	r25, Y+7	; 0x07
    37b2:	cc 01       	movw	r24, r24
    37b4:	a0 e0       	ldi	r26, 0x00	; 0
    37b6:	b0 e0       	ldi	r27, 0x00	; 0
    37b8:	bc 01       	movw	r22, r24
    37ba:	cd 01       	movw	r24, r26
    37bc:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    37c0:	7b 01       	movw	r14, r22
    37c2:	8c 01       	movw	r16, r24
    37c4:	8e 81       	ldd	r24, Y+6	; 0x06
    37c6:	9f 81       	ldd	r25, Y+7	; 0x07
    37c8:	cc 01       	movw	r24, r24
    37ca:	a0 e0       	ldi	r26, 0x00	; 0
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	01 96       	adiw	r24, 0x01	; 1
    37d0:	a1 1d       	adc	r26, r1
    37d2:	b1 1d       	adc	r27, r1
    37d4:	bc 01       	movw	r22, r24
    37d6:	cd 01       	movw	r24, r26
    37d8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	bc 01       	movw	r22, r24
    37e2:	cd 01       	movw	r24, r26
    37e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    37e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    37e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    37ea:	58 89       	ldd	r21, Y+16	; 0x10
    37ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f0:	dc 01       	movw	r26, r24
    37f2:	cb 01       	movw	r24, r22
    37f4:	bc 01       	movw	r22, r24
    37f6:	cd 01       	movw	r24, r26
    37f8:	20 e0       	ldi	r18, 0x00	; 0
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	48 ec       	ldi	r20, 0xC8	; 200
    37fe:	52 ec       	ldi	r21, 0xC2	; 194
    3800:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3804:	dc 01       	movw	r26, r24
    3806:	cb 01       	movw	r24, r22
    3808:	9c 01       	movw	r18, r24
    380a:	ad 01       	movw	r20, r26
    380c:	c8 01       	movw	r24, r16
    380e:	b7 01       	movw	r22, r14
    3810:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	bc 01       	movw	r22, r24
    381a:	cd 01       	movw	r24, r26
    381c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	9d 83       	std	Y+5, r25	; 0x05
    3826:	8c 83       	std	Y+4, r24	; 0x04
    3828:	92 c1       	rjmp	.+804    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PFC_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    382a:	80 91 1f 02 	lds	r24, 0x021F
    382e:	90 91 20 02 	lds	r25, 0x0220
    3832:	9f 83       	std	Y+7, r25	; 0x07
    3834:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    3836:	89 85       	ldd	r24, Y+9	; 0x09
    3838:	86 31       	cpi	r24, 0x16	; 22
    383a:	41 f5       	brne	.+80     	; 0x388c <PWM_enuSetDutyCycle+0xbb6>
    383c:	8e 81       	ldd	r24, Y+6	; 0x06
    383e:	9f 81       	ldd	r25, Y+7	; 0x07
    3840:	cc 01       	movw	r24, r24
    3842:	a0 e0       	ldi	r26, 0x00	; 0
    3844:	b0 e0       	ldi	r27, 0x00	; 0
    3846:	bc 01       	movw	r22, r24
    3848:	cd 01       	movw	r24, r26
    384a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	bc 01       	movw	r22, r24
    3854:	cd 01       	movw	r24, r26
    3856:	2d 85       	ldd	r18, Y+13	; 0x0d
    3858:	3e 85       	ldd	r19, Y+14	; 0x0e
    385a:	4f 85       	ldd	r20, Y+15	; 0x0f
    385c:	58 89       	ldd	r21, Y+16	; 0x10
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	bc 01       	movw	r22, r24
    3868:	cd 01       	movw	r24, r26
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	48 ec       	ldi	r20, 0xC8	; 200
    3870:	52 e4       	ldi	r21, 0x42	; 66
    3872:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	bc 01       	movw	r22, r24
    387c:	cd 01       	movw	r24, r26
    387e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	9d 83       	std	Y+5, r25	; 0x05
    3888:	8c 83       	std	Y+4, r24	; 0x04
    388a:	61 c1       	rjmp	.+706    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	87 31       	cpi	r24, 0x17	; 23
    3890:	09 f0       	breq	.+2      	; 0x3894 <PWM_enuSetDutyCycle+0xbbe>
    3892:	5d c1       	rjmp	.+698    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3894:	8e 81       	ldd	r24, Y+6	; 0x06
    3896:	9f 81       	ldd	r25, Y+7	; 0x07
    3898:	cc 01       	movw	r24, r24
    389a:	a0 e0       	ldi	r26, 0x00	; 0
    389c:	b0 e0       	ldi	r27, 0x00	; 0
    389e:	bc 01       	movw	r22, r24
    38a0:	cd 01       	movw	r24, r26
    38a2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    38a6:	7b 01       	movw	r14, r22
    38a8:	8c 01       	movw	r16, r24
    38aa:	8e 81       	ldd	r24, Y+6	; 0x06
    38ac:	9f 81       	ldd	r25, Y+7	; 0x07
    38ae:	cc 01       	movw	r24, r24
    38b0:	a0 e0       	ldi	r26, 0x00	; 0
    38b2:	b0 e0       	ldi	r27, 0x00	; 0
    38b4:	bc 01       	movw	r22, r24
    38b6:	cd 01       	movw	r24, r26
    38b8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    38bc:	dc 01       	movw	r26, r24
    38be:	cb 01       	movw	r24, r22
    38c0:	bc 01       	movw	r22, r24
    38c2:	cd 01       	movw	r24, r26
    38c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    38c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    38c8:	4f 85       	ldd	r20, Y+15	; 0x0f
    38ca:	58 89       	ldd	r21, Y+16	; 0x10
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	bc 01       	movw	r22, r24
    38d6:	cd 01       	movw	r24, r26
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	48 ec       	ldi	r20, 0xC8	; 200
    38de:	52 ec       	ldi	r21, 0xC2	; 194
    38e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	9c 01       	movw	r18, r24
    38ea:	ad 01       	movw	r20, r26
    38ec:	c8 01       	movw	r24, r16
    38ee:	b7 01       	movw	r22, r14
    38f0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    38f4:	dc 01       	movw	r26, r24
    38f6:	cb 01       	movw	r24, r22
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	9d 83       	std	Y+5, r25	; 0x05
    3906:	8c 83       	std	Y+4, r24	; 0x04
    3908:	22 c1       	rjmp	.+580    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_PC_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    390a:	80 91 1f 02 	lds	r24, 0x021F
    390e:	90 91 20 02 	lds	r25, 0x0220
    3912:	9f 83       	std	Y+7, r25	; 0x07
    3914:	8e 83       	std	Y+6, r24	; 0x06
									PC_OCR_CALCULATOR;
    3916:	89 85       	ldd	r24, Y+9	; 0x09
    3918:	86 31       	cpi	r24, 0x16	; 22
    391a:	41 f5       	brne	.+80     	; 0x396c <PWM_enuSetDutyCycle+0xc96>
    391c:	8e 81       	ldd	r24, Y+6	; 0x06
    391e:	9f 81       	ldd	r25, Y+7	; 0x07
    3920:	cc 01       	movw	r24, r24
    3922:	a0 e0       	ldi	r26, 0x00	; 0
    3924:	b0 e0       	ldi	r27, 0x00	; 0
    3926:	bc 01       	movw	r22, r24
    3928:	cd 01       	movw	r24, r26
    392a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    392e:	dc 01       	movw	r26, r24
    3930:	cb 01       	movw	r24, r22
    3932:	bc 01       	movw	r22, r24
    3934:	cd 01       	movw	r24, r26
    3936:	2d 85       	ldd	r18, Y+13	; 0x0d
    3938:	3e 85       	ldd	r19, Y+14	; 0x0e
    393a:	4f 85       	ldd	r20, Y+15	; 0x0f
    393c:	58 89       	ldd	r21, Y+16	; 0x10
    393e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3942:	dc 01       	movw	r26, r24
    3944:	cb 01       	movw	r24, r22
    3946:	bc 01       	movw	r22, r24
    3948:	cd 01       	movw	r24, r26
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	48 ec       	ldi	r20, 0xC8	; 200
    3950:	52 e4       	ldi	r21, 0x42	; 66
    3952:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	bc 01       	movw	r22, r24
    395c:	cd 01       	movw	r24, r26
    395e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	9d 83       	std	Y+5, r25	; 0x05
    3968:	8c 83       	std	Y+4, r24	; 0x04
    396a:	f1 c0       	rjmp	.+482    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    396c:	89 85       	ldd	r24, Y+9	; 0x09
    396e:	87 31       	cpi	r24, 0x17	; 23
    3970:	09 f0       	breq	.+2      	; 0x3974 <PWM_enuSetDutyCycle+0xc9e>
    3972:	ed c0       	rjmp	.+474    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3974:	8e 81       	ldd	r24, Y+6	; 0x06
    3976:	9f 81       	ldd	r25, Y+7	; 0x07
    3978:	cc 01       	movw	r24, r24
    397a:	a0 e0       	ldi	r26, 0x00	; 0
    397c:	b0 e0       	ldi	r27, 0x00	; 0
    397e:	bc 01       	movw	r22, r24
    3980:	cd 01       	movw	r24, r26
    3982:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3986:	7b 01       	movw	r14, r22
    3988:	8c 01       	movw	r16, r24
    398a:	8e 81       	ldd	r24, Y+6	; 0x06
    398c:	9f 81       	ldd	r25, Y+7	; 0x07
    398e:	cc 01       	movw	r24, r24
    3990:	a0 e0       	ldi	r26, 0x00	; 0
    3992:	b0 e0       	ldi	r27, 0x00	; 0
    3994:	bc 01       	movw	r22, r24
    3996:	cd 01       	movw	r24, r26
    3998:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	bc 01       	movw	r22, r24
    39a2:	cd 01       	movw	r24, r26
    39a4:	2d 85       	ldd	r18, Y+13	; 0x0d
    39a6:	3e 85       	ldd	r19, Y+14	; 0x0e
    39a8:	4f 85       	ldd	r20, Y+15	; 0x0f
    39aa:	58 89       	ldd	r21, Y+16	; 0x10
    39ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b0:	dc 01       	movw	r26, r24
    39b2:	cb 01       	movw	r24, r22
    39b4:	bc 01       	movw	r22, r24
    39b6:	cd 01       	movw	r24, r26
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	30 e0       	ldi	r19, 0x00	; 0
    39bc:	48 ec       	ldi	r20, 0xC8	; 200
    39be:	52 ec       	ldi	r21, 0xC2	; 194
    39c0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	9c 01       	movw	r18, r24
    39ca:	ad 01       	movw	r20, r26
    39cc:	c8 01       	movw	r24, r16
    39ce:	b7 01       	movw	r22, r14
    39d0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    39d4:	dc 01       	movw	r26, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	bc 01       	movw	r22, r24
    39da:	cd 01       	movw	r24, r26
    39dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e0:	dc 01       	movw	r26, r24
    39e2:	cb 01       	movw	r24, r22
    39e4:	9d 83       	std	Y+5, r25	; 0x05
    39e6:	8c 83       	std	Y+4, r24	; 0x04
    39e8:	b2 c0       	rjmp	.+356    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
									break;
			case WGM_FAST_OCR1A	:	Local_u16TimerTop = Global_u16OCR1A_Value ;
    39ea:	80 91 1f 02 	lds	r24, 0x021F
    39ee:	90 91 20 02 	lds	r25, 0x0220
    39f2:	9f 83       	std	Y+7, r25	; 0x07
    39f4:	8e 83       	std	Y+6, r24	; 0x06
									FAST_OCR_CALCULATOR;
    39f6:	89 85       	ldd	r24, Y+9	; 0x09
    39f8:	86 31       	cpi	r24, 0x16	; 22
    39fa:	b9 f4       	brne	.+46     	; 0x3a2a <PWM_enuSetDutyCycle+0xd54>
    39fc:	1b 8a       	std	Y+19, r1	; 0x13
    39fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a00:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a02:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a04:	98 89       	ldd	r25, Y+16	; 0x10
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e0       	ldi	r20, 0x00	; 0
    3a0c:	50 e0       	ldi	r21, 0x00	; 0
    3a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3a12:	88 23       	and	r24, r24
    3a14:	11 f4       	brne	.+4      	; 0x3a1a <PWM_enuSetDutyCycle+0xd44>
    3a16:	21 e0       	ldi	r18, 0x01	; 1
    3a18:	2b 8b       	std	Y+19, r18	; 0x13
    3a1a:	81 e0       	ldi	r24, 0x01	; 1
    3a1c:	3b 89       	ldd	r19, Y+19	; 0x13
    3a1e:	83 27       	eor	r24, r19
    3a20:	88 23       	and	r24, r24
    3a22:	19 f4       	brne	.+6      	; 0x3a2a <PWM_enuSetDutyCycle+0xd54>
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	88 87       	std	Y+8, r24	; 0x08
    3a28:	92 c0       	rjmp	.+292    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3a2a:	89 85       	ldd	r24, Y+9	; 0x09
    3a2c:	87 31       	cpi	r24, 0x17	; 23
    3a2e:	b9 f4       	brne	.+46     	; 0x3a5e <PWM_enuSetDutyCycle+0xd88>
    3a30:	1a 8a       	std	Y+18, r1	; 0x12
    3a32:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a34:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a36:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a38:	98 89       	ldd	r25, Y+16	; 0x10
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	30 e0       	ldi	r19, 0x00	; 0
    3a3e:	48 ec       	ldi	r20, 0xC8	; 200
    3a40:	52 e4       	ldi	r21, 0x42	; 66
    3a42:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3a46:	88 23       	and	r24, r24
    3a48:	11 f4       	brne	.+4      	; 0x3a4e <PWM_enuSetDutyCycle+0xd78>
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	8a 8b       	std	Y+18, r24	; 0x12
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	9a 89       	ldd	r25, Y+18	; 0x12
    3a52:	89 27       	eor	r24, r25
    3a54:	88 23       	and	r24, r24
    3a56:	19 f4       	brne	.+6      	; 0x3a5e <PWM_enuSetDutyCycle+0xd88>
    3a58:	81 e0       	ldi	r24, 0x01	; 1
    3a5a:	88 87       	std	Y+8, r24	; 0x08
    3a5c:	78 c0       	rjmp	.+240    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	86 31       	cpi	r24, 0x16	; 22
    3a62:	a9 f5       	brne	.+106    	; 0x3ace <PWM_enuSetDutyCycle+0xdf8>
    3a64:	8e 81       	ldd	r24, Y+6	; 0x06
    3a66:	9f 81       	ldd	r25, Y+7	; 0x07
    3a68:	cc 01       	movw	r24, r24
    3a6a:	a0 e0       	ldi	r26, 0x00	; 0
    3a6c:	b0 e0       	ldi	r27, 0x00	; 0
    3a6e:	01 96       	adiw	r24, 0x01	; 1
    3a70:	a1 1d       	adc	r26, r1
    3a72:	b1 1d       	adc	r27, r1
    3a74:	bc 01       	movw	r22, r24
    3a76:	cd 01       	movw	r24, r26
    3a78:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3a7c:	dc 01       	movw	r26, r24
    3a7e:	cb 01       	movw	r24, r22
    3a80:	bc 01       	movw	r22, r24
    3a82:	cd 01       	movw	r24, r26
    3a84:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a86:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a88:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a8a:	58 89       	ldd	r21, Y+16	; 0x10
    3a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a90:	dc 01       	movw	r26, r24
    3a92:	cb 01       	movw	r24, r22
    3a94:	bc 01       	movw	r22, r24
    3a96:	cd 01       	movw	r24, r26
    3a98:	20 e0       	ldi	r18, 0x00	; 0
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	48 ec       	ldi	r20, 0xC8	; 200
    3a9e:	52 e4       	ldi	r21, 0x42	; 66
    3aa0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	bc 01       	movw	r22, r24
    3aaa:	cd 01       	movw	r24, r26
    3aac:	20 e0       	ldi	r18, 0x00	; 0
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	40 e8       	ldi	r20, 0x80	; 128
    3ab2:	5f e3       	ldi	r21, 0x3F	; 63
    3ab4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3ab8:	dc 01       	movw	r26, r24
    3aba:	cb 01       	movw	r24, r22
    3abc:	bc 01       	movw	r22, r24
    3abe:	cd 01       	movw	r24, r26
    3ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	9d 83       	std	Y+5, r25	; 0x05
    3aca:	8c 83       	std	Y+4, r24	; 0x04
    3acc:	40 c0       	rjmp	.+128    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3ace:	89 85       	ldd	r24, Y+9	; 0x09
    3ad0:	87 31       	cpi	r24, 0x17	; 23
    3ad2:	e9 f5       	brne	.+122    	; 0x3b4e <PWM_enuSetDutyCycle+0xe78>
    3ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    3ad6:	9f 81       	ldd	r25, Y+7	; 0x07
    3ad8:	cc 01       	movw	r24, r24
    3ada:	a0 e0       	ldi	r26, 0x00	; 0
    3adc:	b0 e0       	ldi	r27, 0x00	; 0
    3ade:	bc 01       	movw	r22, r24
    3ae0:	cd 01       	movw	r24, r26
    3ae2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3ae6:	7b 01       	movw	r14, r22
    3ae8:	8c 01       	movw	r16, r24
    3aea:	8e 81       	ldd	r24, Y+6	; 0x06
    3aec:	9f 81       	ldd	r25, Y+7	; 0x07
    3aee:	cc 01       	movw	r24, r24
    3af0:	a0 e0       	ldi	r26, 0x00	; 0
    3af2:	b0 e0       	ldi	r27, 0x00	; 0
    3af4:	01 96       	adiw	r24, 0x01	; 1
    3af6:	a1 1d       	adc	r26, r1
    3af8:	b1 1d       	adc	r27, r1
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	bc 01       	movw	r22, r24
    3b08:	cd 01       	movw	r24, r26
    3b0a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b0c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b0e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3b10:	58 89       	ldd	r21, Y+16	; 0x10
    3b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b16:	dc 01       	movw	r26, r24
    3b18:	cb 01       	movw	r24, r22
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	cd 01       	movw	r24, r26
    3b1e:	20 e0       	ldi	r18, 0x00	; 0
    3b20:	30 e0       	ldi	r19, 0x00	; 0
    3b22:	48 ec       	ldi	r20, 0xC8	; 200
    3b24:	52 ec       	ldi	r21, 0xC2	; 194
    3b26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3b2a:	dc 01       	movw	r26, r24
    3b2c:	cb 01       	movw	r24, r22
    3b2e:	9c 01       	movw	r18, r24
    3b30:	ad 01       	movw	r20, r26
    3b32:	c8 01       	movw	r24, r16
    3b34:	b7 01       	movw	r22, r14
    3b36:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	9d 83       	std	Y+5, r25	; 0x05
    3b4c:	8c 83       	std	Y+4, r24	; 0x04
									break;
		}

		if( !Local_u8Flag )
    3b4e:	88 85       	ldd	r24, Y+8	; 0x08
    3b50:	88 23       	and	r24, r24
    3b52:	09 f0       	breq	.+2      	; 0x3b56 <PWM_enuSetDutyCycle+0xe80>
    3b54:	3c c0       	rjmp	.+120    	; 0x3bce <PWM_enuSetDutyCycle+0xef8>
		{
			if( Copy_u8TimerNum == TIMER1A )
    3b56:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b58:	89 3c       	cpi	r24, 0xC9	; 201
    3b5a:	d9 f4       	brne	.+54     	; 0x3b92 <PWM_enuSetDutyCycle+0xebc>
			{
				u8 Local_u8Temp = SREG ;
    3b5c:	ef e5       	ldi	r30, 0x5F	; 95
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	80 81       	ld	r24, Z
    3b62:	8a 83       	std	Y+2, r24	; 0x02
				_CLI_;
    3b64:	f8 94       	cli
				OCR1AH  = Local_u16OCRValue >> _BYTE_SHIFT_ ;
    3b66:	eb e4       	ldi	r30, 0x4B	; 75
    3b68:	f0 e0       	ldi	r31, 0x00	; 0
    3b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    3b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    3b6e:	89 2f       	mov	r24, r25
    3b70:	99 27       	eor	r25, r25
    3b72:	80 83       	st	Z, r24
				OCR1AL 	= Local_u16OCRValue ;
    3b74:	ea e4       	ldi	r30, 0x4A	; 74
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	8c 81       	ldd	r24, Y+4	; 0x04
    3b7a:	80 83       	st	Z, r24
				SREG = Local_u8Temp;
    3b7c:	ef e5       	ldi	r30, 0x5F	; 95
    3b7e:	f0 e0       	ldi	r31, 0x00	; 0
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	80 83       	st	Z, r24
				Global_u16OCR1A_Value = Local_u16OCRValue ;
    3b84:	8c 81       	ldd	r24, Y+4	; 0x04
    3b86:	9d 81       	ldd	r25, Y+5	; 0x05
    3b88:	90 93 20 02 	sts	0x0220, r25
    3b8c:	80 93 1f 02 	sts	0x021F, r24
    3b90:	23 c0       	rjmp	.+70     	; 0x3bd8 <PWM_enuSetDutyCycle+0xf02>
			}
			else if( Copy_u8TimerNum == TIMER1B )
    3b92:	8c 85       	ldd	r24, Y+12	; 0x0c
    3b94:	8a 3c       	cpi	r24, 0xCA	; 202
    3b96:	01 f5       	brne	.+64     	; 0x3bd8 <PWM_enuSetDutyCycle+0xf02>
			{
				u8 Local_u8Temp = SREG ;
    3b98:	ef e5       	ldi	r30, 0x5F	; 95
    3b9a:	f0 e0       	ldi	r31, 0x00	; 0
    3b9c:	80 81       	ld	r24, Z
    3b9e:	89 83       	std	Y+1, r24	; 0x01
				_CLI_;
    3ba0:	f8 94       	cli
				OCR1BH  = Local_u16OCRValue >> _BYTE_SHIFT_ ;
    3ba2:	e9 e4       	ldi	r30, 0x49	; 73
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    3baa:	89 2f       	mov	r24, r25
    3bac:	99 27       	eor	r25, r25
    3bae:	80 83       	st	Z, r24
				OCR1BL 	= Local_u16OCRValue ;
    3bb0:	e8 e4       	ldi	r30, 0x48	; 72
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    3bb6:	80 83       	st	Z, r24
				SREG = Local_u8Temp;
    3bb8:	ef e5       	ldi	r30, 0x5F	; 95
    3bba:	f0 e0       	ldi	r31, 0x00	; 0
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	80 83       	st	Z, r24
				Global_u16OCR1B_Value = Local_u16OCRValue ;
    3bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bc4:	90 93 22 02 	sts	0x0222, r25
    3bc8:	80 93 21 02 	sts	0x0221, r24
    3bcc:	05 c0       	rjmp	.+10     	; 0x3bd8 <PWM_enuSetDutyCycle+0xf02>
			}
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    3bce:	82 e0       	ldi	r24, 0x02	; 2
    3bd0:	8b 87       	std	Y+11, r24	; 0x0b
    3bd2:	02 c0       	rjmp	.+4      	; 0x3bd8 <PWM_enuSetDutyCycle+0xf02>
			#warning " PWM_enuSetDutyCycle(): Requested Duty Cycle Can NOT be reached in this mode "
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    3bd4:	82 e0       	ldi	r24, 0x02	; 2
    3bd6:	8b 87       	std	Y+11, r24	; 0x0b

	return ( Local_enuErrorState == ES_NOK ? ES_OK : Local_enuErrorState ) ;
    3bd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bda:	81 30       	cpi	r24, 0x01	; 1
    3bdc:	19 f0       	breq	.+6      	; 0x3be4 <PWM_enuSetDutyCycle+0xf0e>
    3bde:	2b 85       	ldd	r18, Y+11	; 0x0b
    3be0:	29 8b       	std	Y+17, r18	; 0x11
    3be2:	01 c0       	rjmp	.+2      	; 0x3be6 <PWM_enuSetDutyCycle+0xf10>
    3be4:	19 8a       	std	Y+17, r1	; 0x11
    3be6:	89 89       	ldd	r24, Y+17	; 0x11
}
    3be8:	6d 96       	adiw	r28, 0x1d	; 29
    3bea:	0f b6       	in	r0, 0x3f	; 63
    3bec:	f8 94       	cli
    3bee:	de bf       	out	0x3e, r29	; 62
    3bf0:	0f be       	out	0x3f, r0	; 63
    3bf2:	cd bf       	out	0x3d, r28	; 61
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	1f 91       	pop	r17
    3bfa:	0f 91       	pop	r16
    3bfc:	ff 90       	pop	r15
    3bfe:	ef 90       	pop	r14
    3c00:	08 95       	ret

00003c02 <PWM_enuInterruptEnable>:

ES_t PWM_enuInterruptEnable( u8 Copy_u8TimerIntName)
{
    3c02:	df 93       	push	r29
    3c04:	cf 93       	push	r28
    3c06:	00 d0       	rcall	.+0      	; 0x3c08 <PWM_enuInterruptEnable+0x6>
    3c08:	00 d0       	rcall	.+0      	; 0x3c0a <PWM_enuInterruptEnable+0x8>
    3c0a:	0f 92       	push	r0
    3c0c:	cd b7       	in	r28, 0x3d	; 61
    3c0e:	de b7       	in	r29, 0x3e	; 62
    3c10:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3c12:	81 e0       	ldi	r24, 0x01	; 1
    3c14:	89 83       	std	Y+1, r24	; 0x01

	_CLI_;														// Disable all Interrupts
    3c16:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    3c18:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1a:	28 2f       	mov	r18, r24
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	3d 83       	std	Y+5, r19	; 0x05
    3c20:	2c 83       	std	Y+4, r18	; 0x04
    3c22:	8c 81       	ldd	r24, Y+4	; 0x04
    3c24:	9d 81       	ldd	r25, Y+5	; 0x05
    3c26:	8f 33       	cpi	r24, 0x3F	; 63
    3c28:	91 05       	cpc	r25, r1
    3c2a:	91 f0       	breq	.+36     	; 0x3c50 <PWM_enuInterruptEnable+0x4e>
    3c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    3c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    3c30:	20 34       	cpi	r18, 0x40	; 64
    3c32:	31 05       	cpc	r19, r1
    3c34:	a9 f0       	breq	.+42     	; 0x3c60 <PWM_enuInterruptEnable+0x5e>
    3c36:	8c 81       	ldd	r24, Y+4	; 0x04
    3c38:	9d 81       	ldd	r25, Y+5	; 0x05
    3c3a:	8e 33       	cpi	r24, 0x3E	; 62
    3c3c:	91 05       	cpc	r25, r1
    3c3e:	c1 f4       	brne	.+48     	; 0x3c70 <PWM_enuInterruptEnable+0x6e>
	{
		case TOIE1	:	SET_BIT( TIMSK , TOIE1_BIT);
    3c40:	a9 e5       	ldi	r26, 0x59	; 89
    3c42:	b0 e0       	ldi	r27, 0x00	; 0
    3c44:	e9 e5       	ldi	r30, 0x59	; 89
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	80 81       	ld	r24, Z
    3c4a:	84 60       	ori	r24, 0x04	; 4
    3c4c:	8c 93       	st	X, r24
    3c4e:	12 c0       	rjmp	.+36     	; 0x3c74 <PWM_enuInterruptEnable+0x72>
						break;
		case OCIE1B	:	SET_BIT( TIMSK , OCIE1B_BIT);
    3c50:	a9 e5       	ldi	r26, 0x59	; 89
    3c52:	b0 e0       	ldi	r27, 0x00	; 0
    3c54:	e9 e5       	ldi	r30, 0x59	; 89
    3c56:	f0 e0       	ldi	r31, 0x00	; 0
    3c58:	80 81       	ld	r24, Z
    3c5a:	88 60       	ori	r24, 0x08	; 8
    3c5c:	8c 93       	st	X, r24
    3c5e:	0a c0       	rjmp	.+20     	; 0x3c74 <PWM_enuInterruptEnable+0x72>
						break;
		case OCIE1A	:	SET_BIT( TIMSK , OCIE1A_BIT);
    3c60:	a9 e5       	ldi	r26, 0x59	; 89
    3c62:	b0 e0       	ldi	r27, 0x00	; 0
    3c64:	e9 e5       	ldi	r30, 0x59	; 89
    3c66:	f0 e0       	ldi	r31, 0x00	; 0
    3c68:	80 81       	ld	r24, Z
    3c6a:	80 61       	ori	r24, 0x10	; 16
    3c6c:	8c 93       	st	X, r24
    3c6e:	02 c0       	rjmp	.+4      	; 0x3c74 <PWM_enuInterruptEnable+0x72>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}
	_SEI_;													// Enable ALL Interrupts
    3c74:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3c76:	89 81       	ldd	r24, Y+1	; 0x01
    3c78:	81 30       	cpi	r24, 0x01	; 1
    3c7a:	19 f0       	breq	.+6      	; 0x3c82 <PWM_enuInterruptEnable+0x80>
    3c7c:	99 81       	ldd	r25, Y+1	; 0x01
    3c7e:	9b 83       	std	Y+3, r25	; 0x03
    3c80:	01 c0       	rjmp	.+2      	; 0x3c84 <PWM_enuInterruptEnable+0x82>
    3c82:	1b 82       	std	Y+3, r1	; 0x03
    3c84:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3c86:	0f 90       	pop	r0
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	0f 90       	pop	r0
    3c8e:	0f 90       	pop	r0
    3c90:	cf 91       	pop	r28
    3c92:	df 91       	pop	r29
    3c94:	08 95       	ret

00003c96 <PWM_enuInterruptDisable>:

ES_t PWM_enuInterruptDisable( u8 Copy_u8TimerIntName)
{
    3c96:	df 93       	push	r29
    3c98:	cf 93       	push	r28
    3c9a:	00 d0       	rcall	.+0      	; 0x3c9c <PWM_enuInterruptDisable+0x6>
    3c9c:	00 d0       	rcall	.+0      	; 0x3c9e <PWM_enuInterruptDisable+0x8>
    3c9e:	0f 92       	push	r0
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	89 83       	std	Y+1, r24	; 0x01

	_CLI_;																// Disable ALL Interrupts
    3caa:	f8 94       	cli

	switch ( Copy_u8TimerIntName )
    3cac:	8a 81       	ldd	r24, Y+2	; 0x02
    3cae:	28 2f       	mov	r18, r24
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	3d 83       	std	Y+5, r19	; 0x05
    3cb4:	2c 83       	std	Y+4, r18	; 0x04
    3cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    3cba:	8f 33       	cpi	r24, 0x3F	; 63
    3cbc:	91 05       	cpc	r25, r1
    3cbe:	91 f0       	breq	.+36     	; 0x3ce4 <PWM_enuInterruptDisable+0x4e>
    3cc0:	2c 81       	ldd	r18, Y+4	; 0x04
    3cc2:	3d 81       	ldd	r19, Y+5	; 0x05
    3cc4:	20 34       	cpi	r18, 0x40	; 64
    3cc6:	31 05       	cpc	r19, r1
    3cc8:	a9 f0       	breq	.+42     	; 0x3cf4 <PWM_enuInterruptDisable+0x5e>
    3cca:	8c 81       	ldd	r24, Y+4	; 0x04
    3ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    3cce:	8e 33       	cpi	r24, 0x3E	; 62
    3cd0:	91 05       	cpc	r25, r1
    3cd2:	c1 f4       	brne	.+48     	; 0x3d04 <PWM_enuInterruptDisable+0x6e>
	{
		case TOIE1	:	CLR_BIT( TIMSK , TOIE1_BIT);
    3cd4:	a9 e5       	ldi	r26, 0x59	; 89
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	e9 e5       	ldi	r30, 0x59	; 89
    3cda:	f0 e0       	ldi	r31, 0x00	; 0
    3cdc:	80 81       	ld	r24, Z
    3cde:	8b 7f       	andi	r24, 0xFB	; 251
    3ce0:	8c 93       	st	X, r24
    3ce2:	12 c0       	rjmp	.+36     	; 0x3d08 <PWM_enuInterruptDisable+0x72>
						break;
		case OCIE1B	:	CLR_BIT( TIMSK , OCIE1B_BIT);
    3ce4:	a9 e5       	ldi	r26, 0x59	; 89
    3ce6:	b0 e0       	ldi	r27, 0x00	; 0
    3ce8:	e9 e5       	ldi	r30, 0x59	; 89
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	80 81       	ld	r24, Z
    3cee:	87 7f       	andi	r24, 0xF7	; 247
    3cf0:	8c 93       	st	X, r24
    3cf2:	0a c0       	rjmp	.+20     	; 0x3d08 <PWM_enuInterruptDisable+0x72>
						break;
		case OCIE1A	:	CLR_BIT( TIMSK , OCIE1A_BIT);
    3cf4:	a9 e5       	ldi	r26, 0x59	; 89
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	e9 e5       	ldi	r30, 0x59	; 89
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 81       	ld	r24, Z
    3cfe:	8f 7e       	andi	r24, 0xEF	; 239
    3d00:	8c 93       	st	X, r24
    3d02:	02 c0       	rjmp	.+4      	; 0x3d08 <PWM_enuInterruptDisable+0x72>
						break;
		default		:	Local_enuErrorState = ES_OUT_RANGE;
    3d04:	82 e0       	ldi	r24, 0x02	; 2
    3d06:	89 83       	std	Y+1, r24	; 0x01
						#warning " Timer_enuInterruptEnable() : Unidentified Interrupt Name, No Action Taken."
	}

	_SEI_;																// Re-Enable Global Interrupt
    3d08:	78 94       	sei

	return ( (Local_enuErrorState == ES_NOK)? ES_OK : Local_enuErrorState ) ;
    3d0a:	89 81       	ldd	r24, Y+1	; 0x01
    3d0c:	81 30       	cpi	r24, 0x01	; 1
    3d0e:	19 f0       	breq	.+6      	; 0x3d16 <PWM_enuInterruptDisable+0x80>
    3d10:	99 81       	ldd	r25, Y+1	; 0x01
    3d12:	9b 83       	std	Y+3, r25	; 0x03
    3d14:	01 c0       	rjmp	.+2      	; 0x3d18 <PWM_enuInterruptDisable+0x82>
    3d16:	1b 82       	std	Y+3, r1	; 0x03
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3d1a:	0f 90       	pop	r0
    3d1c:	0f 90       	pop	r0
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	cf 91       	pop	r28
    3d26:	df 91       	pop	r29
    3d28:	08 95       	ret

00003d2a <PWM_enuCallBack>:
	return ( ( Local_u8Status )? TRUE : FALSE ) ;
}
#endif

ES_t PWM_enuCallBack( u8 Copy_u8TimerIntName , void (*Copy_pAppFun)(void) )
{
    3d2a:	df 93       	push	r29
    3d2c:	cf 93       	push	r28
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <PWM_enuCallBack+0x6>
    3d30:	00 d0       	rcall	.+0      	; 0x3d32 <PWM_enuCallBack+0x8>
    3d32:	00 d0       	rcall	.+0      	; 0x3d34 <PWM_enuCallBack+0xa>
    3d34:	cd b7       	in	r28, 0x3d	; 61
    3d36:	de b7       	in	r29, 0x3e	; 62
    3d38:	8c 83       	std	Y+4, r24	; 0x04
    3d3a:	7e 83       	std	Y+6, r23	; 0x06
    3d3c:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	8b 83       	std	Y+3, r24	; 0x03

	u8 found = 0 ;
    3d42:	1a 82       	std	Y+2, r1	; 0x02

	if( Copy_pAppFun != NULL )
    3d44:	8d 81       	ldd	r24, Y+5	; 0x05
    3d46:	9e 81       	ldd	r25, Y+6	; 0x06
    3d48:	00 97       	sbiw	r24, 0x00	; 0
    3d4a:	79 f1       	breq	.+94     	; 0x3daa <PWM_enuCallBack+0x80>
    3d4c:	25 c0       	rjmp	.+74     	; 0x3d98 <PWM_enuCallBack+0x6e>
	{
		for( u8 Local_u8Iter; Local_u8Iter < PWM_INTERRUPTS ; Local_u8Iter++ )
		{
			if( Global_AstrPWM_Pointers[Local_u8Iter].InterruptName == Copy_u8TimerIntName )
    3d4e:	89 81       	ldd	r24, Y+1	; 0x01
    3d50:	28 2f       	mov	r18, r24
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	c9 01       	movw	r24, r18
    3d56:	88 0f       	add	r24, r24
    3d58:	99 1f       	adc	r25, r25
    3d5a:	82 0f       	add	r24, r18
    3d5c:	93 1f       	adc	r25, r19
    3d5e:	fc 01       	movw	r30, r24
    3d60:	e2 57       	subi	r30, 0x72	; 114
    3d62:	fe 4f       	sbci	r31, 0xFE	; 254
    3d64:	90 81       	ld	r25, Z
    3d66:	8c 81       	ldd	r24, Y+4	; 0x04
    3d68:	98 17       	cp	r25, r24
    3d6a:	99 f4       	brne	.+38     	; 0x3d92 <PWM_enuCallBack+0x68>
			{
				Global_AstrPWM_Pointers[Local_u8Iter].ptrFun = Copy_pAppFun;
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	28 2f       	mov	r18, r24
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	c9 01       	movw	r24, r18
    3d74:	88 0f       	add	r24, r24
    3d76:	99 1f       	adc	r25, r25
    3d78:	82 0f       	add	r24, r18
    3d7a:	93 1f       	adc	r25, r19
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	e1 57       	subi	r30, 0x71	; 113
    3d80:	fe 4f       	sbci	r31, 0xFE	; 254
    3d82:	8d 81       	ldd	r24, Y+5	; 0x05
    3d84:	9e 81       	ldd	r25, Y+6	; 0x06
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
				Local_enuErrorState = ES_OK ;
    3d8a:	1b 82       	std	Y+3, r1	; 0x03
				found = 1;
    3d8c:	81 e0       	ldi	r24, 0x01	; 1
    3d8e:	8a 83       	std	Y+2, r24	; 0x02
    3d90:	06 c0       	rjmp	.+12     	; 0x3d9e <PWM_enuCallBack+0x74>

	u8 found = 0 ;

	if( Copy_pAppFun != NULL )
	{
		for( u8 Local_u8Iter; Local_u8Iter < PWM_INTERRUPTS ; Local_u8Iter++ )
    3d92:	89 81       	ldd	r24, Y+1	; 0x01
    3d94:	8f 5f       	subi	r24, 0xFF	; 255
    3d96:	89 83       	std	Y+1, r24	; 0x01
    3d98:	89 81       	ldd	r24, Y+1	; 0x01
    3d9a:	83 30       	cpi	r24, 0x03	; 3
    3d9c:	c0 f2       	brcs	.-80     	; 0x3d4e <PWM_enuCallBack+0x24>
				Local_enuErrorState = ES_OK ;
				found = 1;
				break;
			}
		}
		if(!found) Local_enuErrorState = ES_OUT_RANGE ;
    3d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3da0:	88 23       	and	r24, r24
    3da2:	29 f4       	brne	.+10     	; 0x3dae <PWM_enuCallBack+0x84>
    3da4:	82 e0       	ldi	r24, 0x02	; 2
    3da6:	8b 83       	std	Y+3, r24	; 0x03
    3da8:	02 c0       	rjmp	.+4      	; 0x3dae <PWM_enuCallBack+0x84>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    3daa:	83 e0       	ldi	r24, 0x03	; 3
    3dac:	8b 83       	std	Y+3, r24	; 0x03

	return Local_enuErrorState ;
    3dae:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3db0:	26 96       	adiw	r28, 0x06	; 6
    3db2:	0f b6       	in	r0, 0x3f	; 63
    3db4:	f8 94       	cli
    3db6:	de bf       	out	0x3e, r29	; 62
    3db8:	0f be       	out	0x3f, r0	; 63
    3dba:	cd bf       	out	0x3d, r28	; 61
    3dbc:	cf 91       	pop	r28
    3dbe:	df 91       	pop	r29
    3dc0:	08 95       	ret

00003dc2 <__vector_7>:
void __vector_8( void )__attribute__((signal));		/*	Timer1	Compare Match B Interrupt ISR	*/
void __vector_9( void )__attribute__((signal));		/*	Timer1	Overflow Interrupt	ISR			*/


void __vector_7( void )/*	OCIE1A	*/
{
    3dc2:	1f 92       	push	r1
    3dc4:	0f 92       	push	r0
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	0f 92       	push	r0
    3dca:	11 24       	eor	r1, r1
    3dcc:	2f 93       	push	r18
    3dce:	3f 93       	push	r19
    3dd0:	4f 93       	push	r20
    3dd2:	5f 93       	push	r21
    3dd4:	6f 93       	push	r22
    3dd6:	7f 93       	push	r23
    3dd8:	8f 93       	push	r24
    3dda:	9f 93       	push	r25
    3ddc:	af 93       	push	r26
    3dde:	bf 93       	push	r27
    3de0:	ef 93       	push	r30
    3de2:	ff 93       	push	r31
    3de4:	df 93       	push	r29
    3de6:	cf 93       	push	r28
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[2].ptrFun != NULL )
    3dec:	80 91 95 01 	lds	r24, 0x0195
    3df0:	90 91 96 01 	lds	r25, 0x0196
    3df4:	00 97       	sbiw	r24, 0x00	; 0
    3df6:	29 f0       	breq	.+10     	; 0x3e02 <__vector_7+0x40>
	{
		(*Global_AstrPWM_Pointers[2].ptrFun)( );
    3df8:	e0 91 95 01 	lds	r30, 0x0195
    3dfc:	f0 91 96 01 	lds	r31, 0x0196
    3e00:	09 95       	icall
	}
}
    3e02:	cf 91       	pop	r28
    3e04:	df 91       	pop	r29
    3e06:	ff 91       	pop	r31
    3e08:	ef 91       	pop	r30
    3e0a:	bf 91       	pop	r27
    3e0c:	af 91       	pop	r26
    3e0e:	9f 91       	pop	r25
    3e10:	8f 91       	pop	r24
    3e12:	7f 91       	pop	r23
    3e14:	6f 91       	pop	r22
    3e16:	5f 91       	pop	r21
    3e18:	4f 91       	pop	r20
    3e1a:	3f 91       	pop	r19
    3e1c:	2f 91       	pop	r18
    3e1e:	0f 90       	pop	r0
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	0f 90       	pop	r0
    3e24:	1f 90       	pop	r1
    3e26:	18 95       	reti

00003e28 <__vector_8>:
void __vector_8( void )/*	OCIE1B	*/
{
    3e28:	1f 92       	push	r1
    3e2a:	0f 92       	push	r0
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	0f 92       	push	r0
    3e30:	11 24       	eor	r1, r1
    3e32:	2f 93       	push	r18
    3e34:	3f 93       	push	r19
    3e36:	4f 93       	push	r20
    3e38:	5f 93       	push	r21
    3e3a:	6f 93       	push	r22
    3e3c:	7f 93       	push	r23
    3e3e:	8f 93       	push	r24
    3e40:	9f 93       	push	r25
    3e42:	af 93       	push	r26
    3e44:	bf 93       	push	r27
    3e46:	ef 93       	push	r30
    3e48:	ff 93       	push	r31
    3e4a:	df 93       	push	r29
    3e4c:	cf 93       	push	r28
    3e4e:	cd b7       	in	r28, 0x3d	; 61
    3e50:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[1].ptrFun != NULL )
    3e52:	80 91 92 01 	lds	r24, 0x0192
    3e56:	90 91 93 01 	lds	r25, 0x0193
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	29 f0       	breq	.+10     	; 0x3e68 <__vector_8+0x40>
	{
		(*Global_AstrPWM_Pointers[1].ptrFun)( );
    3e5e:	e0 91 92 01 	lds	r30, 0x0192
    3e62:	f0 91 93 01 	lds	r31, 0x0193
    3e66:	09 95       	icall
	}
}
    3e68:	cf 91       	pop	r28
    3e6a:	df 91       	pop	r29
    3e6c:	ff 91       	pop	r31
    3e6e:	ef 91       	pop	r30
    3e70:	bf 91       	pop	r27
    3e72:	af 91       	pop	r26
    3e74:	9f 91       	pop	r25
    3e76:	8f 91       	pop	r24
    3e78:	7f 91       	pop	r23
    3e7a:	6f 91       	pop	r22
    3e7c:	5f 91       	pop	r21
    3e7e:	4f 91       	pop	r20
    3e80:	3f 91       	pop	r19
    3e82:	2f 91       	pop	r18
    3e84:	0f 90       	pop	r0
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	0f 90       	pop	r0
    3e8a:	1f 90       	pop	r1
    3e8c:	18 95       	reti

00003e8e <__vector_9>:
void __vector_9( void )/*	TOIE1	*/
{
    3e8e:	1f 92       	push	r1
    3e90:	0f 92       	push	r0
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	0f 92       	push	r0
    3e96:	11 24       	eor	r1, r1
    3e98:	2f 93       	push	r18
    3e9a:	3f 93       	push	r19
    3e9c:	4f 93       	push	r20
    3e9e:	5f 93       	push	r21
    3ea0:	6f 93       	push	r22
    3ea2:	7f 93       	push	r23
    3ea4:	8f 93       	push	r24
    3ea6:	9f 93       	push	r25
    3ea8:	af 93       	push	r26
    3eaa:	bf 93       	push	r27
    3eac:	ef 93       	push	r30
    3eae:	ff 93       	push	r31
    3eb0:	df 93       	push	r29
    3eb2:	cf 93       	push	r28
    3eb4:	cd b7       	in	r28, 0x3d	; 61
    3eb6:	de b7       	in	r29, 0x3e	; 62
	if( Global_AstrPWM_Pointers[0].ptrFun != NULL )
    3eb8:	80 91 8f 01 	lds	r24, 0x018F
    3ebc:	90 91 90 01 	lds	r25, 0x0190
    3ec0:	00 97       	sbiw	r24, 0x00	; 0
    3ec2:	29 f0       	breq	.+10     	; 0x3ece <__vector_9+0x40>
	{
		(*Global_AstrPWM_Pointers[0].ptrFun)( );
    3ec4:	e0 91 8f 01 	lds	r30, 0x018F
    3ec8:	f0 91 90 01 	lds	r31, 0x0190
    3ecc:	09 95       	icall
	}
}
    3ece:	cf 91       	pop	r28
    3ed0:	df 91       	pop	r29
    3ed2:	ff 91       	pop	r31
    3ed4:	ef 91       	pop	r30
    3ed6:	bf 91       	pop	r27
    3ed8:	af 91       	pop	r26
    3eda:	9f 91       	pop	r25
    3edc:	8f 91       	pop	r24
    3ede:	7f 91       	pop	r23
    3ee0:	6f 91       	pop	r22
    3ee2:	5f 91       	pop	r21
    3ee4:	4f 91       	pop	r20
    3ee6:	3f 91       	pop	r19
    3ee8:	2f 91       	pop	r18
    3eea:	0f 90       	pop	r0
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	0f 90       	pop	r0
    3ef0:	1f 90       	pop	r1
    3ef2:	18 95       	reti

00003ef4 <EEPROM_enuWriteByte>:
#include "..\..\SHARED\errorState.h"

#include "EEPROM_priv.h"

ES_t EEPROM_enuWriteByte( u16 Copy_u16Address , u8 Copy_u8Data )
{
    3ef4:	df 93       	push	r29
    3ef6:	cf 93       	push	r28
    3ef8:	00 d0       	rcall	.+0      	; 0x3efa <EEPROM_enuWriteByte+0x6>
    3efa:	00 d0       	rcall	.+0      	; 0x3efc <EEPROM_enuWriteByte+0x8>
    3efc:	cd b7       	in	r28, 0x3d	; 61
    3efe:	de b7       	in	r29, 0x3e	; 62
    3f00:	9b 83       	std	Y+3, r25	; 0x03
    3f02:	8a 83       	std	Y+2, r24	; 0x02
    3f04:	6c 83       	std	Y+4, r22	; 0x04
	while( ( ( EECR >> EEWE ) & _BIT_MASK_ ) );
    3f06:	ec e3       	ldi	r30, 0x3C	; 60
    3f08:	f0 e0       	ldi	r31, 0x00	; 0
    3f0a:	80 81       	ld	r24, Z
    3f0c:	86 95       	lsr	r24
    3f0e:	88 2f       	mov	r24, r24
    3f10:	90 e0       	ldi	r25, 0x00	; 0
    3f12:	81 70       	andi	r24, 0x01	; 1
    3f14:	90 70       	andi	r25, 0x00	; 0
    3f16:	88 23       	and	r24, r24
    3f18:	b1 f7       	brne	.-20     	; 0x3f06 <EEPROM_enuWriteByte+0x12>
	while( ( ( SPMCR >> SPMEN ) & _BIT_MASK_ ) );
    3f1a:	e7 e5       	ldi	r30, 0x57	; 87
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	80 81       	ld	r24, Z
    3f20:	88 2f       	mov	r24, r24
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	81 70       	andi	r24, 0x01	; 1
    3f26:	90 70       	andi	r25, 0x00	; 0
    3f28:	88 23       	and	r24, r24
    3f2a:	b9 f7       	brne	.-18     	; 0x3f1a <EEPROM_enuWriteByte+0x26>

	u8 Local_u8CopySREG = SREG ;						// Keeping a copy of Status register SREG
    3f2c:	ef e5       	ldi	r30, 0x5F	; 95
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	80 81       	ld	r24, Z
    3f32:	89 83       	std	Y+1, r24	; 0x01
	_CLI_;												// Disable Interrupts
    3f34:	f8 94       	cli

	EEARH = ( Copy_u16Address >> _BYTE_SHIFT_ );		// Writing the higher byte of address in EEARH
    3f36:	ef e3       	ldi	r30, 0x3F	; 63
    3f38:	f0 e0       	ldi	r31, 0x00	; 0
    3f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f3e:	89 2f       	mov	r24, r25
    3f40:	99 27       	eor	r25, r25
    3f42:	80 83       	st	Z, r24
	EEARL = (u8)Copy_u16Address;						// Writing the Lower byte of address in EEARL
    3f44:	ee e3       	ldi	r30, 0x3E	; 62
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4a:	80 83       	st	Z, r24
	EEDR = Copy_u8Data ;								// Writing the data byte in EEDR register
    3f4c:	ed e3       	ldi	r30, 0x3D	; 61
    3f4e:	f0 e0       	ldi	r31, 0x00	; 0
    3f50:	8c 81       	ldd	r24, Y+4	; 0x04
    3f52:	80 83       	st	Z, r24
	asm( " SBI 0x1C,2 " );								// Setting EEMWE bit in EECR register
    3f54:	e2 9a       	sbi	0x1c, 2	; 28
	asm( " SBI 0x1C,1 " );								// Setting EEWE bit in EECR register
    3f56:	e1 9a       	sbi	0x1c, 1	; 28

	SREG = Local_u8CopySREG ;
    3f58:	ef e5       	ldi	r30, 0x5F	; 95
    3f5a:	f0 e0       	ldi	r31, 0x00	; 0
    3f5c:	89 81       	ldd	r24, Y+1	; 0x01
    3f5e:	80 83       	st	Z, r24
	return ES_OK;
    3f60:	80 e0       	ldi	r24, 0x00	; 0
}
    3f62:	0f 90       	pop	r0
    3f64:	0f 90       	pop	r0
    3f66:	0f 90       	pop	r0
    3f68:	0f 90       	pop	r0
    3f6a:	cf 91       	pop	r28
    3f6c:	df 91       	pop	r29
    3f6e:	08 95       	ret

00003f70 <EEPROM_enuReadByte>:

ES_t EEPROM_enuReadByte( u16 Copy_u16Address , u8 *Copy_pu8Data )
{
    3f70:	df 93       	push	r29
    3f72:	cf 93       	push	r28
    3f74:	00 d0       	rcall	.+0      	; 0x3f76 <EEPROM_enuReadByte+0x6>
    3f76:	00 d0       	rcall	.+0      	; 0x3f78 <EEPROM_enuReadByte+0x8>
    3f78:	0f 92       	push	r0
    3f7a:	cd b7       	in	r28, 0x3d	; 61
    3f7c:	de b7       	in	r29, 0x3e	; 62
    3f7e:	9b 83       	std	Y+3, r25	; 0x03
    3f80:	8a 83       	std	Y+2, r24	; 0x02
    3f82:	7d 83       	std	Y+5, r23	; 0x05
    3f84:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pu8Data != NULL )
    3f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	f1 f0       	breq	.+60     	; 0x3fce <EEPROM_enuReadByte+0x5e>
	{
		while( ( ( EECR >> EEWE ) & 1 ) );
    3f92:	ec e3       	ldi	r30, 0x3C	; 60
    3f94:	f0 e0       	ldi	r31, 0x00	; 0
    3f96:	80 81       	ld	r24, Z
    3f98:	86 95       	lsr	r24
    3f9a:	88 2f       	mov	r24, r24
    3f9c:	90 e0       	ldi	r25, 0x00	; 0
    3f9e:	81 70       	andi	r24, 0x01	; 1
    3fa0:	90 70       	andi	r25, 0x00	; 0
    3fa2:	88 23       	and	r24, r24
    3fa4:	b1 f7       	brne	.-20     	; 0x3f92 <EEPROM_enuReadByte+0x22>
		EEARH = ( Copy_u16Address >> _BYTE_SHIFT_ );	// Writing the Higher byte of address in EEARH
    3fa6:	ef e3       	ldi	r30, 0x3F	; 63
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	8a 81       	ldd	r24, Y+2	; 0x02
    3fac:	9b 81       	ldd	r25, Y+3	; 0x03
    3fae:	89 2f       	mov	r24, r25
    3fb0:	99 27       	eor	r25, r25
    3fb2:	80 83       	st	Z, r24
		EEARL = (u8)Copy_u16Address;					// Writing the Lower byte of address in EEARL
    3fb4:	ee e3       	ldi	r30, 0x3E	; 62
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fba:	80 83       	st	Z, r24
		asm( " SBI 0x1C,0 " );							// Setting EERE bit in EECR register
    3fbc:	e0 9a       	sbi	0x1c, 0	; 28
		* Copy_pu8Data = EEDR ;							// Reading the data byte from EEDR register
    3fbe:	ed e3       	ldi	r30, 0x3D	; 61
    3fc0:	f0 e0       	ldi	r31, 0x00	; 0
    3fc2:	80 81       	ld	r24, Z
    3fc4:	ec 81       	ldd	r30, Y+4	; 0x04
    3fc6:	fd 81       	ldd	r31, Y+5	; 0x05
    3fc8:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK ;
    3fca:	19 82       	std	Y+1, r1	; 0x01
    3fcc:	02 c0       	rjmp	.+4      	; 0x3fd2 <EEPROM_enuReadByte+0x62>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    3fce:	83 e0       	ldi	r24, 0x03	; 3
    3fd0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    3fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fd4:	0f 90       	pop	r0
    3fd6:	0f 90       	pop	r0
    3fd8:	0f 90       	pop	r0
    3fda:	0f 90       	pop	r0
    3fdc:	0f 90       	pop	r0
    3fde:	cf 91       	pop	r28
    3fe0:	df 91       	pop	r29
    3fe2:	08 95       	ret

00003fe4 <DIO_enuInit>:
#include "..\..\SHARED\errorState.h"

#include "DIO_priv.h"

ES_t DIO_enuInit(void)
{
    3fe4:	df 93       	push	r29
    3fe6:	cf 93       	push	r28
    3fe8:	cd b7       	in	r28, 0x3d	; 61
    3fea:	de b7       	in	r29, 0x3e	; 62
	return ES_OK ;
    3fec:	80 e0       	ldi	r24, 0x00	; 0
}
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	08 95       	ret

00003ff4 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    3ff4:	df 93       	push	r29
    3ff6:	cf 93       	push	r28
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <DIO_enuSetPinDirection+0x6>
    3ffa:	00 d0       	rcall	.+0      	; 0x3ffc <DIO_enuSetPinDirection+0x8>
    3ffc:	00 d0       	rcall	.+0      	; 0x3ffe <DIO_enuSetPinDirection+0xa>
    3ffe:	cd b7       	in	r28, 0x3d	; 61
    4000:	de b7       	in	r29, 0x3e	; 62
    4002:	8a 83       	std	Y+2, r24	; 0x02
    4004:	6b 83       	std	Y+3, r22	; 0x03
    4006:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	89 83       	std	Y+1, r24	; 0x01

	if ( (	Copy_u8GroupID >= DIO_u8GROUP_A && Copy_u8GroupID <= DIO_u8GROUP_D 	)	&&
    400c:	8a 81       	ldd	r24, Y+2	; 0x02
    400e:	8c 30       	cpi	r24, 0x0C	; 12
    4010:	08 f4       	brcc	.+2      	; 0x4014 <DIO_enuSetPinDirection+0x20>
    4012:	df c0       	rjmp	.+446    	; 0x41d2 <DIO_enuSetPinDirection+0x1de>
    4014:	8a 81       	ldd	r24, Y+2	; 0x02
    4016:	82 32       	cpi	r24, 0x22	; 34
    4018:	08 f0       	brcs	.+2      	; 0x401c <DIO_enuSetPinDirection+0x28>
    401a:	db c0       	rjmp	.+438    	; 0x41d2 <DIO_enuSetPinDirection+0x1de>
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	88 30       	cpi	r24, 0x08	; 8
    4020:	08 f0       	brcs	.+2      	; 0x4024 <DIO_enuSetPinDirection+0x30>
    4022:	d7 c0       	rjmp	.+430    	; 0x41d2 <DIO_enuSetPinDirection+0x1de>
    4024:	8c 81       	ldd	r24, Y+4	; 0x04
    4026:	88 23       	and	r24, r24
    4028:	21 f0       	breq	.+8      	; 0x4032 <DIO_enuSetPinDirection+0x3e>
    402a:	8c 81       	ldd	r24, Y+4	; 0x04
    402c:	81 30       	cpi	r24, 0x01	; 1
    402e:	09 f0       	breq	.+2      	; 0x4032 <DIO_enuSetPinDirection+0x3e>
    4030:	d0 c0       	rjmp	.+416    	; 0x41d2 <DIO_enuSetPinDirection+0x1de>
		 (	Copy_u8PinID >= DIO_u8PIN0 		&& Copy_u8PinID <= DIO_u8PIN7 		)	&&
		 (	Copy_u8Direction == DIO_u8INPUT || Copy_u8Direction == DIO_u8OUTPUT ) )
	{
		switch (Copy_u8GroupID)
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
    4034:	28 2f       	mov	r18, r24
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	3e 83       	std	Y+6, r19	; 0x06
    403a:	2d 83       	std	Y+5, r18	; 0x05
    403c:	8d 81       	ldd	r24, Y+5	; 0x05
    403e:	9e 81       	ldd	r25, Y+6	; 0x06
    4040:	83 31       	cpi	r24, 0x13	; 19
    4042:	91 05       	cpc	r25, r1
    4044:	09 f4       	brne	.+2      	; 0x4048 <DIO_enuSetPinDirection+0x54>
    4046:	43 c0       	rjmp	.+134    	; 0x40ce <DIO_enuSetPinDirection+0xda>
    4048:	ed 81       	ldd	r30, Y+5	; 0x05
    404a:	fe 81       	ldd	r31, Y+6	; 0x06
    404c:	e4 31       	cpi	r30, 0x14	; 20
    404e:	f1 05       	cpc	r31, r1
    4050:	34 f4       	brge	.+12     	; 0x405e <DIO_enuSetPinDirection+0x6a>
    4052:	2d 81       	ldd	r18, Y+5	; 0x05
    4054:	3e 81       	ldd	r19, Y+6	; 0x06
    4056:	2c 30       	cpi	r18, 0x0C	; 12
    4058:	31 05       	cpc	r19, r1
    405a:	71 f0       	breq	.+28     	; 0x4078 <DIO_enuSetPinDirection+0x84>
    405c:	b8 c0       	rjmp	.+368    	; 0x41ce <DIO_enuSetPinDirection+0x1da>
    405e:	8d 81       	ldd	r24, Y+5	; 0x05
    4060:	9e 81       	ldd	r25, Y+6	; 0x06
    4062:	89 31       	cpi	r24, 0x19	; 25
    4064:	91 05       	cpc	r25, r1
    4066:	09 f4       	brne	.+2      	; 0x406a <DIO_enuSetPinDirection+0x76>
    4068:	5d c0       	rjmp	.+186    	; 0x4124 <DIO_enuSetPinDirection+0x130>
    406a:	ed 81       	ldd	r30, Y+5	; 0x05
    406c:	fe 81       	ldd	r31, Y+6	; 0x06
    406e:	e1 32       	cpi	r30, 0x21	; 33
    4070:	f1 05       	cpc	r31, r1
    4072:	09 f4       	brne	.+2      	; 0x4076 <DIO_enuSetPinDirection+0x82>
    4074:	82 c0       	rjmp	.+260    	; 0x417a <DIO_enuSetPinDirection+0x186>
    4076:	ab c0       	rjmp	.+342    	; 0x41ce <DIO_enuSetPinDirection+0x1da>
		{
			case DIO_u8GROUP_A:
				ASSIGN_BIT_VALUE( DDR_A , Copy_u8PinID , Copy_u8Direction );
    4078:	6a e3       	ldi	r22, 0x3A	; 58
    407a:	70 e0       	ldi	r23, 0x00	; 0
    407c:	aa e3       	ldi	r26, 0x3A	; 58
    407e:	b0 e0       	ldi	r27, 0x00	; 0
    4080:	ea e3       	ldi	r30, 0x3A	; 58
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	80 81       	ld	r24, Z
    4086:	48 2f       	mov	r20, r24
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
    408a:	28 2f       	mov	r18, r24
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	02 c0       	rjmp	.+4      	; 0x4098 <DIO_enuSetPinDirection+0xa4>
    4094:	88 0f       	add	r24, r24
    4096:	99 1f       	adc	r25, r25
    4098:	2a 95       	dec	r18
    409a:	e2 f7       	brpl	.-8      	; 0x4094 <DIO_enuSetPinDirection+0xa0>
    409c:	80 95       	com	r24
    409e:	84 23       	and	r24, r20
    40a0:	8c 93       	st	X, r24
    40a2:	8c 91       	ld	r24, X
    40a4:	48 2f       	mov	r20, r24
    40a6:	8c 81       	ldd	r24, Y+4	; 0x04
    40a8:	88 2f       	mov	r24, r24
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	9c 01       	movw	r18, r24
    40ae:	21 70       	andi	r18, 0x01	; 1
    40b0:	30 70       	andi	r19, 0x00	; 0
    40b2:	8b 81       	ldd	r24, Y+3	; 0x03
    40b4:	88 2f       	mov	r24, r24
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	f9 01       	movw	r30, r18
    40ba:	02 c0       	rjmp	.+4      	; 0x40c0 <DIO_enuSetPinDirection+0xcc>
    40bc:	ee 0f       	add	r30, r30
    40be:	ff 1f       	adc	r31, r31
    40c0:	8a 95       	dec	r24
    40c2:	e2 f7       	brpl	.-8      	; 0x40bc <DIO_enuSetPinDirection+0xc8>
    40c4:	cf 01       	movw	r24, r30
    40c6:	84 2b       	or	r24, r20
    40c8:	fb 01       	movw	r30, r22
    40ca:	80 83       	st	Z, r24
    40cc:	80 c0       	rjmp	.+256    	; 0x41ce <DIO_enuSetPinDirection+0x1da>
				break;
			case DIO_u8GROUP_B:
				ASSIGN_BIT_VALUE( DDR_B , Copy_u8PinID , Copy_u8Direction );
    40ce:	67 e3       	ldi	r22, 0x37	; 55
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	a7 e3       	ldi	r26, 0x37	; 55
    40d4:	b0 e0       	ldi	r27, 0x00	; 0
    40d6:	e7 e3       	ldi	r30, 0x37	; 55
    40d8:	f0 e0       	ldi	r31, 0x00	; 0
    40da:	80 81       	ld	r24, Z
    40dc:	48 2f       	mov	r20, r24
    40de:	8b 81       	ldd	r24, Y+3	; 0x03
    40e0:	28 2f       	mov	r18, r24
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	90 e0       	ldi	r25, 0x00	; 0
    40e8:	02 c0       	rjmp	.+4      	; 0x40ee <DIO_enuSetPinDirection+0xfa>
    40ea:	88 0f       	add	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	2a 95       	dec	r18
    40f0:	e2 f7       	brpl	.-8      	; 0x40ea <DIO_enuSetPinDirection+0xf6>
    40f2:	80 95       	com	r24
    40f4:	84 23       	and	r24, r20
    40f6:	8c 93       	st	X, r24
    40f8:	8c 91       	ld	r24, X
    40fa:	48 2f       	mov	r20, r24
    40fc:	8c 81       	ldd	r24, Y+4	; 0x04
    40fe:	88 2f       	mov	r24, r24
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	9c 01       	movw	r18, r24
    4104:	21 70       	andi	r18, 0x01	; 1
    4106:	30 70       	andi	r19, 0x00	; 0
    4108:	8b 81       	ldd	r24, Y+3	; 0x03
    410a:	88 2f       	mov	r24, r24
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	f9 01       	movw	r30, r18
    4110:	02 c0       	rjmp	.+4      	; 0x4116 <DIO_enuSetPinDirection+0x122>
    4112:	ee 0f       	add	r30, r30
    4114:	ff 1f       	adc	r31, r31
    4116:	8a 95       	dec	r24
    4118:	e2 f7       	brpl	.-8      	; 0x4112 <DIO_enuSetPinDirection+0x11e>
    411a:	cf 01       	movw	r24, r30
    411c:	84 2b       	or	r24, r20
    411e:	fb 01       	movw	r30, r22
    4120:	80 83       	st	Z, r24
    4122:	55 c0       	rjmp	.+170    	; 0x41ce <DIO_enuSetPinDirection+0x1da>
				break;
			case DIO_u8GROUP_C:
				ASSIGN_BIT_VALUE( DDR_C , Copy_u8PinID , Copy_u8Direction );
    4124:	64 e3       	ldi	r22, 0x34	; 52
    4126:	70 e0       	ldi	r23, 0x00	; 0
    4128:	a4 e3       	ldi	r26, 0x34	; 52
    412a:	b0 e0       	ldi	r27, 0x00	; 0
    412c:	e4 e3       	ldi	r30, 0x34	; 52
    412e:	f0 e0       	ldi	r31, 0x00	; 0
    4130:	80 81       	ld	r24, Z
    4132:	48 2f       	mov	r20, r24
    4134:	8b 81       	ldd	r24, Y+3	; 0x03
    4136:	28 2f       	mov	r18, r24
    4138:	30 e0       	ldi	r19, 0x00	; 0
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	02 c0       	rjmp	.+4      	; 0x4144 <DIO_enuSetPinDirection+0x150>
    4140:	88 0f       	add	r24, r24
    4142:	99 1f       	adc	r25, r25
    4144:	2a 95       	dec	r18
    4146:	e2 f7       	brpl	.-8      	; 0x4140 <DIO_enuSetPinDirection+0x14c>
    4148:	80 95       	com	r24
    414a:	84 23       	and	r24, r20
    414c:	8c 93       	st	X, r24
    414e:	8c 91       	ld	r24, X
    4150:	48 2f       	mov	r20, r24
    4152:	8c 81       	ldd	r24, Y+4	; 0x04
    4154:	88 2f       	mov	r24, r24
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	9c 01       	movw	r18, r24
    415a:	21 70       	andi	r18, 0x01	; 1
    415c:	30 70       	andi	r19, 0x00	; 0
    415e:	8b 81       	ldd	r24, Y+3	; 0x03
    4160:	88 2f       	mov	r24, r24
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	f9 01       	movw	r30, r18
    4166:	02 c0       	rjmp	.+4      	; 0x416c <DIO_enuSetPinDirection+0x178>
    4168:	ee 0f       	add	r30, r30
    416a:	ff 1f       	adc	r31, r31
    416c:	8a 95       	dec	r24
    416e:	e2 f7       	brpl	.-8      	; 0x4168 <DIO_enuSetPinDirection+0x174>
    4170:	cf 01       	movw	r24, r30
    4172:	84 2b       	or	r24, r20
    4174:	fb 01       	movw	r30, r22
    4176:	80 83       	st	Z, r24
    4178:	2a c0       	rjmp	.+84     	; 0x41ce <DIO_enuSetPinDirection+0x1da>
				break;
			case DIO_u8GROUP_D:
				ASSIGN_BIT_VALUE( DDR_D , Copy_u8PinID , Copy_u8Direction );
    417a:	61 e3       	ldi	r22, 0x31	; 49
    417c:	70 e0       	ldi	r23, 0x00	; 0
    417e:	a1 e3       	ldi	r26, 0x31	; 49
    4180:	b0 e0       	ldi	r27, 0x00	; 0
    4182:	e1 e3       	ldi	r30, 0x31	; 49
    4184:	f0 e0       	ldi	r31, 0x00	; 0
    4186:	80 81       	ld	r24, Z
    4188:	48 2f       	mov	r20, r24
    418a:	8b 81       	ldd	r24, Y+3	; 0x03
    418c:	28 2f       	mov	r18, r24
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	02 c0       	rjmp	.+4      	; 0x419a <DIO_enuSetPinDirection+0x1a6>
    4196:	88 0f       	add	r24, r24
    4198:	99 1f       	adc	r25, r25
    419a:	2a 95       	dec	r18
    419c:	e2 f7       	brpl	.-8      	; 0x4196 <DIO_enuSetPinDirection+0x1a2>
    419e:	80 95       	com	r24
    41a0:	84 23       	and	r24, r20
    41a2:	8c 93       	st	X, r24
    41a4:	8c 91       	ld	r24, X
    41a6:	48 2f       	mov	r20, r24
    41a8:	8c 81       	ldd	r24, Y+4	; 0x04
    41aa:	88 2f       	mov	r24, r24
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	9c 01       	movw	r18, r24
    41b0:	21 70       	andi	r18, 0x01	; 1
    41b2:	30 70       	andi	r19, 0x00	; 0
    41b4:	8b 81       	ldd	r24, Y+3	; 0x03
    41b6:	88 2f       	mov	r24, r24
    41b8:	90 e0       	ldi	r25, 0x00	; 0
    41ba:	f9 01       	movw	r30, r18
    41bc:	02 c0       	rjmp	.+4      	; 0x41c2 <DIO_enuSetPinDirection+0x1ce>
    41be:	ee 0f       	add	r30, r30
    41c0:	ff 1f       	adc	r31, r31
    41c2:	8a 95       	dec	r24
    41c4:	e2 f7       	brpl	.-8      	; 0x41be <DIO_enuSetPinDirection+0x1ca>
    41c6:	cf 01       	movw	r24, r30
    41c8:	84 2b       	or	r24, r20
    41ca:	fb 01       	movw	r30, r22
    41cc:	80 83       	st	Z, r24
				break;
		}
		Local_enuErrorState = ES_OK;
    41ce:	19 82       	std	Y+1, r1	; 0x01
    41d0:	02 c0       	rjmp	.+4      	; 0x41d6 <DIO_enuSetPinDirection+0x1e2>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    41d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    41d8:	26 96       	adiw	r28, 0x06	; 6
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	f8 94       	cli
    41de:	de bf       	out	0x3e, r29	; 62
    41e0:	0f be       	out	0x3f, r0	; 63
    41e2:	cd bf       	out	0x3d, r28	; 61
    41e4:	cf 91       	pop	r28
    41e6:	df 91       	pop	r29
    41e8:	08 95       	ret

000041ea <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    41ea:	df 93       	push	r29
    41ec:	cf 93       	push	r28
    41ee:	00 d0       	rcall	.+0      	; 0x41f0 <DIO_enuSetPinValue+0x6>
    41f0:	00 d0       	rcall	.+0      	; 0x41f2 <DIO_enuSetPinValue+0x8>
    41f2:	00 d0       	rcall	.+0      	; 0x41f4 <DIO_enuSetPinValue+0xa>
    41f4:	cd b7       	in	r28, 0x3d	; 61
    41f6:	de b7       	in	r29, 0x3e	; 62
    41f8:	8a 83       	std	Y+2, r24	; 0x02
    41fa:	6b 83       	std	Y+3, r22	; 0x03
    41fc:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	89 83       	std	Y+1, r24	; 0x01

	if ( (	Copy_u8GroupID >= DIO_u8GROUP_A && Copy_u8GroupID <= DIO_u8GROUP_D 	)	&&
    4202:	8a 81       	ldd	r24, Y+2	; 0x02
    4204:	8c 30       	cpi	r24, 0x0C	; 12
    4206:	08 f4       	brcc	.+2      	; 0x420a <DIO_enuSetPinValue+0x20>
    4208:	df c0       	rjmp	.+446    	; 0x43c8 <DIO_enuSetPinValue+0x1de>
    420a:	8a 81       	ldd	r24, Y+2	; 0x02
    420c:	82 32       	cpi	r24, 0x22	; 34
    420e:	08 f0       	brcs	.+2      	; 0x4212 <DIO_enuSetPinValue+0x28>
    4210:	db c0       	rjmp	.+438    	; 0x43c8 <DIO_enuSetPinValue+0x1de>
    4212:	8b 81       	ldd	r24, Y+3	; 0x03
    4214:	88 30       	cpi	r24, 0x08	; 8
    4216:	08 f0       	brcs	.+2      	; 0x421a <DIO_enuSetPinValue+0x30>
    4218:	d7 c0       	rjmp	.+430    	; 0x43c8 <DIO_enuSetPinValue+0x1de>
    421a:	8c 81       	ldd	r24, Y+4	; 0x04
    421c:	81 30       	cpi	r24, 0x01	; 1
    421e:	21 f0       	breq	.+8      	; 0x4228 <DIO_enuSetPinValue+0x3e>
    4220:	8c 81       	ldd	r24, Y+4	; 0x04
    4222:	81 30       	cpi	r24, 0x01	; 1
    4224:	09 f0       	breq	.+2      	; 0x4228 <DIO_enuSetPinValue+0x3e>
    4226:	d0 c0       	rjmp	.+416    	; 0x43c8 <DIO_enuSetPinValue+0x1de>
		 (	Copy_u8PinID >= DIO_u8PIN0 		&& Copy_u8PinID <= DIO_u8PIN7 		)	&&
		 (	Copy_u8Value == DIO_u8HIGH || Copy_u8Value == DIO_u8PULL_UP ) 		)
	{
		switch (Copy_u8GroupID)
    4228:	8a 81       	ldd	r24, Y+2	; 0x02
    422a:	28 2f       	mov	r18, r24
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	3e 83       	std	Y+6, r19	; 0x06
    4230:	2d 83       	std	Y+5, r18	; 0x05
    4232:	8d 81       	ldd	r24, Y+5	; 0x05
    4234:	9e 81       	ldd	r25, Y+6	; 0x06
    4236:	83 31       	cpi	r24, 0x13	; 19
    4238:	91 05       	cpc	r25, r1
    423a:	09 f4       	brne	.+2      	; 0x423e <DIO_enuSetPinValue+0x54>
    423c:	43 c0       	rjmp	.+134    	; 0x42c4 <DIO_enuSetPinValue+0xda>
    423e:	ed 81       	ldd	r30, Y+5	; 0x05
    4240:	fe 81       	ldd	r31, Y+6	; 0x06
    4242:	e4 31       	cpi	r30, 0x14	; 20
    4244:	f1 05       	cpc	r31, r1
    4246:	34 f4       	brge	.+12     	; 0x4254 <DIO_enuSetPinValue+0x6a>
    4248:	2d 81       	ldd	r18, Y+5	; 0x05
    424a:	3e 81       	ldd	r19, Y+6	; 0x06
    424c:	2c 30       	cpi	r18, 0x0C	; 12
    424e:	31 05       	cpc	r19, r1
    4250:	71 f0       	breq	.+28     	; 0x426e <DIO_enuSetPinValue+0x84>
    4252:	b8 c0       	rjmp	.+368    	; 0x43c4 <DIO_enuSetPinValue+0x1da>
    4254:	8d 81       	ldd	r24, Y+5	; 0x05
    4256:	9e 81       	ldd	r25, Y+6	; 0x06
    4258:	89 31       	cpi	r24, 0x19	; 25
    425a:	91 05       	cpc	r25, r1
    425c:	09 f4       	brne	.+2      	; 0x4260 <DIO_enuSetPinValue+0x76>
    425e:	5d c0       	rjmp	.+186    	; 0x431a <DIO_enuSetPinValue+0x130>
    4260:	ed 81       	ldd	r30, Y+5	; 0x05
    4262:	fe 81       	ldd	r31, Y+6	; 0x06
    4264:	e1 32       	cpi	r30, 0x21	; 33
    4266:	f1 05       	cpc	r31, r1
    4268:	09 f4       	brne	.+2      	; 0x426c <DIO_enuSetPinValue+0x82>
    426a:	82 c0       	rjmp	.+260    	; 0x4370 <DIO_enuSetPinValue+0x186>
    426c:	ab c0       	rjmp	.+342    	; 0x43c4 <DIO_enuSetPinValue+0x1da>
		{
			case DIO_u8GROUP_A:
					ASSIGN_BIT_VALUE( PORT_A , Copy_u8PinID , Copy_u8Value );
    426e:	6b e3       	ldi	r22, 0x3B	; 59
    4270:	70 e0       	ldi	r23, 0x00	; 0
    4272:	ab e3       	ldi	r26, 0x3B	; 59
    4274:	b0 e0       	ldi	r27, 0x00	; 0
    4276:	eb e3       	ldi	r30, 0x3B	; 59
    4278:	f0 e0       	ldi	r31, 0x00	; 0
    427a:	80 81       	ld	r24, Z
    427c:	48 2f       	mov	r20, r24
    427e:	8b 81       	ldd	r24, Y+3	; 0x03
    4280:	28 2f       	mov	r18, r24
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	02 c0       	rjmp	.+4      	; 0x428e <DIO_enuSetPinValue+0xa4>
    428a:	88 0f       	add	r24, r24
    428c:	99 1f       	adc	r25, r25
    428e:	2a 95       	dec	r18
    4290:	e2 f7       	brpl	.-8      	; 0x428a <DIO_enuSetPinValue+0xa0>
    4292:	80 95       	com	r24
    4294:	84 23       	and	r24, r20
    4296:	8c 93       	st	X, r24
    4298:	8c 91       	ld	r24, X
    429a:	48 2f       	mov	r20, r24
    429c:	8c 81       	ldd	r24, Y+4	; 0x04
    429e:	88 2f       	mov	r24, r24
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9c 01       	movw	r18, r24
    42a4:	21 70       	andi	r18, 0x01	; 1
    42a6:	30 70       	andi	r19, 0x00	; 0
    42a8:	8b 81       	ldd	r24, Y+3	; 0x03
    42aa:	88 2f       	mov	r24, r24
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	f9 01       	movw	r30, r18
    42b0:	02 c0       	rjmp	.+4      	; 0x42b6 <DIO_enuSetPinValue+0xcc>
    42b2:	ee 0f       	add	r30, r30
    42b4:	ff 1f       	adc	r31, r31
    42b6:	8a 95       	dec	r24
    42b8:	e2 f7       	brpl	.-8      	; 0x42b2 <DIO_enuSetPinValue+0xc8>
    42ba:	cf 01       	movw	r24, r30
    42bc:	84 2b       	or	r24, r20
    42be:	fb 01       	movw	r30, r22
    42c0:	80 83       	st	Z, r24
    42c2:	80 c0       	rjmp	.+256    	; 0x43c4 <DIO_enuSetPinValue+0x1da>
					break;
			case DIO_u8GROUP_B:
					ASSIGN_BIT_VALUE( PORT_B , Copy_u8PinID , Copy_u8Value );
    42c4:	68 e3       	ldi	r22, 0x38	; 56
    42c6:	70 e0       	ldi	r23, 0x00	; 0
    42c8:	a8 e3       	ldi	r26, 0x38	; 56
    42ca:	b0 e0       	ldi	r27, 0x00	; 0
    42cc:	e8 e3       	ldi	r30, 0x38	; 56
    42ce:	f0 e0       	ldi	r31, 0x00	; 0
    42d0:	80 81       	ld	r24, Z
    42d2:	48 2f       	mov	r20, r24
    42d4:	8b 81       	ldd	r24, Y+3	; 0x03
    42d6:	28 2f       	mov	r18, r24
    42d8:	30 e0       	ldi	r19, 0x00	; 0
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	02 c0       	rjmp	.+4      	; 0x42e4 <DIO_enuSetPinValue+0xfa>
    42e0:	88 0f       	add	r24, r24
    42e2:	99 1f       	adc	r25, r25
    42e4:	2a 95       	dec	r18
    42e6:	e2 f7       	brpl	.-8      	; 0x42e0 <DIO_enuSetPinValue+0xf6>
    42e8:	80 95       	com	r24
    42ea:	84 23       	and	r24, r20
    42ec:	8c 93       	st	X, r24
    42ee:	8c 91       	ld	r24, X
    42f0:	48 2f       	mov	r20, r24
    42f2:	8c 81       	ldd	r24, Y+4	; 0x04
    42f4:	88 2f       	mov	r24, r24
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	9c 01       	movw	r18, r24
    42fa:	21 70       	andi	r18, 0x01	; 1
    42fc:	30 70       	andi	r19, 0x00	; 0
    42fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4300:	88 2f       	mov	r24, r24
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	f9 01       	movw	r30, r18
    4306:	02 c0       	rjmp	.+4      	; 0x430c <DIO_enuSetPinValue+0x122>
    4308:	ee 0f       	add	r30, r30
    430a:	ff 1f       	adc	r31, r31
    430c:	8a 95       	dec	r24
    430e:	e2 f7       	brpl	.-8      	; 0x4308 <DIO_enuSetPinValue+0x11e>
    4310:	cf 01       	movw	r24, r30
    4312:	84 2b       	or	r24, r20
    4314:	fb 01       	movw	r30, r22
    4316:	80 83       	st	Z, r24
    4318:	55 c0       	rjmp	.+170    	; 0x43c4 <DIO_enuSetPinValue+0x1da>
					break;
			case DIO_u8GROUP_C:
					ASSIGN_BIT_VALUE( PORT_C , Copy_u8PinID , Copy_u8Value );
    431a:	65 e3       	ldi	r22, 0x35	; 53
    431c:	70 e0       	ldi	r23, 0x00	; 0
    431e:	a5 e3       	ldi	r26, 0x35	; 53
    4320:	b0 e0       	ldi	r27, 0x00	; 0
    4322:	e5 e3       	ldi	r30, 0x35	; 53
    4324:	f0 e0       	ldi	r31, 0x00	; 0
    4326:	80 81       	ld	r24, Z
    4328:	48 2f       	mov	r20, r24
    432a:	8b 81       	ldd	r24, Y+3	; 0x03
    432c:	28 2f       	mov	r18, r24
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	02 c0       	rjmp	.+4      	; 0x433a <DIO_enuSetPinValue+0x150>
    4336:	88 0f       	add	r24, r24
    4338:	99 1f       	adc	r25, r25
    433a:	2a 95       	dec	r18
    433c:	e2 f7       	brpl	.-8      	; 0x4336 <DIO_enuSetPinValue+0x14c>
    433e:	80 95       	com	r24
    4340:	84 23       	and	r24, r20
    4342:	8c 93       	st	X, r24
    4344:	8c 91       	ld	r24, X
    4346:	48 2f       	mov	r20, r24
    4348:	8c 81       	ldd	r24, Y+4	; 0x04
    434a:	88 2f       	mov	r24, r24
    434c:	90 e0       	ldi	r25, 0x00	; 0
    434e:	9c 01       	movw	r18, r24
    4350:	21 70       	andi	r18, 0x01	; 1
    4352:	30 70       	andi	r19, 0x00	; 0
    4354:	8b 81       	ldd	r24, Y+3	; 0x03
    4356:	88 2f       	mov	r24, r24
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	f9 01       	movw	r30, r18
    435c:	02 c0       	rjmp	.+4      	; 0x4362 <DIO_enuSetPinValue+0x178>
    435e:	ee 0f       	add	r30, r30
    4360:	ff 1f       	adc	r31, r31
    4362:	8a 95       	dec	r24
    4364:	e2 f7       	brpl	.-8      	; 0x435e <DIO_enuSetPinValue+0x174>
    4366:	cf 01       	movw	r24, r30
    4368:	84 2b       	or	r24, r20
    436a:	fb 01       	movw	r30, r22
    436c:	80 83       	st	Z, r24
    436e:	2a c0       	rjmp	.+84     	; 0x43c4 <DIO_enuSetPinValue+0x1da>
					break;
			case DIO_u8GROUP_D:
					ASSIGN_BIT_VALUE( PORT_D , Copy_u8PinID , Copy_u8Value );
    4370:	62 e3       	ldi	r22, 0x32	; 50
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	a2 e3       	ldi	r26, 0x32	; 50
    4376:	b0 e0       	ldi	r27, 0x00	; 0
    4378:	e2 e3       	ldi	r30, 0x32	; 50
    437a:	f0 e0       	ldi	r31, 0x00	; 0
    437c:	80 81       	ld	r24, Z
    437e:	48 2f       	mov	r20, r24
    4380:	8b 81       	ldd	r24, Y+3	; 0x03
    4382:	28 2f       	mov	r18, r24
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	02 c0       	rjmp	.+4      	; 0x4390 <DIO_enuSetPinValue+0x1a6>
    438c:	88 0f       	add	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	2a 95       	dec	r18
    4392:	e2 f7       	brpl	.-8      	; 0x438c <DIO_enuSetPinValue+0x1a2>
    4394:	80 95       	com	r24
    4396:	84 23       	and	r24, r20
    4398:	8c 93       	st	X, r24
    439a:	8c 91       	ld	r24, X
    439c:	48 2f       	mov	r20, r24
    439e:	8c 81       	ldd	r24, Y+4	; 0x04
    43a0:	88 2f       	mov	r24, r24
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	9c 01       	movw	r18, r24
    43a6:	21 70       	andi	r18, 0x01	; 1
    43a8:	30 70       	andi	r19, 0x00	; 0
    43aa:	8b 81       	ldd	r24, Y+3	; 0x03
    43ac:	88 2f       	mov	r24, r24
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	f9 01       	movw	r30, r18
    43b2:	02 c0       	rjmp	.+4      	; 0x43b8 <DIO_enuSetPinValue+0x1ce>
    43b4:	ee 0f       	add	r30, r30
    43b6:	ff 1f       	adc	r31, r31
    43b8:	8a 95       	dec	r24
    43ba:	e2 f7       	brpl	.-8      	; 0x43b4 <DIO_enuSetPinValue+0x1ca>
    43bc:	cf 01       	movw	r24, r30
    43be:	84 2b       	or	r24, r20
    43c0:	fb 01       	movw	r30, r22
    43c2:	80 83       	st	Z, r24
					break;
		}
		Local_enuErrorState = ES_OK;
    43c4:	19 82       	std	Y+1, r1	; 0x01
    43c6:	02 c0       	rjmp	.+4      	; 0x43cc <DIO_enuSetPinValue+0x1e2>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    43c8:	82 e0       	ldi	r24, 0x02	; 2
    43ca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    43cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    43ce:	26 96       	adiw	r28, 0x06	; 6
    43d0:	0f b6       	in	r0, 0x3f	; 63
    43d2:	f8 94       	cli
    43d4:	de bf       	out	0x3e, r29	; 62
    43d6:	0f be       	out	0x3f, r0	; 63
    43d8:	cd bf       	out	0x3d, r28	; 61
    43da:	cf 91       	pop	r28
    43dc:	df 91       	pop	r29
    43de:	08 95       	ret

000043e0 <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    43e0:	df 93       	push	r29
    43e2:	cf 93       	push	r28
    43e4:	00 d0       	rcall	.+0      	; 0x43e6 <DIO_enuTogglePinValue+0x6>
    43e6:	00 d0       	rcall	.+0      	; 0x43e8 <DIO_enuTogglePinValue+0x8>
    43e8:	0f 92       	push	r0
    43ea:	cd b7       	in	r28, 0x3d	; 61
    43ec:	de b7       	in	r29, 0x3e	; 62
    43ee:	8a 83       	std	Y+2, r24	; 0x02
    43f0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	89 83       	std	Y+1, r24	; 0x01

	if ( (	Copy_u8GroupID >= DIO_u8GROUP_A && Copy_u8GroupID <= DIO_u8GROUP_D 	)	&&
    43f6:	8a 81       	ldd	r24, Y+2	; 0x02
    43f8:	8c 30       	cpi	r24, 0x0C	; 12
    43fa:	08 f4       	brcc	.+2      	; 0x43fe <DIO_enuTogglePinValue+0x1e>
    43fc:	79 c0       	rjmp	.+242    	; 0x44f0 <DIO_enuTogglePinValue+0x110>
    43fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4400:	82 32       	cpi	r24, 0x22	; 34
    4402:	08 f0       	brcs	.+2      	; 0x4406 <DIO_enuTogglePinValue+0x26>
    4404:	75 c0       	rjmp	.+234    	; 0x44f0 <DIO_enuTogglePinValue+0x110>
    4406:	8b 81       	ldd	r24, Y+3	; 0x03
    4408:	88 30       	cpi	r24, 0x08	; 8
    440a:	08 f0       	brcs	.+2      	; 0x440e <DIO_enuTogglePinValue+0x2e>
    440c:	71 c0       	rjmp	.+226    	; 0x44f0 <DIO_enuTogglePinValue+0x110>
		 (	Copy_u8PinID >= DIO_u8PIN0 		&& Copy_u8PinID <= DIO_u8PIN7 		) )
	{
		switch (Copy_u8GroupID)
    440e:	8a 81       	ldd	r24, Y+2	; 0x02
    4410:	28 2f       	mov	r18, r24
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	3d 83       	std	Y+5, r19	; 0x05
    4416:	2c 83       	std	Y+4, r18	; 0x04
    4418:	8c 81       	ldd	r24, Y+4	; 0x04
    441a:	9d 81       	ldd	r25, Y+5	; 0x05
    441c:	83 31       	cpi	r24, 0x13	; 19
    441e:	91 05       	cpc	r25, r1
    4420:	51 f1       	breq	.+84     	; 0x4476 <DIO_enuTogglePinValue+0x96>
    4422:	2c 81       	ldd	r18, Y+4	; 0x04
    4424:	3d 81       	ldd	r19, Y+5	; 0x05
    4426:	24 31       	cpi	r18, 0x14	; 20
    4428:	31 05       	cpc	r19, r1
    442a:	34 f4       	brge	.+12     	; 0x4438 <DIO_enuTogglePinValue+0x58>
    442c:	8c 81       	ldd	r24, Y+4	; 0x04
    442e:	9d 81       	ldd	r25, Y+5	; 0x05
    4430:	8c 30       	cpi	r24, 0x0C	; 12
    4432:	91 05       	cpc	r25, r1
    4434:	61 f0       	breq	.+24     	; 0x444e <DIO_enuTogglePinValue+0x6e>
    4436:	5a c0       	rjmp	.+180    	; 0x44ec <DIO_enuTogglePinValue+0x10c>
    4438:	2c 81       	ldd	r18, Y+4	; 0x04
    443a:	3d 81       	ldd	r19, Y+5	; 0x05
    443c:	29 31       	cpi	r18, 0x19	; 25
    443e:	31 05       	cpc	r19, r1
    4440:	71 f1       	breq	.+92     	; 0x449e <DIO_enuTogglePinValue+0xbe>
    4442:	8c 81       	ldd	r24, Y+4	; 0x04
    4444:	9d 81       	ldd	r25, Y+5	; 0x05
    4446:	81 32       	cpi	r24, 0x21	; 33
    4448:	91 05       	cpc	r25, r1
    444a:	e9 f1       	breq	.+122    	; 0x44c6 <DIO_enuTogglePinValue+0xe6>
    444c:	4f c0       	rjmp	.+158    	; 0x44ec <DIO_enuTogglePinValue+0x10c>
		{
			case DIO_u8GROUP_A:
					TOG_BIT( PORT_A , Copy_u8PinID );
    444e:	ab e3       	ldi	r26, 0x3B	; 59
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	eb e3       	ldi	r30, 0x3B	; 59
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	48 2f       	mov	r20, r24
    445a:	8b 81       	ldd	r24, Y+3	; 0x03
    445c:	28 2f       	mov	r18, r24
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	02 2e       	mov	r0, r18
    4466:	02 c0       	rjmp	.+4      	; 0x446c <DIO_enuTogglePinValue+0x8c>
    4468:	88 0f       	add	r24, r24
    446a:	99 1f       	adc	r25, r25
    446c:	0a 94       	dec	r0
    446e:	e2 f7       	brpl	.-8      	; 0x4468 <DIO_enuTogglePinValue+0x88>
    4470:	84 27       	eor	r24, r20
    4472:	8c 93       	st	X, r24
    4474:	3b c0       	rjmp	.+118    	; 0x44ec <DIO_enuTogglePinValue+0x10c>
					break;
			case DIO_u8GROUP_B:
					TOG_BIT( PORT_B , Copy_u8PinID );
    4476:	a8 e3       	ldi	r26, 0x38	; 56
    4478:	b0 e0       	ldi	r27, 0x00	; 0
    447a:	e8 e3       	ldi	r30, 0x38	; 56
    447c:	f0 e0       	ldi	r31, 0x00	; 0
    447e:	80 81       	ld	r24, Z
    4480:	48 2f       	mov	r20, r24
    4482:	8b 81       	ldd	r24, Y+3	; 0x03
    4484:	28 2f       	mov	r18, r24
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	90 e0       	ldi	r25, 0x00	; 0
    448c:	02 2e       	mov	r0, r18
    448e:	02 c0       	rjmp	.+4      	; 0x4494 <DIO_enuTogglePinValue+0xb4>
    4490:	88 0f       	add	r24, r24
    4492:	99 1f       	adc	r25, r25
    4494:	0a 94       	dec	r0
    4496:	e2 f7       	brpl	.-8      	; 0x4490 <DIO_enuTogglePinValue+0xb0>
    4498:	84 27       	eor	r24, r20
    449a:	8c 93       	st	X, r24
    449c:	27 c0       	rjmp	.+78     	; 0x44ec <DIO_enuTogglePinValue+0x10c>
					break;
			case DIO_u8GROUP_C:
					TOG_BIT( PORT_C , Copy_u8PinID );
    449e:	a5 e3       	ldi	r26, 0x35	; 53
    44a0:	b0 e0       	ldi	r27, 0x00	; 0
    44a2:	e5 e3       	ldi	r30, 0x35	; 53
    44a4:	f0 e0       	ldi	r31, 0x00	; 0
    44a6:	80 81       	ld	r24, Z
    44a8:	48 2f       	mov	r20, r24
    44aa:	8b 81       	ldd	r24, Y+3	; 0x03
    44ac:	28 2f       	mov	r18, r24
    44ae:	30 e0       	ldi	r19, 0x00	; 0
    44b0:	81 e0       	ldi	r24, 0x01	; 1
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	02 2e       	mov	r0, r18
    44b6:	02 c0       	rjmp	.+4      	; 0x44bc <DIO_enuTogglePinValue+0xdc>
    44b8:	88 0f       	add	r24, r24
    44ba:	99 1f       	adc	r25, r25
    44bc:	0a 94       	dec	r0
    44be:	e2 f7       	brpl	.-8      	; 0x44b8 <DIO_enuTogglePinValue+0xd8>
    44c0:	84 27       	eor	r24, r20
    44c2:	8c 93       	st	X, r24
    44c4:	13 c0       	rjmp	.+38     	; 0x44ec <DIO_enuTogglePinValue+0x10c>
					break;
			case DIO_u8GROUP_D:
					TOG_BIT( PORT_D , Copy_u8PinID );
    44c6:	a2 e3       	ldi	r26, 0x32	; 50
    44c8:	b0 e0       	ldi	r27, 0x00	; 0
    44ca:	e2 e3       	ldi	r30, 0x32	; 50
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	80 81       	ld	r24, Z
    44d0:	48 2f       	mov	r20, r24
    44d2:	8b 81       	ldd	r24, Y+3	; 0x03
    44d4:	28 2f       	mov	r18, r24
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	81 e0       	ldi	r24, 0x01	; 1
    44da:	90 e0       	ldi	r25, 0x00	; 0
    44dc:	02 2e       	mov	r0, r18
    44de:	02 c0       	rjmp	.+4      	; 0x44e4 <DIO_enuTogglePinValue+0x104>
    44e0:	88 0f       	add	r24, r24
    44e2:	99 1f       	adc	r25, r25
    44e4:	0a 94       	dec	r0
    44e6:	e2 f7       	brpl	.-8      	; 0x44e0 <DIO_enuTogglePinValue+0x100>
    44e8:	84 27       	eor	r24, r20
    44ea:	8c 93       	st	X, r24
					break;
		}
		Local_enuErrorState = ES_OK;
    44ec:	19 82       	std	Y+1, r1	; 0x01
    44ee:	02 c0       	rjmp	.+4      	; 0x44f4 <DIO_enuTogglePinValue+0x114>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
    44f0:	82 e0       	ldi	r24, 0x02	; 2
    44f2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    44f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    44f6:	0f 90       	pop	r0
    44f8:	0f 90       	pop	r0
    44fa:	0f 90       	pop	r0
    44fc:	0f 90       	pop	r0
    44fe:	0f 90       	pop	r0
    4500:	cf 91       	pop	r28
    4502:	df 91       	pop	r29
    4504:	08 95       	ret

00004506 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 *Copy_pu8Value)
{
    4506:	df 93       	push	r29
    4508:	cf 93       	push	r28
    450a:	cd b7       	in	r28, 0x3d	; 61
    450c:	de b7       	in	r29, 0x3e	; 62
    450e:	27 97       	sbiw	r28, 0x07	; 7
    4510:	0f b6       	in	r0, 0x3f	; 63
    4512:	f8 94       	cli
    4514:	de bf       	out	0x3e, r29	; 62
    4516:	0f be       	out	0x3f, r0	; 63
    4518:	cd bf       	out	0x3d, r28	; 61
    451a:	8a 83       	std	Y+2, r24	; 0x02
    451c:	6b 83       	std	Y+3, r22	; 0x03
    451e:	5d 83       	std	Y+5, r21	; 0x05
    4520:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4522:	81 e0       	ldi	r24, 0x01	; 1
    4524:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
    4526:	8c 81       	ldd	r24, Y+4	; 0x04
    4528:	9d 81       	ldd	r25, Y+5	; 0x05
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	09 f4       	brne	.+2      	; 0x4530 <DIO_enuGetPinValue+0x2a>
    452e:	85 c0       	rjmp	.+266    	; 0x463a <DIO_enuGetPinValue+0x134>
	{
		if ( (	Copy_u8GroupID >= DIO_u8GROUP_A && Copy_u8GroupID <= DIO_u8GROUP_D 	)	&&
    4530:	8a 81       	ldd	r24, Y+2	; 0x02
    4532:	8c 30       	cpi	r24, 0x0C	; 12
    4534:	08 f4       	brcc	.+2      	; 0x4538 <DIO_enuGetPinValue+0x32>
    4536:	7e c0       	rjmp	.+252    	; 0x4634 <DIO_enuGetPinValue+0x12e>
    4538:	8a 81       	ldd	r24, Y+2	; 0x02
    453a:	82 32       	cpi	r24, 0x22	; 34
    453c:	08 f0       	brcs	.+2      	; 0x4540 <DIO_enuGetPinValue+0x3a>
    453e:	7a c0       	rjmp	.+244    	; 0x4634 <DIO_enuGetPinValue+0x12e>
    4540:	8b 81       	ldd	r24, Y+3	; 0x03
    4542:	88 30       	cpi	r24, 0x08	; 8
    4544:	08 f0       	brcs	.+2      	; 0x4548 <DIO_enuGetPinValue+0x42>
    4546:	76 c0       	rjmp	.+236    	; 0x4634 <DIO_enuGetPinValue+0x12e>
			 (	Copy_u8PinID >= DIO_u8PIN0 		&& Copy_u8PinID <= DIO_u8PIN7 		) )
		{
			switch (Copy_u8GroupID)
    4548:	8a 81       	ldd	r24, Y+2	; 0x02
    454a:	28 2f       	mov	r18, r24
    454c:	30 e0       	ldi	r19, 0x00	; 0
    454e:	3f 83       	std	Y+7, r19	; 0x07
    4550:	2e 83       	std	Y+6, r18	; 0x06
    4552:	8e 81       	ldd	r24, Y+6	; 0x06
    4554:	9f 81       	ldd	r25, Y+7	; 0x07
    4556:	83 31       	cpi	r24, 0x13	; 19
    4558:	91 05       	cpc	r25, r1
    455a:	61 f1       	breq	.+88     	; 0x45b4 <DIO_enuGetPinValue+0xae>
    455c:	2e 81       	ldd	r18, Y+6	; 0x06
    455e:	3f 81       	ldd	r19, Y+7	; 0x07
    4560:	24 31       	cpi	r18, 0x14	; 20
    4562:	31 05       	cpc	r19, r1
    4564:	34 f4       	brge	.+12     	; 0x4572 <DIO_enuGetPinValue+0x6c>
    4566:	8e 81       	ldd	r24, Y+6	; 0x06
    4568:	9f 81       	ldd	r25, Y+7	; 0x07
    456a:	8c 30       	cpi	r24, 0x0C	; 12
    456c:	91 05       	cpc	r25, r1
    456e:	69 f0       	breq	.+26     	; 0x458a <DIO_enuGetPinValue+0x84>
    4570:	5f c0       	rjmp	.+190    	; 0x4630 <DIO_enuGetPinValue+0x12a>
    4572:	2e 81       	ldd	r18, Y+6	; 0x06
    4574:	3f 81       	ldd	r19, Y+7	; 0x07
    4576:	29 31       	cpi	r18, 0x19	; 25
    4578:	31 05       	cpc	r19, r1
    457a:	89 f1       	breq	.+98     	; 0x45de <DIO_enuGetPinValue+0xd8>
    457c:	8e 81       	ldd	r24, Y+6	; 0x06
    457e:	9f 81       	ldd	r25, Y+7	; 0x07
    4580:	81 32       	cpi	r24, 0x21	; 33
    4582:	91 05       	cpc	r25, r1
    4584:	09 f4       	brne	.+2      	; 0x4588 <DIO_enuGetPinValue+0x82>
    4586:	40 c0       	rjmp	.+128    	; 0x4608 <DIO_enuGetPinValue+0x102>
    4588:	53 c0       	rjmp	.+166    	; 0x4630 <DIO_enuGetPinValue+0x12a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( IS_BIT( PIN_A , Copy_u8PinID ) & DIO_BIT_MASK ) ;
    458a:	e9 e3       	ldi	r30, 0x39	; 57
    458c:	f0 e0       	ldi	r31, 0x00	; 0
    458e:	80 81       	ld	r24, Z
    4590:	48 2f       	mov	r20, r24
    4592:	8b 81       	ldd	r24, Y+3	; 0x03
    4594:	28 2f       	mov	r18, r24
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	02 2e       	mov	r0, r18
    459e:	02 c0       	rjmp	.+4      	; 0x45a4 <DIO_enuGetPinValue+0x9e>
    45a0:	88 0f       	add	r24, r24
    45a2:	99 1f       	adc	r25, r25
    45a4:	0a 94       	dec	r0
    45a6:	e2 f7       	brpl	.-8      	; 0x45a0 <DIO_enuGetPinValue+0x9a>
    45a8:	84 23       	and	r24, r20
    45aa:	81 70       	andi	r24, 0x01	; 1
    45ac:	ec 81       	ldd	r30, Y+4	; 0x04
    45ae:	fd 81       	ldd	r31, Y+5	; 0x05
    45b0:	80 83       	st	Z, r24
    45b2:	3e c0       	rjmp	.+124    	; 0x4630 <DIO_enuGetPinValue+0x12a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( IS_BIT( PIN_B , Copy_u8PinID ) & DIO_BIT_MASK ) ;
    45b4:	e6 e3       	ldi	r30, 0x36	; 54
    45b6:	f0 e0       	ldi	r31, 0x00	; 0
    45b8:	80 81       	ld	r24, Z
    45ba:	48 2f       	mov	r20, r24
    45bc:	8b 81       	ldd	r24, Y+3	; 0x03
    45be:	28 2f       	mov	r18, r24
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	02 2e       	mov	r0, r18
    45c8:	02 c0       	rjmp	.+4      	; 0x45ce <DIO_enuGetPinValue+0xc8>
    45ca:	88 0f       	add	r24, r24
    45cc:	99 1f       	adc	r25, r25
    45ce:	0a 94       	dec	r0
    45d0:	e2 f7       	brpl	.-8      	; 0x45ca <DIO_enuGetPinValue+0xc4>
    45d2:	84 23       	and	r24, r20
    45d4:	81 70       	andi	r24, 0x01	; 1
    45d6:	ec 81       	ldd	r30, Y+4	; 0x04
    45d8:	fd 81       	ldd	r31, Y+5	; 0x05
    45da:	80 83       	st	Z, r24
    45dc:	29 c0       	rjmp	.+82     	; 0x4630 <DIO_enuGetPinValue+0x12a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( IS_BIT( PIN_C , Copy_u8PinID ) & DIO_BIT_MASK ) ;
    45de:	e3 e3       	ldi	r30, 0x33	; 51
    45e0:	f0 e0       	ldi	r31, 0x00	; 0
    45e2:	80 81       	ld	r24, Z
    45e4:	48 2f       	mov	r20, r24
    45e6:	8b 81       	ldd	r24, Y+3	; 0x03
    45e8:	28 2f       	mov	r18, r24
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	90 e0       	ldi	r25, 0x00	; 0
    45f0:	02 2e       	mov	r0, r18
    45f2:	02 c0       	rjmp	.+4      	; 0x45f8 <DIO_enuGetPinValue+0xf2>
    45f4:	88 0f       	add	r24, r24
    45f6:	99 1f       	adc	r25, r25
    45f8:	0a 94       	dec	r0
    45fa:	e2 f7       	brpl	.-8      	; 0x45f4 <DIO_enuGetPinValue+0xee>
    45fc:	84 23       	and	r24, r20
    45fe:	81 70       	andi	r24, 0x01	; 1
    4600:	ec 81       	ldd	r30, Y+4	; 0x04
    4602:	fd 81       	ldd	r31, Y+5	; 0x05
    4604:	80 83       	st	Z, r24
    4606:	14 c0       	rjmp	.+40     	; 0x4630 <DIO_enuGetPinValue+0x12a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( IS_BIT( PIN_D , Copy_u8PinID ) & DIO_BIT_MASK ) ;
    4608:	e0 e3       	ldi	r30, 0x30	; 48
    460a:	f0 e0       	ldi	r31, 0x00	; 0
    460c:	80 81       	ld	r24, Z
    460e:	48 2f       	mov	r20, r24
    4610:	8b 81       	ldd	r24, Y+3	; 0x03
    4612:	28 2f       	mov	r18, r24
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	02 2e       	mov	r0, r18
    461c:	02 c0       	rjmp	.+4      	; 0x4622 <DIO_enuGetPinValue+0x11c>
    461e:	88 0f       	add	r24, r24
    4620:	99 1f       	adc	r25, r25
    4622:	0a 94       	dec	r0
    4624:	e2 f7       	brpl	.-8      	; 0x461e <DIO_enuGetPinValue+0x118>
    4626:	84 23       	and	r24, r20
    4628:	81 70       	andi	r24, 0x01	; 1
    462a:	ec 81       	ldd	r30, Y+4	; 0x04
    462c:	fd 81       	ldd	r31, Y+5	; 0x05
    462e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    4630:	19 82       	std	Y+1, r1	; 0x01
    4632:	05 c0       	rjmp	.+10     	; 0x463e <DIO_enuGetPinValue+0x138>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
    4634:	82 e0       	ldi	r24, 0x02	; 2
    4636:	89 83       	std	Y+1, r24	; 0x01
    4638:	02 c0       	rjmp	.+4      	; 0x463e <DIO_enuGetPinValue+0x138>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    463a:	83 e0       	ldi	r24, 0x03	; 3
    463c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    463e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4640:	27 96       	adiw	r28, 0x07	; 7
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	f8 94       	cli
    4646:	de bf       	out	0x3e, r29	; 62
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	cd bf       	out	0x3d, r28	; 61
    464c:	cf 91       	pop	r28
    464e:	df 91       	pop	r29
    4650:	08 95       	ret

00004652 <ADC_enuInit>:

static void(*ADC_pFunISRFun)(void) = NULL ;


ES_t ADC_enuInit(void)
{
    4652:	df 93       	push	r29
    4654:	cf 93       	push	r28
    4656:	0f 92       	push	r0
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	89 83       	std	Y+1, r24	; 0x01

	//////////////////////////////////
	// 	Setting Prescalar Factor	//
	//////////////////////////////////
	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    4660:	a6 e2       	ldi	r26, 0x26	; 38
    4662:	b0 e0       	ldi	r27, 0x00	; 0
    4664:	e6 e2       	ldi	r30, 0x26	; 38
    4666:	f0 e0       	ldi	r31, 0x00	; 0
    4668:	80 81       	ld	r24, Z
    466a:	88 7f       	andi	r24, 0xF8	; 248
    466c:	8c 93       	st	X, r24
#if ( ADC_PRES >= ADC_PRES_2 && ADC_PRES <= ADC_PRES_128 )
	ADCSRA |= ( (ADC_PRES - ADC_PRES_0 ) << ADC_PRE_SCALAR_BITS );
    466e:	a6 e2       	ldi	r26, 0x26	; 38
    4670:	b0 e0       	ldi	r27, 0x00	; 0
    4672:	e6 e2       	ldi	r30, 0x26	; 38
    4674:	f0 e0       	ldi	r31, 0x00	; 0
    4676:	80 81       	ld	r24, Z
    4678:	86 60       	ori	r24, 0x06	; 6
    467a:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	// Setting Reference Voltage	//
	//////////////////////////////////
	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    467c:	a7 e2       	ldi	r26, 0x27	; 39
    467e:	b0 e0       	ldi	r27, 0x00	; 0
    4680:	e7 e2       	ldi	r30, 0x27	; 39
    4682:	f0 e0       	ldi	r31, 0x00	; 0
    4684:	80 81       	ld	r24, Z
    4686:	8f 73       	andi	r24, 0x3F	; 63
    4688:	8c 93       	st	X, r24
#if ( ADC_VREF >= AREF_REF && ADC_VREF <= INTERNAL_REF )
	ADMUX |= ( (ADC_VREF - AREF_REF) << ADC_REF_SEL_BITS);
    468a:	a7 e2       	ldi	r26, 0x27	; 39
    468c:	b0 e0       	ldi	r27, 0x00	; 0
    468e:	e7 e2       	ldi	r30, 0x27	; 39
    4690:	f0 e0       	ldi	r31, 0x00	; 0
    4692:	80 81       	ld	r24, Z
    4694:	80 64       	ori	r24, 0x40	; 64
    4696:	8c 93       	st	X, r24

	//////////////////////////////////////
	// Setting Output Adjust Direction	//
	//////////////////////////////////////
#if ( ADC_ADJUST == RIGHT_ADJUST )
	CLR_BIT( ADMUX , ADLAR_BIT );
    4698:	a7 e2       	ldi	r26, 0x27	; 39
    469a:	b0 e0       	ldi	r27, 0x00	; 0
    469c:	e7 e2       	ldi	r30, 0x27	; 39
    469e:	f0 e0       	ldi	r31, 0x00	; 0
    46a0:	80 81       	ld	r24, Z
    46a2:	8f 7d       	andi	r24, 0xDF	; 223
    46a4:	8c 93       	st	X, r24
#endif

	//////////////////////////////////////
	//	 Selecting Initial Channel		//
	//////////////////////////////////////
	ADMUX &= ~(ADC_CH_SEL_BITS_MASK);
    46a6:	a7 e2       	ldi	r26, 0x27	; 39
    46a8:	b0 e0       	ldi	r27, 0x00	; 0
    46aa:	e7 e2       	ldi	r30, 0x27	; 39
    46ac:	f0 e0       	ldi	r31, 0x00	; 0
    46ae:	80 81       	ld	r24, Z
    46b0:	80 7e       	andi	r24, 0xE0	; 224
    46b2:	8c 93       	st	X, r24
#if ( ADC_INIT_CHANNEL >= CH_00 && ADC_INIT_CHANNEL <= CH_31 )
	ADMUX |= ( (ADC_INIT_CHANNEL - CH_00) << ADC_CH_SEL_BITS );
    46b4:	a7 e2       	ldi	r26, 0x27	; 39
    46b6:	b0 e0       	ldi	r27, 0x00	; 0
    46b8:	e7 e2       	ldi	r30, 0x27	; 39
    46ba:	f0 e0       	ldi	r31, 0x00	; 0
    46bc:	80 81       	ld	r24, Z
    46be:	8c 93       	st	X, r24
	//	 Setting ADC Interrupt Mode		//
	//////////////////////////////////////
#if ( ADC_INTERRUPT_MODE == ADC_POLLING )
	CLR_BIT( ADCSRA , ADC_INT_ENABLE_BIT );
#elif ( ADC_INTERRUPT_MODE == ADC_INTERRUPT )
	SET_BIT( ADCSRA , ADC_INT_ENABLE_BIT );
    46c0:	a6 e2       	ldi	r26, 0x26	; 38
    46c2:	b0 e0       	ldi	r27, 0x00	; 0
    46c4:	e6 e2       	ldi	r30, 0x26	; 38
    46c6:	f0 e0       	ldi	r31, 0x00	; 0
    46c8:	80 81       	ld	r24, Z
    46ca:	88 60       	ori	r24, 0x08	; 8
    46cc:	8c 93       	st	X, r24
	///////////////////////////////////
	// Selecting ADC Trigger  Source //
	///////////////////////////////////
#if ( ADC_TRIGGER_SOURCE >= FREE_RUNNING && ADC_TRIGGER_SOURCE <= TIMER1_CAPT_EVENT )

	SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    46ce:	a0 e5       	ldi	r26, 0x50	; 80
    46d0:	b0 e0       	ldi	r27, 0x00	; 0
    46d2:	e0 e5       	ldi	r30, 0x50	; 80
    46d4:	f0 e0       	ldi	r31, 0x00	; 0
    46d6:	80 81       	ld	r24, Z
    46d8:	88 7f       	andi	r24, 0xF8	; 248
    46da:	8c 93       	st	X, r24

	SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING) << ADC_TRIGGER_SEL_BITS );
    46dc:	a0 e5       	ldi	r26, 0x50	; 80
    46de:	b0 e0       	ldi	r27, 0x00	; 0
    46e0:	e0 e5       	ldi	r30, 0x50	; 80
    46e2:	f0 e0       	ldi	r31, 0x00	; 0
    46e4:	80 81       	ld	r24, Z
    46e6:	8e 6d       	ori	r24, 0xDE	; 222
    46e8:	8c 93       	st	X, r24
	//////////////////////////////////
	// Selecting ADC Trigger Mode	//
	//////////////////////////////////
#if ( ADC_TRIGGER_MODE == AUTO_TRIGGER || ADC_TRIGGER_MODE == SINGLE_TRIGGER )

	CLR_BIT( ADCSRA , ADC_AUTO_TRIGGER_EN_BIT );
    46ea:	a6 e2       	ldi	r26, 0x26	; 38
    46ec:	b0 e0       	ldi	r27, 0x00	; 0
    46ee:	e6 e2       	ldi	r30, 0x26	; 38
    46f0:	f0 e0       	ldi	r31, 0x00	; 0
    46f2:	80 81       	ld	r24, Z
    46f4:	8f 7d       	andi	r24, 0xDF	; 223
    46f6:	8c 93       	st	X, r24
#endif

	//////////////////////////////////
	//	 ENABLE ADC Peripheral		//
	//////////////////////////////////
	SET_BIT( ADCSRA , ADC_ENABLE_BIT );
    46f8:	a6 e2       	ldi	r26, 0x26	; 38
    46fa:	b0 e0       	ldi	r27, 0x00	; 0
    46fc:	e6 e2       	ldi	r30, 0x26	; 38
    46fe:	f0 e0       	ldi	r31, 0x00	; 0
    4700:	80 81       	ld	r24, Z
    4702:	80 68       	ori	r24, 0x80	; 128
    4704:	8c 93       	st	X, r24

	if( Local_enuErrorState != ES_OUT_RANGE)
    4706:	89 81       	ldd	r24, Y+1	; 0x01
    4708:	82 30       	cpi	r24, 0x02	; 2
    470a:	09 f0       	breq	.+2      	; 0x470e <ADC_enuInit+0xbc>
		Local_enuErrorState = ES_OK ;
    470c:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    470e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4710:	0f 90       	pop	r0
    4712:	cf 91       	pop	r28
    4714:	df 91       	pop	r29
    4716:	08 95       	ret

00004718 <ADC_enuSetPreScalar>:

ES_t ADC_enuSetPreScalar(u8 Copy_u8PreScalarID)
{
    4718:	df 93       	push	r29
    471a:	cf 93       	push	r28
    471c:	00 d0       	rcall	.+0      	; 0x471e <ADC_enuSetPreScalar+0x6>
    471e:	cd b7       	in	r28, 0x3d	; 61
    4720:	de b7       	in	r29, 0x3e	; 62
    4722:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	89 83       	std	Y+1, r24	; 0x01

	ADCSRA &= ~(ADC_PRE_SCALAR_BITS_MASK);
    4728:	a6 e2       	ldi	r26, 0x26	; 38
    472a:	b0 e0       	ldi	r27, 0x00	; 0
    472c:	e6 e2       	ldi	r30, 0x26	; 38
    472e:	f0 e0       	ldi	r31, 0x00	; 0
    4730:	80 81       	ld	r24, Z
    4732:	88 7f       	andi	r24, 0xF8	; 248
    4734:	8c 93       	st	X, r24

	if ( Copy_u8PreScalarID >= ADC_PRES_2 && Copy_u8PreScalarID <= ADC_PRES_128 )
    4736:	8a 81       	ldd	r24, Y+2	; 0x02
    4738:	89 37       	cpi	r24, 0x79	; 121
    473a:	78 f0       	brcs	.+30     	; 0x475a <ADC_enuSetPreScalar+0x42>
    473c:	8a 81       	ldd	r24, Y+2	; 0x02
    473e:	88 23       	and	r24, r24
    4740:	64 f0       	brlt	.+24     	; 0x475a <ADC_enuSetPreScalar+0x42>
	{
		ADCSRA |= ( (Copy_u8PreScalarID - ADC_PRES_0 ) << ADC_PRE_SCALAR_BITS );
    4742:	a6 e2       	ldi	r26, 0x26	; 38
    4744:	b0 e0       	ldi	r27, 0x00	; 0
    4746:	e6 e2       	ldi	r30, 0x26	; 38
    4748:	f0 e0       	ldi	r31, 0x00	; 0
    474a:	80 81       	ld	r24, Z
    474c:	98 2f       	mov	r25, r24
    474e:	8a 81       	ldd	r24, Y+2	; 0x02
    4750:	88 57       	subi	r24, 0x78	; 120
    4752:	89 2b       	or	r24, r25
    4754:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    4756:	19 82       	std	Y+1, r1	; 0x01
    4758:	02 c0       	rjmp	.+4      	; 0x475e <ADC_enuSetPreScalar+0x46>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    475a:	82 e0       	ldi	r24, 0x02	; 2
    475c:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    475e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4760:	0f 90       	pop	r0
    4762:	0f 90       	pop	r0
    4764:	cf 91       	pop	r28
    4766:	df 91       	pop	r29
    4768:	08 95       	ret

0000476a <ADC_enuSetRefVolt>:

ES_t ADC_enuSetRefVolt(u8 Copy_u8RefVoltID)
{
    476a:	df 93       	push	r29
    476c:	cf 93       	push	r28
    476e:	00 d0       	rcall	.+0      	; 0x4770 <ADC_enuSetRefVolt+0x6>
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
    4774:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	89 83       	std	Y+1, r24	; 0x01

	ADMUX &= ~(ADC_REF_SEL_BITS_MASK);
    477a:	a7 e2       	ldi	r26, 0x27	; 39
    477c:	b0 e0       	ldi	r27, 0x00	; 0
    477e:	e7 e2       	ldi	r30, 0x27	; 39
    4780:	f0 e0       	ldi	r31, 0x00	; 0
    4782:	80 81       	ld	r24, Z
    4784:	8f 73       	andi	r24, 0x3F	; 63
    4786:	8c 93       	st	X, r24

	if ( Copy_u8RefVoltID >= AREF_REF && Copy_u8RefVoltID <= INTERNAL_REF )
    4788:	8a 81       	ldd	r24, Y+2	; 0x02
    478a:	88 23       	and	r24, r24
    478c:	dc f4       	brge	.+54     	; 0x47c4 <ADC_enuSetRefVolt+0x5a>
    478e:	8a 81       	ldd	r24, Y+2	; 0x02
    4790:	83 38       	cpi	r24, 0x83	; 131
    4792:	c0 f4       	brcc	.+48     	; 0x47c4 <ADC_enuSetRefVolt+0x5a>
	{
		ADMUX |= ( (Copy_u8RefVoltID - AREF_REF) << ADC_REF_SEL_BITS);
    4794:	a7 e2       	ldi	r26, 0x27	; 39
    4796:	b0 e0       	ldi	r27, 0x00	; 0
    4798:	e7 e2       	ldi	r30, 0x27	; 39
    479a:	f0 e0       	ldi	r31, 0x00	; 0
    479c:	80 81       	ld	r24, Z
    479e:	28 2f       	mov	r18, r24
    47a0:	8a 81       	ldd	r24, Y+2	; 0x02
    47a2:	88 2f       	mov	r24, r24
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	80 58       	subi	r24, 0x80	; 128
    47a8:	90 40       	sbci	r25, 0x00	; 0
    47aa:	00 24       	eor	r0, r0
    47ac:	96 95       	lsr	r25
    47ae:	87 95       	ror	r24
    47b0:	07 94       	ror	r0
    47b2:	96 95       	lsr	r25
    47b4:	87 95       	ror	r24
    47b6:	07 94       	ror	r0
    47b8:	98 2f       	mov	r25, r24
    47ba:	80 2d       	mov	r24, r0
    47bc:	82 2b       	or	r24, r18
    47be:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    47c0:	19 82       	std	Y+1, r1	; 0x01
    47c2:	02 c0       	rjmp	.+4      	; 0x47c8 <ADC_enuSetRefVolt+0x5e>
	}
	else
		Local_enuErrorState = ES_OUT_RANGE;
    47c4:	82 e0       	ldi	r24, 0x02	; 2
    47c6:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorState;
    47c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    47ca:	0f 90       	pop	r0
    47cc:	0f 90       	pop	r0
    47ce:	cf 91       	pop	r28
    47d0:	df 91       	pop	r29
    47d2:	08 95       	ret

000047d4 <ADC_enuSelectChannel>:


ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    47d4:	df 93       	push	r29
    47d6:	cf 93       	push	r28
    47d8:	00 d0       	rcall	.+0      	; 0x47da <ADC_enuSelectChannel+0x6>
    47da:	cd b7       	in	r28, 0x3d	; 61
    47dc:	de b7       	in	r29, 0x3e	; 62
    47de:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    47e0:	81 e0       	ldi	r24, 0x01	; 1
    47e2:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ChannelID >= CH_00 && Copy_u8ChannelID <= CH_31 )
    47e4:	8a 81       	ldd	r24, Y+2	; 0x02
    47e6:	85 38       	cpi	r24, 0x85	; 133
    47e8:	a0 f0       	brcs	.+40     	; 0x4812 <ADC_enuSelectChannel+0x3e>
    47ea:	8a 81       	ldd	r24, Y+2	; 0x02
    47ec:	85 3a       	cpi	r24, 0xA5	; 165
    47ee:	88 f4       	brcc	.+34     	; 0x4812 <ADC_enuSelectChannel+0x3e>
	{
		ADMUX &= ~( ADC_CH_SEL_BITS_MASK);
    47f0:	a7 e2       	ldi	r26, 0x27	; 39
    47f2:	b0 e0       	ldi	r27, 0x00	; 0
    47f4:	e7 e2       	ldi	r30, 0x27	; 39
    47f6:	f0 e0       	ldi	r31, 0x00	; 0
    47f8:	80 81       	ld	r24, Z
    47fa:	80 7e       	andi	r24, 0xE0	; 224
    47fc:	8c 93       	st	X, r24
		ADMUX |= (Copy_u8ChannelID << ADC_CH_SEL_BITS);
    47fe:	a7 e2       	ldi	r26, 0x27	; 39
    4800:	b0 e0       	ldi	r27, 0x00	; 0
    4802:	e7 e2       	ldi	r30, 0x27	; 39
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	90 81       	ld	r25, Z
    4808:	8a 81       	ldd	r24, Y+2	; 0x02
    480a:	89 2b       	or	r24, r25
    480c:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK ;
    480e:	19 82       	std	Y+1, r1	; 0x01
    4810:	02 c0       	rjmp	.+4      	; 0x4816 <ADC_enuSelectChannel+0x42>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    4812:	82 e0       	ldi	r24, 0x02	; 2
    4814:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4816:	89 81       	ldd	r24, Y+1	; 0x01
}
    4818:	0f 90       	pop	r0
    481a:	0f 90       	pop	r0
    481c:	cf 91       	pop	r28
    481e:	df 91       	pop	r29
    4820:	08 95       	ret

00004822 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion(void)
{
    4822:	df 93       	push	r29
    4824:	cf 93       	push	r28
    4826:	cd b7       	in	r28, 0x3d	; 61
    4828:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( ADCSRA , ADC_START_CONVERSION_BIT );
    482a:	a6 e2       	ldi	r26, 0x26	; 38
    482c:	b0 e0       	ldi	r27, 0x00	; 0
    482e:	e6 e2       	ldi	r30, 0x26	; 38
    4830:	f0 e0       	ldi	r31, 0x00	; 0
    4832:	80 81       	ld	r24, Z
    4834:	80 64       	ori	r24, 0x40	; 64
    4836:	8c 93       	st	X, r24

	return ES_OK;
    4838:	80 e0       	ldi	r24, 0x00	; 0
}
    483a:	cf 91       	pop	r28
    483c:	df 91       	pop	r29
    483e:	08 95       	ret

00004840 <ADC_enuEnableAutoTrigger>:

ES_t ADC_enuEnableAutoTrigger(u8 Copy_u8TriggerSource)
{
    4840:	df 93       	push	r29
    4842:	cf 93       	push	r28
    4844:	00 d0       	rcall	.+0      	; 0x4846 <ADC_enuEnableAutoTrigger+0x6>
    4846:	cd b7       	in	r28, 0x3d	; 61
    4848:	de b7       	in	r29, 0x3e	; 62
    484a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    484c:	81 e0       	ldi	r24, 0x01	; 1
    484e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8TriggerSource >= FREE_RUNNING && Copy_u8TriggerSource <= TIMER1_CAPT_EVENT )
    4850:	8a 81       	ldd	r24, Y+2	; 0x02
    4852:	87 3a       	cpi	r24, 0xA7	; 167
    4854:	08 f1       	brcs	.+66     	; 0x4898 <ADC_enuEnableAutoTrigger+0x58>
    4856:	8a 81       	ldd	r24, Y+2	; 0x02
    4858:	8f 3a       	cpi	r24, 0xAF	; 175
    485a:	f0 f4       	brcc	.+60     	; 0x4898 <ADC_enuEnableAutoTrigger+0x58>
	{
		CLR_BIT( ADCSRA , ADC_AUTO_TRIGGER_EN_BIT );
    485c:	a6 e2       	ldi	r26, 0x26	; 38
    485e:	b0 e0       	ldi	r27, 0x00	; 0
    4860:	e6 e2       	ldi	r30, 0x26	; 38
    4862:	f0 e0       	ldi	r31, 0x00	; 0
    4864:	80 81       	ld	r24, Z
    4866:	8f 7d       	andi	r24, 0xDF	; 223
    4868:	8c 93       	st	X, r24

		SFIOR &= ~( ADC_TRIGGER_SEL_BITS_MASK );
    486a:	a0 e5       	ldi	r26, 0x50	; 80
    486c:	b0 e0       	ldi	r27, 0x00	; 0
    486e:	e0 e5       	ldi	r30, 0x50	; 80
    4870:	f0 e0       	ldi	r31, 0x00	; 0
    4872:	80 81       	ld	r24, Z
    4874:	88 7f       	andi	r24, 0xF8	; 248
    4876:	8c 93       	st	X, r24
		SFIOR |= ( (ADC_INIT_CHANNEL - FREE_RUNNING ) << ADC_TRIGGER_SEL_BITS );
    4878:	a0 e5       	ldi	r26, 0x50	; 80
    487a:	b0 e0       	ldi	r27, 0x00	; 0
    487c:	e0 e5       	ldi	r30, 0x50	; 80
    487e:	f0 e0       	ldi	r31, 0x00	; 0
    4880:	80 81       	ld	r24, Z
    4882:	8e 6d       	ori	r24, 0xDE	; 222
    4884:	8c 93       	st	X, r24

		SET_BIT( ADCSRA , ADC_AUTO_TRIGGER_EN_BIT );
    4886:	a6 e2       	ldi	r26, 0x26	; 38
    4888:	b0 e0       	ldi	r27, 0x00	; 0
    488a:	e6 e2       	ldi	r30, 0x26	; 38
    488c:	f0 e0       	ldi	r31, 0x00	; 0
    488e:	80 81       	ld	r24, Z
    4890:	80 62       	ori	r24, 0x20	; 32
    4892:	8c 93       	st	X, r24

		Local_enuErrorState = ES_OK;
    4894:	19 82       	std	Y+1, r1	; 0x01
    4896:	02 c0       	rjmp	.+4      	; 0x489c <ADC_enuEnableAutoTrigger+0x5c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    4898:	82 e0       	ldi	r24, 0x02	; 2
    489a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    489c:	89 81       	ldd	r24, Y+1	; 0x01
}
    489e:	0f 90       	pop	r0
    48a0:	0f 90       	pop	r0
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	08 95       	ret

000048a8 <ADC_enuDisableAutoTrigger>:

ES_t ADC_enuDisableAutoTrigger(void)
{
    48a8:	df 93       	push	r29
    48aa:	cf 93       	push	r28
    48ac:	cd b7       	in	r28, 0x3d	; 61
    48ae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( ADCSRA , ADC_AUTO_TRIGGER_EN_BIT );
    48b0:	a6 e2       	ldi	r26, 0x26	; 38
    48b2:	b0 e0       	ldi	r27, 0x00	; 0
    48b4:	e6 e2       	ldi	r30, 0x26	; 38
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	80 81       	ld	r24, Z
    48ba:	8f 7d       	andi	r24, 0xDF	; 223
    48bc:	8c 93       	st	X, r24
//	ADCSRA &= ~(BIT_MASK << ADC_AUTO_TRIGGER_EN_BIT );

	return ES_OK;
    48be:	80 e0       	ldi	r24, 0x00	; 0
}
    48c0:	cf 91       	pop	r28
    48c2:	df 91       	pop	r29
    48c4:	08 95       	ret

000048c6 <ADC_enuRead>:


ES_t ADC_enuRead(u16 *Copy_u16ADC_Value)
{
    48c6:	df 93       	push	r29
    48c8:	cf 93       	push	r28
    48ca:	00 d0       	rcall	.+0      	; 0x48cc <ADC_enuRead+0x6>
    48cc:	0f 92       	push	r0
    48ce:	cd b7       	in	r28, 0x3d	; 61
    48d0:	de b7       	in	r29, 0x3e	; 62
    48d2:	9b 83       	std	Y+3, r25	; 0x03
    48d4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    48d6:	81 e0       	ldi	r24, 0x01	; 1
    48d8:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u16ADC_Value != NULL )
    48da:	8a 81       	ldd	r24, Y+2	; 0x02
    48dc:	9b 81       	ldd	r25, Y+3	; 0x03
    48de:	00 97       	sbiw	r24, 0x00	; 0
    48e0:	e1 f0       	breq	.+56     	; 0x491a <ADC_enuRead+0x54>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u16ADC_Value  = ADCL;
    48e2:	e4 e2       	ldi	r30, 0x24	; 36
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	80 81       	ld	r24, Z
    48e8:	88 2f       	mov	r24, r24
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	ea 81       	ldd	r30, Y+2	; 0x02
    48ee:	fb 81       	ldd	r31, Y+3	; 0x03
    48f0:	91 83       	std	Z+1, r25	; 0x01
    48f2:	80 83       	st	Z, r24
			*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    48f4:	ea 81       	ldd	r30, Y+2	; 0x02
    48f6:	fb 81       	ldd	r31, Y+3	; 0x03
    48f8:	20 81       	ld	r18, Z
    48fa:	31 81       	ldd	r19, Z+1	; 0x01
    48fc:	e5 e2       	ldi	r30, 0x25	; 37
    48fe:	f0 e0       	ldi	r31, 0x00	; 0
    4900:	80 81       	ld	r24, Z
    4902:	88 2f       	mov	r24, r24
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	98 2f       	mov	r25, r24
    4908:	88 27       	eor	r24, r24
    490a:	82 2b       	or	r24, r18
    490c:	93 2b       	or	r25, r19
    490e:	ea 81       	ldd	r30, Y+2	; 0x02
    4910:	fb 81       	ldd	r31, Y+3	; 0x03
    4912:	91 83       	std	Z+1, r25	; 0x01
    4914:	80 83       	st	Z, r24

			#warning "ADC_enuRead(u16*): Optimumt Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

		#endif

		Local_enuErrorState = ES_OK ;
    4916:	19 82       	std	Y+1, r1	; 0x01
    4918:	02 c0       	rjmp	.+4      	; 0x491e <ADC_enuRead+0x58>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    491a:	83 e0       	ldi	r24, 0x03	; 3
    491c:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    491e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4920:	0f 90       	pop	r0
    4922:	0f 90       	pop	r0
    4924:	0f 90       	pop	r0
    4926:	cf 91       	pop	r28
    4928:	df 91       	pop	r29
    492a:	08 95       	ret

0000492c <ADC_enuReadHigh>:

ES_t ADC_enuReadHigh(u8 *Copy_u8ADC_Value)

{
    492c:	df 93       	push	r29
    492e:	cf 93       	push	r28
    4930:	00 d0       	rcall	.+0      	; 0x4932 <ADC_enuReadHigh+0x6>
    4932:	0f 92       	push	r0
    4934:	cd b7       	in	r28, 0x3d	; 61
    4936:	de b7       	in	r29, 0x3e	; 62
    4938:	9b 83       	std	Y+3, r25	; 0x03
    493a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_u8ADC_Value != NULL )
    4940:	8a 81       	ldd	r24, Y+2	; 0x02
    4942:	9b 81       	ldd	r25, Y+3	; 0x03
    4944:	00 97       	sbiw	r24, 0x00	; 0
    4946:	01 f1       	breq	.+64     	; 0x4988 <ADC_enuReadHigh+0x5c>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    4948:	e4 e2       	ldi	r30, 0x24	; 36
    494a:	f0 e0       	ldi	r31, 0x00	; 0
    494c:	80 81       	ld	r24, Z
    494e:	86 95       	lsr	r24
    4950:	86 95       	lsr	r24
    4952:	ea 81       	ldd	r30, Y+2	; 0x02
    4954:	fb 81       	ldd	r31, Y+3	; 0x03
    4956:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    4958:	ea 81       	ldd	r30, Y+2	; 0x02
    495a:	fb 81       	ldd	r31, Y+3	; 0x03
    495c:	80 81       	ld	r24, Z
    495e:	28 2f       	mov	r18, r24
    4960:	e5 e2       	ldi	r30, 0x25	; 37
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	80 81       	ld	r24, Z
    4966:	88 2f       	mov	r24, r24
    4968:	90 e0       	ldi	r25, 0x00	; 0
    496a:	00 24       	eor	r0, r0
    496c:	96 95       	lsr	r25
    496e:	87 95       	ror	r24
    4970:	07 94       	ror	r0
    4972:	96 95       	lsr	r25
    4974:	87 95       	ror	r24
    4976:	07 94       	ror	r0
    4978:	98 2f       	mov	r25, r24
    497a:	80 2d       	mov	r24, r0
    497c:	82 2b       	or	r24, r18
    497e:	ea 81       	ldd	r30, Y+2	; 0x02
    4980:	fb 81       	ldd	r31, Y+3	; 0x03
    4982:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    4984:	19 82       	std	Y+1, r1	; 0x01
    4986:	02 c0       	rjmp	.+4      	; 0x498c <ADC_enuReadHigh+0x60>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    4988:	83 e0       	ldi	r24, 0x03	; 3
    498a:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    498c:	89 81       	ldd	r24, Y+1	; 0x01
}
    498e:	0f 90       	pop	r0
    4990:	0f 90       	pop	r0
    4992:	0f 90       	pop	r0
    4994:	cf 91       	pop	r28
    4996:	df 91       	pop	r29
    4998:	08 95       	ret

0000499a <ADC_enuPollingRead>:

ES_t ADC_enuPollingRead(u16 *Copy_u16ADC_Value)
{
    499a:	df 93       	push	r29
    499c:	cf 93       	push	r28
    499e:	00 d0       	rcall	.+0      	; 0x49a0 <ADC_enuPollingRead+0x6>
    49a0:	0f 92       	push	r0
    49a2:	cd b7       	in	r28, 0x3d	; 61
    49a4:	de b7       	in	r29, 0x3e	; 62
    49a6:	9b 83       	std	Y+3, r25	; 0x03
    49a8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    49aa:	81 e0       	ldi	r24, 0x01	; 1
    49ac:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    49ae:	e6 e2       	ldi	r30, 0x26	; 38
    49b0:	f0 e0       	ldi	r31, 0x00	; 0
    49b2:	80 81       	ld	r24, Z
    49b4:	88 2f       	mov	r24, r24
    49b6:	90 e0       	ldi	r25, 0x00	; 0
    49b8:	80 71       	andi	r24, 0x10	; 16
    49ba:	90 70       	andi	r25, 0x00	; 0
    49bc:	00 97       	sbiw	r24, 0x00	; 0
    49be:	b9 f3       	breq	.-18     	; 0x49ae <ADC_enuPollingRead+0x14>

	if( Copy_u16ADC_Value != NULL)
    49c0:	8a 81       	ldd	r24, Y+2	; 0x02
    49c2:	9b 81       	ldd	r25, Y+3	; 0x03
    49c4:	00 97       	sbiw	r24, 0x00	; 0
    49c6:	e1 f0       	breq	.+56     	; 0x4a00 <ADC_enuPollingRead+0x66>
	{
#if ( ADC_ADJUST == RIGHT_ADJUST)

		*Copy_u16ADC_Value  = ADCL;
    49c8:	e4 e2       	ldi	r30, 0x24	; 36
    49ca:	f0 e0       	ldi	r31, 0x00	; 0
    49cc:	80 81       	ld	r24, Z
    49ce:	88 2f       	mov	r24, r24
    49d0:	90 e0       	ldi	r25, 0x00	; 0
    49d2:	ea 81       	ldd	r30, Y+2	; 0x02
    49d4:	fb 81       	ldd	r31, Y+3	; 0x03
    49d6:	91 83       	std	Z+1, r25	; 0x01
    49d8:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 8 );
    49da:	ea 81       	ldd	r30, Y+2	; 0x02
    49dc:	fb 81       	ldd	r31, Y+3	; 0x03
    49de:	20 81       	ld	r18, Z
    49e0:	31 81       	ldd	r19, Z+1	; 0x01
    49e2:	e5 e2       	ldi	r30, 0x25	; 37
    49e4:	f0 e0       	ldi	r31, 0x00	; 0
    49e6:	80 81       	ld	r24, Z
    49e8:	88 2f       	mov	r24, r24
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	98 2f       	mov	r25, r24
    49ee:	88 27       	eor	r24, r24
    49f0:	82 2b       	or	r24, r18
    49f2:	93 2b       	or	r25, r19
    49f4:	ea 81       	ldd	r30, Y+2	; 0x02
    49f6:	fb 81       	ldd	r31, Y+3	; 0x03
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
		*Copy_u16ADC_Value |= ( (u16)ADCH << 2 );

		#warning "ADC_enuRead(u16*): Optimum Way to read 10-bit Value is to set ADC_ADJUST to RIGHT_ADJUST"

#endif
		Local_enuErrorState = ES_OK ;
    49fc:	19 82       	std	Y+1, r1	; 0x01
    49fe:	02 c0       	rjmp	.+4      	; 0x4a04 <ADC_enuPollingRead+0x6a>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    4a00:	83 e0       	ldi	r24, 0x03	; 3
    4a02:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT( ADCSRA , ADC_INT_FLAG_BIT );
    4a04:	a6 e2       	ldi	r26, 0x26	; 38
    4a06:	b0 e0       	ldi	r27, 0x00	; 0
    4a08:	e6 e2       	ldi	r30, 0x26	; 38
    4a0a:	f0 e0       	ldi	r31, 0x00	; 0
    4a0c:	80 81       	ld	r24, Z
    4a0e:	80 61       	ori	r24, 0x10	; 16
    4a10:	8c 93       	st	X, r24

	return Local_enuErrorState;
    4a12:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a14:	0f 90       	pop	r0
    4a16:	0f 90       	pop	r0
    4a18:	0f 90       	pop	r0
    4a1a:	cf 91       	pop	r28
    4a1c:	df 91       	pop	r29
    4a1e:	08 95       	ret

00004a20 <ADC_enuPollingReadHigh>:

ES_t ADC_enuPollingReadHigh(u8 *Copy_u8ADC_Value)

{
    4a20:	df 93       	push	r29
    4a22:	cf 93       	push	r28
    4a24:	00 d0       	rcall	.+0      	; 0x4a26 <ADC_enuPollingReadHigh+0x6>
    4a26:	0f 92       	push	r0
    4a28:	cd b7       	in	r28, 0x3d	; 61
    4a2a:	de b7       	in	r29, 0x3e	; 62
    4a2c:	9b 83       	std	Y+3, r25	; 0x03
    4a2e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    4a34:	e6 e2       	ldi	r30, 0x26	; 38
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	80 81       	ld	r24, Z
    4a3a:	88 2f       	mov	r24, r24
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	80 71       	andi	r24, 0x10	; 16
    4a40:	90 70       	andi	r25, 0x00	; 0
    4a42:	00 97       	sbiw	r24, 0x00	; 0
    4a44:	b9 f3       	breq	.-18     	; 0x4a34 <ADC_enuPollingReadHigh+0x14>

	if( Copy_u8ADC_Value != NULL)
    4a46:	8a 81       	ldd	r24, Y+2	; 0x02
    4a48:	9b 81       	ldd	r25, Y+3	; 0x03
    4a4a:	00 97       	sbiw	r24, 0x00	; 0
    4a4c:	01 f1       	breq	.+64     	; 0x4a8e <ADC_enuPollingReadHigh+0x6e>
	{
		#if ( ADC_ADJUST == RIGHT_ADJUST)

			*Copy_u8ADC_Value  = ( ADCL >> 2 );
    4a4e:	e4 e2       	ldi	r30, 0x24	; 36
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	80 81       	ld	r24, Z
    4a54:	86 95       	lsr	r24
    4a56:	86 95       	lsr	r24
    4a58:	ea 81       	ldd	r30, Y+2	; 0x02
    4a5a:	fb 81       	ldd	r31, Y+3	; 0x03
    4a5c:	80 83       	st	Z, r24
			*Copy_u8ADC_Value |= ( ADCH << 6 );
    4a5e:	ea 81       	ldd	r30, Y+2	; 0x02
    4a60:	fb 81       	ldd	r31, Y+3	; 0x03
    4a62:	80 81       	ld	r24, Z
    4a64:	28 2f       	mov	r18, r24
    4a66:	e5 e2       	ldi	r30, 0x25	; 37
    4a68:	f0 e0       	ldi	r31, 0x00	; 0
    4a6a:	80 81       	ld	r24, Z
    4a6c:	88 2f       	mov	r24, r24
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	00 24       	eor	r0, r0
    4a72:	96 95       	lsr	r25
    4a74:	87 95       	ror	r24
    4a76:	07 94       	ror	r0
    4a78:	96 95       	lsr	r25
    4a7a:	87 95       	ror	r24
    4a7c:	07 94       	ror	r0
    4a7e:	98 2f       	mov	r25, r24
    4a80:	80 2d       	mov	r24, r0
    4a82:	82 2b       	or	r24, r18
    4a84:	ea 81       	ldd	r30, Y+2	; 0x02
    4a86:	fb 81       	ldd	r31, Y+3	; 0x03
    4a88:	80 83       	st	Z, r24

			*Copy_u8ADC_Value = ADCH ;

		#endif

		Local_enuErrorState = ES_OK ;
    4a8a:	19 82       	std	Y+1, r1	; 0x01
    4a8c:	02 c0       	rjmp	.+4      	; 0x4a92 <ADC_enuPollingReadHigh+0x72>
	}
	else Local_enuErrorState = ES_NULL_POINTER ;
    4a8e:	83 e0       	ldi	r24, 0x03	; 3
    4a90:	89 83       	std	Y+1, r24	; 0x01

	WAIT_TILL_BIT_IS_SET( ADCSRA , ADC_INT_FLAG_BIT );
    4a92:	e6 e2       	ldi	r30, 0x26	; 38
    4a94:	f0 e0       	ldi	r31, 0x00	; 0
    4a96:	80 81       	ld	r24, Z
    4a98:	88 2f       	mov	r24, r24
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	80 71       	andi	r24, 0x10	; 16
    4a9e:	90 70       	andi	r25, 0x00	; 0
    4aa0:	00 97       	sbiw	r24, 0x00	; 0
    4aa2:	b9 f3       	breq	.-18     	; 0x4a92 <ADC_enuPollingReadHigh+0x72>

	return Local_enuErrorState;
    4aa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4aa6:	0f 90       	pop	r0
    4aa8:	0f 90       	pop	r0
    4aaa:	0f 90       	pop	r0
    4aac:	cf 91       	pop	r28
    4aae:	df 91       	pop	r29
    4ab0:	08 95       	ret

00004ab2 <ADC_enuCallBack>:


ES_t ADC_enuCallBack(void ( *Copy_pFunAppFun )(void))
{
    4ab2:	df 93       	push	r29
    4ab4:	cf 93       	push	r28
    4ab6:	00 d0       	rcall	.+0      	; 0x4ab8 <ADC_enuCallBack+0x6>
    4ab8:	0f 92       	push	r0
    4aba:	cd b7       	in	r28, 0x3d	; 61
    4abc:	de b7       	in	r29, 0x3e	; 62
    4abe:	9b 83       	std	Y+3, r25	; 0x03
    4ac0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	89 83       	std	Y+1, r24	; 0x01

	if( Copy_pFunAppFun != NULL)
    4ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    4aca:	00 97       	sbiw	r24, 0x00	; 0
    4acc:	41 f0       	breq	.+16     	; 0x4ade <ADC_enuCallBack+0x2c>
	{
		ADC_pFunISRFun = Copy_pFunAppFun;
    4ace:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad2:	90 93 2a 02 	sts	0x022A, r25
    4ad6:	80 93 29 02 	sts	0x0229, r24
		Local_enuErrorState = ES_OK;
    4ada:	19 82       	std	Y+1, r1	; 0x01
    4adc:	02 c0       	rjmp	.+4      	; 0x4ae2 <ADC_enuCallBack+0x30>
	}
	else Local_enuErrorState = ES_NULL_POINTER;
    4ade:	83 e0       	ldi	r24, 0x03	; 3
    4ae0:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState;
    4ae2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ae4:	0f 90       	pop	r0
    4ae6:	0f 90       	pop	r0
    4ae8:	0f 90       	pop	r0
    4aea:	cf 91       	pop	r28
    4aec:	df 91       	pop	r29
    4aee:	08 95       	ret

00004af0 <ADC_enuEnable>:

ES_t ADC_enuEnable(void)
{
    4af0:	df 93       	push	r29
    4af2:	cf 93       	push	r28
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62

	SET_BIT( ADCSRA , ADC_ENABLE_BIT );
    4af8:	a6 e2       	ldi	r26, 0x26	; 38
    4afa:	b0 e0       	ldi	r27, 0x00	; 0
    4afc:	e6 e2       	ldi	r30, 0x26	; 38
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	80 81       	ld	r24, Z
    4b02:	80 68       	ori	r24, 0x80	; 128
    4b04:	8c 93       	st	X, r24
//	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
	return ES_OK;
    4b06:	80 e0       	ldi	r24, 0x00	; 0
}
    4b08:	cf 91       	pop	r28
    4b0a:	df 91       	pop	r29
    4b0c:	08 95       	ret

00004b0e <ADC_enuDisable>:

ES_t ADC_enuDisable(void)

{
    4b0e:	df 93       	push	r29
    4b10:	cf 93       	push	r28
    4b12:	cd b7       	in	r28, 0x3d	; 61
    4b14:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( ADCSRA , ADC_ENABLE_BIT );
    4b16:	a6 e2       	ldi	r26, 0x26	; 38
    4b18:	b0 e0       	ldi	r27, 0x00	; 0
    4b1a:	e6 e2       	ldi	r30, 0x26	; 38
    4b1c:	f0 e0       	ldi	r31, 0x00	; 0
    4b1e:	80 81       	ld	r24, Z
    4b20:	8f 77       	andi	r24, 0x7F	; 127
    4b22:	8c 93       	st	X, r24
//	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
	return ES_OK;
    4b24:	80 e0       	ldi	r24, 0x00	; 0
}
    4b26:	cf 91       	pop	r28
    4b28:	df 91       	pop	r29
    4b2a:	08 95       	ret

00004b2c <ADC_enuEnableInterrupt>:

ES_t ADC_enuEnableInterrupt(void)
{
    4b2c:	df 93       	push	r29
    4b2e:	cf 93       	push	r28
    4b30:	cd b7       	in	r28, 0x3d	; 61
    4b32:	de b7       	in	r29, 0x3e	; 62
	SET_BIT( ADCSRA , ADC_ENABLE_BIT );
    4b34:	a6 e2       	ldi	r26, 0x26	; 38
    4b36:	b0 e0       	ldi	r27, 0x00	; 0
    4b38:	e6 e2       	ldi	r30, 0x26	; 38
    4b3a:	f0 e0       	ldi	r31, 0x00	; 0
    4b3c:	80 81       	ld	r24, Z
    4b3e:	80 68       	ori	r24, 0x80	; 128
    4b40:	8c 93       	st	X, r24
//	ADCSRA |= ( BIT_MASK << ADC_ENABLE_BIT );
	return ES_OK;
    4b42:	80 e0       	ldi	r24, 0x00	; 0
}
    4b44:	cf 91       	pop	r28
    4b46:	df 91       	pop	r29
    4b48:	08 95       	ret

00004b4a <ADC_enuDisableInterrupt>:

ES_t ADC_enuDisableInterrupt(void)
{
    4b4a:	df 93       	push	r29
    4b4c:	cf 93       	push	r28
    4b4e:	cd b7       	in	r28, 0x3d	; 61
    4b50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT( ADCSRA , ADC_ENABLE_BIT );
    4b52:	a6 e2       	ldi	r26, 0x26	; 38
    4b54:	b0 e0       	ldi	r27, 0x00	; 0
    4b56:	e6 e2       	ldi	r30, 0x26	; 38
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	8f 77       	andi	r24, 0x7F	; 127
    4b5e:	8c 93       	st	X, r24
//	ADCSRA &= ~( BIT_MASK << ADC_ENABLE_BIT );
	return ES_OK;
    4b60:	80 e0       	ldi	r24, 0x00	; 0
}
    4b62:	cf 91       	pop	r28
    4b64:	df 91       	pop	r29
    4b66:	08 95       	ret

00004b68 <__vector_16>:


void __vector_16(void)__attribute__((signal));
void __vector_16(void)
{
    4b68:	1f 92       	push	r1
    4b6a:	0f 92       	push	r0
    4b6c:	0f b6       	in	r0, 0x3f	; 63
    4b6e:	0f 92       	push	r0
    4b70:	11 24       	eor	r1, r1
    4b72:	2f 93       	push	r18
    4b74:	3f 93       	push	r19
    4b76:	4f 93       	push	r20
    4b78:	5f 93       	push	r21
    4b7a:	6f 93       	push	r22
    4b7c:	7f 93       	push	r23
    4b7e:	8f 93       	push	r24
    4b80:	9f 93       	push	r25
    4b82:	af 93       	push	r26
    4b84:	bf 93       	push	r27
    4b86:	ef 93       	push	r30
    4b88:	ff 93       	push	r31
    4b8a:	df 93       	push	r29
    4b8c:	cf 93       	push	r28
    4b8e:	cd b7       	in	r28, 0x3d	; 61
    4b90:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pFunISRFun != NULL)
    4b92:	80 91 29 02 	lds	r24, 0x0229
    4b96:	90 91 2a 02 	lds	r25, 0x022A
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	29 f0       	breq	.+10     	; 0x4ba8 <__vector_16+0x40>
		ADC_pFunISRFun();
    4b9e:	e0 91 29 02 	lds	r30, 0x0229
    4ba2:	f0 91 2a 02 	lds	r31, 0x022A
    4ba6:	09 95       	icall
}
    4ba8:	cf 91       	pop	r28
    4baa:	df 91       	pop	r29
    4bac:	ff 91       	pop	r31
    4bae:	ef 91       	pop	r30
    4bb0:	bf 91       	pop	r27
    4bb2:	af 91       	pop	r26
    4bb4:	9f 91       	pop	r25
    4bb6:	8f 91       	pop	r24
    4bb8:	7f 91       	pop	r23
    4bba:	6f 91       	pop	r22
    4bbc:	5f 91       	pop	r21
    4bbe:	4f 91       	pop	r20
    4bc0:	3f 91       	pop	r19
    4bc2:	2f 91       	pop	r18
    4bc4:	0f 90       	pop	r0
    4bc6:	0f be       	out	0x3f, r0	; 63
    4bc8:	0f 90       	pop	r0
    4bca:	1f 90       	pop	r1
    4bcc:	18 95       	reti

00004bce <Switch_enuInit>:
extern u8 Switch_u8SwitchesMaxNum ;
extern Switch_t Switch[];


ES_t Switch_enuInit(void)
{
    4bce:	df 93       	push	r29
    4bd0:	cf 93       	push	r28
    4bd2:	00 d0       	rcall	.+0      	; 0x4bd4 <Switch_enuInit+0x6>
    4bd4:	00 d0       	rcall	.+0      	; 0x4bd6 <Switch_enuInit+0x8>
    4bd6:	cd b7       	in	r28, 0x3d	; 61
    4bd8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];
    4bda:	81 e0       	ldi	r24, 0x01	; 1
    4bdc:	8a 83       	std	Y+2, r24	; 0x02
    4bde:	51 c0       	rjmp	.+162    	; 0x4c82 <Switch_enuInit+0xb4>

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
	{
		Local_enuAerror[0] = DIO_enuSetPinDirection	(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , DIO_u8INPUT);
    4be0:	89 81       	ldd	r24, Y+1	; 0x01
    4be2:	28 2f       	mov	r18, r24
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	c9 01       	movw	r24, r18
    4be8:	88 0f       	add	r24, r24
    4bea:	99 1f       	adc	r25, r25
    4bec:	82 0f       	add	r24, r18
    4bee:	93 1f       	adc	r25, r19
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	e8 56       	subi	r30, 0x68	; 104
    4bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    4bf6:	40 81       	ld	r20, Z
    4bf8:	89 81       	ldd	r24, Y+1	; 0x01
    4bfa:	28 2f       	mov	r18, r24
    4bfc:	30 e0       	ldi	r19, 0x00	; 0
    4bfe:	c9 01       	movw	r24, r18
    4c00:	88 0f       	add	r24, r24
    4c02:	99 1f       	adc	r25, r25
    4c04:	82 0f       	add	r24, r18
    4c06:	93 1f       	adc	r25, r19
    4c08:	fc 01       	movw	r30, r24
    4c0a:	e7 56       	subi	r30, 0x67	; 103
    4c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    4c0e:	90 81       	ld	r25, Z
    4c10:	84 2f       	mov	r24, r20
    4c12:	69 2f       	mov	r22, r25
    4c14:	40 e0       	ldi	r20, 0x00	; 0
    4c16:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <DIO_enuSetPinDirection>
    4c1a:	8b 83       	std	Y+3, r24	; 0x03
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	28 2f       	mov	r18, r24
    4c20:	30 e0       	ldi	r19, 0x00	; 0
    4c22:	c9 01       	movw	r24, r18
    4c24:	88 0f       	add	r24, r24
    4c26:	99 1f       	adc	r25, r25
    4c28:	82 0f       	add	r24, r18
    4c2a:	93 1f       	adc	r25, r19
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	e8 56       	subi	r30, 0x68	; 104
    4c30:	fe 4f       	sbci	r31, 0xFE	; 254
    4c32:	50 81       	ld	r21, Z
    4c34:	89 81       	ldd	r24, Y+1	; 0x01
    4c36:	28 2f       	mov	r18, r24
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	c9 01       	movw	r24, r18
    4c3c:	88 0f       	add	r24, r24
    4c3e:	99 1f       	adc	r25, r25
    4c40:	82 0f       	add	r24, r18
    4c42:	93 1f       	adc	r25, r19
    4c44:	fc 01       	movw	r30, r24
    4c46:	e7 56       	subi	r30, 0x67	; 103
    4c48:	fe 4f       	sbci	r31, 0xFE	; 254
    4c4a:	40 81       	ld	r20, Z
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	28 2f       	mov	r18, r24
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	c9 01       	movw	r24, r18
    4c54:	88 0f       	add	r24, r24
    4c56:	99 1f       	adc	r25, r25
    4c58:	82 0f       	add	r24, r18
    4c5a:	93 1f       	adc	r25, r19
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	e6 56       	subi	r30, 0x66	; 102
    4c60:	fe 4f       	sbci	r31, 0xFE	; 254
    4c62:	90 81       	ld	r25, Z
    4c64:	85 2f       	mov	r24, r21
    4c66:	64 2f       	mov	r22, r20
    4c68:	49 2f       	mov	r20, r25
    4c6a:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    4c6e:	8c 83       	std	Y+4, r24	; 0x04

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
    4c70:	8b 81       	ldd	r24, Y+3	; 0x03
    4c72:	88 23       	and	r24, r24
    4c74:	61 f4       	brne	.+24     	; 0x4c8e <Switch_enuInit+0xc0>
    4c76:	8c 81       	ldd	r24, Y+4	; 0x04
    4c78:	88 23       	and	r24, r24
    4c7a:	49 f4       	brne	.+18     	; 0x4c8e <Switch_enuInit+0xc0>

ES_t Switch_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK , Local_enuAerror[2];

	for(u8 Local_u8Iter;Local_u8Iter < Switch_u8SwitchesMaxNum ;Local_u8Iter++)
    4c7c:	89 81       	ldd	r24, Y+1	; 0x01
    4c7e:	8f 5f       	subi	r24, 0xFF	; 255
    4c80:	89 83       	std	Y+1, r24	; 0x01
    4c82:	90 91 97 01 	lds	r25, 0x0197
    4c86:	89 81       	ldd	r24, Y+1	; 0x01
    4c88:	89 17       	cp	r24, r25
    4c8a:	08 f4       	brcc	.+2      	; 0x4c8e <Switch_enuInit+0xc0>
    4c8c:	a9 cf       	rjmp	.-174    	; 0x4be0 <Switch_enuInit+0x12>
		Local_enuAerror[1] = DIO_enuSetPinValue		(Switch[Local_u8Iter].sw_Grp , Switch[Local_u8Iter].sw_Pin , Switch[Local_u8Iter].sw_State);

		if (Local_enuAerror[0] != ES_OK || Local_enuAerror[1] != ES_OK) break;
	}

	if (Local_enuAerror[0] == ES_OK && Local_enuAerror[1] == ES_OK)
    4c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c90:	88 23       	and	r24, r24
    4c92:	21 f4       	brne	.+8      	; 0x4c9c <Switch_enuInit+0xce>
    4c94:	8c 81       	ldd	r24, Y+4	; 0x04
    4c96:	88 23       	and	r24, r24
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <Switch_enuInit+0xce>
		Local_enuErrorState = ES_OK;
    4c9a:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorState ;
    4c9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4c9e:	0f 90       	pop	r0
    4ca0:	0f 90       	pop	r0
    4ca2:	0f 90       	pop	r0
    4ca4:	0f 90       	pop	r0
    4ca6:	cf 91       	pop	r28
    4ca8:	df 91       	pop	r29
    4caa:	08 95       	ret

00004cac <Switch_enuGetPressed>:

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 *Copy_pu8SwitchValue)
{
    4cac:	df 93       	push	r29
    4cae:	cf 93       	push	r28
    4cb0:	00 d0       	rcall	.+0      	; 0x4cb2 <Switch_enuGetPressed+0x6>
    4cb2:	00 d0       	rcall	.+0      	; 0x4cb4 <Switch_enuGetPressed+0x8>
    4cb4:	cd b7       	in	r28, 0x3d	; 61
    4cb6:	de b7       	in	r29, 0x3e	; 62
    4cb8:	8a 83       	std	Y+2, r24	; 0x02
    4cba:	7c 83       	std	Y+4, r23	; 0x04
    4cbc:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4cbe:	81 e0       	ldi	r24, 0x01	; 1
    4cc0:	89 83       	std	Y+1, r24	; 0x01


	if( (Copy_u8SwitchNum -= SWITCH_ZERO) < Switch_u8SwitchesMaxNum )
    4cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cc4:	89 5c       	subi	r24, 0xC9	; 201
    4cc6:	8a 83       	std	Y+2, r24	; 0x02
    4cc8:	90 91 97 01 	lds	r25, 0x0197
    4ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    4cce:	89 17       	cp	r24, r25
    4cd0:	08 f5       	brcc	.+66     	; 0x4d14 <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState =  DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue ) ;
    4cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd4:	28 2f       	mov	r18, r24
    4cd6:	30 e0       	ldi	r19, 0x00	; 0
    4cd8:	c9 01       	movw	r24, r18
    4cda:	88 0f       	add	r24, r24
    4cdc:	99 1f       	adc	r25, r25
    4cde:	82 0f       	add	r24, r18
    4ce0:	93 1f       	adc	r25, r19
    4ce2:	fc 01       	movw	r30, r24
    4ce4:	e8 56       	subi	r30, 0x68	; 104
    4ce6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ce8:	40 81       	ld	r20, Z
    4cea:	8a 81       	ldd	r24, Y+2	; 0x02
    4cec:	28 2f       	mov	r18, r24
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	c9 01       	movw	r24, r18
    4cf2:	88 0f       	add	r24, r24
    4cf4:	99 1f       	adc	r25, r25
    4cf6:	82 0f       	add	r24, r18
    4cf8:	93 1f       	adc	r25, r19
    4cfa:	fc 01       	movw	r30, r24
    4cfc:	e7 56       	subi	r30, 0x67	; 103
    4cfe:	fe 4f       	sbci	r31, 0xFE	; 254
    4d00:	90 81       	ld	r25, Z
    4d02:	2b 81       	ldd	r18, Y+3	; 0x03
    4d04:	3c 81       	ldd	r19, Y+4	; 0x04
    4d06:	84 2f       	mov	r24, r20
    4d08:	69 2f       	mov	r22, r25
    4d0a:	a9 01       	movw	r20, r18
    4d0c:	0e 94 83 22 	call	0x4506	; 0x4506 <DIO_enuGetPinValue>
    4d10:	89 83       	std	Y+1, r24	; 0x01
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
    4d14:	82 e0       	ldi	r24, 0x02	; 2
    4d16:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
    4d18:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d1a:	0f 90       	pop	r0
    4d1c:	0f 90       	pop	r0
    4d1e:	0f 90       	pop	r0
    4d20:	0f 90       	pop	r0
    4d22:	cf 91       	pop	r28
    4d24:	df 91       	pop	r29
    4d26:	08 95       	ret

00004d28 <SevSeg_enuInit>:
extern u8 SevSeg_u8MaxModules;
extern u8 ModuleValuePins;
extern SSegModule_t SSegModule[];

ES_t SevSeg_enuInit(void)
{
    4d28:	df 93       	push	r29
    4d2a:	cf 93       	push	r28
    4d2c:	00 d0       	rcall	.+0      	; 0x4d2e <SevSeg_enuInit+0x6>
    4d2e:	0f 92       	push	r0
    4d30:	cd b7       	in	r28, 0x3d	; 61
    4d32:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4d34:	81 e0       	ldi	r24, 0x01	; 1
    4d36:	8b 83       	std	Y+3, r24	; 0x03

	for( u8 Local_u8Counter = 0 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    4d38:	1a 82       	std	Y+2, r1	; 0x02
    4d3a:	17 c1       	rjmp	.+558    	; 0x4f6a <SevSeg_enuInit+0x242>
	{
		for( u8 Local_u8PinNum = 0 ; Local_u8PinNum < ModuleValuePins ; Local_u8PinNum++ )
    4d3c:	19 82       	std	Y+1, r1	; 0x01
    4d3e:	67 c0       	rjmp	.+206    	; 0x4e0e <SevSeg_enuInit+0xe6>
		{
			if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputGrp ,
    4d40:	8a 81       	ldd	r24, Y+2	; 0x02
    4d42:	28 2f       	mov	r18, r24
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	89 81       	ldd	r24, Y+1	; 0x01
    4d48:	48 2f       	mov	r20, r24
    4d4a:	50 e0       	ldi	r21, 0x00	; 0
    4d4c:	c9 01       	movw	r24, r18
    4d4e:	88 0f       	add	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	82 0f       	add	r24, r18
    4d54:	93 1f       	adc	r25, r19
    4d56:	88 0f       	add	r24, r24
    4d58:	99 1f       	adc	r25, r25
    4d5a:	84 0f       	add	r24, r20
    4d5c:	95 1f       	adc	r25, r21
    4d5e:	88 0f       	add	r24, r24
    4d60:	99 1f       	adc	r25, r25
    4d62:	fc 01       	movw	r30, r24
    4d64:	ed 55       	subi	r30, 0x5D	; 93
    4d66:	fe 4f       	sbci	r31, 0xFE	; 254
    4d68:	60 81       	ld	r22, Z
    4d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d6c:	28 2f       	mov	r18, r24
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	89 81       	ldd	r24, Y+1	; 0x01
    4d72:	48 2f       	mov	r20, r24
    4d74:	50 e0       	ldi	r21, 0x00	; 0
    4d76:	c9 01       	movw	r24, r18
    4d78:	88 0f       	add	r24, r24
    4d7a:	99 1f       	adc	r25, r25
    4d7c:	82 0f       	add	r24, r18
    4d7e:	93 1f       	adc	r25, r19
    4d80:	88 0f       	add	r24, r24
    4d82:	99 1f       	adc	r25, r25
    4d84:	84 0f       	add	r24, r20
    4d86:	95 1f       	adc	r25, r21
    4d88:	88 0f       	add	r24, r24
    4d8a:	99 1f       	adc	r25, r25
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	ec 55       	subi	r30, 0x5C	; 92
    4d90:	fe 4f       	sbci	r31, 0xFE	; 254
    4d92:	90 81       	ld	r25, Z
    4d94:	86 2f       	mov	r24, r22
    4d96:	69 2f       	mov	r22, r25
    4d98:	41 e0       	ldi	r20, 0x01	; 1
    4d9a:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <DIO_enuSetPinDirection>
    4d9e:	88 23       	and	r24, r24
    4da0:	81 f5       	brne	.+96     	; 0x4e02 <SevSeg_enuInit+0xda>
														SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT) )
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputGrp ,
    4da2:	8a 81       	ldd	r24, Y+2	; 0x02
    4da4:	28 2f       	mov	r18, r24
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	89 81       	ldd	r24, Y+1	; 0x01
    4daa:	48 2f       	mov	r20, r24
    4dac:	50 e0       	ldi	r21, 0x00	; 0
    4dae:	c9 01       	movw	r24, r18
    4db0:	88 0f       	add	r24, r24
    4db2:	99 1f       	adc	r25, r25
    4db4:	82 0f       	add	r24, r18
    4db6:	93 1f       	adc	r25, r19
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	84 0f       	add	r24, r20
    4dbe:	95 1f       	adc	r25, r21
    4dc0:	88 0f       	add	r24, r24
    4dc2:	99 1f       	adc	r25, r25
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	ed 55       	subi	r30, 0x5D	; 93
    4dc8:	fe 4f       	sbci	r31, 0xFE	; 254
    4dca:	60 81       	ld	r22, Z
    4dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dce:	28 2f       	mov	r18, r24
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	89 81       	ldd	r24, Y+1	; 0x01
    4dd4:	48 2f       	mov	r20, r24
    4dd6:	50 e0       	ldi	r21, 0x00	; 0
    4dd8:	c9 01       	movw	r24, r18
    4dda:	88 0f       	add	r24, r24
    4ddc:	99 1f       	adc	r25, r25
    4dde:	82 0f       	add	r24, r18
    4de0:	93 1f       	adc	r25, r19
    4de2:	88 0f       	add	r24, r24
    4de4:	99 1f       	adc	r25, r25
    4de6:	84 0f       	add	r24, r20
    4de8:	95 1f       	adc	r25, r21
    4dea:	88 0f       	add	r24, r24
    4dec:	99 1f       	adc	r25, r25
    4dee:	fc 01       	movw	r30, r24
    4df0:	ec 55       	subi	r30, 0x5C	; 92
    4df2:	fe 4f       	sbci	r31, 0xFE	; 254
    4df4:	90 81       	ld	r25, Z
    4df6:	86 2f       	mov	r24, r22
    4df8:	69 2f       	mov	r22, r25
    4dfa:	40 e0       	ldi	r20, 0x00	; 0
    4dfc:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    4e00:	8b 83       	std	Y+3, r24	; 0x03
														SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputPin , SEGMENT_OFF );
			if( Local_enuErrorState != ES_OK) break;
    4e02:	8b 81       	ldd	r24, Y+3	; 0x03
    4e04:	88 23       	and	r24, r24
    4e06:	49 f4       	brne	.+18     	; 0x4e1a <SevSeg_enuInit+0xf2>
{
	ES_t Local_enuErrorState = ES_NOK;

	for( u8 Local_u8Counter = 0 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
	{
		for( u8 Local_u8PinNum = 0 ; Local_u8PinNum < ModuleValuePins ; Local_u8PinNum++ )
    4e08:	89 81       	ldd	r24, Y+1	; 0x01
    4e0a:	8f 5f       	subi	r24, 0xFF	; 255
    4e0c:	89 83       	std	Y+1, r24	; 0x01
    4e0e:	90 91 a2 01 	lds	r25, 0x01A2
    4e12:	89 81       	ldd	r24, Y+1	; 0x01
    4e14:	89 17       	cp	r24, r25
    4e16:	08 f4       	brcc	.+2      	; 0x4e1a <SevSeg_enuInit+0xf2>
    4e18:	93 cf       	rjmp	.-218    	; 0x4d40 <SevSeg_enuInit+0x18>
														SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT) )
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputGrp ,
														SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputPin , SEGMENT_OFF );
			if( Local_enuErrorState != ES_OK) break;
		}
		if( Local_enuErrorState == ES_OK)
    4e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1c:	88 23       	and	r24, r24
    4e1e:	09 f0       	breq	.+2      	; 0x4e22 <SevSeg_enuInit+0xfa>
    4e20:	4d c0       	rjmp	.+154    	; 0x4ebc <SevSeg_enuInit+0x194>
		{
			if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule[Local_u8Counter].DIP_Conf.InputGrp ,
    4e22:	8a 81       	ldd	r24, Y+2	; 0x02
    4e24:	28 2f       	mov	r18, r24
    4e26:	30 e0       	ldi	r19, 0x00	; 0
    4e28:	c9 01       	movw	r24, r18
    4e2a:	88 0f       	add	r24, r24
    4e2c:	99 1f       	adc	r25, r25
    4e2e:	82 0f       	add	r24, r18
    4e30:	93 1f       	adc	r25, r19
    4e32:	88 0f       	add	r24, r24
    4e34:	99 1f       	adc	r25, r25
    4e36:	88 0f       	add	r24, r24
    4e38:	99 1f       	adc	r25, r25
    4e3a:	fc 01       	movw	r30, r24
    4e3c:	e5 55       	subi	r30, 0x55	; 85
    4e3e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e40:	40 81       	ld	r20, Z
    4e42:	8a 81       	ldd	r24, Y+2	; 0x02
    4e44:	28 2f       	mov	r18, r24
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	c9 01       	movw	r24, r18
    4e4a:	88 0f       	add	r24, r24
    4e4c:	99 1f       	adc	r25, r25
    4e4e:	82 0f       	add	r24, r18
    4e50:	93 1f       	adc	r25, r19
    4e52:	88 0f       	add	r24, r24
    4e54:	99 1f       	adc	r25, r25
    4e56:	88 0f       	add	r24, r24
    4e58:	99 1f       	adc	r25, r25
    4e5a:	fc 01       	movw	r30, r24
    4e5c:	e4 55       	subi	r30, 0x54	; 84
    4e5e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e60:	90 81       	ld	r25, Z
    4e62:	84 2f       	mov	r24, r20
    4e64:	69 2f       	mov	r22, r25
    4e66:	41 e0       	ldi	r20, 0x01	; 1
    4e68:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <DIO_enuSetPinDirection>
    4e6c:	88 23       	and	r24, r24
    4e6e:	31 f5       	brne	.+76     	; 0x4ebc <SevSeg_enuInit+0x194>
														SSegModule[Local_u8Counter].DIP_Conf.InputPin , DIO_u8OUTPUT) )
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Local_u8Counter].DIP_Conf.InputGrp ,
    4e70:	8a 81       	ldd	r24, Y+2	; 0x02
    4e72:	28 2f       	mov	r18, r24
    4e74:	30 e0       	ldi	r19, 0x00	; 0
    4e76:	c9 01       	movw	r24, r18
    4e78:	88 0f       	add	r24, r24
    4e7a:	99 1f       	adc	r25, r25
    4e7c:	82 0f       	add	r24, r18
    4e7e:	93 1f       	adc	r25, r19
    4e80:	88 0f       	add	r24, r24
    4e82:	99 1f       	adc	r25, r25
    4e84:	88 0f       	add	r24, r24
    4e86:	99 1f       	adc	r25, r25
    4e88:	fc 01       	movw	r30, r24
    4e8a:	e5 55       	subi	r30, 0x55	; 85
    4e8c:	fe 4f       	sbci	r31, 0xFE	; 254
    4e8e:	40 81       	ld	r20, Z
    4e90:	8a 81       	ldd	r24, Y+2	; 0x02
    4e92:	28 2f       	mov	r18, r24
    4e94:	30 e0       	ldi	r19, 0x00	; 0
    4e96:	c9 01       	movw	r24, r18
    4e98:	88 0f       	add	r24, r24
    4e9a:	99 1f       	adc	r25, r25
    4e9c:	82 0f       	add	r24, r18
    4e9e:	93 1f       	adc	r25, r19
    4ea0:	88 0f       	add	r24, r24
    4ea2:	99 1f       	adc	r25, r25
    4ea4:	88 0f       	add	r24, r24
    4ea6:	99 1f       	adc	r25, r25
    4ea8:	fc 01       	movw	r30, r24
    4eaa:	e4 55       	subi	r30, 0x54	; 84
    4eac:	fe 4f       	sbci	r31, 0xFE	; 254
    4eae:	90 81       	ld	r25, Z
    4eb0:	84 2f       	mov	r24, r20
    4eb2:	69 2f       	mov	r22, r25
    4eb4:	41 e0       	ldi	r20, 0x01	; 1
    4eb6:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    4eba:	8b 83       	std	Y+3, r24	; 0x03
														SSegModule[Local_u8Counter].DIP_Conf.InputPin , DIP_OFF );
		}
		if( Local_enuErrorState == ES_OK)
    4ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ebe:	88 23       	and	r24, r24
    4ec0:	09 f0       	breq	.+2      	; 0x4ec4 <SevSeg_enuInit+0x19c>
    4ec2:	4d c0       	rjmp	.+154    	; 0x4f5e <SevSeg_enuInit+0x236>
		{
			if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule[Local_u8Counter].Enable_Conf.InputGrp ,
    4ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec6:	28 2f       	mov	r18, r24
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	c9 01       	movw	r24, r18
    4ecc:	88 0f       	add	r24, r24
    4ece:	99 1f       	adc	r25, r25
    4ed0:	82 0f       	add	r24, r18
    4ed2:	93 1f       	adc	r25, r19
    4ed4:	88 0f       	add	r24, r24
    4ed6:	99 1f       	adc	r25, r25
    4ed8:	88 0f       	add	r24, r24
    4eda:	99 1f       	adc	r25, r25
    4edc:	fc 01       	movw	r30, r24
    4ede:	e3 55       	subi	r30, 0x53	; 83
    4ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ee2:	40 81       	ld	r20, Z
    4ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee6:	28 2f       	mov	r18, r24
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	c9 01       	movw	r24, r18
    4eec:	88 0f       	add	r24, r24
    4eee:	99 1f       	adc	r25, r25
    4ef0:	82 0f       	add	r24, r18
    4ef2:	93 1f       	adc	r25, r19
    4ef4:	88 0f       	add	r24, r24
    4ef6:	99 1f       	adc	r25, r25
    4ef8:	88 0f       	add	r24, r24
    4efa:	99 1f       	adc	r25, r25
    4efc:	fc 01       	movw	r30, r24
    4efe:	e2 55       	subi	r30, 0x52	; 82
    4f00:	fe 4f       	sbci	r31, 0xFE	; 254
    4f02:	90 81       	ld	r25, Z
    4f04:	84 2f       	mov	r24, r20
    4f06:	69 2f       	mov	r22, r25
    4f08:	41 e0       	ldi	r20, 0x01	; 1
    4f0a:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <DIO_enuSetPinDirection>
    4f0e:	88 23       	and	r24, r24
    4f10:	31 f5       	brne	.+76     	; 0x4f5e <SevSeg_enuInit+0x236>
														SSegModule[Local_u8Counter].Enable_Conf.InputPin , DIO_u8OUTPUT) )
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Local_u8Counter].Enable_Conf.InputGrp ,
    4f12:	8a 81       	ldd	r24, Y+2	; 0x02
    4f14:	28 2f       	mov	r18, r24
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	c9 01       	movw	r24, r18
    4f1a:	88 0f       	add	r24, r24
    4f1c:	99 1f       	adc	r25, r25
    4f1e:	82 0f       	add	r24, r18
    4f20:	93 1f       	adc	r25, r19
    4f22:	88 0f       	add	r24, r24
    4f24:	99 1f       	adc	r25, r25
    4f26:	88 0f       	add	r24, r24
    4f28:	99 1f       	adc	r25, r25
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	e3 55       	subi	r30, 0x53	; 83
    4f2e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f30:	40 81       	ld	r20, Z
    4f32:	8a 81       	ldd	r24, Y+2	; 0x02
    4f34:	28 2f       	mov	r18, r24
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	c9 01       	movw	r24, r18
    4f3a:	88 0f       	add	r24, r24
    4f3c:	99 1f       	adc	r25, r25
    4f3e:	82 0f       	add	r24, r18
    4f40:	93 1f       	adc	r25, r19
    4f42:	88 0f       	add	r24, r24
    4f44:	99 1f       	adc	r25, r25
    4f46:	88 0f       	add	r24, r24
    4f48:	99 1f       	adc	r25, r25
    4f4a:	fc 01       	movw	r30, r24
    4f4c:	e2 55       	subi	r30, 0x52	; 82
    4f4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4f50:	90 81       	ld	r25, Z
    4f52:	84 2f       	mov	r24, r20
    4f54:	69 2f       	mov	r22, r25
    4f56:	40 e0       	ldi	r20, 0x00	; 0
    4f58:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    4f5c:	8b 83       	std	Y+3, r24	; 0x03
														SSegModule[Local_u8Counter].Enable_Conf.InputPin , MOD_EN_OFF );
		}
		if( Local_enuErrorState != ES_OK) break;
    4f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f60:	88 23       	and	r24, r24
    4f62:	49 f4       	brne	.+18     	; 0x4f76 <SevSeg_enuInit+0x24e>

ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for( u8 Local_u8Counter = 0 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
    4f64:	8a 81       	ldd	r24, Y+2	; 0x02
    4f66:	8f 5f       	subi	r24, 0xFF	; 255
    4f68:	8a 83       	std	Y+2, r24	; 0x02
    4f6a:	90 91 a1 01 	lds	r25, 0x01A1
    4f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f70:	98 17       	cp	r25, r24
    4f72:	08 f0       	brcs	.+2      	; 0x4f76 <SevSeg_enuInit+0x24e>
    4f74:	e3 ce       	rjmp	.-570    	; 0x4d3c <SevSeg_enuInit+0x14>
														SSegModule[Local_u8Counter].Enable_Conf.InputPin , MOD_EN_OFF );
		}
		if( Local_enuErrorState != ES_OK) break;
	}

	return Local_enuErrorState ;//DONE
    4f76:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4f78:	0f 90       	pop	r0
    4f7a:	0f 90       	pop	r0
    4f7c:	0f 90       	pop	r0
    4f7e:	cf 91       	pop	r28
    4f80:	df 91       	pop	r29
    4f82:	08 95       	ret

00004f84 <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue(u8 Copy_u8ModuleNum , u8 Copy_u8SevSegDigitValue)
{
    4f84:	df 93       	push	r29
    4f86:	cf 93       	push	r28
    4f88:	00 d0       	rcall	.+0      	; 0x4f8a <SevSeg_enuSetDigitValue+0x6>
    4f8a:	00 d0       	rcall	.+0      	; 0x4f8c <SevSeg_enuSetDigitValue+0x8>
    4f8c:	0f 92       	push	r0
    4f8e:	cd b7       	in	r28, 0x3d	; 61
    4f90:	de b7       	in	r29, 0x3e	; 62
    4f92:	8c 83       	std	Y+4, r24	; 0x04
    4f94:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK ;
    4f96:	81 e0       	ldi	r24, 0x01	; 1
    4f98:	8b 83       	std	Y+3, r24	; 0x03
	
	if( ( (Copy_u8ModuleNum - MODULE_1) < SevSeg_u8MaxModules ) &&	( Copy_u8SevSegDigitValue < DIGIT_BASE ) )
    4f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    4f9c:	88 2f       	mov	r24, r24
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	9c 01       	movw	r18, r24
    4fa2:	2b 50       	subi	r18, 0x0B	; 11
    4fa4:	30 40       	sbci	r19, 0x00	; 0
    4fa6:	80 91 a1 01 	lds	r24, 0x01A1
    4faa:	88 2f       	mov	r24, r24
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	28 17       	cp	r18, r24
    4fb0:	39 07       	cpc	r19, r25
    4fb2:	0c f0       	brlt	.+2      	; 0x4fb6 <SevSeg_enuSetDigitValue+0x32>
    4fb4:	55 c0       	rjmp	.+170    	; 0x5060 <SevSeg_enuSetDigitValue+0xdc>
    4fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb8:	8a 30       	cpi	r24, 0x0A	; 10
    4fba:	08 f0       	brcs	.+2      	; 0x4fbe <SevSeg_enuSetDigitValue+0x3a>
    4fbc:	51 c0       	rjmp	.+162    	; 0x5060 <SevSeg_enuSetDigitValue+0xdc>
	{
		Copy_u8ModuleNum -= (u8)MODULE_1;
    4fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    4fc0:	8b 50       	subi	r24, 0x0B	; 11
    4fc2:	8c 83       	std	Y+4, r24	; 0x04
		u8 Local_u8BitValue;
		for( u8 Local_u8Counter = 0 ; Local_u8Counter < ModuleValuePins ; Local_u8Counter++ )
    4fc4:	19 82       	std	Y+1, r1	; 0x01
    4fc6:	45 c0       	rjmp	.+138    	; 0x5052 <SevSeg_enuSetDigitValue+0xce>
		{
			Local_u8BitValue = (((Copy_u8SevSegDigitValue >> Local_u8Counter ) & SevSeg_u8BIT_MASK )? SEGMENT_ON : SEGMENT_OFF );
    4fc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4fca:	28 2f       	mov	r18, r24
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	89 81       	ldd	r24, Y+1	; 0x01
    4fd0:	88 2f       	mov	r24, r24
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	a9 01       	movw	r20, r18
    4fd6:	02 c0       	rjmp	.+4      	; 0x4fdc <SevSeg_enuSetDigitValue+0x58>
    4fd8:	55 95       	asr	r21
    4fda:	47 95       	ror	r20
    4fdc:	8a 95       	dec	r24
    4fde:	e2 f7       	brpl	.-8      	; 0x4fd8 <SevSeg_enuSetDigitValue+0x54>
    4fe0:	ca 01       	movw	r24, r20
    4fe2:	81 70       	andi	r24, 0x01	; 1
    4fe4:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputGrp ,
    4fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe8:	28 2f       	mov	r18, r24
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	89 81       	ldd	r24, Y+1	; 0x01
    4fee:	48 2f       	mov	r20, r24
    4ff0:	50 e0       	ldi	r21, 0x00	; 0
    4ff2:	c9 01       	movw	r24, r18
    4ff4:	88 0f       	add	r24, r24
    4ff6:	99 1f       	adc	r25, r25
    4ff8:	82 0f       	add	r24, r18
    4ffa:	93 1f       	adc	r25, r19
    4ffc:	88 0f       	add	r24, r24
    4ffe:	99 1f       	adc	r25, r25
    5000:	84 0f       	add	r24, r20
    5002:	95 1f       	adc	r25, r21
    5004:	88 0f       	add	r24, r24
    5006:	99 1f       	adc	r25, r25
    5008:	fc 01       	movw	r30, r24
    500a:	ed 55       	subi	r30, 0x5D	; 93
    500c:	fe 4f       	sbci	r31, 0xFE	; 254
    500e:	60 81       	ld	r22, Z
    5010:	8c 81       	ldd	r24, Y+4	; 0x04
    5012:	28 2f       	mov	r18, r24
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	89 81       	ldd	r24, Y+1	; 0x01
    5018:	48 2f       	mov	r20, r24
    501a:	50 e0       	ldi	r21, 0x00	; 0
    501c:	c9 01       	movw	r24, r18
    501e:	88 0f       	add	r24, r24
    5020:	99 1f       	adc	r25, r25
    5022:	82 0f       	add	r24, r18
    5024:	93 1f       	adc	r25, r19
    5026:	88 0f       	add	r24, r24
    5028:	99 1f       	adc	r25, r25
    502a:	84 0f       	add	r24, r20
    502c:	95 1f       	adc	r25, r21
    502e:	88 0f       	add	r24, r24
    5030:	99 1f       	adc	r25, r25
    5032:	fc 01       	movw	r30, r24
    5034:	ec 55       	subi	r30, 0x5C	; 92
    5036:	fe 4f       	sbci	r31, 0xFE	; 254
    5038:	90 81       	ld	r25, Z
    503a:	86 2f       	mov	r24, r22
    503c:	69 2f       	mov	r22, r25
    503e:	4a 81       	ldd	r20, Y+2	; 0x02
    5040:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    5044:	8b 83       	std	Y+3, r24	; 0x03
														SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
														Local_u8BitValue );
			if( Local_enuErrorState != ES_OK) break;
    5046:	8b 81       	ldd	r24, Y+3	; 0x03
    5048:	88 23       	and	r24, r24
    504a:	61 f4       	brne	.+24     	; 0x5064 <SevSeg_enuSetDigitValue+0xe0>
	
	if( ( (Copy_u8ModuleNum - MODULE_1) < SevSeg_u8MaxModules ) &&	( Copy_u8SevSegDigitValue < DIGIT_BASE ) )
	{
		Copy_u8ModuleNum -= (u8)MODULE_1;
		u8 Local_u8BitValue;
		for( u8 Local_u8Counter = 0 ; Local_u8Counter < ModuleValuePins ; Local_u8Counter++ )
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	8f 5f       	subi	r24, 0xFF	; 255
    5050:	89 83       	std	Y+1, r24	; 0x01
    5052:	90 91 a2 01 	lds	r25, 0x01A2
    5056:	89 81       	ldd	r24, Y+1	; 0x01
    5058:	89 17       	cp	r24, r25
    505a:	08 f4       	brcc	.+2      	; 0x505e <SevSeg_enuSetDigitValue+0xda>
    505c:	b5 cf       	rjmp	.-150    	; 0x4fc8 <SevSeg_enuSetDigitValue+0x44>
    505e:	02 c0       	rjmp	.+4      	; 0x5064 <SevSeg_enuSetDigitValue+0xe0>
														SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
														Local_u8BitValue );
			if( Local_enuErrorState != ES_OK) break;
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    5060:	82 e0       	ldi	r24, 0x02	; 2
    5062:	8b 83       	std	Y+3, r24	; 0x03


	return Local_enuErrorState ;//DONE
    5064:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5066:	0f 90       	pop	r0
    5068:	0f 90       	pop	r0
    506a:	0f 90       	pop	r0
    506c:	0f 90       	pop	r0
    506e:	0f 90       	pop	r0
    5070:	cf 91       	pop	r28
    5072:	df 91       	pop	r29
    5074:	08 95       	ret

00005076 <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8ModuleNum ,u8 Copy_u8SevSegDIPValue)
{
    5076:	df 93       	push	r29
    5078:	cf 93       	push	r28
    507a:	00 d0       	rcall	.+0      	; 0x507c <SevSeg_enuSetDIPValue+0x6>
    507c:	0f 92       	push	r0
    507e:	cd b7       	in	r28, 0x3d	; 61
    5080:	de b7       	in	r29, 0x3e	; 62
    5082:	8a 83       	std	Y+2, r24	; 0x02
    5084:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    5086:	81 e0       	ldi	r24, 0x01	; 1
    5088:	89 83       	std	Y+1, r24	; 0x01

	if( ( (Copy_u8ModuleNum - MODULE_1) < SevSeg_u8MaxModules ) &&
    508a:	8a 81       	ldd	r24, Y+2	; 0x02
    508c:	88 2f       	mov	r24, r24
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	9c 01       	movw	r18, r24
    5092:	2b 50       	subi	r18, 0x0B	; 11
    5094:	30 40       	sbci	r19, 0x00	; 0
    5096:	80 91 a1 01 	lds	r24, 0x01A1
    509a:	88 2f       	mov	r24, r24
    509c:	90 e0       	ldi	r25, 0x00	; 0
    509e:	28 17       	cp	r18, r24
    50a0:	39 07       	cpc	r19, r25
    50a2:	84 f5       	brge	.+96     	; 0x5104 <SevSeg_enuSetDIPValue+0x8e>
    50a4:	8b 81       	ldd	r24, Y+3	; 0x03
    50a6:	88 23       	and	r24, r24
    50a8:	19 f0       	breq	.+6      	; 0x50b0 <SevSeg_enuSetDIPValue+0x3a>
    50aa:	8b 81       	ldd	r24, Y+3	; 0x03
    50ac:	81 30       	cpi	r24, 0x01	; 1
    50ae:	51 f5       	brne	.+84     	; 0x5104 <SevSeg_enuSetDIPValue+0x8e>
		( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF ) )
	{
		Copy_u8ModuleNum -= (u8)MODULE_1;
    50b0:	8a 81       	ldd	r24, Y+2	; 0x02
    50b2:	8b 50       	subi	r24, 0x0B	; 11
    50b4:	8a 83       	std	Y+2, r24	; 0x02
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].DIP_Conf.InputGrp ,
    50b6:	8a 81       	ldd	r24, Y+2	; 0x02
    50b8:	28 2f       	mov	r18, r24
    50ba:	30 e0       	ldi	r19, 0x00	; 0
    50bc:	c9 01       	movw	r24, r18
    50be:	88 0f       	add	r24, r24
    50c0:	99 1f       	adc	r25, r25
    50c2:	82 0f       	add	r24, r18
    50c4:	93 1f       	adc	r25, r19
    50c6:	88 0f       	add	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	88 0f       	add	r24, r24
    50cc:	99 1f       	adc	r25, r25
    50ce:	fc 01       	movw	r30, r24
    50d0:	e5 55       	subi	r30, 0x55	; 85
    50d2:	fe 4f       	sbci	r31, 0xFE	; 254
    50d4:	40 81       	ld	r20, Z
    50d6:	8a 81       	ldd	r24, Y+2	; 0x02
    50d8:	28 2f       	mov	r18, r24
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	c9 01       	movw	r24, r18
    50de:	88 0f       	add	r24, r24
    50e0:	99 1f       	adc	r25, r25
    50e2:	82 0f       	add	r24, r18
    50e4:	93 1f       	adc	r25, r19
    50e6:	88 0f       	add	r24, r24
    50e8:	99 1f       	adc	r25, r25
    50ea:	88 0f       	add	r24, r24
    50ec:	99 1f       	adc	r25, r25
    50ee:	fc 01       	movw	r30, r24
    50f0:	e4 55       	subi	r30, 0x54	; 84
    50f2:	fe 4f       	sbci	r31, 0xFE	; 254
    50f4:	90 81       	ld	r25, Z
    50f6:	84 2f       	mov	r24, r20
    50f8:	69 2f       	mov	r22, r25
    50fa:	4b 81       	ldd	r20, Y+3	; 0x03
    50fc:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    5100:	89 83       	std	Y+1, r24	; 0x01
    5102:	02 c0       	rjmp	.+4      	; 0x5108 <SevSeg_enuSetDIPValue+0x92>
													SSegModule[Copy_u8ModuleNum].DIP_Conf.InputPin , Copy_u8SevSegDIPValue );
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    5104:	82 e0       	ldi	r24, 0x02	; 2
    5106:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    5108:	89 81       	ldd	r24, Y+1	; 0x01
}
    510a:	0f 90       	pop	r0
    510c:	0f 90       	pop	r0
    510e:	0f 90       	pop	r0
    5110:	cf 91       	pop	r28
    5112:	df 91       	pop	r29
    5114:	08 95       	ret

00005116 <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
    5116:	df 93       	push	r29
    5118:	cf 93       	push	r28
    511a:	00 d0       	rcall	.+0      	; 0x511c <SevSeg_enuFrameDelay+0x6>
    511c:	00 d0       	rcall	.+0      	; 0x511e <SevSeg_enuFrameDelay+0x8>
    511e:	cd b7       	in	r28, 0x3d	; 61
    5120:	de b7       	in	r29, 0x3e	; 62
    5122:	8a 83       	std	Y+2, r24	; 0x02
    5124:	7c 83       	std	Y+4, r23	; 0x04
    5126:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
    5128:	81 e0       	ldi	r24, 0x01	; 1
    512a:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SevSegTotalModules <= SevSeg_u8MaxModules)
    512c:	90 91 a1 01 	lds	r25, 0x01A1
    5130:	8a 81       	ldd	r24, Y+2	; 0x02
    5132:	98 17       	cp	r25, r24
    5134:	98 f0       	brcs	.+38     	; 0x515c <SevSeg_enuFrameDelay+0x46>
	{
		*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
    5136:	8a 81       	ldd	r24, Y+2	; 0x02
    5138:	88 2f       	mov	r24, r24
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	ac 01       	movw	r20, r24
    513e:	4d 5e       	subi	r20, 0xED	; 237
    5140:	5f 4f       	sbci	r21, 0xFF	; 255
    5142:	8a 81       	ldd	r24, Y+2	; 0x02
    5144:	28 2f       	mov	r18, r24
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	ca 01       	movw	r24, r20
    514a:	b9 01       	movw	r22, r18
    514c:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__divmodhi4>
    5150:	cb 01       	movw	r24, r22
    5152:	eb 81       	ldd	r30, Y+3	; 0x03
    5154:	fc 81       	ldd	r31, Y+4	; 0x04
    5156:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
    5158:	19 82       	std	Y+1, r1	; 0x01
    515a:	02 c0       	rjmp	.+4      	; 0x5160 <SevSeg_enuFrameDelay+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
    515c:	82 e0       	ldi	r24, 0x02	; 2
    515e:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
    5160:	89 81       	ldd	r24, Y+1	; 0x01
}
    5162:	0f 90       	pop	r0
    5164:	0f 90       	pop	r0
    5166:	0f 90       	pop	r0
    5168:	0f 90       	pop	r0
    516a:	cf 91       	pop	r28
    516c:	df 91       	pop	r29
    516e:	08 95       	ret

00005170 <SevSeg_enuModuleControl>:

ES_t SevSeg_enuModuleControl(u8 Copy_u8ModuleNum , u8 Copy_u8ModuleStatus)
{
    5170:	df 93       	push	r29
    5172:	cf 93       	push	r28
    5174:	00 d0       	rcall	.+0      	; 0x5176 <SevSeg_enuModuleControl+0x6>
    5176:	00 d0       	rcall	.+0      	; 0x5178 <SevSeg_enuModuleControl+0x8>
    5178:	cd b7       	in	r28, 0x3d	; 61
    517a:	de b7       	in	r29, 0x3e	; 62
    517c:	8b 83       	std	Y+3, r24	; 0x03
    517e:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
    5180:	81 e0       	ldi	r24, 0x01	; 1
    5182:	8a 83       	std	Y+2, r24	; 0x02

	if( ( Copy_u8ModuleStatus == MODULE_DISABLE || Copy_u8ModuleStatus == MODULE_ENABLE ) &&
    5184:	8c 81       	ldd	r24, Y+4	; 0x04
    5186:	8d 30       	cpi	r24, 0x0D	; 13
    5188:	19 f0       	breq	.+6      	; 0x5190 <SevSeg_enuModuleControl+0x20>
    518a:	8c 81       	ldd	r24, Y+4	; 0x04
    518c:	8e 30       	cpi	r24, 0x0E	; 14
    518e:	e9 f5       	brne	.+122    	; 0x520a <SevSeg_enuModuleControl+0x9a>
    5190:	8b 81       	ldd	r24, Y+3	; 0x03
    5192:	88 2f       	mov	r24, r24
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	9c 01       	movw	r18, r24
    5198:	2b 50       	subi	r18, 0x0B	; 11
    519a:	30 40       	sbci	r19, 0x00	; 0
    519c:	80 91 a1 01 	lds	r24, 0x01A1
    51a0:	88 2f       	mov	r24, r24
    51a2:	90 e0       	ldi	r25, 0x00	; 0
    51a4:	28 17       	cp	r18, r24
    51a6:	39 07       	cpc	r19, r25
    51a8:	84 f5       	brge	.+96     	; 0x520a <SevSeg_enuModuleControl+0x9a>
		( Copy_u8ModuleNum - MODULE_1 < SevSeg_u8MaxModules ) )
	{
		Copy_u8ModuleNum -= (u8)MODULE_1;
    51aa:	8b 81       	ldd	r24, Y+3	; 0x03
    51ac:	8b 50       	subi	r24, 0x0B	; 11
    51ae:	8b 83       	std	Y+3, r24	; 0x03
		u8 Local_u8ModuleStatus = ( Copy_u8ModuleStatus == MODULE_ENABLE ? MOD_EN_ON : MOD_EN_OFF );
    51b0:	19 82       	std	Y+1, r1	; 0x01
    51b2:	8c 81       	ldd	r24, Y+4	; 0x04
    51b4:	8e 30       	cpi	r24, 0x0E	; 14
    51b6:	11 f4       	brne	.+4      	; 0x51bc <SevSeg_enuModuleControl+0x4c>
    51b8:	81 e0       	ldi	r24, 0x01	; 1
    51ba:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Enable_Conf.InputGrp ,
    51bc:	8b 81       	ldd	r24, Y+3	; 0x03
    51be:	28 2f       	mov	r18, r24
    51c0:	30 e0       	ldi	r19, 0x00	; 0
    51c2:	c9 01       	movw	r24, r18
    51c4:	88 0f       	add	r24, r24
    51c6:	99 1f       	adc	r25, r25
    51c8:	82 0f       	add	r24, r18
    51ca:	93 1f       	adc	r25, r19
    51cc:	88 0f       	add	r24, r24
    51ce:	99 1f       	adc	r25, r25
    51d0:	88 0f       	add	r24, r24
    51d2:	99 1f       	adc	r25, r25
    51d4:	fc 01       	movw	r30, r24
    51d6:	e3 55       	subi	r30, 0x53	; 83
    51d8:	fe 4f       	sbci	r31, 0xFE	; 254
    51da:	40 81       	ld	r20, Z
    51dc:	8b 81       	ldd	r24, Y+3	; 0x03
    51de:	28 2f       	mov	r18, r24
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	c9 01       	movw	r24, r18
    51e4:	88 0f       	add	r24, r24
    51e6:	99 1f       	adc	r25, r25
    51e8:	82 0f       	add	r24, r18
    51ea:	93 1f       	adc	r25, r19
    51ec:	88 0f       	add	r24, r24
    51ee:	99 1f       	adc	r25, r25
    51f0:	88 0f       	add	r24, r24
    51f2:	99 1f       	adc	r25, r25
    51f4:	fc 01       	movw	r30, r24
    51f6:	e2 55       	subi	r30, 0x52	; 82
    51f8:	fe 4f       	sbci	r31, 0xFE	; 254
    51fa:	90 81       	ld	r25, Z
    51fc:	84 2f       	mov	r24, r20
    51fe:	69 2f       	mov	r22, r25
    5200:	49 81       	ldd	r20, Y+1	; 0x01
    5202:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    5206:	8a 83       	std	Y+2, r24	; 0x02
    5208:	02 c0       	rjmp	.+4      	; 0x520e <SevSeg_enuModuleControl+0x9e>
													SSegModule[Copy_u8ModuleNum].Enable_Conf.InputPin ,
													Local_u8ModuleStatus );
	}
	else	Local_enuErrorState = ES_OUT_RANGE;
    520a:	82 e0       	ldi	r24, 0x02	; 2
    520c:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState ;//DONE
    520e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    5210:	0f 90       	pop	r0
    5212:	0f 90       	pop	r0
    5214:	0f 90       	pop	r0
    5216:	0f 90       	pop	r0
    5218:	cf 91       	pop	r28
    521a:	df 91       	pop	r29
    521c:	08 95       	ret

0000521e <LD_enuInit>:
extern u8 LD_u8LD_MaxNum;
extern LD_t LD[];


ES_t LD_enuInit(void)
{
    521e:	df 93       	push	r29
    5220:	cf 93       	push	r28
    5222:	00 d0       	rcall	.+0      	; 0x5224 <LD_enuInit+0x6>
    5224:	00 d0       	rcall	.+0      	; 0x5226 <LD_enuInit+0x8>
    5226:	cd b7       	in	r28, 0x3d	; 61
    5228:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
    522a:	81 e0       	ldi	r24, 0x01	; 1
    522c:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    522e:	19 82       	std	Y+1, r1	; 0x01
    5230:	39 c0       	rjmp	.+114    	; 0x52a4 <LD_enuInit+0x86>
	{
		Local_AenuStatus[0] = DIO_enuSetPinDirection( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
    5232:	89 81       	ldd	r24, Y+1	; 0x01
    5234:	88 2f       	mov	r24, r24
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	88 0f       	add	r24, r24
    523a:	99 1f       	adc	r25, r25
    523c:	fc 01       	movw	r30, r24
    523e:	e4 54       	subi	r30, 0x44	; 68
    5240:	fe 4f       	sbci	r31, 0xFE	; 254
    5242:	20 81       	ld	r18, Z
    5244:	89 81       	ldd	r24, Y+1	; 0x01
    5246:	88 2f       	mov	r24, r24
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	88 0f       	add	r24, r24
    524c:	99 1f       	adc	r25, r25
    524e:	fc 01       	movw	r30, r24
    5250:	e3 54       	subi	r30, 0x43	; 67
    5252:	fe 4f       	sbci	r31, 0xFE	; 254
    5254:	90 81       	ld	r25, Z
    5256:	82 2f       	mov	r24, r18
    5258:	69 2f       	mov	r22, r25
    525a:	41 e0       	ldi	r20, 0x01	; 1
    525c:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <DIO_enuSetPinDirection>
    5260:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);
    5262:	89 81       	ldd	r24, Y+1	; 0x01
    5264:	88 2f       	mov	r24, r24
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	88 0f       	add	r24, r24
    526a:	99 1f       	adc	r25, r25
    526c:	fc 01       	movw	r30, r24
    526e:	e4 54       	subi	r30, 0x44	; 68
    5270:	fe 4f       	sbci	r31, 0xFE	; 254
    5272:	20 81       	ld	r18, Z
    5274:	89 81       	ldd	r24, Y+1	; 0x01
    5276:	88 2f       	mov	r24, r24
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	88 0f       	add	r24, r24
    527c:	99 1f       	adc	r25, r25
    527e:	fc 01       	movw	r30, r24
    5280:	e3 54       	subi	r30, 0x43	; 67
    5282:	fe 4f       	sbci	r31, 0xFE	; 254
    5284:	90 81       	ld	r25, Z
    5286:	82 2f       	mov	r24, r18
    5288:	69 2f       	mov	r22, r25
    528a:	40 e0       	ldi	r20, 0x00	; 0
    528c:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    5290:	8c 83       	std	Y+4, r24	; 0x04

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
    5292:	8b 81       	ldd	r24, Y+3	; 0x03
    5294:	88 23       	and	r24, r24
    5296:	59 f4       	brne	.+22     	; 0x52ae <LD_enuInit+0x90>
    5298:	8c 81       	ldd	r24, Y+4	; 0x04
    529a:	88 23       	and	r24, r24
    529c:	41 f4       	brne	.+16     	; 0x52ae <LD_enuInit+0x90>

ES_t LD_enuInit(void)
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
    529e:	89 81       	ldd	r24, Y+1	; 0x01
    52a0:	8f 5f       	subi	r24, 0xFF	; 255
    52a2:	89 83       	std	Y+1, r24	; 0x01
    52a4:	90 91 bb 01 	lds	r25, 0x01BB
    52a8:	89 81       	ldd	r24, Y+1	; 0x01
    52aa:	89 17       	cp	r24, r25
    52ac:	10 f2       	brcs	.-124    	; 0x5232 <LD_enuInit+0x14>
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
	}

	if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
    52ae:	8b 81       	ldd	r24, Y+3	; 0x03
    52b0:	88 23       	and	r24, r24
    52b2:	21 f4       	brne	.+8      	; 0x52bc <LD_enuInit+0x9e>
    52b4:	8c 81       	ldd	r24, Y+4	; 0x04
    52b6:	88 23       	and	r24, r24
    52b8:	09 f4       	brne	.+2      	; 0x52bc <LD_enuInit+0x9e>
		Local_enuErrorStatus = ES_OK;
    52ba:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorStatus;
    52bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    52be:	0f 90       	pop	r0
    52c0:	0f 90       	pop	r0
    52c2:	0f 90       	pop	r0
    52c4:	0f 90       	pop	r0
    52c6:	cf 91       	pop	r28
    52c8:	df 91       	pop	r29
    52ca:	08 95       	ret

000052cc <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
    52cc:	df 93       	push	r29
    52ce:	cf 93       	push	r28
    52d0:	00 d0       	rcall	.+0      	; 0x52d2 <LD_enuSetState+0x6>
    52d2:	0f 92       	push	r0
    52d4:	cd b7       	in	r28, 0x3d	; 61
    52d6:	de b7       	in	r29, 0x3e	; 62
    52d8:	8a 83       	std	Y+2, r24	; 0x02
    52da:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
    52dc:	81 e0       	ldi	r24, 0x01	; 1
    52de:	89 83       	std	Y+1, r24	; 0x01

	if( ( ( Copy_u8LD_Num -= LD_ZERO ) < LD_u8LD_MaxNum ) &&
    52e0:	8a 81       	ldd	r24, Y+2	; 0x02
    52e2:	8e 51       	subi	r24, 0x1E	; 30
    52e4:	8a 83       	std	Y+2, r24	; 0x02
    52e6:	90 91 bb 01 	lds	r25, 0x01BB
    52ea:	8a 81       	ldd	r24, Y+2	; 0x02
    52ec:	89 17       	cp	r24, r25
    52ee:	f8 f4       	brcc	.+62     	; 0x532e <LD_enuSetState+0x62>
    52f0:	8b 81       	ldd	r24, Y+3	; 0x03
    52f2:	81 30       	cpi	r24, 0x01	; 1
    52f4:	19 f0       	breq	.+6      	; 0x52fc <LD_enuSetState+0x30>
    52f6:	8b 81       	ldd	r24, Y+3	; 0x03
    52f8:	88 23       	and	r24, r24
    52fa:	c9 f4       	brne	.+50     	; 0x532e <LD_enuSetState+0x62>
		( Copy_u8LDSetValue == LD_u8ON || Copy_u8LDSetValue == LD_u8OFF ) )
	{
		Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
    52fc:	8a 81       	ldd	r24, Y+2	; 0x02
    52fe:	88 2f       	mov	r24, r24
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	88 0f       	add	r24, r24
    5304:	99 1f       	adc	r25, r25
    5306:	fc 01       	movw	r30, r24
    5308:	e4 54       	subi	r30, 0x44	; 68
    530a:	fe 4f       	sbci	r31, 0xFE	; 254
    530c:	20 81       	ld	r18, Z
    530e:	8a 81       	ldd	r24, Y+2	; 0x02
    5310:	88 2f       	mov	r24, r24
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	88 0f       	add	r24, r24
    5316:	99 1f       	adc	r25, r25
    5318:	fc 01       	movw	r30, r24
    531a:	e3 54       	subi	r30, 0x43	; 67
    531c:	fe 4f       	sbci	r31, 0xFE	; 254
    531e:	90 81       	ld	r25, Z
    5320:	82 2f       	mov	r24, r18
    5322:	69 2f       	mov	r22, r25
    5324:	4b 81       	ldd	r20, Y+3	; 0x03
    5326:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    532a:	89 83       	std	Y+1, r24	; 0x01
    532c:	02 c0       	rjmp	.+4      	; 0x5332 <LD_enuSetState+0x66>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
    532e:	82 e0       	ldi	r24, 0x02	; 2
    5330:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    5332:	89 81       	ldd	r24, Y+1	; 0x01
}
    5334:	0f 90       	pop	r0
    5336:	0f 90       	pop	r0
    5338:	0f 90       	pop	r0
    533a:	cf 91       	pop	r28
    533c:	df 91       	pop	r29
    533e:	08 95       	ret

00005340 <Coolent_enuInit>:
#define COOL_INIT_DUTY_CYCLE	50
#define COOL_MAX_DUTY_CYCLE		80


ES_t Coolent_enuInit(void)
{
    5340:	df 93       	push	r29
    5342:	cf 93       	push	r28
    5344:	0f 92       	push	r0
    5346:	cd b7       	in	r28, 0x3d	; 61
    5348:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    534a:	81 e0       	ldi	r24, 0x01	; 1
    534c:	89 83       	std	Y+1, r24	; 0x01

	if( ES_OK == PWM_enuInit())
    534e:	0e 94 be 10 	call	0x217c	; 0x217c <PWM_enuInit>
    5352:	88 23       	and	r24, r24
    5354:	a1 f4       	brne	.+40     	; 0x537e <Coolent_enuInit+0x3e>
	{
		PWM_enuSetDutyCycle( COOLENT_PWM , COOL_INIT_DUTY_CYCLE );
    5356:	89 ec       	ldi	r24, 0xC9	; 201
    5358:	40 e0       	ldi	r20, 0x00	; 0
    535a:	50 e0       	ldi	r21, 0x00	; 0
    535c:	68 e4       	ldi	r22, 0x48	; 72
    535e:	72 e4       	ldi	r23, 0x42	; 66
    5360:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <PWM_enuSetDutyCycle>
		if( ES_OK == DIO_enuSetPinDirection( COOLENT_GRP , COOLENT_PIN , DIO_u8OUTPUT ) )
    5364:	83 e0       	ldi	r24, 0x03	; 3
    5366:	65 e0       	ldi	r22, 0x05	; 5
    5368:	41 e0       	ldi	r20, 0x01	; 1
    536a:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <DIO_enuSetPinDirection>
    536e:	88 23       	and	r24, r24
    5370:	31 f4       	brne	.+12     	; 0x537e <Coolent_enuInit+0x3e>
			Local_enuErrorState = DIO_enuSetPinValue( COOLENT_GRP , COOLENT_PIN , DIO_u8LOW );
    5372:	83 e0       	ldi	r24, 0x03	; 3
    5374:	65 e0       	ldi	r22, 0x05	; 5
    5376:	40 e0       	ldi	r20, 0x00	; 0
    5378:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    537c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState ;
    537e:	89 81       	ldd	r24, Y+1	; 0x01
}
    5380:	0f 90       	pop	r0
    5382:	cf 91       	pop	r28
    5384:	df 91       	pop	r29
    5386:	08 95       	ret

00005388 <Coolent_enuSetState>:

ES_t Coolent_enuSetState( s8 Copy_u8TempError )
{
    5388:	ef 92       	push	r14
    538a:	ff 92       	push	r15
    538c:	0f 93       	push	r16
    538e:	1f 93       	push	r17
    5390:	df 93       	push	r29
    5392:	cf 93       	push	r28
    5394:	00 d0       	rcall	.+0      	; 0x5396 <Coolent_enuSetState+0xe>
    5396:	00 d0       	rcall	.+0      	; 0x5398 <Coolent_enuSetState+0x10>
    5398:	00 d0       	rcall	.+0      	; 0x539a <Coolent_enuSetState+0x12>
    539a:	cd b7       	in	r28, 0x3d	; 61
    539c:	de b7       	in	r29, 0x3e	; 62
    539e:	8e 83       	std	Y+6, r24	; 0x06
	ES_t Local_enuErrorState = ES_NOK ;
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	8d 83       	std	Y+5, r24	; 0x05
	static u8 PrevTempError = 0 ;
	f32 DutyCycle;

	if( Copy_u8TempError <= -COOLENT_TEMP_TOLERANCE )	DutyCycle = 0.0 ;
    53a4:	8e 81       	ldd	r24, Y+6	; 0x06
    53a6:	8c 3f       	cpi	r24, 0xFC	; 252
    53a8:	4c f4       	brge	.+18     	; 0x53bc <Coolent_enuSetState+0x34>
    53aa:	80 e0       	ldi	r24, 0x00	; 0
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	a0 e0       	ldi	r26, 0x00	; 0
    53b0:	b0 e0       	ldi	r27, 0x00	; 0
    53b2:	89 83       	std	Y+1, r24	; 0x01
    53b4:	9a 83       	std	Y+2, r25	; 0x02
    53b6:	ab 83       	std	Y+3, r26	; 0x03
    53b8:	bc 83       	std	Y+4, r27	; 0x04
    53ba:	7a c0       	rjmp	.+244    	; 0x54b0 <Coolent_enuSetState+0x128>
	else if( Copy_u8TempError > COOLENT_TEMP_TOLERANCE )	DutyCycle = COOL_MAX_DUTY_CYCLE ;
    53bc:	8e 81       	ldd	r24, Y+6	; 0x06
    53be:	86 30       	cpi	r24, 0x06	; 6
    53c0:	4c f0       	brlt	.+18     	; 0x53d4 <Coolent_enuSetState+0x4c>
    53c2:	80 e0       	ldi	r24, 0x00	; 0
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	a0 ea       	ldi	r26, 0xA0	; 160
    53c8:	b2 e4       	ldi	r27, 0x42	; 66
    53ca:	89 83       	std	Y+1, r24	; 0x01
    53cc:	9a 83       	std	Y+2, r25	; 0x02
    53ce:	ab 83       	std	Y+3, r26	; 0x03
    53d0:	bc 83       	std	Y+4, r27	; 0x04
    53d2:	6e c0       	rjmp	.+220    	; 0x54b0 <Coolent_enuSetState+0x128>
	else
	{
		DutyCycle = ( ( COOL_KP * Copy_u8TempError ) +
    53d4:	8e 81       	ldd	r24, Y+6	; 0x06
    53d6:	99 27       	eor	r25, r25
    53d8:	87 fd       	sbrc	r24, 7
    53da:	90 95       	com	r25
    53dc:	a9 2f       	mov	r26, r25
    53de:	b9 2f       	mov	r27, r25
    53e0:	bc 01       	movw	r22, r24
    53e2:	cd 01       	movw	r24, r26
    53e4:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    53e8:	dc 01       	movw	r26, r24
    53ea:	cb 01       	movw	r24, r22
    53ec:	bc 01       	movw	r22, r24
    53ee:	cd 01       	movw	r24, r26
    53f0:	2d ec       	ldi	r18, 0xCD	; 205
    53f2:	3c ec       	ldi	r19, 0xCC	; 204
    53f4:	4c e4       	ldi	r20, 0x4C	; 76
    53f6:	5f e3       	ldi	r21, 0x3F	; 63
    53f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53fc:	dc 01       	movw	r26, r24
    53fe:	cb 01       	movw	r24, r22
    5400:	7c 01       	movw	r14, r24
    5402:	8d 01       	movw	r16, r26
    5404:	8e 81       	ldd	r24, Y+6	; 0x06
    5406:	28 2f       	mov	r18, r24
    5408:	33 27       	eor	r19, r19
    540a:	27 fd       	sbrc	r18, 7
    540c:	30 95       	com	r19
    540e:	80 91 2b 02 	lds	r24, 0x022B
    5412:	88 2f       	mov	r24, r24
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	82 0f       	add	r24, r18
    5418:	93 1f       	adc	r25, r19
    541a:	aa 27       	eor	r26, r26
    541c:	97 fd       	sbrc	r25, 7
    541e:	a0 95       	com	r26
    5420:	ba 2f       	mov	r27, r26
    5422:	bc 01       	movw	r22, r24
    5424:	cd 01       	movw	r24, r26
    5426:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    542a:	dc 01       	movw	r26, r24
    542c:	cb 01       	movw	r24, r22
    542e:	bc 01       	movw	r22, r24
    5430:	cd 01       	movw	r24, r26
    5432:	2d ec       	ldi	r18, 0xCD	; 205
    5434:	3c ec       	ldi	r19, 0xCC	; 204
    5436:	4c ec       	ldi	r20, 0xCC	; 204
    5438:	5e e3       	ldi	r21, 0x3E	; 62
    543a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    543e:	dc 01       	movw	r26, r24
    5440:	cb 01       	movw	r24, r22
    5442:	9c 01       	movw	r18, r24
    5444:	ad 01       	movw	r20, r26
    5446:	c8 01       	movw	r24, r16
    5448:	b7 01       	movw	r22, r14
    544a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    544e:	dc 01       	movw	r26, r24
    5450:	cb 01       	movw	r24, r22
    5452:	7c 01       	movw	r14, r24
    5454:	8d 01       	movw	r16, r26
    5456:	8e 81       	ldd	r24, Y+6	; 0x06
    5458:	28 2f       	mov	r18, r24
    545a:	33 27       	eor	r19, r19
    545c:	27 fd       	sbrc	r18, 7
    545e:	30 95       	com	r19
    5460:	80 91 2b 02 	lds	r24, 0x022B
    5464:	88 2f       	mov	r24, r24
    5466:	90 e0       	ldi	r25, 0x00	; 0
    5468:	a9 01       	movw	r20, r18
    546a:	48 1b       	sub	r20, r24
    546c:	59 0b       	sbc	r21, r25
    546e:	ca 01       	movw	r24, r20
    5470:	aa 27       	eor	r26, r26
    5472:	97 fd       	sbrc	r25, 7
    5474:	a0 95       	com	r26
    5476:	ba 2f       	mov	r27, r26
    5478:	bc 01       	movw	r22, r24
    547a:	cd 01       	movw	r24, r26
    547c:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    5480:	dc 01       	movw	r26, r24
    5482:	cb 01       	movw	r24, r22
    5484:	bc 01       	movw	r22, r24
    5486:	cd 01       	movw	r24, r26
    5488:	2d ec       	ldi	r18, 0xCD	; 205
    548a:	3c ec       	ldi	r19, 0xCC	; 204
    548c:	4c e4       	ldi	r20, 0x4C	; 76
    548e:	5e e3       	ldi	r21, 0x3E	; 62
    5490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5494:	dc 01       	movw	r26, r24
    5496:	cb 01       	movw	r24, r22
    5498:	9c 01       	movw	r18, r24
    549a:	ad 01       	movw	r20, r26
    549c:	c8 01       	movw	r24, r16
    549e:	b7 01       	movw	r22, r14
    54a0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    54a4:	dc 01       	movw	r26, r24
    54a6:	cb 01       	movw	r24, r22
    54a8:	89 83       	std	Y+1, r24	; 0x01
    54aa:	9a 83       	std	Y+2, r25	; 0x02
    54ac:	ab 83       	std	Y+3, r26	; 0x03
    54ae:	bc 83       	std	Y+4, r27	; 0x04
					( COOL_KI * ( Copy_u8TempError + PrevTempError ) ) +
					( COOL_KD * ( Copy_u8TempError - PrevTempError ) ) ) ;
	}

	Local_enuErrorState = PWM_enuSetDutyCycle( COOLENT_PWM , DutyCycle );
    54b0:	29 81       	ldd	r18, Y+1	; 0x01
    54b2:	3a 81       	ldd	r19, Y+2	; 0x02
    54b4:	4b 81       	ldd	r20, Y+3	; 0x03
    54b6:	5c 81       	ldd	r21, Y+4	; 0x04
    54b8:	89 ec       	ldi	r24, 0xC9	; 201
    54ba:	ba 01       	movw	r22, r20
    54bc:	a9 01       	movw	r20, r18
    54be:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <PWM_enuSetDutyCycle>
    54c2:	8d 83       	std	Y+5, r24	; 0x05

	PrevTempError = Copy_u8TempError ;
    54c4:	8e 81       	ldd	r24, Y+6	; 0x06
    54c6:	80 93 2b 02 	sts	0x022B, r24

	return Local_enuErrorState ;
    54ca:	8d 81       	ldd	r24, Y+5	; 0x05
}
    54cc:	26 96       	adiw	r28, 0x06	; 6
    54ce:	0f b6       	in	r0, 0x3f	; 63
    54d0:	f8 94       	cli
    54d2:	de bf       	out	0x3e, r29	; 62
    54d4:	0f be       	out	0x3f, r0	; 63
    54d6:	cd bf       	out	0x3d, r28	; 61
    54d8:	cf 91       	pop	r28
    54da:	df 91       	pop	r29
    54dc:	1f 91       	pop	r17
    54de:	0f 91       	pop	r16
    54e0:	ff 90       	pop	r15
    54e2:	ef 90       	pop	r14
    54e4:	08 95       	ret

000054e6 <Heater_enuInit>:

#define HTR_INIT_DUTY_CYCLE		50
#define HTR_MAX_DUTY_CYCLE		80

ES_t Heater_enuInit(void)
{
    54e6:	df 93       	push	r29
    54e8:	cf 93       	push	r28
    54ea:	0f 92       	push	r0
    54ec:	cd b7       	in	r28, 0x3d	; 61
    54ee:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK ;
    54f0:	81 e0       	ldi	r24, 0x01	; 1
    54f2:	89 83       	std	Y+1, r24	; 0x01

	if( ES_OK == PWM_enuInit())
    54f4:	0e 94 be 10 	call	0x217c	; 0x217c <PWM_enuInit>
    54f8:	88 23       	and	r24, r24
    54fa:	a1 f4       	brne	.+40     	; 0x5524 <Heater_enuInit+0x3e>
	{
		PWM_enuSetDutyCycle( HEATER_PWM , HTR_INIT_DUTY_CYCLE );
    54fc:	8a ec       	ldi	r24, 0xCA	; 202
    54fe:	40 e0       	ldi	r20, 0x00	; 0
    5500:	50 e0       	ldi	r21, 0x00	; 0
    5502:	68 e4       	ldi	r22, 0x48	; 72
    5504:	72 e4       	ldi	r23, 0x42	; 66
    5506:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <PWM_enuSetDutyCycle>
		if( ES_OK == DIO_enuSetPinDirection( HEATER_GRP , HEATER_PIN , DIO_u8OUTPUT ) )
    550a:	83 e0       	ldi	r24, 0x03	; 3
    550c:	64 e0       	ldi	r22, 0x04	; 4
    550e:	41 e0       	ldi	r20, 0x01	; 1
    5510:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <DIO_enuSetPinDirection>
    5514:	88 23       	and	r24, r24
    5516:	31 f4       	brne	.+12     	; 0x5524 <Heater_enuInit+0x3e>
			Local_enuErrorState = DIO_enuSetPinValue( HEATER_GRP , HEATER_PIN , DIO_u8LOW );
    5518:	83 e0       	ldi	r24, 0x03	; 3
    551a:	64 e0       	ldi	r22, 0x04	; 4
    551c:	40 e0       	ldi	r20, 0x00	; 0
    551e:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    5522:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
    5524:	89 81       	ldd	r24, Y+1	; 0x01
}
    5526:	0f 90       	pop	r0
    5528:	cf 91       	pop	r28
    552a:	df 91       	pop	r29
    552c:	08 95       	ret

0000552e <Heater_enuSetState>:

ES_t Heater_enuSetState( s8 Copy_u8TempError )
{
    552e:	ef 92       	push	r14
    5530:	ff 92       	push	r15
    5532:	0f 93       	push	r16
    5534:	1f 93       	push	r17
    5536:	df 93       	push	r29
    5538:	cf 93       	push	r28
    553a:	00 d0       	rcall	.+0      	; 0x553c <Heater_enuSetState+0xe>
    553c:	00 d0       	rcall	.+0      	; 0x553e <Heater_enuSetState+0x10>
    553e:	00 d0       	rcall	.+0      	; 0x5540 <Heater_enuSetState+0x12>
    5540:	cd b7       	in	r28, 0x3d	; 61
    5542:	de b7       	in	r29, 0x3e	; 62
    5544:	8e 83       	std	Y+6, r24	; 0x06
	ES_t Local_enuErrorState = ES_NOK ;
    5546:	81 e0       	ldi	r24, 0x01	; 1
    5548:	8d 83       	std	Y+5, r24	; 0x05
	static u8 PrevTempError = 0 ;
	f32 DutyCycle;

	if( Copy_u8TempError >= HTR_TEMP_TOLERANCE )	DutyCycle = 0.0 ;
    554a:	8e 81       	ldd	r24, Y+6	; 0x06
    554c:	85 30       	cpi	r24, 0x05	; 5
    554e:	4c f0       	brlt	.+18     	; 0x5562 <Heater_enuSetState+0x34>
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	a0 e0       	ldi	r26, 0x00	; 0
    5556:	b0 e0       	ldi	r27, 0x00	; 0
    5558:	89 83       	std	Y+1, r24	; 0x01
    555a:	9a 83       	std	Y+2, r25	; 0x02
    555c:	ab 83       	std	Y+3, r26	; 0x03
    555e:	bc 83       	std	Y+4, r27	; 0x04
    5560:	7a c0       	rjmp	.+244    	; 0x5656 <Heater_enuSetState+0x128>
	else if( Copy_u8TempError < -HTR_TEMP_TOLERANCE )	DutyCycle = HTR_MAX_DUTY_CYCLE ;
    5562:	8e 81       	ldd	r24, Y+6	; 0x06
    5564:	8b 3f       	cpi	r24, 0xFB	; 251
    5566:	4c f4       	brge	.+18     	; 0x557a <Heater_enuSetState+0x4c>
    5568:	80 e0       	ldi	r24, 0x00	; 0
    556a:	90 e0       	ldi	r25, 0x00	; 0
    556c:	a0 ea       	ldi	r26, 0xA0	; 160
    556e:	b2 e4       	ldi	r27, 0x42	; 66
    5570:	89 83       	std	Y+1, r24	; 0x01
    5572:	9a 83       	std	Y+2, r25	; 0x02
    5574:	ab 83       	std	Y+3, r26	; 0x03
    5576:	bc 83       	std	Y+4, r27	; 0x04
    5578:	6e c0       	rjmp	.+220    	; 0x5656 <Heater_enuSetState+0x128>
	else
	{
		DutyCycle = ( ( HTR_KP * Copy_u8TempError ) +
    557a:	8e 81       	ldd	r24, Y+6	; 0x06
    557c:	99 27       	eor	r25, r25
    557e:	87 fd       	sbrc	r24, 7
    5580:	90 95       	com	r25
    5582:	a9 2f       	mov	r26, r25
    5584:	b9 2f       	mov	r27, r25
    5586:	bc 01       	movw	r22, r24
    5588:	cd 01       	movw	r24, r26
    558a:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    558e:	dc 01       	movw	r26, r24
    5590:	cb 01       	movw	r24, r22
    5592:	bc 01       	movw	r22, r24
    5594:	cd 01       	movw	r24, r26
    5596:	2d ec       	ldi	r18, 0xCD	; 205
    5598:	3c ec       	ldi	r19, 0xCC	; 204
    559a:	4c e4       	ldi	r20, 0x4C	; 76
    559c:	5f e3       	ldi	r21, 0x3F	; 63
    559e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a2:	dc 01       	movw	r26, r24
    55a4:	cb 01       	movw	r24, r22
    55a6:	7c 01       	movw	r14, r24
    55a8:	8d 01       	movw	r16, r26
    55aa:	8e 81       	ldd	r24, Y+6	; 0x06
    55ac:	28 2f       	mov	r18, r24
    55ae:	33 27       	eor	r19, r19
    55b0:	27 fd       	sbrc	r18, 7
    55b2:	30 95       	com	r19
    55b4:	80 91 2c 02 	lds	r24, 0x022C
    55b8:	88 2f       	mov	r24, r24
    55ba:	90 e0       	ldi	r25, 0x00	; 0
    55bc:	82 0f       	add	r24, r18
    55be:	93 1f       	adc	r25, r19
    55c0:	aa 27       	eor	r26, r26
    55c2:	97 fd       	sbrc	r25, 7
    55c4:	a0 95       	com	r26
    55c6:	ba 2f       	mov	r27, r26
    55c8:	bc 01       	movw	r22, r24
    55ca:	cd 01       	movw	r24, r26
    55cc:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    55d0:	dc 01       	movw	r26, r24
    55d2:	cb 01       	movw	r24, r22
    55d4:	bc 01       	movw	r22, r24
    55d6:	cd 01       	movw	r24, r26
    55d8:	2d ec       	ldi	r18, 0xCD	; 205
    55da:	3c ec       	ldi	r19, 0xCC	; 204
    55dc:	4c ec       	ldi	r20, 0xCC	; 204
    55de:	5e e3       	ldi	r21, 0x3E	; 62
    55e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55e4:	dc 01       	movw	r26, r24
    55e6:	cb 01       	movw	r24, r22
    55e8:	9c 01       	movw	r18, r24
    55ea:	ad 01       	movw	r20, r26
    55ec:	c8 01       	movw	r24, r16
    55ee:	b7 01       	movw	r22, r14
    55f0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    55f4:	dc 01       	movw	r26, r24
    55f6:	cb 01       	movw	r24, r22
    55f8:	7c 01       	movw	r14, r24
    55fa:	8d 01       	movw	r16, r26
    55fc:	8e 81       	ldd	r24, Y+6	; 0x06
    55fe:	28 2f       	mov	r18, r24
    5600:	33 27       	eor	r19, r19
    5602:	27 fd       	sbrc	r18, 7
    5604:	30 95       	com	r19
    5606:	80 91 2c 02 	lds	r24, 0x022C
    560a:	88 2f       	mov	r24, r24
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	a9 01       	movw	r20, r18
    5610:	48 1b       	sub	r20, r24
    5612:	59 0b       	sbc	r21, r25
    5614:	ca 01       	movw	r24, r20
    5616:	aa 27       	eor	r26, r26
    5618:	97 fd       	sbrc	r25, 7
    561a:	a0 95       	com	r26
    561c:	ba 2f       	mov	r27, r26
    561e:	bc 01       	movw	r22, r24
    5620:	cd 01       	movw	r24, r26
    5622:	0e 94 25 04 	call	0x84a	; 0x84a <__floatsisf>
    5626:	dc 01       	movw	r26, r24
    5628:	cb 01       	movw	r24, r22
    562a:	bc 01       	movw	r22, r24
    562c:	cd 01       	movw	r24, r26
    562e:	2d ec       	ldi	r18, 0xCD	; 205
    5630:	3c ec       	ldi	r19, 0xCC	; 204
    5632:	4c e4       	ldi	r20, 0x4C	; 76
    5634:	5e e3       	ldi	r21, 0x3E	; 62
    5636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    563a:	dc 01       	movw	r26, r24
    563c:	cb 01       	movw	r24, r22
    563e:	9c 01       	movw	r18, r24
    5640:	ad 01       	movw	r20, r26
    5642:	c8 01       	movw	r24, r16
    5644:	b7 01       	movw	r22, r14
    5646:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    564a:	dc 01       	movw	r26, r24
    564c:	cb 01       	movw	r24, r22
    564e:	89 83       	std	Y+1, r24	; 0x01
    5650:	9a 83       	std	Y+2, r25	; 0x02
    5652:	ab 83       	std	Y+3, r26	; 0x03
    5654:	bc 83       	std	Y+4, r27	; 0x04
					( HTR_KI * ( Copy_u8TempError + PrevTempError ) ) +
					( HTR_KD * ( Copy_u8TempError - PrevTempError ) ) ) ;
	}

	Local_enuErrorState = PWM_enuSetDutyCycle( HEATER_PWM , DutyCycle );
    5656:	29 81       	ldd	r18, Y+1	; 0x01
    5658:	3a 81       	ldd	r19, Y+2	; 0x02
    565a:	4b 81       	ldd	r20, Y+3	; 0x03
    565c:	5c 81       	ldd	r21, Y+4	; 0x04
    565e:	8a ec       	ldi	r24, 0xCA	; 202
    5660:	ba 01       	movw	r22, r20
    5662:	a9 01       	movw	r20, r18
    5664:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <PWM_enuSetDutyCycle>
    5668:	8d 83       	std	Y+5, r24	; 0x05

	PrevTempError = Copy_u8TempError ;
    566a:	8e 81       	ldd	r24, Y+6	; 0x06
    566c:	80 93 2c 02 	sts	0x022C, r24

	return Local_enuErrorState ;
    5670:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5672:	26 96       	adiw	r28, 0x06	; 6
    5674:	0f b6       	in	r0, 0x3f	; 63
    5676:	f8 94       	cli
    5678:	de bf       	out	0x3e, r29	; 62
    567a:	0f be       	out	0x3f, r0	; 63
    567c:	cd bf       	out	0x3d, r28	; 61
    567e:	cf 91       	pop	r28
    5680:	df 91       	pop	r29
    5682:	1f 91       	pop	r17
    5684:	0f 91       	pop	r16
    5686:	ff 90       	pop	r15
    5688:	ef 90       	pop	r14
    568a:	08 95       	ret

0000568c <LM35_enuInit>:
#define TEMP_ADC_CH				CH_00
#define TEMP_CONVERSION_FACTOR	0.488281 			//	Degree/step
#define TEMP_OFFSET				0.00002816			//	Correction factor at mid range

ES_t LM35_enuInit(void)
{
    568c:	df 93       	push	r29
    568e:	cf 93       	push	r28
    5690:	00 d0       	rcall	.+0      	; 0x5692 <LM35_enuInit+0x6>
    5692:	0f 92       	push	r0
    5694:	cd b7       	in	r28, 0x3d	; 61
    5696:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK , Local_AenuErrorState[2];
    5698:	81 e0       	ldi	r24, 0x01	; 1
    569a:	89 83       	std	Y+1, r24	; 0x01

	Local_AenuErrorState[0] = DIO_enuSetPinDirection( TEMP_VALUE_GRP , TEMP_VALUE_PIN , DIO_u8INPUT );
    569c:	80 e0       	ldi	r24, 0x00	; 0
    569e:	60 e0       	ldi	r22, 0x00	; 0
    56a0:	40 e0       	ldi	r20, 0x00	; 0
    56a2:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <DIO_enuSetPinDirection>
    56a6:	8a 83       	std	Y+2, r24	; 0x02
	Local_AenuErrorState[1] = DIO_enuSetPinValue( TEMP_VALUE_GRP , TEMP_VALUE_PIN , TEMP_VALUE_STATE );
    56a8:	80 e0       	ldi	r24, 0x00	; 0
    56aa:	60 e0       	ldi	r22, 0x00	; 0
    56ac:	40 e0       	ldi	r20, 0x00	; 0
    56ae:	0e 94 f5 20 	call	0x41ea	; 0x41ea <DIO_enuSetPinValue>
    56b2:	8b 83       	std	Y+3, r24	; 0x03

	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    56b4:	8a 81       	ldd	r24, Y+2	; 0x02
    56b6:	88 23       	and	r24, r24
    56b8:	51 f4       	brne	.+20     	; 0x56ce <LM35_enuInit+0x42>
    56ba:	8b 81       	ldd	r24, Y+3	; 0x03
    56bc:	88 23       	and	r24, r24
    56be:	39 f4       	brne	.+14     	; 0x56ce <LM35_enuInit+0x42>
	{
		Local_AenuErrorState[0] = ADC_enuInit();
    56c0:	0e 94 29 23 	call	0x4652	; 0x4652 <ADC_enuInit>
    56c4:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = ADC_enuSelectChannel( TEMP_ADC_CH );
    56c6:	85 e8       	ldi	r24, 0x85	; 133
    56c8:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <ADC_enuSelectChannel>
    56cc:	8b 83       	std	Y+3, r24	; 0x03
 	}
	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    56ce:	8a 81       	ldd	r24, Y+2	; 0x02
    56d0:	88 23       	and	r24, r24
    56d2:	59 f4       	brne	.+22     	; 0x56ea <LM35_enuInit+0x5e>
    56d4:	8b 81       	ldd	r24, Y+3	; 0x03
    56d6:	88 23       	and	r24, r24
    56d8:	41 f4       	brne	.+16     	; 0x56ea <LM35_enuInit+0x5e>
	{

		Local_AenuErrorState[0] = ADC_enuCallBack( ADC_vidISR );
    56da:	8c ec       	ldi	r24, 0xCC	; 204
    56dc:	9b e2       	ldi	r25, 0x2B	; 43
    56de:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <ADC_enuCallBack>
    56e2:	8a 83       	std	Y+2, r24	; 0x02
		Local_AenuErrorState[1] = ADC_enuStartConversion();
    56e4:	0e 94 11 24 	call	0x4822	; 0x4822 <ADC_enuStartConversion>
    56e8:	8b 83       	std	Y+3, r24	; 0x03
	}
	if( Local_AenuErrorState[0] == ES_OK && Local_AenuErrorState[1] == ES_OK )
    56ea:	8a 81       	ldd	r24, Y+2	; 0x02
    56ec:	88 23       	and	r24, r24
    56ee:	21 f4       	brne	.+8      	; 0x56f8 <LM35_enuInit+0x6c>
    56f0:	8b 81       	ldd	r24, Y+3	; 0x03
    56f2:	88 23       	and	r24, r24
    56f4:	09 f4       	brne	.+2      	; 0x56f8 <LM35_enuInit+0x6c>
		Local_enuErrorState = ES_OK ;
    56f6:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState ;
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    56fa:	0f 90       	pop	r0
    56fc:	0f 90       	pop	r0
    56fe:	0f 90       	pop	r0
    5700:	cf 91       	pop	r28
    5702:	df 91       	pop	r29
    5704:	08 95       	ret

00005706 <LM35_enuReadTemp>:

ES_t LM35_enuReadTemp( u16 *Copy_u16TempValue )
{
    5706:	df 93       	push	r29
    5708:	cf 93       	push	r28
    570a:	00 d0       	rcall	.+0      	; 0x570c <LM35_enuReadTemp+0x6>
    570c:	00 d0       	rcall	.+0      	; 0x570e <LM35_enuReadTemp+0x8>
    570e:	0f 92       	push	r0
    5710:	cd b7       	in	r28, 0x3d	; 61
    5712:	de b7       	in	r29, 0x3e	; 62
    5714:	9d 83       	std	Y+5, r25	; 0x05
    5716:	8c 83       	std	Y+4, r24	; 0x04
	ES_t Local_enuErrorState = ES_NOK ;
    5718:	81 e0       	ldi	r24, 0x01	; 1
    571a:	89 83       	std	Y+1, r24	; 0x01
	u16 Local_u16TempValue;

	if( Global_blConverted == TRUE )
    571c:	80 91 2d 02 	lds	r24, 0x022D
    5720:	81 30       	cpi	r24, 0x01	; 1
    5722:	89 f5       	brne	.+98     	; 0x5786 <LM35_enuReadTemp+0x80>
	{
		Local_enuErrorState = ADC_enuRead( &Local_u16TempValue );
    5724:	ce 01       	movw	r24, r28
    5726:	02 96       	adiw	r24, 0x02	; 2
    5728:	0e 94 63 24 	call	0x48c6	; 0x48c6 <ADC_enuRead>
    572c:	89 83       	std	Y+1, r24	; 0x01
		*Copy_u16TempValue = (u16)( ( Local_u16TempValue * TEMP_CONVERSION_FACTOR ) + TEMP_OFFSET );
    572e:	8a 81       	ldd	r24, Y+2	; 0x02
    5730:	9b 81       	ldd	r25, Y+3	; 0x03
    5732:	cc 01       	movw	r24, r24
    5734:	a0 e0       	ldi	r26, 0x00	; 0
    5736:	b0 e0       	ldi	r27, 0x00	; 0
    5738:	bc 01       	movw	r22, r24
    573a:	cd 01       	movw	r24, r26
    573c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__floatunsisf>
    5740:	dc 01       	movw	r26, r24
    5742:	cb 01       	movw	r24, r22
    5744:	bc 01       	movw	r22, r24
    5746:	cd 01       	movw	r24, r26
    5748:	28 ef       	ldi	r18, 0xF8	; 248
    574a:	3f ef       	ldi	r19, 0xFF	; 255
    574c:	49 ef       	ldi	r20, 0xF9	; 249
    574e:	5e e3       	ldi	r21, 0x3E	; 62
    5750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5754:	dc 01       	movw	r26, r24
    5756:	cb 01       	movw	r24, r22
    5758:	bc 01       	movw	r22, r24
    575a:	cd 01       	movw	r24, r26
    575c:	24 e2       	ldi	r18, 0x24	; 36
    575e:	39 e3       	ldi	r19, 0x39	; 57
    5760:	4c ee       	ldi	r20, 0xEC	; 236
    5762:	57 e3       	ldi	r21, 0x37	; 55
    5764:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5768:	dc 01       	movw	r26, r24
    576a:	cb 01       	movw	r24, r22
    576c:	bc 01       	movw	r22, r24
    576e:	cd 01       	movw	r24, r26
    5770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5774:	dc 01       	movw	r26, r24
    5776:	cb 01       	movw	r24, r22
    5778:	ec 81       	ldd	r30, Y+4	; 0x04
    577a:	fd 81       	ldd	r31, Y+5	; 0x05
    577c:	91 83       	std	Z+1, r25	; 0x01
    577e:	80 83       	st	Z, r24
		Global_blConverted = FALSE ;
    5780:	10 92 2d 02 	sts	0x022D, r1
		Local_enuErrorState = ES_OK ;
    5784:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_enuErrorState ;
    5786:	89 81       	ldd	r24, Y+1	; 0x01
}
    5788:	0f 90       	pop	r0
    578a:	0f 90       	pop	r0
    578c:	0f 90       	pop	r0
    578e:	0f 90       	pop	r0
    5790:	0f 90       	pop	r0
    5792:	cf 91       	pop	r28
    5794:	df 91       	pop	r29
    5796:	08 95       	ret

00005798 <ADC_vidISR>:

void ADC_vidISR(void)
{
    5798:	df 93       	push	r29
    579a:	cf 93       	push	r28
    579c:	cd b7       	in	r28, 0x3d	; 61
    579e:	de b7       	in	r29, 0x3e	; 62
	Global_blConverted = TRUE;
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	80 93 2d 02 	sts	0x022D, r24
}
    57a6:	cf 91       	pop	r28
    57a8:	df 91       	pop	r29
    57aa:	08 95       	ret

000057ac <main>:
u8 Global_u8TempValue = 30;					// Actual Temperrature
s8 Global_u8TempError ;						// Difference between Set point and Actual Temp

int
main(void)
{
    57ac:	ef 92       	push	r14
    57ae:	0f 93       	push	r16
    57b0:	1f 93       	push	r17
    57b2:	df 93       	push	r29
    57b4:	cf 93       	push	r28
    57b6:	00 d0       	rcall	.+0      	; 0x57b8 <main+0xc>
    57b8:	00 d0       	rcall	.+0      	; 0x57ba <main+0xe>
    57ba:	cd b7       	in	r28, 0x3d	; 61
    57bc:	de b7       	in	r29, 0x3e	; 62

	u8 SSeg_u8ActiveModule = TEMP_UNITS ;
    57be:	8c e0       	ldi	r24, 0x0C	; 12
    57c0:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8StoredSetTemp ;

	LD_enuInit();
    57c2:	0e 94 0f 29 	call	0x521e	; 0x521e <LD_enuInit>
	Switch_enuInit();
    57c6:	0e 94 e7 25 	call	0x4bce	; 0x4bce <Switch_enuInit>
	SevSeg_enuInit();
    57ca:	0e 94 94 26 	call	0x4d28	; 0x4d28 <SevSeg_enuInit>
	LM35_enuInit();
    57ce:	0e 94 46 2b 	call	0x568c	; 0x568c <LM35_enuInit>
	Heater_enuInit();
    57d2:	0e 94 73 2a 	call	0x54e6	; 0x54e6 <Heater_enuInit>
	Coolent_enuInit();
    57d6:	0e 94 a0 29 	call	0x5340	; 0x5340 <Coolent_enuInit>
	EEPROM_enuReadByte( (u16)SET_ADDRESS , &Local_u8StoredSetTemp );
    57da:	9e 01       	movw	r18, r28
    57dc:	2e 5f       	subi	r18, 0xFE	; 254
    57de:	3f 4f       	sbci	r19, 0xFF	; 255
    57e0:	80 e1       	ldi	r24, 0x10	; 16
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	b9 01       	movw	r22, r18
    57e6:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <EEPROM_enuReadByte>
	if( Local_u8StoredSetTemp == 0 )
    57ea:	8a 81       	ldd	r24, Y+2	; 0x02
    57ec:	88 23       	and	r24, r24
    57ee:	59 f4       	brne	.+22     	; 0x5806 <main+0x5a>
	{
		Global_u8TempSetValue = INIT_SET_TEMP ;
    57f0:	8c e3       	ldi	r24, 0x3C	; 60
    57f2:	80 93 3a 02 	sts	0x023A, r24
		EEPROM_enuWriteByte( (u16)SET_ADDRESS , Global_u8TempSetValue );
    57f6:	20 91 3a 02 	lds	r18, 0x023A
    57fa:	80 e1       	ldi	r24, 0x10	; 16
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	62 2f       	mov	r22, r18
    5800:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <EEPROM_enuWriteByte>
    5804:	03 c0       	rjmp	.+6      	; 0x580c <main+0x60>
	}
	else Global_u8TempSetValue = Local_u8StoredSetTemp ;
    5806:	8a 81       	ldd	r24, Y+2	; 0x02
    5808:	80 93 3a 02 	sts	0x023A, r24

	u16 Local_u16TempValue ;
	while( ES_OK != LM35_enuReadTemp( &Local_u16TempValue ) );
    580c:	ce 01       	movw	r24, r28
    580e:	03 96       	adiw	r24, 0x03	; 3
    5810:	0e 94 83 2b 	call	0x5706	; 0x5706 <LM35_enuReadTemp>
    5814:	88 23       	and	r24, r24
    5816:	d1 f7       	brne	.-12     	; 0x580c <main+0x60>
		Global_u8TempValue = (u8)Local_u16TempValue ;
    5818:	8b 81       	ldd	r24, Y+3	; 0x03
    581a:	9c 81       	ldd	r25, Y+4	; 0x04
    581c:	80 93 c3 01 	sts	0x01C3, r24

	TMU_vidInit();
    5820:	0e 94 45 07 	call	0xe8a	; 0xe8a <TMU_vidInit>

	TMU_vidCreateTask(DisplayTemperature	, &SSeg_u8ActiveModule	, 7 , PAUSED , 4  , 0 );
    5824:	83 e8       	ldi	r24, 0x83	; 131
    5826:	9c e2       	ldi	r25, 0x2C	; 44
    5828:	9e 01       	movw	r18, r28
    582a:	2f 5f       	subi	r18, 0xFF	; 255
    582c:	3f 4f       	sbci	r19, 0xFF	; 255
    582e:	b9 01       	movw	r22, r18
    5830:	47 e0       	ldi	r20, 0x07	; 7
    5832:	28 e3       	ldi	r18, 0x38	; 56
    5834:	04 e0       	ldi	r16, 0x04	; 4
    5836:	10 e0       	ldi	r17, 0x00	; 0
    5838:	ee 24       	eor	r14, r14
    583a:	0e 94 6f 07 	call	0xede	; 0xede <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckTemperatureStatus, NULL					, 6 , PAUSED , 10 , 0 );
    583e:	80 e1       	ldi	r24, 0x10	; 16
    5840:	9d e2       	ldi	r25, 0x2D	; 45
    5842:	60 e0       	ldi	r22, 0x00	; 0
    5844:	70 e0       	ldi	r23, 0x00	; 0
    5846:	46 e0       	ldi	r20, 0x06	; 6
    5848:	28 e3       	ldi	r18, 0x38	; 56
    584a:	0a e0       	ldi	r16, 0x0A	; 10
    584c:	10 e0       	ldi	r17, 0x00	; 0
    584e:	ee 24       	eor	r14, r14
    5850:	0e 94 6f 07 	call	0xede	; 0xede <TMU_vidCreateTask>
	TMU_vidCreateTask(AdjustHeaterStatus	, NULL					, 5 , PAUSED , 100, 2 );
    5854:	82 e9       	ldi	r24, 0x92	; 146
    5856:	9f e2       	ldi	r25, 0x2F	; 47
    5858:	60 e0       	ldi	r22, 0x00	; 0
    585a:	70 e0       	ldi	r23, 0x00	; 0
    585c:	45 e0       	ldi	r20, 0x05	; 5
    585e:	28 e3       	ldi	r18, 0x38	; 56
    5860:	04 e6       	ldi	r16, 0x64	; 100
    5862:	10 e0       	ldi	r17, 0x00	; 0
    5864:	ee 24       	eor	r14, r14
    5866:	68 94       	set
    5868:	e1 f8       	bld	r14, 1
    586a:	0e 94 6f 07 	call	0xede	; 0xede <TMU_vidCreateTask>
	TMU_vidCreateTask(AdjustCoolentStatus	, NULL					, 4 , PAUSED , 100, 2 );
    586e:	8d ea       	ldi	r24, 0xAD	; 173
    5870:	9f e2       	ldi	r25, 0x2F	; 47
    5872:	60 e0       	ldi	r22, 0x00	; 0
    5874:	70 e0       	ldi	r23, 0x00	; 0
    5876:	44 e0       	ldi	r20, 0x04	; 4
    5878:	28 e3       	ldi	r18, 0x38	; 56
    587a:	04 e6       	ldi	r16, 0x64	; 100
    587c:	10 e0       	ldi	r17, 0x00	; 0
    587e:	ee 24       	eor	r14, r14
    5880:	68 94       	set
    5882:	e1 f8       	bld	r14, 1
    5884:	0e 94 6f 07 	call	0xede	; 0xede <TMU_vidCreateTask>
	TMU_vidCreateTask(AdjustRedLampStatus	, NULL					, 3 , PAUSED , 50 , 1 );
    5888:	82 e4       	ldi	r24, 0x42	; 66
    588a:	9f e2       	ldi	r25, 0x2F	; 47
    588c:	60 e0       	ldi	r22, 0x00	; 0
    588e:	70 e0       	ldi	r23, 0x00	; 0
    5890:	43 e0       	ldi	r20, 0x03	; 3
    5892:	28 e3       	ldi	r18, 0x38	; 56
    5894:	02 e3       	ldi	r16, 0x32	; 50
    5896:	10 e0       	ldi	r17, 0x00	; 0
    5898:	ee 24       	eor	r14, r14
    589a:	e3 94       	inc	r14
    589c:	0e 94 6f 07 	call	0xede	; 0xede <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckIncrementSwitch	, NULL					, 2 , PAUSED , 7  , 3 );
    58a0:	86 e9       	ldi	r24, 0x96	; 150
    58a2:	9d e2       	ldi	r25, 0x2D	; 45
    58a4:	60 e0       	ldi	r22, 0x00	; 0
    58a6:	70 e0       	ldi	r23, 0x00	; 0
    58a8:	42 e0       	ldi	r20, 0x02	; 2
    58aa:	28 e3       	ldi	r18, 0x38	; 56
    58ac:	07 e0       	ldi	r16, 0x07	; 7
    58ae:	10 e0       	ldi	r17, 0x00	; 0
    58b0:	0f 2e       	mov	r0, r31
    58b2:	f3 e0       	ldi	r31, 0x03	; 3
    58b4:	ef 2e       	mov	r14, r31
    58b6:	f0 2d       	mov	r31, r0
    58b8:	0e 94 6f 07 	call	0xede	; 0xede <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckDecrementSwitch	, NULL					, 1 , PAUSED , 7  , 1 );
    58bc:	8f e2       	ldi	r24, 0x2F	; 47
    58be:	9e e2       	ldi	r25, 0x2E	; 46
    58c0:	60 e0       	ldi	r22, 0x00	; 0
    58c2:	70 e0       	ldi	r23, 0x00	; 0
    58c4:	41 e0       	ldi	r20, 0x01	; 1
    58c6:	28 e3       	ldi	r18, 0x38	; 56
    58c8:	07 e0       	ldi	r16, 0x07	; 7
    58ca:	10 e0       	ldi	r17, 0x00	; 0
    58cc:	ee 24       	eor	r14, r14
    58ce:	e3 94       	inc	r14
    58d0:	0e 94 6f 07 	call	0xede	; 0xede <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckPowerSwitch		, NULL					, 0 , READY  , 7  , 0 );
    58d4:	88 ec       	ldi	r24, 0xC8	; 200
    58d6:	9e e2       	ldi	r25, 0x2E	; 46
    58d8:	60 e0       	ldi	r22, 0x00	; 0
    58da:	70 e0       	ldi	r23, 0x00	; 0
    58dc:	40 e0       	ldi	r20, 0x00	; 0
    58de:	27 e1       	ldi	r18, 0x17	; 23
    58e0:	07 e0       	ldi	r16, 0x07	; 7
    58e2:	10 e0       	ldi	r17, 0x00	; 0
    58e4:	ee 24       	eor	r14, r14
    58e6:	0e 94 6f 07 	call	0xede	; 0xede <TMU_vidCreateTask>

	TMU_vidStartScheduler();
    58ea:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <TMU_vidStartScheduler>
    58ee:	80 e0       	ldi	r24, 0x00	; 0
    58f0:	90 e0       	ldi	r25, 0x00	; 0
}
    58f2:	0f 90       	pop	r0
    58f4:	0f 90       	pop	r0
    58f6:	0f 90       	pop	r0
    58f8:	0f 90       	pop	r0
    58fa:	cf 91       	pop	r28
    58fc:	df 91       	pop	r29
    58fe:	1f 91       	pop	r17
    5900:	0f 91       	pop	r16
    5902:	ef 90       	pop	r14
    5904:	08 95       	ret

00005906 <DisplayTemperature>:

void DisplayTemperature(void *Copy_pu8ActiveModule)
{
    5906:	df 93       	push	r29
    5908:	cf 93       	push	r28
    590a:	00 d0       	rcall	.+0      	; 0x590c <DisplayTemperature+0x6>
    590c:	00 d0       	rcall	.+0      	; 0x590e <DisplayTemperature+0x8>
    590e:	00 d0       	rcall	.+0      	; 0x5910 <DisplayTemperature+0xa>
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	9d 83       	std	Y+5, r25	; 0x05
    5916:	8c 83       	std	Y+4, r24	; 0x04
	u8 *Local_u8ActiveModule = (u8*)Copy_pu8ActiveModule ;
    5918:	8c 81       	ldd	r24, Y+4	; 0x04
    591a:	9d 81       	ldd	r25, Y+5	; 0x05
    591c:	9b 83       	std	Y+3, r25	; 0x03
    591e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DisplayValue;
	static u8 BlinkDelay = BLINK_COUNTS ;
	static bool BlinkStatus = FALSE ;

	if( PowerStatus == ON)
    5920:	80 91 be 01 	lds	r24, 0x01BE
    5924:	88 23       	and	r24, r24
    5926:	09 f0       	breq	.+2      	; 0x592a <DisplayTemperature+0x24>
    5928:	63 c0       	rjmp	.+198    	; 0x59f0 <DisplayTemperature+0xea>
	{
		if( Global_u8DisplayMode == NORMAL )			// NORMAL Operation Mode
    592a:	80 91 c2 01 	lds	r24, 0x01C2
    592e:	85 30       	cpi	r24, 0x05	; 5
    5930:	51 f4       	brne	.+20     	; 0x5946 <DisplayTemperature+0x40>
		{
			Local_u8DisplayValue = Global_u8TempValue ;
    5932:	80 91 c3 01 	lds	r24, 0x01C3
    5936:	89 83       	std	Y+1, r24	; 0x01
			if( BlinkStatus == TRUE ) BlinkStatus = FALSE ;
    5938:	80 91 2f 02 	lds	r24, 0x022F
    593c:	81 30       	cpi	r24, 0x01	; 1
    593e:	e1 f4       	brne	.+56     	; 0x5978 <DisplayTemperature+0x72>
    5940:	10 92 2f 02 	sts	0x022F, r1
    5944:	19 c0       	rjmp	.+50     	; 0x5978 <DisplayTemperature+0x72>
		}
		else											// SETUP Mode
		{
			Local_u8DisplayValue = Global_u8TempSetValue ;
    5946:	80 91 3a 02 	lds	r24, 0x023A
    594a:	89 83       	std	Y+1, r24	; 0x01
			BlinkDelay--;
    594c:	80 91 c4 01 	lds	r24, 0x01C4
    5950:	81 50       	subi	r24, 0x01	; 1
    5952:	80 93 c4 01 	sts	0x01C4, r24
			if(!BlinkDelay)
    5956:	80 91 c4 01 	lds	r24, 0x01C4
    595a:	88 23       	and	r24, r24
    595c:	69 f4       	brne	.+26     	; 0x5978 <DisplayTemperature+0x72>
			{
				BlinkDelay = BLINK_COUNTS;
    595e:	8a e0       	ldi	r24, 0x0A	; 10
    5960:	80 93 c4 01 	sts	0x01C4, r24
				BlinkStatus = ( ( BlinkStatus == TRUE )? FALSE : TRUE ) ;
    5964:	80 91 2f 02 	lds	r24, 0x022F
    5968:	1e 82       	std	Y+6, r1	; 0x06
    596a:	81 30       	cpi	r24, 0x01	; 1
    596c:	11 f0       	breq	.+4      	; 0x5972 <DisplayTemperature+0x6c>
    596e:	81 e0       	ldi	r24, 0x01	; 1
    5970:	8e 83       	std	Y+6, r24	; 0x06
    5972:	8e 81       	ldd	r24, Y+6	; 0x06
    5974:	80 93 2f 02 	sts	0x022F, r24
			}
		}

		if( *Local_u8ActiveModule == TEMP_UNITS )
    5978:	ea 81       	ldd	r30, Y+2	; 0x02
    597a:	fb 81       	ldd	r31, Y+3	; 0x03
    597c:	80 81       	ld	r24, Z
    597e:	8c 30       	cpi	r24, 0x0C	; 12
    5980:	e1 f4       	brne	.+56     	; 0x59ba <DisplayTemperature+0xb4>
		{
			SevSeg_enuModuleControl( TEMP_TENS , MODULE_DISABLE);
    5982:	8b e0       	ldi	r24, 0x0B	; 11
    5984:	6d e0       	ldi	r22, 0x0D	; 13
    5986:	0e 94 b8 28 	call	0x5170	; 0x5170 <SevSeg_enuModuleControl>
			SevSeg_enuSetDigitValue( TEMP_UNITS , ( Local_u8DisplayValue % 10 ) );
    598a:	89 81       	ldd	r24, Y+1	; 0x01
    598c:	9a e0       	ldi	r25, 0x0A	; 10
    598e:	69 2f       	mov	r22, r25
    5990:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <__udivmodqi4>
    5994:	89 2f       	mov	r24, r25
    5996:	98 2f       	mov	r25, r24
    5998:	8c e0       	ldi	r24, 0x0C	; 12
    599a:	69 2f       	mov	r22, r25
    599c:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <SevSeg_enuSetDigitValue>
			if( BlinkStatus == FALSE )	SevSeg_enuModuleControl( TEMP_UNITS , MODULE_ENABLE);
    59a0:	80 91 2f 02 	lds	r24, 0x022F
    59a4:	88 23       	and	r24, r24
    59a6:	21 f4       	brne	.+8      	; 0x59b0 <DisplayTemperature+0xaa>
    59a8:	8c e0       	ldi	r24, 0x0C	; 12
    59aa:	6e e0       	ldi	r22, 0x0E	; 14
    59ac:	0e 94 b8 28 	call	0x5170	; 0x5170 <SevSeg_enuModuleControl>
			*Local_u8ActiveModule = TEMP_TENS ;
    59b0:	ea 81       	ldd	r30, Y+2	; 0x02
    59b2:	fb 81       	ldd	r31, Y+3	; 0x03
    59b4:	8b e0       	ldi	r24, 0x0B	; 11
    59b6:	80 83       	st	Z, r24
    59b8:	2a c0       	rjmp	.+84     	; 0x5a0e <DisplayTemperature+0x108>
		}
		else
		{
			SevSeg_enuModuleControl( TEMP_UNITS , MODULE_DISABLE);
    59ba:	8c e0       	ldi	r24, 0x0C	; 12
    59bc:	6d e0       	ldi	r22, 0x0D	; 13
    59be:	0e 94 b8 28 	call	0x5170	; 0x5170 <SevSeg_enuModuleControl>
			SevSeg_enuSetDigitValue( TEMP_TENS , ( Local_u8DisplayValue / 10 ) );
    59c2:	89 81       	ldd	r24, Y+1	; 0x01
    59c4:	9a e0       	ldi	r25, 0x0A	; 10
    59c6:	69 2f       	mov	r22, r25
    59c8:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <__udivmodqi4>
    59cc:	98 2f       	mov	r25, r24
    59ce:	8b e0       	ldi	r24, 0x0B	; 11
    59d0:	69 2f       	mov	r22, r25
    59d2:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <SevSeg_enuSetDigitValue>
			if( BlinkStatus == FALSE )SevSeg_enuModuleControl( TEMP_TENS , MODULE_ENABLE);
    59d6:	80 91 2f 02 	lds	r24, 0x022F
    59da:	88 23       	and	r24, r24
    59dc:	21 f4       	brne	.+8      	; 0x59e6 <DisplayTemperature+0xe0>
    59de:	8b e0       	ldi	r24, 0x0B	; 11
    59e0:	6e e0       	ldi	r22, 0x0E	; 14
    59e2:	0e 94 b8 28 	call	0x5170	; 0x5170 <SevSeg_enuModuleControl>
			*Local_u8ActiveModule = TEMP_UNITS ;
    59e6:	ea 81       	ldd	r30, Y+2	; 0x02
    59e8:	fb 81       	ldd	r31, Y+3	; 0x03
    59ea:	8c e0       	ldi	r24, 0x0C	; 12
    59ec:	80 83       	st	Z, r24
    59ee:	0f c0       	rjmp	.+30     	; 0x5a0e <DisplayTemperature+0x108>
		}
	}
	else
	{
		SevSeg_enuModuleControl( TEMP_UNITS , MODULE_DISABLE);
    59f0:	8c e0       	ldi	r24, 0x0C	; 12
    59f2:	6d e0       	ldi	r22, 0x0D	; 13
    59f4:	0e 94 b8 28 	call	0x5170	; 0x5170 <SevSeg_enuModuleControl>
		SevSeg_enuModuleControl( TEMP_TENS , MODULE_DISABLE);
    59f8:	8b e0       	ldi	r24, 0x0B	; 11
    59fa:	6d e0       	ldi	r22, 0x0D	; 13
    59fc:	0e 94 b8 28 	call	0x5170	; 0x5170 <SevSeg_enuModuleControl>
		*Local_u8ActiveModule = TEMP_UNITS;
    5a00:	ea 81       	ldd	r30, Y+2	; 0x02
    5a02:	fb 81       	ldd	r31, Y+3	; 0x03
    5a04:	8c e0       	ldi	r24, 0x0C	; 12
    5a06:	80 83       	st	Z, r24
		TMU_vidPauseTask( 7 );
    5a08:	87 e0       	ldi	r24, 0x07	; 7
    5a0a:	0e 94 c7 08 	call	0x118e	; 0x118e <TMU_vidPauseTask>
	}
}
    5a0e:	26 96       	adiw	r28, 0x06	; 6
    5a10:	0f b6       	in	r0, 0x3f	; 63
    5a12:	f8 94       	cli
    5a14:	de bf       	out	0x3e, r29	; 62
    5a16:	0f be       	out	0x3f, r0	; 63
    5a18:	cd bf       	out	0x3d, r28	; 61
    5a1a:	cf 91       	pop	r28
    5a1c:	df 91       	pop	r29
    5a1e:	08 95       	ret

00005a20 <CheckTemperatureStatus>:

void CheckTemperatureStatus(void *pNULL)
{
    5a20:	df 93       	push	r29
    5a22:	cf 93       	push	r28
    5a24:	00 d0       	rcall	.+0      	; 0x5a26 <CheckTemperatureStatus+0x6>
    5a26:	00 d0       	rcall	.+0      	; 0x5a28 <CheckTemperatureStatus+0x8>
    5a28:	cd b7       	in	r28, 0x3d	; 61
    5a2a:	de b7       	in	r29, 0x3e	; 62
    5a2c:	9c 83       	std	Y+4, r25	; 0x04
    5a2e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16TempValue ;
	static u16 Local_u16TempAccValue = 0 ;
	static u8 Local_u8PrevTempValue = 0 ;
	static u8 Local_u8TempReadCounter = TEMP_AVG_READINGS ;

	if( Global_u8DisplayMode == NORMAL && PowerStatus == ON )
    5a30:	80 91 c2 01 	lds	r24, 0x01C2
    5a34:	85 30       	cpi	r24, 0x05	; 5
    5a36:	09 f0       	breq	.+2      	; 0x5a3a <CheckTemperatureStatus+0x1a>
    5a38:	67 c0       	rjmp	.+206    	; 0x5b08 <CheckTemperatureStatus+0xe8>
    5a3a:	80 91 be 01 	lds	r24, 0x01BE
    5a3e:	88 23       	and	r24, r24
    5a40:	09 f0       	breq	.+2      	; 0x5a44 <CheckTemperatureStatus+0x24>
    5a42:	62 c0       	rjmp	.+196    	; 0x5b08 <CheckTemperatureStatus+0xe8>
	{
		LM35_enuReadTemp( &Local_u16TempValue );
    5a44:	ce 01       	movw	r24, r28
    5a46:	01 96       	adiw	r24, 0x01	; 1
    5a48:	0e 94 83 2b 	call	0x5706	; 0x5706 <LM35_enuReadTemp>
		Local_u16TempAccValue += Local_u16TempValue ;
    5a4c:	20 91 31 02 	lds	r18, 0x0231
    5a50:	30 91 32 02 	lds	r19, 0x0232
    5a54:	89 81       	ldd	r24, Y+1	; 0x01
    5a56:	9a 81       	ldd	r25, Y+2	; 0x02
    5a58:	82 0f       	add	r24, r18
    5a5a:	93 1f       	adc	r25, r19
    5a5c:	90 93 32 02 	sts	0x0232, r25
    5a60:	80 93 31 02 	sts	0x0231, r24
		ADC_enuStartConversion();
    5a64:	0e 94 11 24 	call	0x4822	; 0x4822 <ADC_enuStartConversion>
		Local_u8TempReadCounter--;
    5a68:	80 91 c5 01 	lds	r24, 0x01C5
    5a6c:	81 50       	subi	r24, 0x01	; 1
    5a6e:	80 93 c5 01 	sts	0x01C5, r24
		if( !Local_u8TempReadCounter )
    5a72:	80 91 c5 01 	lds	r24, 0x01C5
    5a76:	88 23       	and	r24, r24
    5a78:	09 f0       	breq	.+2      	; 0x5a7c <CheckTemperatureStatus+0x5c>
    5a7a:	51 c0       	rjmp	.+162    	; 0x5b1e <CheckTemperatureStatus+0xfe>
		{
			Local_u8TempReadCounter = TEMP_AVG_READINGS;
    5a7c:	8a e0       	ldi	r24, 0x0A	; 10
    5a7e:	80 93 c5 01 	sts	0x01C5, r24
			Global_u8TempValue = Local_u16TempAccValue / 10 ;
    5a82:	80 91 31 02 	lds	r24, 0x0231
    5a86:	90 91 32 02 	lds	r25, 0x0232
    5a8a:	2a e0       	ldi	r18, 0x0A	; 10
    5a8c:	30 e0       	ldi	r19, 0x00	; 0
    5a8e:	b9 01       	movw	r22, r18
    5a90:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <__udivmodhi4>
    5a94:	cb 01       	movw	r24, r22
    5a96:	80 93 c3 01 	sts	0x01C3, r24
			Global_u8TempError = Global_u8TempValue - Local_u8PrevTempValue ;
    5a9a:	90 91 c3 01 	lds	r25, 0x01C3
    5a9e:	80 91 30 02 	lds	r24, 0x0230
    5aa2:	29 2f       	mov	r18, r25
    5aa4:	28 1b       	sub	r18, r24
    5aa6:	82 2f       	mov	r24, r18
    5aa8:	80 93 3b 02 	sts	0x023B, r24
			Local_u8PrevTempValue = Global_u8TempValue ;
    5aac:	80 91 c3 01 	lds	r24, 0x01C3
    5ab0:	80 93 30 02 	sts	0x0230, r24
			if( Global_u8TempError >= HTR_TEMP_TOLERANCE )
    5ab4:	80 91 3b 02 	lds	r24, 0x023B
    5ab8:	85 30       	cpi	r24, 0x05	; 5
    5aba:	8c f0       	brlt	.+34     	; 0x5ade <CheckTemperatureStatus+0xbe>
			{
				if( HeaterStatus == OFF )
    5abc:	80 91 bf 01 	lds	r24, 0x01BF
    5ac0:	81 30       	cpi	r24, 0x01	; 1
    5ac2:	49 f4       	brne	.+18     	; 0x5ad6 <CheckTemperatureStatus+0xb6>
				{
					CoolentStatus = ON ;
    5ac4:	10 92 c0 01 	sts	0x01C0, r1
					LedStatus = LD_ON ;
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	80 93 2e 02 	sts	0x022E, r24
					TMU_vidResumeTask( 4 );
    5ace:	84 e0       	ldi	r24, 0x04	; 4
    5ad0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
    5ad4:	24 c0       	rjmp	.+72     	; 0x5b1e <CheckTemperatureStatus+0xfe>
				}
				else
				{
					HeaterStatus = OFF ;
    5ad6:	81 e0       	ldi	r24, 0x01	; 1
    5ad8:	80 93 bf 01 	sts	0x01BF, r24
    5adc:	20 c0       	rjmp	.+64     	; 0x5b1e <CheckTemperatureStatus+0xfe>
				}
			}
			else if( Global_u8TempError < -COOLENT_TEMP_TOLERANCE )
    5ade:	80 91 3b 02 	lds	r24, 0x023B
    5ae2:	8b 3f       	cpi	r24, 0xFB	; 251
    5ae4:	e4 f4       	brge	.+56     	; 0x5b1e <CheckTemperatureStatus+0xfe>
			{
				if( CoolentStatus == OFF )
    5ae6:	80 91 c0 01 	lds	r24, 0x01C0
    5aea:	81 30       	cpi	r24, 0x01	; 1
    5aec:	49 f4       	brne	.+18     	; 0x5b00 <CheckTemperatureStatus+0xe0>
				{
					HeaterStatus = ON ;
    5aee:	10 92 bf 01 	sts	0x01BF, r1
					TMU_vidResumeTask( 5 );
    5af2:	85 e0       	ldi	r24, 0x05	; 5
    5af4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
					LedStatus = LD_BLINK ;
    5af8:	83 e1       	ldi	r24, 0x13	; 19
    5afa:	80 93 2e 02 	sts	0x022E, r24
    5afe:	0f c0       	rjmp	.+30     	; 0x5b1e <CheckTemperatureStatus+0xfe>
				}
				else
				{
					CoolentStatus = OFF ;
    5b00:	81 e0       	ldi	r24, 0x01	; 1
    5b02:	80 93 c0 01 	sts	0x01C0, r24
    5b06:	0b c0       	rjmp	.+22     	; 0x5b1e <CheckTemperatureStatus+0xfe>
			}
		}
	}
	else
	{
		LedStatus = LD_OFF ;
    5b08:	10 92 2e 02 	sts	0x022E, r1
		HeaterStatus = OFF ;
    5b0c:	81 e0       	ldi	r24, 0x01	; 1
    5b0e:	80 93 bf 01 	sts	0x01BF, r24
		CoolentStatus = OFF ;
    5b12:	81 e0       	ldi	r24, 0x01	; 1
    5b14:	80 93 c0 01 	sts	0x01C0, r24
		TMU_vidPauseTask( 6 );
    5b18:	86 e0       	ldi	r24, 0x06	; 6
    5b1a:	0e 94 c7 08 	call	0x118e	; 0x118e <TMU_vidPauseTask>
	}
}
    5b1e:	0f 90       	pop	r0
    5b20:	0f 90       	pop	r0
    5b22:	0f 90       	pop	r0
    5b24:	0f 90       	pop	r0
    5b26:	cf 91       	pop	r28
    5b28:	df 91       	pop	r29
    5b2a:	08 95       	ret

00005b2c <CheckIncrementSwitch>:

void CheckIncrementSwitch(void *pNULL)
{
    5b2c:	df 93       	push	r29
    5b2e:	cf 93       	push	r28
    5b30:	00 d0       	rcall	.+0      	; 0x5b32 <CheckIncrementSwitch+0x6>
    5b32:	0f 92       	push	r0
    5b34:	cd b7       	in	r28, 0x3d	; 61
    5b36:	de b7       	in	r29, 0x3e	; 62
    5b38:	9b 83       	std	Y+3, r25	; 0x03
    5b3a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;


		if( ES_OK == Switch_enuGetPressed( INC_SW , &Local_u8SwitchValue ) )
    5b3c:	8a ec       	ldi	r24, 0xCA	; 202
    5b3e:	9e 01       	movw	r18, r28
    5b40:	2f 5f       	subi	r18, 0xFF	; 255
    5b42:	3f 4f       	sbci	r19, 0xFF	; 255
    5b44:	b9 01       	movw	r22, r18
    5b46:	0e 94 56 26 	call	0x4cac	; 0x4cac <Switch_enuGetPressed>
    5b4a:	88 23       	and	r24, r24
    5b4c:	09 f0       	breq	.+2      	; 0x5b50 <CheckIncrementSwitch+0x24>
    5b4e:	81 c0       	rjmp	.+258    	; 0x5c52 <CheckIncrementSwitch+0x126>
		{
			static u8 press = 0, hold = 0 , BounceDelay = BOUNCE_COUNTS ;
			static u16 SetupDelay = SETUP_COUNTS ;
			if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 && hold == 0 )  // First press
    5b50:	89 81       	ldd	r24, Y+1	; 0x01
    5b52:	81 30       	cpi	r24, 0x01	; 1
    5b54:	09 f5       	brne	.+66     	; 0x5b98 <CheckIncrementSwitch+0x6c>
    5b56:	80 91 34 02 	lds	r24, 0x0234
    5b5a:	88 23       	and	r24, r24
    5b5c:	e9 f4       	brne	.+58     	; 0x5b98 <CheckIncrementSwitch+0x6c>
    5b5e:	80 91 33 02 	lds	r24, 0x0233
    5b62:	88 23       	and	r24, r24
    5b64:	c9 f4       	brne	.+50     	; 0x5b98 <CheckIncrementSwitch+0x6c>
			{
				if( Global_u8DisplayMode == NORMAL )
    5b66:	80 91 c2 01 	lds	r24, 0x01C2
    5b6a:	85 30       	cpi	r24, 0x05	; 5
    5b6c:	39 f4       	brne	.+14     	; 0x5b7c <CheckIncrementSwitch+0x50>
				{
					Global_u8DisplayMode = SETUP ;
    5b6e:	89 e0       	ldi	r24, 0x09	; 9
    5b70:	80 93 c2 01 	sts	0x01C2, r24
					Global_u8SetupSw = INC_SW ;
    5b74:	8a ec       	ldi	r24, 0xCA	; 202
    5b76:	80 93 3c 02 	sts	0x023C, r24
    5b7a:	6b c0       	rjmp	.+214    	; 0x5c52 <CheckIncrementSwitch+0x126>
				}
				else
				{
					if( Global_u8TempSetValue < TEMP_MAX_LIMIT )
    5b7c:	80 91 3a 02 	lds	r24, 0x023A
    5b80:	8b 34       	cpi	r24, 0x4B	; 75
    5b82:	08 f0       	brcs	.+2      	; 0x5b86 <CheckIncrementSwitch+0x5a>
    5b84:	66 c0       	rjmp	.+204    	; 0x5c52 <CheckIncrementSwitch+0x126>
					{
						Global_u8TempSetValue++;
    5b86:	80 91 3a 02 	lds	r24, 0x023A
    5b8a:	8f 5f       	subi	r24, 0xFF	; 255
    5b8c:	80 93 3a 02 	sts	0x023A, r24
						press = 1 ;
    5b90:	81 e0       	ldi	r24, 0x01	; 1
    5b92:	80 93 34 02 	sts	0x0234, r24
    5b96:	5d c0       	rjmp	.+186    	; 0x5c52 <CheckIncrementSwitch+0x126>
					}
				}
			}
			else if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 1 && hold == 0 ) // Continued first press
    5b98:	89 81       	ldd	r24, Y+1	; 0x01
    5b9a:	81 30       	cpi	r24, 0x01	; 1
    5b9c:	61 f4       	brne	.+24     	; 0x5bb6 <CheckIncrementSwitch+0x8a>
    5b9e:	80 91 34 02 	lds	r24, 0x0234
    5ba2:	81 30       	cpi	r24, 0x01	; 1
    5ba4:	41 f4       	brne	.+16     	; 0x5bb6 <CheckIncrementSwitch+0x8a>
    5ba6:	80 91 33 02 	lds	r24, 0x0233
    5baa:	88 23       	and	r24, r24
    5bac:	21 f4       	brne	.+8      	; 0x5bb6 <CheckIncrementSwitch+0x8a>
			{
				hold = 1;
    5bae:	81 e0       	ldi	r24, 0x01	; 1
    5bb0:	80 93 33 02 	sts	0x0233, r24
    5bb4:	4e c0       	rjmp	.+156    	; 0x5c52 <CheckIncrementSwitch+0x126>
			}
			else if ( (Local_u8SwitchValue == DIO_u8LOW ) && press == 1 && hold == 1 ) // Removed first press
    5bb6:	89 81       	ldd	r24, Y+1	; 0x01
    5bb8:	88 23       	and	r24, r24
    5bba:	c9 f4       	brne	.+50     	; 0x5bee <CheckIncrementSwitch+0xc2>
    5bbc:	80 91 34 02 	lds	r24, 0x0234
    5bc0:	81 30       	cpi	r24, 0x01	; 1
    5bc2:	a9 f4       	brne	.+42     	; 0x5bee <CheckIncrementSwitch+0xc2>
    5bc4:	80 91 33 02 	lds	r24, 0x0233
    5bc8:	81 30       	cpi	r24, 0x01	; 1
    5bca:	89 f4       	brne	.+34     	; 0x5bee <CheckIncrementSwitch+0xc2>
			{
				BounceDelay--;
    5bcc:	80 91 c8 01 	lds	r24, 0x01C8
    5bd0:	81 50       	subi	r24, 0x01	; 1
    5bd2:	80 93 c8 01 	sts	0x01C8, r24
				if( !BounceDelay )
    5bd6:	80 91 c8 01 	lds	r24, 0x01C8
    5bda:	88 23       	and	r24, r24
    5bdc:	d1 f5       	brne	.+116    	; 0x5c52 <CheckIncrementSwitch+0x126>
				{
					press = 0 ;
    5bde:	10 92 34 02 	sts	0x0234, r1
					hold = 0 ;
    5be2:	10 92 33 02 	sts	0x0233, r1
					BounceDelay = BOUNCE_COUNTS ;
    5be6:	82 e0       	ldi	r24, 0x02	; 2
    5be8:	80 93 c8 01 	sts	0x01C8, r24
    5bec:	32 c0       	rjmp	.+100    	; 0x5c52 <CheckIncrementSwitch+0x126>
				}
			}
			else if (	( Global_u8DisplayMode == SETUP ) &&
    5bee:	80 91 c2 01 	lds	r24, 0x01C2
    5bf2:	89 30       	cpi	r24, 0x09	; 9
    5bf4:	71 f5       	brne	.+92     	; 0x5c52 <CheckIncrementSwitch+0x126>
    5bf6:	89 81       	ldd	r24, Y+1	; 0x01
    5bf8:	88 23       	and	r24, r24
    5bfa:	59 f5       	brne	.+86     	; 0x5c52 <CheckIncrementSwitch+0x126>
    5bfc:	80 91 34 02 	lds	r24, 0x0234
    5c00:	88 23       	and	r24, r24
    5c02:	39 f5       	brne	.+78     	; 0x5c52 <CheckIncrementSwitch+0x126>
    5c04:	80 91 33 02 	lds	r24, 0x0233
    5c08:	88 23       	and	r24, r24
    5c0a:	19 f5       	brne	.+70     	; 0x5c52 <CheckIncrementSwitch+0x126>
						(Local_u8SwitchValue == DIO_u8LOW ) &&
						press == 0 		&&		hold == 0 ) 							// Unpress delay in Setup mode
			{
				SetupDelay--;
    5c0c:	80 91 c6 01 	lds	r24, 0x01C6
    5c10:	90 91 c7 01 	lds	r25, 0x01C7
    5c14:	01 97       	sbiw	r24, 0x01	; 1
    5c16:	90 93 c7 01 	sts	0x01C7, r25
    5c1a:	80 93 c6 01 	sts	0x01C6, r24
				if( !SetupDelay && Global_u8SetupSw == INC_SW )
    5c1e:	80 91 c6 01 	lds	r24, 0x01C6
    5c22:	90 91 c7 01 	lds	r25, 0x01C7
    5c26:	00 97       	sbiw	r24, 0x00	; 0
    5c28:	a1 f4       	brne	.+40     	; 0x5c52 <CheckIncrementSwitch+0x126>
    5c2a:	80 91 3c 02 	lds	r24, 0x023C
    5c2e:	8a 3c       	cpi	r24, 0xCA	; 202
    5c30:	81 f4       	brne	.+32     	; 0x5c52 <CheckIncrementSwitch+0x126>
				{
					EEPROM_enuWriteByte( (u16)SET_ADDRESS , Global_u8TempSetValue );
    5c32:	20 91 3a 02 	lds	r18, 0x023A
    5c36:	80 e1       	ldi	r24, 0x10	; 16
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	62 2f       	mov	r22, r18
    5c3c:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <EEPROM_enuWriteByte>
					Global_u8DisplayMode = NORMAL ;
    5c40:	85 e0       	ldi	r24, 0x05	; 5
    5c42:	80 93 c2 01 	sts	0x01C2, r24
					SetupDelay = SETUP_COUNTS ;
    5c46:	82 e3       	ldi	r24, 0x32	; 50
    5c48:	90 e0       	ldi	r25, 0x00	; 0
    5c4a:	90 93 c7 01 	sts	0x01C7, r25
    5c4e:	80 93 c6 01 	sts	0x01C6, r24
				}
			}

		}
}
    5c52:	0f 90       	pop	r0
    5c54:	0f 90       	pop	r0
    5c56:	0f 90       	pop	r0
    5c58:	cf 91       	pop	r28
    5c5a:	df 91       	pop	r29
    5c5c:	08 95       	ret

00005c5e <CheckDecrementSwitch>:
void CheckDecrementSwitch(void *pNULL )
{
    5c5e:	df 93       	push	r29
    5c60:	cf 93       	push	r28
    5c62:	00 d0       	rcall	.+0      	; 0x5c64 <CheckDecrementSwitch+0x6>
    5c64:	0f 92       	push	r0
    5c66:	cd b7       	in	r28, 0x3d	; 61
    5c68:	de b7       	in	r29, 0x3e	; 62
    5c6a:	9b 83       	std	Y+3, r25	; 0x03
    5c6c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;

	if( ES_OK == Switch_enuGetPressed( DEC_SW , &Local_u8SwitchValue ) )
    5c6e:	8b ec       	ldi	r24, 0xCB	; 203
    5c70:	9e 01       	movw	r18, r28
    5c72:	2f 5f       	subi	r18, 0xFF	; 255
    5c74:	3f 4f       	sbci	r19, 0xFF	; 255
    5c76:	b9 01       	movw	r22, r18
    5c78:	0e 94 56 26 	call	0x4cac	; 0x4cac <Switch_enuGetPressed>
    5c7c:	88 23       	and	r24, r24
    5c7e:	09 f0       	breq	.+2      	; 0x5c82 <CheckDecrementSwitch+0x24>
    5c80:	81 c0       	rjmp	.+258    	; 0x5d84 <CheckDecrementSwitch+0x126>
	{
		static u8 press = 0, hold = 0 , BounceDelay = BOUNCE_COUNTS ;
		static u16 SetupDelay = SETUP_COUNTS ;
		if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 && hold == 0 )  //First press
    5c82:	89 81       	ldd	r24, Y+1	; 0x01
    5c84:	81 30       	cpi	r24, 0x01	; 1
    5c86:	09 f5       	brne	.+66     	; 0x5cca <CheckDecrementSwitch+0x6c>
    5c88:	80 91 36 02 	lds	r24, 0x0236
    5c8c:	88 23       	and	r24, r24
    5c8e:	e9 f4       	brne	.+58     	; 0x5cca <CheckDecrementSwitch+0x6c>
    5c90:	80 91 35 02 	lds	r24, 0x0235
    5c94:	88 23       	and	r24, r24
    5c96:	c9 f4       	brne	.+50     	; 0x5cca <CheckDecrementSwitch+0x6c>
		{
			if( Global_u8DisplayMode == NORMAL )
    5c98:	80 91 c2 01 	lds	r24, 0x01C2
    5c9c:	85 30       	cpi	r24, 0x05	; 5
    5c9e:	39 f4       	brne	.+14     	; 0x5cae <CheckDecrementSwitch+0x50>
			{
				Global_u8DisplayMode = SETUP ;
    5ca0:	89 e0       	ldi	r24, 0x09	; 9
    5ca2:	80 93 c2 01 	sts	0x01C2, r24
				Global_u8SetupSw = DEC_SW ;
    5ca6:	8b ec       	ldi	r24, 0xCB	; 203
    5ca8:	80 93 3c 02 	sts	0x023C, r24
    5cac:	6b c0       	rjmp	.+214    	; 0x5d84 <CheckDecrementSwitch+0x126>
			}
			else
			{
				if( Global_u8TempSetValue > TEMP_MIN_LIMIT )
    5cae:	80 91 3a 02 	lds	r24, 0x023A
    5cb2:	84 32       	cpi	r24, 0x24	; 36
    5cb4:	08 f4       	brcc	.+2      	; 0x5cb8 <CheckDecrementSwitch+0x5a>
    5cb6:	66 c0       	rjmp	.+204    	; 0x5d84 <CheckDecrementSwitch+0x126>
				{
					Global_u8TempSetValue--;
    5cb8:	80 91 3a 02 	lds	r24, 0x023A
    5cbc:	81 50       	subi	r24, 0x01	; 1
    5cbe:	80 93 3a 02 	sts	0x023A, r24
					press = 1 ;
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	80 93 36 02 	sts	0x0236, r24
    5cc8:	5d c0       	rjmp	.+186    	; 0x5d84 <CheckDecrementSwitch+0x126>
				}
			}
		}
		else if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 1 && hold == 0 ) //continued first press
    5cca:	89 81       	ldd	r24, Y+1	; 0x01
    5ccc:	81 30       	cpi	r24, 0x01	; 1
    5cce:	61 f4       	brne	.+24     	; 0x5ce8 <CheckDecrementSwitch+0x8a>
    5cd0:	80 91 36 02 	lds	r24, 0x0236
    5cd4:	81 30       	cpi	r24, 0x01	; 1
    5cd6:	41 f4       	brne	.+16     	; 0x5ce8 <CheckDecrementSwitch+0x8a>
    5cd8:	80 91 35 02 	lds	r24, 0x0235
    5cdc:	88 23       	and	r24, r24
    5cde:	21 f4       	brne	.+8      	; 0x5ce8 <CheckDecrementSwitch+0x8a>
		{
			hold = 1;
    5ce0:	81 e0       	ldi	r24, 0x01	; 1
    5ce2:	80 93 35 02 	sts	0x0235, r24
    5ce6:	4e c0       	rjmp	.+156    	; 0x5d84 <CheckDecrementSwitch+0x126>
		}
		else if ( (Local_u8SwitchValue== DIO_u8LOW ) && press == 1 && hold == 1 ) // removed first press
    5ce8:	89 81       	ldd	r24, Y+1	; 0x01
    5cea:	88 23       	and	r24, r24
    5cec:	c9 f4       	brne	.+50     	; 0x5d20 <CheckDecrementSwitch+0xc2>
    5cee:	80 91 36 02 	lds	r24, 0x0236
    5cf2:	81 30       	cpi	r24, 0x01	; 1
    5cf4:	a9 f4       	brne	.+42     	; 0x5d20 <CheckDecrementSwitch+0xc2>
    5cf6:	80 91 35 02 	lds	r24, 0x0235
    5cfa:	81 30       	cpi	r24, 0x01	; 1
    5cfc:	89 f4       	brne	.+34     	; 0x5d20 <CheckDecrementSwitch+0xc2>
		{
			BounceDelay--;
    5cfe:	80 91 cb 01 	lds	r24, 0x01CB
    5d02:	81 50       	subi	r24, 0x01	; 1
    5d04:	80 93 cb 01 	sts	0x01CB, r24
			if( !BounceDelay )
    5d08:	80 91 cb 01 	lds	r24, 0x01CB
    5d0c:	88 23       	and	r24, r24
    5d0e:	d1 f5       	brne	.+116    	; 0x5d84 <CheckDecrementSwitch+0x126>
			{
				press = 0 ;
    5d10:	10 92 36 02 	sts	0x0236, r1
				hold = 0 ;
    5d14:	10 92 35 02 	sts	0x0235, r1
				BounceDelay = BOUNCE_COUNTS ;
    5d18:	82 e0       	ldi	r24, 0x02	; 2
    5d1a:	80 93 cb 01 	sts	0x01CB, r24
    5d1e:	32 c0       	rjmp	.+100    	; 0x5d84 <CheckDecrementSwitch+0x126>
			}
		}
		else if (	( Global_u8DisplayMode == SETUP ) &&
    5d20:	80 91 c2 01 	lds	r24, 0x01C2
    5d24:	89 30       	cpi	r24, 0x09	; 9
    5d26:	71 f5       	brne	.+92     	; 0x5d84 <CheckDecrementSwitch+0x126>
    5d28:	89 81       	ldd	r24, Y+1	; 0x01
    5d2a:	88 23       	and	r24, r24
    5d2c:	59 f5       	brne	.+86     	; 0x5d84 <CheckDecrementSwitch+0x126>
    5d2e:	80 91 36 02 	lds	r24, 0x0236
    5d32:	88 23       	and	r24, r24
    5d34:	39 f5       	brne	.+78     	; 0x5d84 <CheckDecrementSwitch+0x126>
    5d36:	80 91 35 02 	lds	r24, 0x0235
    5d3a:	88 23       	and	r24, r24
    5d3c:	19 f5       	brne	.+70     	; 0x5d84 <CheckDecrementSwitch+0x126>
					(Local_u8SwitchValue == DIO_u8LOW ) &&
					press == 0 		&&		hold == 0 ) // Unpress delay in Setup mode
		{
			SetupDelay--;
    5d3e:	80 91 c9 01 	lds	r24, 0x01C9
    5d42:	90 91 ca 01 	lds	r25, 0x01CA
    5d46:	01 97       	sbiw	r24, 0x01	; 1
    5d48:	90 93 ca 01 	sts	0x01CA, r25
    5d4c:	80 93 c9 01 	sts	0x01C9, r24
			if( !SetupDelay && Global_u8SetupSw == DEC_SW )
    5d50:	80 91 c9 01 	lds	r24, 0x01C9
    5d54:	90 91 ca 01 	lds	r25, 0x01CA
    5d58:	00 97       	sbiw	r24, 0x00	; 0
    5d5a:	a1 f4       	brne	.+40     	; 0x5d84 <CheckDecrementSwitch+0x126>
    5d5c:	80 91 3c 02 	lds	r24, 0x023C
    5d60:	8b 3c       	cpi	r24, 0xCB	; 203
    5d62:	81 f4       	brne	.+32     	; 0x5d84 <CheckDecrementSwitch+0x126>
			{
				EEPROM_enuWriteByte( (u16)SET_ADDRESS , Global_u8TempSetValue );
    5d64:	20 91 3a 02 	lds	r18, 0x023A
    5d68:	80 e1       	ldi	r24, 0x10	; 16
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	62 2f       	mov	r22, r18
    5d6e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <EEPROM_enuWriteByte>
				Global_u8DisplayMode = NORMAL ;
    5d72:	85 e0       	ldi	r24, 0x05	; 5
    5d74:	80 93 c2 01 	sts	0x01C2, r24
				SetupDelay = SETUP_COUNTS ;
    5d78:	82 e3       	ldi	r24, 0x32	; 50
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	90 93 ca 01 	sts	0x01CA, r25
    5d80:	80 93 c9 01 	sts	0x01C9, r24
			}
		}

	}
}
    5d84:	0f 90       	pop	r0
    5d86:	0f 90       	pop	r0
    5d88:	0f 90       	pop	r0
    5d8a:	cf 91       	pop	r28
    5d8c:	df 91       	pop	r29
    5d8e:	08 95       	ret

00005d90 <CheckPowerSwitch>:

void CheckPowerSwitch(void *pNULL )
{
    5d90:	df 93       	push	r29
    5d92:	cf 93       	push	r28
    5d94:	00 d0       	rcall	.+0      	; 0x5d96 <CheckPowerSwitch+0x6>
    5d96:	0f 92       	push	r0
    5d98:	cd b7       	in	r28, 0x3d	; 61
    5d9a:	de b7       	in	r29, 0x3e	; 62
    5d9c:	9b 83       	std	Y+3, r25	; 0x03
    5d9e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;

	if( ES_OK == Switch_enuGetPressed( DEC_SW , &Local_u8SwitchValue ) )
    5da0:	8b ec       	ldi	r24, 0xCB	; 203
    5da2:	9e 01       	movw	r18, r28
    5da4:	2f 5f       	subi	r18, 0xFF	; 255
    5da6:	3f 4f       	sbci	r19, 0xFF	; 255
    5da8:	b9 01       	movw	r22, r18
    5daa:	0e 94 56 26 	call	0x4cac	; 0x4cac <Switch_enuGetPressed>
    5dae:	88 23       	and	r24, r24
    5db0:	09 f0       	breq	.+2      	; 0x5db4 <CheckPowerSwitch+0x24>
    5db2:	62 c0       	rjmp	.+196    	; 0x5e78 <CheckPowerSwitch+0xe8>
	{
		static u8 press = 0, hold = 0 , BounceDelay = BOUNCE_COUNTS ;
		if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 && hold == 0 )  //First press
    5db4:	89 81       	ldd	r24, Y+1	; 0x01
    5db6:	81 30       	cpi	r24, 0x01	; 1
    5db8:	a9 f5       	brne	.+106    	; 0x5e24 <CheckPowerSwitch+0x94>
    5dba:	80 91 38 02 	lds	r24, 0x0238
    5dbe:	88 23       	and	r24, r24
    5dc0:	89 f5       	brne	.+98     	; 0x5e24 <CheckPowerSwitch+0x94>
    5dc2:	80 91 37 02 	lds	r24, 0x0237
    5dc6:	88 23       	and	r24, r24
    5dc8:	69 f5       	brne	.+90     	; 0x5e24 <CheckPowerSwitch+0x94>
		{
			if( PowerStatus == OFF )
    5dca:	80 91 be 01 	lds	r24, 0x01BE
    5dce:	81 30       	cpi	r24, 0x01	; 1
    5dd0:	c1 f4       	brne	.+48     	; 0x5e02 <CheckPowerSwitch+0x72>
			{
				PowerStatus = ON ;
    5dd2:	10 92 be 01 	sts	0x01BE, r1
				TMU_vidResumeTask( 7 );
    5dd6:	87 e0       	ldi	r24, 0x07	; 7
    5dd8:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
				TMU_vidResumeTask( 6 );
    5ddc:	86 e0       	ldi	r24, 0x06	; 6
    5dde:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
				TMU_vidResumeTask( 5 );
    5de2:	85 e0       	ldi	r24, 0x05	; 5
    5de4:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
				TMU_vidResumeTask( 4 );
    5de8:	84 e0       	ldi	r24, 0x04	; 4
    5dea:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
				TMU_vidResumeTask( 3 );
    5dee:	83 e0       	ldi	r24, 0x03	; 3
    5df0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
				TMU_vidResumeTask( 2 );
    5df4:	82 e0       	ldi	r24, 0x02	; 2
    5df6:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
				TMU_vidResumeTask( 1 );
    5dfa:	81 e0       	ldi	r24, 0x01	; 1
    5dfc:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <TMU_vidResumeTask>
    5e00:	0d c0       	rjmp	.+26     	; 0x5e1c <CheckPowerSwitch+0x8c>

			}
			else if( PowerStatus == ON )
    5e02:	80 91 be 01 	lds	r24, 0x01BE
    5e06:	88 23       	and	r24, r24
    5e08:	49 f4       	brne	.+18     	; 0x5e1c <CheckPowerSwitch+0x8c>
			{
				PowerStatus = OFF ;
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	80 93 be 01 	sts	0x01BE, r24
				TMU_vidPauseTask( 2 );
    5e10:	82 e0       	ldi	r24, 0x02	; 2
    5e12:	0e 94 c7 08 	call	0x118e	; 0x118e <TMU_vidPauseTask>
				TMU_vidPauseTask( 1 );
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	0e 94 c7 08 	call	0x118e	; 0x118e <TMU_vidPauseTask>
			}
			press = 1 ;
    5e1c:	81 e0       	ldi	r24, 0x01	; 1
    5e1e:	80 93 38 02 	sts	0x0238, r24
    5e22:	2a c0       	rjmp	.+84     	; 0x5e78 <CheckPowerSwitch+0xe8>
		}
		else if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 1 && hold == 0 ) //continued first press
    5e24:	89 81       	ldd	r24, Y+1	; 0x01
    5e26:	81 30       	cpi	r24, 0x01	; 1
    5e28:	61 f4       	brne	.+24     	; 0x5e42 <CheckPowerSwitch+0xb2>
    5e2a:	80 91 38 02 	lds	r24, 0x0238
    5e2e:	81 30       	cpi	r24, 0x01	; 1
    5e30:	41 f4       	brne	.+16     	; 0x5e42 <CheckPowerSwitch+0xb2>
    5e32:	80 91 37 02 	lds	r24, 0x0237
    5e36:	88 23       	and	r24, r24
    5e38:	21 f4       	brne	.+8      	; 0x5e42 <CheckPowerSwitch+0xb2>
		{
			hold = 1;
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	80 93 37 02 	sts	0x0237, r24
    5e40:	1b c0       	rjmp	.+54     	; 0x5e78 <CheckPowerSwitch+0xe8>
		}
		else if ( (Local_u8SwitchValue== DIO_u8LOW ) && press == 1 && hold == 1 ) // removed first press
    5e42:	89 81       	ldd	r24, Y+1	; 0x01
    5e44:	88 23       	and	r24, r24
    5e46:	c1 f4       	brne	.+48     	; 0x5e78 <CheckPowerSwitch+0xe8>
    5e48:	80 91 38 02 	lds	r24, 0x0238
    5e4c:	81 30       	cpi	r24, 0x01	; 1
    5e4e:	a1 f4       	brne	.+40     	; 0x5e78 <CheckPowerSwitch+0xe8>
    5e50:	80 91 37 02 	lds	r24, 0x0237
    5e54:	81 30       	cpi	r24, 0x01	; 1
    5e56:	81 f4       	brne	.+32     	; 0x5e78 <CheckPowerSwitch+0xe8>
		{
			BounceDelay--;
    5e58:	80 91 cc 01 	lds	r24, 0x01CC
    5e5c:	81 50       	subi	r24, 0x01	; 1
    5e5e:	80 93 cc 01 	sts	0x01CC, r24
			if( !BounceDelay )
    5e62:	80 91 cc 01 	lds	r24, 0x01CC
    5e66:	88 23       	and	r24, r24
    5e68:	39 f4       	brne	.+14     	; 0x5e78 <CheckPowerSwitch+0xe8>
			{
				press = 0 ;
    5e6a:	10 92 38 02 	sts	0x0238, r1
				hold = 0 ;
    5e6e:	10 92 37 02 	sts	0x0237, r1
				BounceDelay = BOUNCE_COUNTS ;
    5e72:	82 e0       	ldi	r24, 0x02	; 2
    5e74:	80 93 cc 01 	sts	0x01CC, r24
			}
		}
	}
}
    5e78:	0f 90       	pop	r0
    5e7a:	0f 90       	pop	r0
    5e7c:	0f 90       	pop	r0
    5e7e:	cf 91       	pop	r28
    5e80:	df 91       	pop	r29
    5e82:	08 95       	ret

00005e84 <AdjustRedLampStatus>:

void AdjustRedLampStatus(void *Copy_pu8RedLampStatus)
{
    5e84:	df 93       	push	r29
    5e86:	cf 93       	push	r28
    5e88:	00 d0       	rcall	.+0      	; 0x5e8a <AdjustRedLampStatus+0x6>
    5e8a:	00 d0       	rcall	.+0      	; 0x5e8c <AdjustRedLampStatus+0x8>
    5e8c:	00 d0       	rcall	.+0      	; 0x5e8e <AdjustRedLampStatus+0xa>
    5e8e:	cd b7       	in	r28, 0x3d	; 61
    5e90:	de b7       	in	r29, 0x3e	; 62
    5e92:	9c 83       	std	Y+4, r25	; 0x04
    5e94:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8PrevStatus = LD_OFF ;
	u8 *Local_u8RedLampStatus = (u8*)Copy_pu8RedLampStatus;
    5e96:	8b 81       	ldd	r24, Y+3	; 0x03
    5e98:	9c 81       	ldd	r25, Y+4	; 0x04
    5e9a:	9a 83       	std	Y+2, r25	; 0x02
    5e9c:	89 83       	std	Y+1, r24	; 0x01

	if( *Local_u8RedLampStatus == LD_BLINK )
    5e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    5ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    5ea2:	80 81       	ld	r24, Z
    5ea4:	83 31       	cpi	r24, 0x13	; 19
    5ea6:	e1 f4       	brne	.+56     	; 0x5ee0 <AdjustRedLampStatus+0x5c>
	{
		switch( Local_u8PrevStatus )
    5ea8:	80 91 39 02 	lds	r24, 0x0239
    5eac:	28 2f       	mov	r18, r24
    5eae:	30 e0       	ldi	r19, 0x00	; 0
    5eb0:	3e 83       	std	Y+6, r19	; 0x06
    5eb2:	2d 83       	std	Y+5, r18	; 0x05
    5eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    5eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    5eb8:	00 97       	sbiw	r24, 0x00	; 0
    5eba:	41 f0       	breq	.+16     	; 0x5ecc <AdjustRedLampStatus+0x48>
    5ebc:	2d 81       	ldd	r18, Y+5	; 0x05
    5ebe:	3e 81       	ldd	r19, Y+6	; 0x06
    5ec0:	21 30       	cpi	r18, 0x01	; 1
    5ec2:	31 05       	cpc	r19, r1
    5ec4:	31 f4       	brne	.+12     	; 0x5ed2 <AdjustRedLampStatus+0x4e>
		{
			case LD_ON	:  Local_u8PrevStatus = LD_OFF ;
    5ec6:	10 92 39 02 	sts	0x0239, r1
    5eca:	03 c0       	rjmp	.+6      	; 0x5ed2 <AdjustRedLampStatus+0x4e>
			break;
			case LD_OFF	:  Local_u8PrevStatus = LD_ON ;
    5ecc:	81 e0       	ldi	r24, 0x01	; 1
    5ece:	80 93 39 02 	sts	0x0239, r24
			break;
		}
		LD_enuSetState( RED_LD , Local_u8PrevStatus );
    5ed2:	90 91 39 02 	lds	r25, 0x0239
    5ed6:	8e e1       	ldi	r24, 0x1E	; 30
    5ed8:	69 2f       	mov	r22, r25
    5eda:	0e 94 66 29 	call	0x52cc	; 0x52cc <LD_enuSetState>
    5ede:	19 c0       	rjmp	.+50     	; 0x5f12 <AdjustRedLampStatus+0x8e>
	}
	else if( *Local_u8RedLampStatus != Local_u8PrevStatus)
    5ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    5ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    5ee4:	90 81       	ld	r25, Z
    5ee6:	80 91 39 02 	lds	r24, 0x0239
    5eea:	98 17       	cp	r25, r24
    5eec:	91 f0       	breq	.+36     	; 0x5f12 <AdjustRedLampStatus+0x8e>
	{

		Local_u8PrevStatus = *Local_u8RedLampStatus ;
    5eee:	e9 81       	ldd	r30, Y+1	; 0x01
    5ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    5ef2:	80 81       	ld	r24, Z
    5ef4:	80 93 39 02 	sts	0x0239, r24
		LD_enuSetState( RED_LD , Local_u8PrevStatus );
    5ef8:	90 91 39 02 	lds	r25, 0x0239
    5efc:	8e e1       	ldi	r24, 0x1E	; 30
    5efe:	69 2f       	mov	r22, r25
    5f00:	0e 94 66 29 	call	0x52cc	; 0x52cc <LD_enuSetState>
		if( PowerStatus == OFF )
    5f04:	80 91 be 01 	lds	r24, 0x01BE
    5f08:	81 30       	cpi	r24, 0x01	; 1
    5f0a:	19 f4       	brne	.+6      	; 0x5f12 <AdjustRedLampStatus+0x8e>
		{
			TMU_vidPauseTask( 3 );
    5f0c:	83 e0       	ldi	r24, 0x03	; 3
    5f0e:	0e 94 c7 08 	call	0x118e	; 0x118e <TMU_vidPauseTask>
		}
	}
}
    5f12:	26 96       	adiw	r28, 0x06	; 6
    5f14:	0f b6       	in	r0, 0x3f	; 63
    5f16:	f8 94       	cli
    5f18:	de bf       	out	0x3e, r29	; 62
    5f1a:	0f be       	out	0x3f, r0	; 63
    5f1c:	cd bf       	out	0x3d, r28	; 61
    5f1e:	cf 91       	pop	r28
    5f20:	df 91       	pop	r29
    5f22:	08 95       	ret

00005f24 <AdjustHeaterStatus>:

void AdjustHeaterStatus( void *pNULL)
{
    5f24:	df 93       	push	r29
    5f26:	cf 93       	push	r28
    5f28:	00 d0       	rcall	.+0      	; 0x5f2a <AdjustHeaterStatus+0x6>
    5f2a:	cd b7       	in	r28, 0x3d	; 61
    5f2c:	de b7       	in	r29, 0x3e	; 62
    5f2e:	9a 83       	std	Y+2, r25	; 0x02
    5f30:	89 83       	std	Y+1, r24	; 0x01
	if( HeaterStatus == OFF )
    5f32:	80 91 bf 01 	lds	r24, 0x01BF
    5f36:	81 30       	cpi	r24, 0x01	; 1
    5f38:	39 f4       	brne	.+14     	; 0x5f48 <AdjustHeaterStatus+0x24>
	{
		Heater_enuSetState( HTR_TEMP_TOLERANCE + 1 );
    5f3a:	86 e0       	ldi	r24, 0x06	; 6
    5f3c:	0e 94 97 2a 	call	0x552e	; 0x552e <Heater_enuSetState>
		TMU_vidPauseTask( 5 );
    5f40:	85 e0       	ldi	r24, 0x05	; 5
    5f42:	0e 94 c7 08 	call	0x118e	; 0x118e <TMU_vidPauseTask>
    5f46:	04 c0       	rjmp	.+8      	; 0x5f50 <AdjustHeaterStatus+0x2c>
	}
	else
		Heater_enuSetState( Global_u8TempError );
    5f48:	80 91 3b 02 	lds	r24, 0x023B
    5f4c:	0e 94 97 2a 	call	0x552e	; 0x552e <Heater_enuSetState>
}
    5f50:	0f 90       	pop	r0
    5f52:	0f 90       	pop	r0
    5f54:	cf 91       	pop	r28
    5f56:	df 91       	pop	r29
    5f58:	08 95       	ret

00005f5a <AdjustCoolentStatus>:

void AdjustCoolentStatus( void *pNULL)
{
    5f5a:	df 93       	push	r29
    5f5c:	cf 93       	push	r28
    5f5e:	00 d0       	rcall	.+0      	; 0x5f60 <AdjustCoolentStatus+0x6>
    5f60:	cd b7       	in	r28, 0x3d	; 61
    5f62:	de b7       	in	r29, 0x3e	; 62
    5f64:	9a 83       	std	Y+2, r25	; 0x02
    5f66:	89 83       	std	Y+1, r24	; 0x01
	if( CoolentStatus == OFF )
    5f68:	80 91 c0 01 	lds	r24, 0x01C0
    5f6c:	81 30       	cpi	r24, 0x01	; 1
    5f6e:	39 f4       	brne	.+14     	; 0x5f7e <AdjustCoolentStatus+0x24>
	{
		Coolent_enuSetState( -COOLENT_TEMP_TOLERANCE - 1 );
    5f70:	8a ef       	ldi	r24, 0xFA	; 250
    5f72:	0e 94 c4 29 	call	0x5388	; 0x5388 <Coolent_enuSetState>
		TMU_vidPauseTask( 4 );
    5f76:	84 e0       	ldi	r24, 0x04	; 4
    5f78:	0e 94 c7 08 	call	0x118e	; 0x118e <TMU_vidPauseTask>
    5f7c:	04 c0       	rjmp	.+8      	; 0x5f86 <AdjustCoolentStatus+0x2c>
	}
	else
		Coolent_enuSetState( Global_u8TempError );
    5f7e:	80 91 3b 02 	lds	r24, 0x023B
    5f82:	0e 94 c4 29 	call	0x5388	; 0x5388 <Coolent_enuSetState>
}
    5f86:	0f 90       	pop	r0
    5f88:	0f 90       	pop	r0
    5f8a:	cf 91       	pop	r28
    5f8c:	df 91       	pop	r29
    5f8e:	08 95       	ret

00005f90 <__udivmodqi4>:
    5f90:	99 1b       	sub	r25, r25
    5f92:	79 e0       	ldi	r23, 0x09	; 9
    5f94:	04 c0       	rjmp	.+8      	; 0x5f9e <__udivmodqi4_ep>

00005f96 <__udivmodqi4_loop>:
    5f96:	99 1f       	adc	r25, r25
    5f98:	96 17       	cp	r25, r22
    5f9a:	08 f0       	brcs	.+2      	; 0x5f9e <__udivmodqi4_ep>
    5f9c:	96 1b       	sub	r25, r22

00005f9e <__udivmodqi4_ep>:
    5f9e:	88 1f       	adc	r24, r24
    5fa0:	7a 95       	dec	r23
    5fa2:	c9 f7       	brne	.-14     	; 0x5f96 <__udivmodqi4_loop>
    5fa4:	80 95       	com	r24
    5fa6:	08 95       	ret

00005fa8 <__udivmodhi4>:
    5fa8:	aa 1b       	sub	r26, r26
    5faa:	bb 1b       	sub	r27, r27
    5fac:	51 e1       	ldi	r21, 0x11	; 17
    5fae:	07 c0       	rjmp	.+14     	; 0x5fbe <__udivmodhi4_ep>

00005fb0 <__udivmodhi4_loop>:
    5fb0:	aa 1f       	adc	r26, r26
    5fb2:	bb 1f       	adc	r27, r27
    5fb4:	a6 17       	cp	r26, r22
    5fb6:	b7 07       	cpc	r27, r23
    5fb8:	10 f0       	brcs	.+4      	; 0x5fbe <__udivmodhi4_ep>
    5fba:	a6 1b       	sub	r26, r22
    5fbc:	b7 0b       	sbc	r27, r23

00005fbe <__udivmodhi4_ep>:
    5fbe:	88 1f       	adc	r24, r24
    5fc0:	99 1f       	adc	r25, r25
    5fc2:	5a 95       	dec	r21
    5fc4:	a9 f7       	brne	.-22     	; 0x5fb0 <__udivmodhi4_loop>
    5fc6:	80 95       	com	r24
    5fc8:	90 95       	com	r25
    5fca:	bc 01       	movw	r22, r24
    5fcc:	cd 01       	movw	r24, r26
    5fce:	08 95       	ret

00005fd0 <__divmodhi4>:
    5fd0:	97 fb       	bst	r25, 7
    5fd2:	09 2e       	mov	r0, r25
    5fd4:	07 26       	eor	r0, r23
    5fd6:	0a d0       	rcall	.+20     	; 0x5fec <__divmodhi4_neg1>
    5fd8:	77 fd       	sbrc	r23, 7
    5fda:	04 d0       	rcall	.+8      	; 0x5fe4 <__divmodhi4_neg2>
    5fdc:	e5 df       	rcall	.-54     	; 0x5fa8 <__udivmodhi4>
    5fde:	06 d0       	rcall	.+12     	; 0x5fec <__divmodhi4_neg1>
    5fe0:	00 20       	and	r0, r0
    5fe2:	1a f4       	brpl	.+6      	; 0x5fea <__divmodhi4_exit>

00005fe4 <__divmodhi4_neg2>:
    5fe4:	70 95       	com	r23
    5fe6:	61 95       	neg	r22
    5fe8:	7f 4f       	sbci	r23, 0xFF	; 255

00005fea <__divmodhi4_exit>:
    5fea:	08 95       	ret

00005fec <__divmodhi4_neg1>:
    5fec:	f6 f7       	brtc	.-4      	; 0x5fea <__divmodhi4_exit>
    5fee:	90 95       	com	r25
    5ff0:	81 95       	neg	r24
    5ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff4:	08 95       	ret

00005ff6 <__udivmodsi4>:
    5ff6:	a1 e2       	ldi	r26, 0x21	; 33
    5ff8:	1a 2e       	mov	r1, r26
    5ffa:	aa 1b       	sub	r26, r26
    5ffc:	bb 1b       	sub	r27, r27
    5ffe:	fd 01       	movw	r30, r26
    6000:	0d c0       	rjmp	.+26     	; 0x601c <__udivmodsi4_ep>

00006002 <__udivmodsi4_loop>:
    6002:	aa 1f       	adc	r26, r26
    6004:	bb 1f       	adc	r27, r27
    6006:	ee 1f       	adc	r30, r30
    6008:	ff 1f       	adc	r31, r31
    600a:	a2 17       	cp	r26, r18
    600c:	b3 07       	cpc	r27, r19
    600e:	e4 07       	cpc	r30, r20
    6010:	f5 07       	cpc	r31, r21
    6012:	20 f0       	brcs	.+8      	; 0x601c <__udivmodsi4_ep>
    6014:	a2 1b       	sub	r26, r18
    6016:	b3 0b       	sbc	r27, r19
    6018:	e4 0b       	sbc	r30, r20
    601a:	f5 0b       	sbc	r31, r21

0000601c <__udivmodsi4_ep>:
    601c:	66 1f       	adc	r22, r22
    601e:	77 1f       	adc	r23, r23
    6020:	88 1f       	adc	r24, r24
    6022:	99 1f       	adc	r25, r25
    6024:	1a 94       	dec	r1
    6026:	69 f7       	brne	.-38     	; 0x6002 <__udivmodsi4_loop>
    6028:	60 95       	com	r22
    602a:	70 95       	com	r23
    602c:	80 95       	com	r24
    602e:	90 95       	com	r25
    6030:	9b 01       	movw	r18, r22
    6032:	ac 01       	movw	r20, r24
    6034:	bd 01       	movw	r22, r26
    6036:	cf 01       	movw	r24, r30
    6038:	08 95       	ret

0000603a <__prologue_saves__>:
    603a:	2f 92       	push	r2
    603c:	3f 92       	push	r3
    603e:	4f 92       	push	r4
    6040:	5f 92       	push	r5
    6042:	6f 92       	push	r6
    6044:	7f 92       	push	r7
    6046:	8f 92       	push	r8
    6048:	9f 92       	push	r9
    604a:	af 92       	push	r10
    604c:	bf 92       	push	r11
    604e:	cf 92       	push	r12
    6050:	df 92       	push	r13
    6052:	ef 92       	push	r14
    6054:	ff 92       	push	r15
    6056:	0f 93       	push	r16
    6058:	1f 93       	push	r17
    605a:	cf 93       	push	r28
    605c:	df 93       	push	r29
    605e:	cd b7       	in	r28, 0x3d	; 61
    6060:	de b7       	in	r29, 0x3e	; 62
    6062:	ca 1b       	sub	r28, r26
    6064:	db 0b       	sbc	r29, r27
    6066:	0f b6       	in	r0, 0x3f	; 63
    6068:	f8 94       	cli
    606a:	de bf       	out	0x3e, r29	; 62
    606c:	0f be       	out	0x3f, r0	; 63
    606e:	cd bf       	out	0x3d, r28	; 61
    6070:	09 94       	ijmp

00006072 <__epilogue_restores__>:
    6072:	2a 88       	ldd	r2, Y+18	; 0x12
    6074:	39 88       	ldd	r3, Y+17	; 0x11
    6076:	48 88       	ldd	r4, Y+16	; 0x10
    6078:	5f 84       	ldd	r5, Y+15	; 0x0f
    607a:	6e 84       	ldd	r6, Y+14	; 0x0e
    607c:	7d 84       	ldd	r7, Y+13	; 0x0d
    607e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6080:	9b 84       	ldd	r9, Y+11	; 0x0b
    6082:	aa 84       	ldd	r10, Y+10	; 0x0a
    6084:	b9 84       	ldd	r11, Y+9	; 0x09
    6086:	c8 84       	ldd	r12, Y+8	; 0x08
    6088:	df 80       	ldd	r13, Y+7	; 0x07
    608a:	ee 80       	ldd	r14, Y+6	; 0x06
    608c:	fd 80       	ldd	r15, Y+5	; 0x05
    608e:	0c 81       	ldd	r16, Y+4	; 0x04
    6090:	1b 81       	ldd	r17, Y+3	; 0x03
    6092:	aa 81       	ldd	r26, Y+2	; 0x02
    6094:	b9 81       	ldd	r27, Y+1	; 0x01
    6096:	ce 0f       	add	r28, r30
    6098:	d1 1d       	adc	r29, r1
    609a:	0f b6       	in	r0, 0x3f	; 63
    609c:	f8 94       	cli
    609e:	de bf       	out	0x3e, r29	; 62
    60a0:	0f be       	out	0x3f, r0	; 63
    60a2:	cd bf       	out	0x3d, r28	; 61
    60a4:	ed 01       	movw	r28, r26
    60a6:	08 95       	ret

000060a8 <_exit>:
    60a8:	f8 94       	cli

000060aa <__stop_program>:
    60aa:	ff cf       	rjmp	.-2      	; 0x60aa <__stop_program>
